{
    "alarm_control_panel.py_o3_mini_e816d2fa.py": {
        "_pending_time": {
            "return": "datetime.timedelta"
        }
    },
    "trainer_test.py_o3_mini_cdc7ca6a.py": {
        "test_sparse_clip_grad": {
            "return": "None"
        }
    },
    "base_tests.py_o3_mini_525dc3b2.py": {
        "get_json_resp": {
            "json_": "Optional[str]"
        }
    },
    "raiden_network.py_o3_mini_34be1bfe.py": {
        "pfs_mock": {
            "monkeypatch": "pytest.MonkeyPatch"
        }
    },
    "streams.py_o3_mini_4c29e46e.py": {
        "__next__": {
            "return": "T"
        }
    },
    "log.py_o3_mini_08a35b3f.py": {
        "log_context": {
            "action": "str"
        }
    },
    "generic.py_o3_mini_4b81d00f.py": {
        "hist": {
            "figsize": "Optional[Tuple[float, float]]",
            "layout": "Optional[Tuple[int, int]]"
        },
        "aggregate": {
            "func": "Optional[Union[Callable[..., Any], str, List[Union[Callable[..., Any], str]], Dict[Any, Union[Callable[..., Any], str, List[Union[Callable[..., Any], str]]]]]]"
        },
        "_define_paths": {
            "return": "Tuple[Callable[[DataFrame], Any], Callable[[DataFrame], Any]]"
        },
        "_choose_path": {
            "return": "Tuple[Callable[[DataFrame], Any], Any]"
        },
        "_aggregate_multiple_funcs": {
            "arg": "Iterable[Union[Callable[..., Any], str]]"
        }
    },
    "model_card.py_o3_mini_55460c7b.py": {
        "get_description": {
            "model_class": "type"
        },
        "__init__": {
            "model_class": "Optional[Callable[..., Model]]"
        }
    },
    "mypy.py_o3_mini_6c8d5216.py": {
        "error_extra_fields_on_root_model": {
            "api": "CheckerPluginInterface"
        }
    },
    "testclient.py_o3_mini_b53c0624.py": {
        "__enter__": {
            "return": "TestClient"
        }
    },
    "test_appgraph.py_o3_mini_d2cf8562.py": {
        "second": {
            "return": "Dict[str, Any]"
        }
    },
    "html.py_o3_mini_1065c3b5.py": {
        "_parse": {
            "io": "str"
        },
        "_parse_tables": {
            "match": "Union[str, Pattern]"
        }
    },
    "validator.py_o3_mini_af420d1c.py": {
        "clean_logs": {
            "return": "Tuple[Tuple[Any, Any], List[Any]]"
        }
    },
    "_misc.py_o3_mini_e437bff3.py": {
        "__contains__": {
            "key": "str"
        },
        "reset": {
            "return": "None"
        }
    },
    "format.py_o3_mini_80a9d557.py": {
        "get_format_timedelta64": {
            "nat_rep": "str | float"
        },
        "_get_buffer": {
            "return": "Generator[WriteBuffer[str]] | Generator[StringIO]"
        }
    },
    "conftest.py_o3_mini_ef4e97b9.py": {
        "mock_controller": {
            "mock_button": "AsyncMock"
        }
    },
	"conftest.py_o1_mini_8b971bd2.py": {
        "raiden_spawner": {
            "request": "pytest.FixtureRequest"
        }
    },
    "test_process_custody_slashing.py_o1_mini_01b6d00e.py": {
        "run_standard_custody_slashing_test": {
            "block_lengths": "Optional[list[int]]"
        }
    },
    "test_pipeline.py_o1_mini_2e127b37.py": {
        "test_default_version_range_locks_minor_version": {
            "return": "None"
        }
    },
    "handlers.py_o1_mini_9ad132ce.py": {
        "__init__": {
            "level": "int | str"
        }
    },
    "transformer_layer.py_o1_mini_238a1cf9.py": {
        "forward": {
            "attention_mask": "torch.Tensor"
        }
    },
    "arguments.py_o1_mini_8266a1b7.py": {
        "try_iter_content": {
            "types": "Iterable[Any]"
        },
        "_star_star_dict": {
            "return": "Dict[Any, Any]"
        },
        "iterate_argument_clinic": {
            "return": "Iterator[Union[ValueSet, Iterable[Any]]]"
        }
    },
    "conftest.py_o1_mini_63dfd35f.py": {
        "smartthings_mock_fixture": {
            "return": "Mock"
        }
    },
    "imports.py_o1_mini_95ae2396.py": {
        "iter_module_names": {
            "return": "Iterable[Union[ImportName, SubModuleName]]"
        },
        "__init__": {
            "import_path": "Tuple[Union[str, tree.Name], ...]"
        },
        "_load_python_module": {
            "is_package": "bool"
        }
    },
    "test_indexing.py_o1_mini_3567a5c8.py": {
        "test_get_loc_time_obj2": {
            "monkeypatch": "pytest.MonkeyPatch"
        }
    },
    "events.py_o1_mini_b136f42f.py": {
        "add_realm_logo_fields": {
            "state": "dict[str, Any]"
        }
    },
    "records.py_o1_mini_2fe49890.py": {
        "__getitem__": {
            "key": "typing.Union[str, int]"
        },
        "__init__": {
            "column_maps": "typing.Tuple[typing.Mapping[typing.Any, typing.Tuple[int, TypeEngine]], typing.Mapping[int, typing.Tuple[int, TypeEngine]], typing.Mapping[str, typing.Tuple[int, TypeEngine]]]"
        }
    },
    "melt.py_o1_mini_713be946.py": {
        "melt": {
            "var_name": "Optional[Union[Hashable, List[Hashable]]]"
        },
        "wide_to_long": {
            "stubnames": "Union[str, List[str]]",
            "i": "Union[str, List[str]]"
        },
        "ensure_list_vars": {
            "arg_vars": "Optional[Union[Hashable, Iterable[Hashable]]]"
        },
        "melt_stub": {
            "i": "Union[str, List[str]]"
        }
    },
    "test_rewards.py_o1_mini_775a50b0.py": {
        "test_rewards_nephew_uncle_different_vm": {
            "vm_fn_uncle": "Callable[..., any]",
            "vm_fn_nephew": "Callable[..., any]"
        },
        "test_rewards": {
            "vm_fn": "Callable[[int], any]"
        },
        "test_uncle_block_inclusion_validity": {
            "vm_fn": "Callable[[int], any]"
        },
        "test_rewards_uncle_created_at_different_generations": {
            "vm_fn": "Callable[..., any]"
        }
    },
    "actor.py_o1_mini_fd81ae30.py": {
        "traceback": {
            "return": "str"
        }
    },
    "test_nth.py_o1_mini_48be8cb9.py": {
        "test_groupby_nth_int_like_precision": {
            "data": "Union[Timestamp, int]"
        }
    },
    "conftest.py_o1_mini_7fd8d02c.py": {
        "anova_api_mock": {
            "connect_messages": "list[MockedanovaWebsocketMessage] | None"
        }
    },
    "test_core.py_o1_mini_050b7066.py": {
        "test_method_with_bad_strategy": {
            "x": "Any"
        }
    },
    "test_sliceaware_classifier.py_o1_mini_e30a3084.py": {
        "test_slice_tasks": {
            "return": "None"
        }
    },
    "base.py_o1_mini_49dec30f.py": {
        "on_stream_event_out": {
            "state": "Optional[Dict]"
        }
    },
    "gen.py_o1_mini_1e5c7057.py": {
        "combine_mods": {
            "dict_1": "Dict[str, Union[str, List[str]]]",
            "return": "Dict[str, List[str]]",
            "dict_2": "Dict[str, Union[str, List[str]]]"
        },
        "get_provider": {
            "all_mods": "Dict[str, Dict[str, Union[List[str], str]]]",
            "create_provider_fn": "Callable[[SpecForkName, PresetBaseName, str, List[str]], TestProvider]"
        }
    },
    "period.py_o1_mini_290b79c9.py": {
        "period_range": {
            "start": "Optional[Union[str, datetime, date, Period, ABCSeries]]",
            "end": "Optional[Union[str, datetime, date, Period, ABCSeries]]"
        }
    },
    "test_cat.py_o1_mini_7f01fd9a.py": {
        "test_str_cat_name": {
            "other": "Optional[Callable[[List[str]], Union[Series, Index]]]"
        }
    },
    "exceptions.py_o1_mini_adfa0765.py": {
        "from_httpx_error": {
            "cls": "type[Self]"
        },
        "from_bind_failure": {
            "call_args": "tuple[Any, ...]",
            "call_kwargs": "dict[str, Any]"
        }
    },
    "conftest.py_o1_mini_4058499b.py": {
        "assert_sensor_state": {
            "attributes": "dict[str, Any] | None"
        }
    },
    "test_counts.py_o1_mini_91638839.py": {
        "test_multiple_users_realms_and_times": {
            "return": "None"
        },
        "test_messages_sent_to_stream_by_is_bot_realm_constraint": {
            "return": "None"
        },
        "test_mobile_pushes_received_count": {
            "return": "None"
        },
        "test_multiple_users_realms_and_bots": {
            "return": "None"
        },
        "setUp": {
            "return": "None"
        },
        "test_table_and_id_args": {
            "return": "None"
        },
        "test_process_logging_stat": {
            "return": "None"
        }
    },
    "test_to_csv.py_o1_mini_920b90ae.py": {
        "read_csv": {
            "path": "str"
        },
        "_make_frame": {
            "names": "Optional[List[str]]"
        }
    },
    "range.py_o1_mini_2641469b.py": {
        "__new__": {
            "step": "int | None",
            "stop": "int | None"
        }
    },
    "cache.py_o1_mini_397aeb92.py": {
        "load_module": {
            "return": "Optional[Any]"
        },
        "_set_cache_item": {
            "path": "str"
        }
    },
    "states.py_o1_mini_3a0b7b54.py": {
        "format_exception": {
            "tb": "TracebackType"
        }
    },
    "transactions.py_o1_mini_5c5a8715.py": {
        "chain_id": {
            "return": "Optional[int]"
        }
    },
    "entity.py_o1_mini_067a2f2c.py": {
        "name": {
            "return": "str"
        },
        "__init__": {
            "is_multi_channel": "Optional[bool]"
        }
    },
    "test_thread_runner.py_o1_mini_d2ca7599.py": {
        "test_suggest_resume_scenario": {
            "caplog": "pytest.LogCaptureFixture"
        },
        "test_does_not_log_not_using_async": {
            "caplog": "pytest.LogCaptureFixture"
        },
        "test_stricter_suggest_resume_scenario": {
            "caplog": "pytest.LogCaptureFixture"
        }
    },
    "tools.py_o1_mini_d6227bc0.py": {
        "create_subplots": {
            "ax": "Optional[Union[Axes, Iterable[Axes]]]"
        }
    },
	"rouge_test.py_o1_mini_057140f4.py": {
        "test_distributed_rouge": {
            "return": "None"
        }
    },
    "file_name.py_o1_mini_3fa33654.py": {
        "_add_strings": {
            "nodes": "Iterator[tree.Node]"
        },
        "_add_os_path_join": {
            "return": "Optional[str]"
        }
    },
    "test_layers.py_o1_mini_2c94b4d9.py": {
        "test_positional_embeddings": {
            "return": "None"
        }
    },
    "transformer_embeddings_test.py_o1_mini_7e8d35e5.py": {},
    "test_info.py_o1_mini_0c6b742d.py": {
        "test_info_smoke_test": {
            "request": "pytest.FixtureRequest"
        }
    },
    "variables.py_o1_mini_a4df8a65.py": {
        "privatekey_seed": {
            "request": "pytest.FixtureRequest"
        },
        "blockchain_type": {
            "request": "pytest.FixtureRequest"
        },
        "blockchain_key_seed": {
            "request": "pytest.FixtureRequest"
        },
        "port_generator": {
            "request": "pytest.FixtureRequest"
        },
        "logs_storage": {
            "request": "pytest.FixtureRequest"
        }
    },
    "shard_block.py_o1_mini_19f36678.py": {
        "sign_shard_block": {
            "beacon_state": "'BeaconState'",
            "block": "'SignedShardBlock'",
            "spec": "'Spec'"
        },
        "build_shard_block": {
            "shard_parent_state": "Optional['ShardState']",
            "beacon_state": "'BeaconState'",
            "spec": "'Spec'",
            "return": "'SignedShardBlock'"
        },
        "get_shard_transitions": {
            "spec": "'Spec'",
            "return": "List['ShardTransition']",
            "parent_beacon_state": "'BeaconState'",
            "shard_block_dict": "Dict[int, List['SignedShardBlock']]"
        },
        "get_committee_index_of_shard": {
            "spec": "'Spec'",
            "state": "'BeaconState'"
        },
        "get_sample_shard_block_body": {
            "spec": "'Spec'"
        }
    },
    "entity.py_o1_mini_a795742b.py": {
        "extra_state_attributes": {
            "return": "dict[str, Any]"
        }
    },
    "celery_tests.py_o1_mini_566861b3.py": {
        "quote_f": {
            "return": "Optional[str]"
        },
        "setup_sqllab": {
            "return": "None"
        }
    },
    "conftest.py_o1_mini_48227454.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "join_merge.py_o1_mini_26247bf6.py": {
        "time_join_non_unique_equal": {
            "return": "None"
        },
        "setup": {
            "return": "None"
        }
    },
    "conftest.py_o1_mini_0958eae7.py": {
        "get_multizone_status_mock": {
            "return": "MagicMock"
        }
    },
    "nodeiterator.py_o1_mini_5b1db7d4.py": {
        "magic": {
            "return": "str"
        }
    },
    "funcdef_return_type_trailing_comma.py_o1_mini_9d900532.py": {
        "SimplePyFn": {
            "func_input": "Buffer[Int32, 2]",
            "return": "tuple[Buffer[UInt8, 2], Buffer[UInt8, 2]]",
            "float_arg": "Scalar[Float32]",
            "context": "hl.GeneratorContext",
            "buffer_input": "Buffer[UInt8, 2]"
        },
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa": {
            "return": "cccccccccccccccccccccccccccccc"
        },
        "aaaaaaaaaaaaaaaaa": {
            "return": "list[Ccccccccccccccccccccccccccccccccccccccccccccccccccc, Dddddd]"
        },
        "a": {
            "return": "tuple[a, b]"
        },
        "thiiiiiiiiiiiiiiiiiis_iiiiiiiiiiiiiiiiiiiiiiiiiiiiiis_veeeeeeeeeeeeeeeeeeeeeeery_looooooong": {
            "return": "None"
        },
        "foo": {
            "return": "list[a, b]"
        }
    },
    "find_learning_rate.py_o1_mini_5b4e5b17.py": {
        "find_learning_rate_model": {
            "stopping_factor": "float"
        },
        "search_learning_rate": {
            "stopping_factor": "float"
        }
    },
    "scheduler_tests.py_o1_mini_704e35bc.py": {
        "test_scheduler_celery_no_timeout_utc": {
            "owners": "list[User]"
        },
        "test_scheduler_celery_no_timeout_ny": {
            "owners": "list[User]"
        },
        "test_execute_task": {
            "owners": "list[User]"
        },
        "test_execute_task_with_command_exception": {
            "owners": "list[User]"
        },
        "test_scheduler_celery_timeout_ny": {
            "owners": "list[User]"
        },
        "owners": {
            "return": "list[User]"
        },
        "test_scheduler_celery_timeout_utc": {
            "owners": "list[User]"
        },
        "test_scheduler_feature_flag_off": {
            "owners": "list[User]"
        }
    },
    "test_compression.py_o1_mini_8c14f213.py": {
        "buffer": {
            "request": "pytest.FixtureRequest"
        },
        "test_compression": {
            "request": "pytest.FixtureRequest"
        }
    },
    "sentiment_analysis_suite.py_o1_mini_ad14d086.py": {
        "__init__": {
            "positive": "Optional[int]",
            "negative": "Optional[int]"
        }
    },
    "topic.py_o1_mini_5018cdae.py": {
        "get_topic_resolution_and_bare_name": {
            "stored_name": "str"
        }
    },
    "color.py_o1_mini_41c9bd2a.py": {
        "__getitem__": {
            "return": "Union[float, Tuple[float, float, float, Optional[float]]]"
        },
        "as_hsl": {
            "return": "str"
        }
    },
    "test_mediation_fee.py_o1_mini_bcbdb4de.py": {
        "test_mfee4": {
            "return": "None"
        }
    },
    "tile.py_o1_mini_dd3f33a5.py": {
        "qcut": {
            "q": "Union[int, Sequence[float]]"
        },
        "_bins_to_cuts": {
            "labels": "Optional[Union[Sequence[Any], bool]]"
        },
        "cut": {
            "bins": "Union[int, Sequence[Any], IntervalIndex]"
        }
    },
    "openapi.py_o1_mini_03accd2a.py": {
        "get_field": {
            "parameter": "Dict[str, Any]"
        }
    }
	
}