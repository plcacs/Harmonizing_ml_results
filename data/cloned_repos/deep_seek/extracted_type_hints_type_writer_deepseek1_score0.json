{
    "strategy_test_v3.py_deepseek_49c159a8.py": {
        "leverage": {
            "entry_tag": "str | None"
        },
        "adjust_trade_position": {
            "min_stake": "float | None",
            "return": "float | None"
        }
    },
    "test_exchange.py_deepseek_872a0fde.py": {
        "test_get_min_pair_stake_amount_real_data": {
            "return": "None"
        },
        "test__get_stake_amount_limit": {
            "return": "None"
        }
    },
    "conftest.py_deepseek_27c9761e.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock]"
        }
    },
    "utils.py_deepseek_4ba154ec.py": {
        "create_report_notification": {
            "owners": "Optional[list[User]]",
            "extra": "Optional[dict[str, Any]]"
        },
        "insert_report_schedule": {
            "owners": "list[User]",
            "logs": "Optional[list[ReportExecutionLog]]",
            "extra": "Optional[dict[Any, Any]]",
            "recipients": "Optional[list[ReportRecipients]]"
        }
    },
    "test_freqtradebot.py_deepseek_2b80392e.py": {
        "test_position_adjust2": {
            "return": "None"
        },
        "test_position_adjust": {
            "return": "None"
        }
    },
    "callback.py_deepseek_1dcc5b58.py": {
        "on_end": {
            "metrics": "Dict[str, Any]",
            "epoch": "int"
        }
    },
    "token_class.py_deepseek_074419f2.py": {
        "__init__": {
            "idx": "int",
            "lemma_": "str",
            "ent_type_": "str",
            "idx_end": "int",
            "text": "str",
            "type_id": "int",
            "tag_": "str",
            "dep_": "str",
            "text_id": "int",
            "pos_": "str"
        }
    },
    "ewm.py_deepseek_64027fd2.py": {
        "__init__": {
            "return": "None"
        }
    }
}