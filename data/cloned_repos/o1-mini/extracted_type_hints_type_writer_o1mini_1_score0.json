{
    "alarm_control_panel.py_o3_mini_e816d2fa.py": {
        "_pending_time": {
            "return": "datetime.timedelta"
        }
    },
    "trainer_test.py_o3_mini_cdc7ca6a.py": {
        "test_sparse_clip_grad": {
            "return": "None"
        }
    },
    "base_tests.py_o3_mini_525dc3b2.py": {
        "get_json_resp": {
            "json_": "Optional[str]"
        }
    },
    "raiden_network.py_o3_mini_34be1bfe.py": {
        "pfs_mock": {
            "monkeypatch": "pytest.MonkeyPatch"
        }
    },
    "streams.py_o3_mini_4c29e46e.py": {
        "__next__": {
            "return": "T"
        }
    },
    "log.py_o3_mini_08a35b3f.py": {
        "log_context": {
            "action": "str"
        }
    },
    "generic.py_o3_mini_4b81d00f.py": {
        "hist": {
            "figsize": "Optional[Tuple[float, float]]",
            "layout": "Optional[Tuple[int, int]]"
        },
        "aggregate": {
            "func": "Optional[Union[Callable[..., Any], str, List[Union[Callable[..., Any], str]], Dict[Any, Union[Callable[..., Any], str, List[Union[Callable[..., Any], str]]]]]]"
        },
        "_define_paths": {
            "return": "Tuple[Callable[[DataFrame], Any], Callable[[DataFrame], Any]]"
        },
        "_choose_path": {
            "return": "Tuple[Callable[[DataFrame], Any], Any]"
        },
        "_aggregate_multiple_funcs": {
            "arg": "Iterable[Union[Callable[..., Any], str]]"
        }
    },
    "model_card.py_o3_mini_55460c7b.py": {
        "get_description": {
            "model_class": "type"
        },
        "__init__": {
            "model_class": "Optional[Callable[..., Model]]"
        }
    },
    "mypy.py_o3_mini_6c8d5216.py": {
        "error_extra_fields_on_root_model": {
            "api": "CheckerPluginInterface"
        }
    },
    "testclient.py_o3_mini_b53c0624.py": {
        "__enter__": {
            "return": "TestClient"
        }
    },
    "test_appgraph.py_o3_mini_d2cf8562.py": {
        "second": {
            "return": "Dict[str, Any]"
        }
    },
    "html.py_o3_mini_1065c3b5.py": {
        "_parse": {
            "io": "str"
        },
        "_parse_tables": {
            "match": "Union[str, Pattern]"
        }
    },
    "validator.py_o3_mini_af420d1c.py": {
        "clean_logs": {
            "return": "Tuple[Tuple[Any, Any], List[Any]]"
        }
    },
    "_misc.py_o3_mini_e437bff3.py": {
        "__contains__": {
            "key": "str"
        },
        "reset": {
            "return": "None"
        }
    },
    "format.py_o3_mini_80a9d557.py": {
        "get_format_timedelta64": {
            "nat_rep": "str | float"
        },
        "_get_buffer": {
            "return": "Generator[WriteBuffer[str]] | Generator[StringIO]"
        }
    },
    "conftest.py_o3_mini_ef4e97b9.py": {
        "mock_controller": {
            "mock_button": "AsyncMock"
        }
    }
}