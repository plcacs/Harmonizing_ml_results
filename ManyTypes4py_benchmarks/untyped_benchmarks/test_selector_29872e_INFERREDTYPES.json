{
    "_get_graph@global": [
        {
            "category": "local",
            "name": "package_mapping",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "_get_graph",
            "type": []
        }
    ],
    "_get_manifest@global": [
        {
            "category": "arg",
            "name": "graph",
            "type": [
                "networkx.DiGraph",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "nodes",
            "type": [
                "dict",
                "dict[str, MagicMock]"
            ]
        },
        {
            "category": "local",
            "name": "unique_id",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "graph",
            "type": [
                "networkx.DiGraph",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "fqn",
            "type": [
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "node",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "_get_manifest",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "run_specs",
            "type": [
                "list[tuple[typing.Union[list[typing.Text],set[typing.Text]]]]"
            ]
        },
        {
            "category": "local",
            "name": "param_specs",
            "type": [
                "list[tuple[typing.Union[typing.Text,bool,None]]]"
            ]
        },
        {
            "category": "local",
            "name": "invalid_specs",
            "type": [
                "list[typing.Text]"
            ]
        }
    ],
    "graph@global": [
        {
            "category": "return",
            "name": "graph",
            "type": [
                "str",
                "bytes",
                "networkx.MultiDiGraph"
            ]
        }
    ],
    "id_macro@global": [
        {
            "category": "arg",
            "name": "arg",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "arg",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "id_macro",
            "type": [
                "str"
            ]
        }
    ],
    "mock_manifest_with_mock_graph@global": [
        {
            "category": "arg",
            "name": "graph",
            "type": [
                "networkx.Graph",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "graph",
            "type": [
                "networkx.Graph",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "mock_manifest_with_mock_graph",
            "type": [
                "str"
            ]
        }
    ],
    "test_dependency_list@TestNodeSelector": [
        {
            "category": "arg",
            "name": "runtime_config",
            "type": [
                "dict[str, typing.Any]",
                "baseplate.lib.config.RawConfig",
                "cmk.base.config.HostConfig"
            ]
        },
        {
            "category": "local",
            "name": "model_one",
            "type": [
                "dict[str, tuple[str]]",
                "list[src.tests.fixtures.data_factories.CleanedMatchData]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "model_two",
            "type": [
                "list[dict[str, str]]",
                "myia.utils.misc.Named",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "model_three",
            "type": [
                "str",
                "dict",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "model_four",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "models",
            "type": [
                "list[typing.Union[dict[str, tuple[str]],list[src.tests.fixtures.data_factories.CleanedMatchData],list[str],list[dict[str, str]],myia.utils.misc.Named,str,dict]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Union[typing.Any,str]]"
            ]
        },
        {
            "category": "local",
            "name": "runtime_config",
            "type": [
                "dict[str, typing.Any]",
                "baseplate.lib.config.RawConfig",
                "cmk.base.config.HostConfig"
            ]
        },
        {
            "category": "local",
            "name": "compiler",
            "type": [
                "dict",
                "list[str]",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "graph",
            "type": [
                "dict[str, list[str]]",
                "mindgraph.graph.Task",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "selector",
            "type": [
                "NodeSelector"
            ]
        },
        {
            "category": "local",
            "name": "queue",
            "type": [
                "typing.Any",
                "dict",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "model",
            "type": [
                "dict[str, tuple[str]]",
                "list[src.tests.fixtures.data_factories.CleanedMatchData]",
                "list[str]",
                "list[dict[str, str]]",
                "myia.utils.misc.Named",
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "got",
            "type": [
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_dependency_list",
            "type": [
                "None"
            ]
        }
    ],
    "test_invalid_specs@global": [
        {
            "category": "arg",
            "name": "invalid",
            "type": []
        },
        {
            "category": "return",
            "name": "test_invalid_specs",
            "type": [
                "None"
            ]
        }
    ],
    "test_parse_specs@global": [
        {
            "category": "arg",
            "name": "spec",
            "type": [
                "bool",
                "list[dict]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "parents",
            "type": [
                "str",
                "None",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "parents_depth",
            "type": [
                "int",
                "None",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "children",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "children_depth",
            "type": [
                "int",
                "typing.Type",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "filter_type",
            "type": [
                "str",
                "None",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "filter_value",
            "type": [
                "str",
                "bytes",
                "object"
            ]
        },
        {
            "category": "arg",
            "name": "childrens_parents",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "spec",
            "type": [
                "bool",
                "list[dict]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "parsed",
            "type": [
                "tuple[typing.Any]",
                "argparse.Namespace",
                "qutebrowser.utils.version.OpenGLInfo"
            ]
        },
        {
            "category": "return",
            "name": "test_parse_specs",
            "type": [
                "None"
            ]
        }
    ],
    "test_run_specs@global": [
        {
            "category": "arg",
            "name": "include",
            "type": [
                "bool",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "arg",
            "name": "exclude",
            "type": [
                "bool",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "bool",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "graph",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_manifest_with_mock_graph",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "graph",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_manifest_with_mock_graph",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "selector",
            "type": [
                "NodeSelector"
            ]
        },
        {
            "category": "local",
            "name": "include",
            "type": [
                "bool",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "exclude",
            "type": [
                "bool",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_run_specs",
            "type": [
                "None"
            ]
        }
    ],
    "test_select_downstream_of_empty_model@TestNodeSelector": [
        {
            "category": "arg",
            "name": "runtime_config",
            "type": [
                "dict[str, typing.Any]",
                "baseplate.lib.config.RawConfig",
                "typing.IO"
            ]
        },
        {
            "category": "local",
            "name": "model_one",
            "type": [
                "dict",
                "list[str]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "model_two",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "models",
            "type": [
                "list[typing.Union[dict,list[str],dict[str, typing.Any],str]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Union[typing.Any,str]]"
            ]
        },
        {
            "category": "local",
            "name": "runtime_config",
            "type": [
                "dict[str, typing.Any]",
                "baseplate.lib.config.RawConfig",
                "typing.IO"
            ]
        },
        {
            "category": "local",
            "name": "compiler",
            "type": [
                "dict",
                "list[str]",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "graph",
            "type": [
                "dict[str, list[str]]",
                "mindgraph.graph.Task",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "selector",
            "type": [
                "NodeSelector"
            ]
        },
        {
            "category": "local",
            "name": "spec",
            "type": [
                "list",
                "dict",
                "dict[str, tuple[int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_select_downstream_of_empty_model",
            "type": [
                "None"
            ]
        }
    ],
    "test_single_model@TestCompiler": [
        {
            "category": "arg",
            "name": "runtime_config",
            "type": [
                "typing.Callable[dbcontracts.graph.manifesManifest, typing.Any]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "model",
            "type": [
                "typing.Callable[None, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "tests.fixture_setup._fixtures.SnapcraftYaml",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "runtime_config",
            "type": [
                "typing.Callable[dbcontracts.graph.manifesManifest, typing.Any]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "compiler",
            "type": [
                "dict",
                "str",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "linker",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_single_model",
            "type": [
                "None"
            ]
        }
    ],
    "test_two_models_simple_ref@TestCompiler": [
        {
            "category": "arg",
            "name": "runtime_config",
            "type": [
                "typing.IO",
                "baseplate.lib.config.RawConfig"
            ]
        },
        {
            "category": "local",
            "name": "model_one",
            "type": [
                "dict",
                "list[str]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "model_two",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "models",
            "type": [
                "list[typing.Union[dict,list[str],dict[str, typing.Any],str]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "tests.fixture_setup._fixtures.SnapcraftYaml",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "runtime_config",
            "type": [
                "typing.IO",
                "baseplate.lib.config.RawConfig"
            ]
        },
        {
            "category": "local",
            "name": "compiler",
            "type": [
                "dict",
                "str",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "linker",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "model",
            "type": [
                "dict",
                "list[str]",
                "dict[str, typing.Any]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "expected_nodes",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "test_two_models_simple_ref",
            "type": [
                "None"
            ]
        }
    ]
}