{
    "global@global": [],
    "test_contains_dunder@TestContains": [
        {
            "category": "return",
            "name": "test_contains_dunder",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_index_non_unique_non_monotonic@TestGetIndexer": [
        {
            "category": "return",
            "name": "test_get_index_non_unique_non_monotonic",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_categorical@TestGetIndexer": [
        {
            "category": "arg",
            "name": "target",
            "type": [
                "pandas.DataFrame",
                "dict",
                "typing.Callable[frame.Frame, numpy.ndarray]"
            ]
        },
        {
            "category": "arg",
            "name": "ordered",
            "type": [
                "list[typing.Mapping]",
                "typing.Mapping",
                "None",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "target",
            "type": [
                "pandas.DataFrame",
                "dict",
                "typing.Callable[frame.Frame, numpy.ndarray]"
            ]
        },
        {
            "category": "local",
            "name": "ordered",
            "type": [
                "list[typing.Mapping]",
                "typing.Mapping",
                "None",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "categorical_target",
            "type": [
                "CategoricalIndex"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_categorical",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_categorical_with_nans@TestGetIndexer": [
        {
            "category": "local",
            "name": "ci2",
            "type": [
                "CategoricalIndex"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "float",
                "dict",
                "list[list[int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_categorical_with_nans",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_datetime@TestGetIndexer": [
        {
            "category": "local",
            "name": "ii",
            "type": [
                "int",
                "float",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "target",
            "type": [
                "DatetimeIndex"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list[list[int]]",
                "dict",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_datetime",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_errors@TestGetIndexer": [
        {
            "category": "arg",
            "name": "tuples",
            "type": [
                "bytes",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "bytes",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "tuples",
            "type": [
                "bytes",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "bytes",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "msg",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_errors",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_interval_index@TestGetIndexer": [
        {
            "category": "arg",
            "name": "box",
            "type": [
                "list",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "rng",
            "type": [
                "int",
                "list[int]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "idx",
            "type": [
                "int",
                "dict[int, list[typing.Any]]",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "actual",
            "type": [
                "list[list[int]]",
                "slice",
                "tuple[typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_interval_index",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_length_one@TestGetIndexer": [
        {
            "category": "arg",
            "name": "item",
            "type": [
                "\"Span\""
            ]
        },
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "\"Span\"",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "\"Span\"",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "item",
            "type": [
                "\"Span\""
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_length_one",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_length_one_interval@TestGetIndexer": [
        {
            "category": "arg",
            "name": "size",
            "type": [
                "int",
                "numpy.ndarray"
            ]
        },
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "int",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "int",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "size",
            "type": [
                "int",
                "numpy.ndarray"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_length_one_interval",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_multiindex_with_intervals@TestGetIndexer": [
        {
            "category": "local",
            "name": "foo_index",
            "type": [
                "Index"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "T",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_multiindex_with_intervals",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_non_monotonic@TestGetIndexer": [
        {
            "category": "return",
            "name": "test_get_indexer_non_monotonic",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_non_unique_with_int_and_float@TestGetIndexer": [
        {
            "category": "arg",
            "name": "query",
            "type": [
                "str",
                "list[str]",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "list[int]",
                "list[list[str]]"
            ]
        },
        {
            "category": "local",
            "name": "tuples",
            "type": [
                "list[tuple[typing.Union[int,float]]]"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "list[str]",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "list[int]",
                "list[list[str]]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_non_unique_with_int_and_float",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_read_only@TestGetIndexer": [
        {
            "category": "local",
            "name": "idx",
            "type": [
                "int",
                "set[int]"
            ]
        },
        {
            "category": "local",
            "name": "arr_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_read_only",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_with_int_and_float@TestGetIndexer": [
        {
            "category": "arg",
            "name": "query",
            "type": [
                "str",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "str",
                "numpy.dtype",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "tuples",
            "type": [
                "list[tuple[int]]"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "str",
                "numpy.dtype",
                "numpy.ndarray"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_with_int_and_float",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_with_interval@TestGetIndexer": [
        {
            "category": "arg",
            "name": "query",
            "type": [
                "str",
                "list[str]",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "numpy.ndarray",
                "str",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "tuples",
            "type": [
                "list[tuple[int]]"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "list[str]",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "numpy.ndarray",
                "str",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_with_interval",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_with_nans@TestGetIndexer": [
        {
            "category": "local",
            "name": "index",
            "type": [
                "IntervalIndex"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "IntervalIndex"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "float",
                "list[list[typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_with_nans",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_with_nans@TestGetLoc": [
        {
            "category": "local",
            "name": "index",
            "type": [
                "IntervalIndex"
            ]
        },
        {
            "category": "local",
            "name": "key",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "typing.Mapping",
                "str",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_with_nans",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_datetimelike_nonoverlapping@TestGetLoc": [
        {
            "category": "arg",
            "name": "breaks",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "breaks",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "interval",
            "type": [
                "Interval"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_datetimelike_nonoverlapping",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_datetimelike_overlapping@TestGetLoc": [
        {
            "category": "arg",
            "name": "arrays",
            "type": [
                "numpy.ndarray",
                "list[numpy.ndarray]",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "arrays",
            "type": [
                "numpy.ndarray",
                "list[numpy.ndarray]",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "range",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "interval",
            "type": [
                "Interval"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_datetimelike_overlapping",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_decreasing@TestGetLoc": [
        {
            "category": "arg",
            "name": "values",
            "type": [
                "tuple[float]",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "values",
            "type": [
                "tuple[float]",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_decreasing",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_interval@TestGetLoc": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "str",
                "float",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "side",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "str",
                "float",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "bound",
            "type": [
                "list[typing.Union[float,int]]"
            ]
        },
        {
            "category": "local",
            "name": "side",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_interval",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_length_one_interval@TestGetLoc": [
        {
            "category": "arg",
            "name": "left",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "right",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "other_closed",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "left",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "right",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "other_closed",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "interval",
            "type": [
                "Interval"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_length_one_interval",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_length_one_scalar@TestGetLoc": [
        {
            "category": "arg",
            "name": "scalar",
            "type": [
                "int",
                "str",
                "typing.Any",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "bool",
                "None",
                "collections.abc.Awaitable"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "bool",
                "None",
                "collections.abc.Awaitable"
            ]
        },
        {
            "category": "local",
            "name": "scalar",
            "type": [
                "int",
                "str",
                "typing.Any",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_length_one_scalar",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_non_scalar_errors@TestGetLoc": [
        {
            "category": "arg",
            "name": "key",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "key",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "msg",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_non_scalar_errors",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_loc_scalar@TestGetLoc": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "list[T]",
                "bool",
                "typing.Callable[T,T, T]"
            ]
        },
        {
            "category": "arg",
            "name": "scalar",
            "type": [
                "int",
                "typing.Callable[T,T, T]",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "correct",
            "type": [
                "dict[typing.Text, dict[typing.Union[float,int], int]]"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "list[T]",
                "bool",
                "typing.Callable[T,T, T]"
            ]
        },
        {
            "category": "local",
            "name": "scalar",
            "type": [
                "int",
                "typing.Callable[T,T, T]",
                "T"
            ]
        },
        {
            "category": "return",
            "name": "test_get_loc_scalar",
            "type": [
                "None"
            ]
        }
    ],
    "test_getitem@TestGetItem": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "bool",
                "typing.Callable[numpy.ndarray, numpy.ndarray]",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "bool",
                "typing.Callable[numpy.ndarray, numpy.ndarray]",
                "numpy.ndarray"
            ]
        },
        {
            "category": "return",
            "name": "test_getitem",
            "type": [
                "None"
            ]
        }
    ],
    "test_getitem_2d_deprecated@TestGetItem": [
        {
            "category": "return",
            "name": "test_getitem_2d_deprecated",
            "type": [
                "None"
            ]
        }
    ],
    "test_putmask_dt64@TestPutmask": [
        {
            "category": "arg",
            "name": "tz",
            "type": [
                "int",
                "float",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "tz",
            "type": [
                "int",
                "float",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "dti",
            "type": [
                "str",
                "list[str]",
                "list[typing.Optional[str]]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "IntervalIndex"
            ]
        },
        {
            "category": "return",
            "name": "test_putmask_dt64",
            "type": [
                "None"
            ]
        }
    ],
    "test_putmask_td64@TestPutmask": [
        {
            "category": "local",
            "name": "expected",
            "type": [
                "IntervalIndex"
            ]
        },
        {
            "category": "return",
            "name": "test_putmask_td64",
            "type": [
                "None"
            ]
        }
    ],
    "test_slice_locs_with_interval@TestSliceLocs": [
        {
            "category": "return",
            "name": "test_slice_locs_with_interval",
            "type": [
                "None"
            ]
        }
    ],
    "test_slice_locs_with_ints_and_floats_errors@TestSliceLocs": [
        {
            "category": "arg",
            "name": "tuples",
            "type": [
                "pandas.Series",
                "dict",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "query",
            "type": [
                "list[tuple]",
                "list[int]",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "list[tuple]",
                "list[int]",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "start",
            "type": [
                "tuple",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "stop",
            "type": [
                "tuple",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "tuples",
            "type": [
                "pandas.Series",
                "dict",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_slice_locs_with_ints_and_floats_errors",
            "type": [
                "None"
            ]
        }
    ],
    "test_slice_locs_with_ints_and_floats_succeeds@TestSliceLocs": [
        {
            "category": "return",
            "name": "test_slice_locs_with_ints_and_floats_succeeds",
            "type": [
                "None"
            ]
        }
    ],
    "test_take@TestTake": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "T",
                "str",
                "None",
                "dict[str, list[str]]"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "T",
                "str",
                "None",
                "dict[str, list[str]]"
            ]
        },
        {
            "category": "return",
            "name": "test_take",
            "type": [
                "None"
            ]
        }
    ],
    "test_where@TestWhere": [
        {
            "category": "arg",
            "name": "listlike_box",
            "type": []
        },
        {
            "category": "local",
            "name": "cond",
            "type": [
                "list[bool]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "IntervalIndex"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "typing.Generator[typing.Optional[typing.Any]]",
                "T"
            ]
        },
        {
            "category": "return",
            "name": "test_where",
            "type": [
                "None"
            ]
        }
    ]
}