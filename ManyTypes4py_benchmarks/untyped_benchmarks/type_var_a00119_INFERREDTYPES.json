{
    "__init__@TypeVar": [
        {
            "category": "arg",
            "name": "parent_context",
            "type": [
                "str",
                "typing.Pattern"
            ]
        },
        {
            "category": "arg",
            "name": "tree_name",
            "type": [
                "str",
                "typing.Pattern"
            ]
        },
        {
            "category": "arg",
            "name": "var_name",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "unpacked_args",
            "type": [
                "str",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "parent_context",
            "type": [
                "str",
                "typing.Pattern"
            ]
        },
        {
            "category": "local",
            "name": "tree_name",
            "type": [
                "str",
                "typing.Pattern"
            ]
        },
        {
            "category": "local",
            "name": "var_name",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "_var_name",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "_constraints_lazy_values",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "_bound_lazy_value",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_covariant_lazy_value",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_contravariant_lazy_value",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "key",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "unpacked_args",
            "type": [
                "str",
                "list"
            ]
        },
        {
            "category": "return",
            "name": "__init__",
            "type": [
                "None"
            ]
        }
    ],
    "__init__@TypeWrapper": [
        {
            "category": "arg",
            "name": "wrapped_value",
            "type": [
                "int",
                "str",
                "typing.AnyStr"
            ]
        },
        {
            "category": "arg",
            "name": "original_value",
            "type": [
                "str",
                "tuple[typing.Union[str,int]]",
                "typing.Callable[str,object, None]"
            ]
        },
        {
            "category": "local",
            "name": "wrapped_value",
            "type": [
                "int",
                "str",
                "typing.AnyStr"
            ]
        },
        {
            "category": "local",
            "name": "original_value",
            "type": [
                "str",
                "tuple[typing.Union[str,int]]",
                "typing.Callable[str,object, None]"
            ]
        },
        {
            "category": "local",
            "name": "_original_value",
            "type": [
                "str",
                "tuple[typing.Union[str,int]]",
                "typing.Callable[str,object, None]"
            ]
        },
        {
            "category": "return",
            "name": "__init__",
            "type": [
                "None"
            ]
        }
    ],
    "__repr__@TypeVar": [
        {
            "category": "return",
            "name": "__repr__",
            "type": [
                "typing.Text"
            ]
        }
    ],
    "_find_string_name@TypeVarClass": [
        {
            "category": "arg",
            "name": "lazy_value",
            "type": [
                "typing.Callable",
                "None",
                "collections.abc.Awaitable[None]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "lazy_value",
            "type": [
                "typing.Callable",
                "None",
                "collections.abc.Awaitable[None]",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "_find_string_name",
            "type": [
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "value_set",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "name_value",
            "type": [
                "str",
                "int",
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "safe_value",
            "type": [
                "str",
                "None",
                "bool"
            ]
        }
    ],
    "_get_classes@TypeVar": [
        {
            "category": "local",
            "name": "_bound_lazy_value",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "_get_classes",
            "type": [
                "bool"
            ]
        }
    ],
    "constraints@TypeVar": [
        {
            "category": "return",
            "name": "constraints",
            "type": []
        }
    ],
    "define_generics@TypeVar": [
        {
            "category": "arg",
            "name": "type_var_dict",
            "type": [
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "type_var_dict",
            "type": [
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "found",
            "type": [
                "str",
                "list",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "define_generics",
            "type": [
                "str",
                "list",
                "dict",
                "ValueSet"
            ]
        }
    ],
    "execute_annotation@TypeVar": [
        {
            "category": "return",
            "name": "execute_annotation",
            "type": [
                "str",
                "tuple[typing.Union[str,bool]]"
            ]
        }
    ],
    "execute_annotation@TypeWrapper": [
        {
            "category": "return",
            "name": "execute_annotation",
            "type": [
                "ValueSet"
            ]
        }
    ],
    "get_filters@TypeVar": [
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "get_filters",
            "type": [
                "typing.Callable[bytes, None]",
                "set",
                "typing.Iterator"
            ]
        }
    ],
    "global@global": [],
    "infer_type_vars@TypeVar": [
        {
            "category": "arg",
            "name": "value_set",
            "type": [
                "str",
                "bool",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "annotation_name",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "infer_type_vars",
            "type": [
                "dict[str, ValueSet]"
            ]
        }
    ],
    "is_same_class@TypeVar": [
        {
            "category": "arg",
            "name": "other",
            "type": [
                "typing.Type",
                "T"
            ]
        },
        {
            "category": "return",
            "name": "is_same_class",
            "type": [
                "bool"
            ]
        }
    ],
    "iterate@TypeVar": [
        {
            "category": "local",
            "name": "cls",
            "type": [
                "TypeWrapper"
            ]
        },
        {
            "category": "return",
            "name": "iterate",
            "type": [
                "typing.Generator[TypeWrapper]"
            ]
        }
    ],
    "py__call__@TypeVarClass": [
        {
            "category": "arg",
            "name": "arguments",
            "type": [
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "arguments",
            "type": [
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "unpacked",
            "type": [
                "list",
                "dict[str, typing.Any]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "key",
            "type": [
                "str",
                "None",
                "int",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "lazy_value",
            "type": [
                "typing.Mapping",
                "typing.Sequence[typing.Any]",
                "dict[tuple, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "var_name",
            "type": [
                "str",
                "dict",
                "frozenset"
            ]
        },
        {
            "category": "return",
            "name": "py__call__",
            "type": [
                "ValueSet"
            ]
        }
    ],
    "py__name__@TypeVar": [
        {
            "category": "return",
            "name": "py__name__",
            "type": []
        }
    ]
}