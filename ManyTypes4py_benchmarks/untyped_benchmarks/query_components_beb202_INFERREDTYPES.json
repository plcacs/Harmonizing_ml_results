{
    "_build_flow_run_graph_v2_query@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "pymongo.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "pymongo.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "Flow",
            "type": [
                "list[str]",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "FlowRun",
            "type": [
                "taskiapplication.models.task.Task",
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "TaskRun",
            "type": [
                "taskiapplication.models.task.Task",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "input",
            "type": [
                "list",
                "typing.Iterator",
                "property"
            ]
        },
        {
            "category": "local",
            "name": "argument",
            "type": [
                "types.SimpleNamespace",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "edges",
            "type": [
                "list",
                "set[str]",
                "set"
            ]
        },
        {
            "category": "local",
            "name": "children",
            "type": [
                "list",
                "dict[int, list[int]]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "parents",
            "type": [
                "dep_check.models.Module",
                "dict",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "with_encapsulating",
            "type": [
                "str",
                "None",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "with_parents",
            "type": [
                "str",
                "list",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "with_children",
            "type": [
                "str",
                "list",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "graph",
            "type": [
                "list[list[float]]",
                "list",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "list",
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "_build_flow_run_graph_v2_query",
            "type": []
        }
    ],
    "_build_flow_run_graph_v2_query@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "pymongo.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "pymongo.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "Flow",
            "type": [
                "list[str]",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "FlowRun",
            "type": [
                "taskiapplication.models.task.Task",
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "TaskRun",
            "type": [
                "taskiapplication.models.task.Task",
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "input",
            "type": [
                "list",
                "str",
                "list[tuple[typing.Union[str,typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "argument",
            "type": [
                "str",
                "src.py_gql.schema.types.Argument",
                "None",
                "list[typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "edges",
            "type": [
                "list",
                "set[str]",
                "set"
            ]
        },
        {
            "category": "local",
            "name": "children",
            "type": [
                "jinja2.nodes.FromImport",
                "dict[int, list[int]]",
                "Node"
            ]
        },
        {
            "category": "local",
            "name": "parents",
            "type": [
                "dep_check.models.Module",
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "with_encapsulating",
            "type": [
                "bool",
                "str",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "with_parents",
            "type": [
                "bool",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "with_children",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "graph",
            "type": [
                "list[list[float]]",
                "list",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "list",
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "_build_flow_run_graph_v2_query",
            "type": []
        }
    ],
    "_build_flow_run_graph_v2_query@BaseQueryComponents": [
        {
            "category": "return",
            "name": "_build_flow_run_graph_v2_query",
            "type": [
                "None"
            ]
        }
    ],
    "_flow_run_graph_v2_query@BaseQueryComponents": [
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "list[str]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "param_names",
            "type": [
                "set"
            ]
        },
        {
            "category": "local",
            "name": "required",
            "type": [
                "set[typing.Text]"
            ]
        },
        {
            "category": "return",
            "name": "_flow_run_graph_v2_query",
            "type": [
                "str",
                "list[str]",
                "dict[str, str]"
            ]
        }
    ],
    "_get_flow_run_graph_artifacts@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database.SessionType"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "aiopg.sa.SAConnection",
                "sqlalchemy.orm.session.Session",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "flow_run_id",
            "type": [
                "int",
                "str",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "arg",
            "name": "max_artifacts",
            "type": [
                "int",
                "str",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database.SessionType"
            ]
        },
        {
            "category": "local",
            "name": "Artifact",
            "type": [
                "list",
                "search_service.models.dashboard.Dashboard",
                "database.PokedexEntry"
            ]
        },
        {
            "category": "local",
            "name": "ArtifactCollection",
            "type": [
                "viewer.models.ArchiveQuerySet",
                "tartare.core.models.Contributor",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "max_artifacts",
            "type": [
                "int",
                "str",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "typing.Type",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "aiopg.sa.SAConnection",
                "sqlalchemy.orm.session.Session",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "results",
            "type": [
                "dict[str, list[typing.Any]]",
                "dict",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "artifacts_by_task",
            "type": [
                "dict",
                "dict[str, str]",
                "list"
            ]
        },
        {
            "category": "return",
            "name": "_get_flow_run_graph_artifacts",
            "type": [
                "dict",
                "dict[str, str]",
                "typing.Mapping"
            ]
        }
    ],
    "_get_flow_run_graph_states@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "session",
            "type": [
                "aioquic.asyncio.QuicConnectionProtocol",
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "flow_run_id",
            "type": [
                "aioquic.asyncio.QuicConnectionProtocol",
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "aioquic.asyncio.QuicConnectionProtocol",
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "flow_run_id",
            "type": [
                "aioquic.asyncio.QuicConnectionProtocol",
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "states",
            "type": [
                "src.models.generic_task.TaskState",
                "tuple[str]",
                "device.utilities.state.main.State"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "_get_flow_run_graph_states",
            "type": [
                "list"
            ]
        }
    ],
    "_get_scheduled_flow_runs_from_work_pool_template_path@AioSqliteQueryComponents": [
        {
            "category": "return",
            "name": "_get_scheduled_flow_runs_from_work_pool_template_path",
            "type": [
                "typing.Text"
            ]
        }
    ],
    "_get_scheduled_flow_runs_from_work_pool_template_path@AsyncPostgresQueryComponents": [
        {
            "category": "return",
            "name": "_get_scheduled_flow_runs_from_work_pool_template_path",
            "type": [
                "typing.Text"
            ]
        }
    ],
    "_get_scheduled_flow_runs_from_work_pool_template_path@BaseQueryComponents": [
        {
            "category": "return",
            "name": "_get_scheduled_flow_runs_from_work_pool_template_path",
            "type": [
                "None"
            ]
        }
    ],
    "_get_scheduled_flow_runs_join@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "str",
                "deeplearning.ml4pl.models.log_database.Database",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "arg",
            "name": "work_queue_query",
            "type": [
                "str",
                "None",
                "models.DBClient"
            ]
        },
        {
            "category": "arg",
            "name": "limit_per_queue",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "scheduled_before",
            "type": [
                "asyncio.AbstractEventLoop",
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "str",
                "deeplearning.ml4pl.models.log_database.Database",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_before",
            "type": [
                "asyncio.AbstractEventLoop",
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_before_clause",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_flow_runs",
            "type": [
                "str",
                "typing.Callable[None,None,None,None,None, None]",
                "list[None]"
            ]
        },
        {
            "category": "local",
            "name": "limit_per_queue",
            "type": [
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "limit",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "_get_scheduled_flow_runs_join",
            "type": [
                "tuple[typing.Union[str,typing.Callable[None,None,None,None,None, None],list[None]]]"
            ]
        }
    ],
    "_get_scheduled_flow_runs_join@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database"
            ]
        },
        {
            "category": "arg",
            "name": "work_queue_query",
            "type": [
                "typing.Iterable[int]",
                "int",
                "None",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "arg",
            "name": "limit_per_queue",
            "type": [
                "typing.Iterable[int]",
                "int",
                "None",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "arg",
            "name": "scheduled_before",
            "type": [
                "asyncio.AbstractEventLoop",
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_before",
            "type": [
                "asyncio.AbstractEventLoop",
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_before_clause",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_flow_runs",
            "type": [
                "list[bool]",
                "str",
                "typing.Callable[None,None,None,None,None, None]"
            ]
        },
        {
            "category": "return",
            "name": "_get_scheduled_flow_runs_join",
            "type": [
                "tuple[typing.Union[list[bool],str,typing.Callable[None,None,None,None,None, None]]]"
            ]
        }
    ],
    "as_array@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "elems",
            "type": []
        },
        {
            "category": "return",
            "name": "as_array",
            "type": []
        }
    ],
    "build_json_object@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "build_json_object",
            "type": [
                "dict"
            ]
        }
    ],
    "build_json_object@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "build_json_object",
            "type": [
                "dict",
                "str"
            ]
        }
    ],
    "build_json_object@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "build_json_object",
            "type": [
                "None"
            ]
        }
    ],
    "cast_to_json@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "json_obj",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "json_obj",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "cast_to_json",
            "type": [
                "str",
                "None"
            ]
        }
    ],
    "cast_to_json@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "json_obj",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "json_obj",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "cast_to_json",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "str"
            ]
        }
    ],
    "cast_to_json@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "json_obj",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "cast_to_json",
            "type": [
                "None"
            ]
        }
    ],
    "clear_configuration_value_cache_for_key@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "key",
            "type": [
                "str",
                "KT",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "key",
            "type": [
                "str",
                "KT",
                "T"
            ]
        },
        {
            "category": "return",
            "name": "clear_configuration_value_cache_for_key",
            "type": [
                "None"
            ]
        }
    ],
    "flow_run_graph_v2@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "str",
                "None",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.session.Session",
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "flow_run_id",
            "type": [
                "sqlalchemy.orm.session.Session",
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "since",
            "type": [
                "int",
                "None",
                "medtagger.types.ScanID"
            ]
        },
        {
            "category": "arg",
            "name": "max_nodes",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "max_artifacts",
            "type": [
                "int",
                "str",
                "slice"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "str",
                "None",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.session.Session",
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "flow_run_id",
            "type": [
                "sqlalchemy.orm.session.Session",
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "graph.types.RowsProxy",
                "search_service.models.dashboard.Dashboard"
            ]
        },
        {
            "category": "local",
            "name": "start_time",
            "type": [
                "int",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "end_time",
            "type": [
                "int",
                "None",
                "typing.Iterable[int]"
            ]
        },
        {
            "category": "local",
            "name": "since",
            "type": [
                "int",
                "None",
                "medtagger.types.ScanID"
            ]
        },
        {
            "category": "local",
            "name": "max_nodes",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "results",
            "type": [
                "str",
                "dict",
                "list[float]"
            ]
        },
        {
            "category": "local",
            "name": "max_artifacts",
            "type": [
                "int",
                "str",
                "slice"
            ]
        },
        {
            "category": "local",
            "name": "graph_states",
            "type": [
                "T",
                "dict[str, typing.Any]",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "nodes",
            "type": [
                "list",
                "list[tuple[Node]]"
            ]
        },
        {
            "category": "local",
            "name": "root_node_ids",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "flow_run_graph_v2",
            "type": [
                "Graph"
            ]
        }
    ],
    "get_flow_run_notifications_from_queue@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database.SessionType"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "arg",
            "name": "limit",
            "type": [
                "sqlalchemy.orm.Session",
                "str",
                "fal.models.Season"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database.SessionType"
            ]
        },
        {
            "category": "local",
            "name": "Flow",
            "type": [
                "list[str]",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "FlowRun",
            "type": [
                "str",
                "bool",
                "typing.Callable[None, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "limit",
            "type": [
                "sqlalchemy.orm.Session",
                "str",
                "fal.models.Season"
            ]
        },
        {
            "category": "local",
            "name": "notification_details_stmt",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "list",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "notifications",
            "type": [
                "khetha.models.Task",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "delete_stmt",
            "type": [
                "list",
                "str",
                "set"
            ]
        },
        {
            "category": "return",
            "name": "get_flow_run_notifications_from_queue",
            "type": [
                "khetha.models.Task",
                "list"
            ]
        }
    ],
    "get_flow_run_notifications_from_queue@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database.SessionType"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "aiopg.sa.SAConnection"
            ]
        },
        {
            "category": "arg",
            "name": "limit",
            "type": [
                "sqlalchemy.orm.Session",
                "str",
                "deeplearning.ml4pl.models.log_database.Database.SessionType"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "deeplearning.ml4pl.models.log_database.Database.SessionType"
            ]
        },
        {
            "category": "local",
            "name": "Flow",
            "type": [
                "list[str]",
                "fastapi.openapi.models.OAuthFlows",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "FlowRun",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "queued_notifications_ids",
            "type": [
                "str",
                "set",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "queued_notifications",
            "type": [
                "zilencer.models.RemoteZulipServer",
                "list",
                "listens.gateways.sqlalchemy_db_gateway.models.SqlListen"
            ]
        },
        {
            "category": "local",
            "name": "notification_details_stmt",
            "type": [
                "str",
                "typing.Type",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "aiopg.sa.SAConnection"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "dict",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "get_flow_run_notifications_from_queue",
            "type": [
                "str",
                "list[dict[str, typing.Any]]"
            ]
        }
    ],
    "get_flow_run_notifications_from_queue@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "session",
            "type": [
                "str",
                "list[int]",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "limit",
            "type": [
                "str",
                "list[int]",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "get_flow_run_notifications_from_queue",
            "type": [
                "None"
            ]
        }
    ],
    "get_scheduled_flow_runs_from_work_pool@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "deeplearning.ml4pl.models.log_database.Database.SessionType",
                "deeplearning.ml4pl.models.log_database.Database",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "deeplearning.ml4pl.models.log_database.Database.SessionType",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "arg",
            "name": "limit",
            "type": [
                "None",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "worker_limit",
            "type": [
                "None",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "queue_limit",
            "type": [
                "None",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "work_pool_ids",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "work_queue_ids",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "scheduled_before",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "scheduled_after",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "respect_queue_priorities",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "jinja_env",
            "type": [
                "str",
                "jinja2.Environment",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "work_pool_ids",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "work_queue_ids",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "respect_queue_priorities",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_before",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_after",
            "type": [
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "bindparams",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "limit",
            "type": [
                "None",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "worker_limit",
            "type": [
                "None",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "queue_limit",
            "type": [
                "None",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "deeplearning.ml4pl.models.log_database.Database.SessionType",
                "deeplearning.ml4pl.models.log_database.Database",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "orm_query",
            "type": [
                "str",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "deeplearning.ml4pl.models.log_database.Database.SessionType",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "list",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "get_scheduled_flow_runs_from_work_pool",
            "type": [
                "list"
            ]
        }
    ],
    "get_scheduled_flow_runs_from_work_queues@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "deeplearning.ml4pl.models.log_database.Database",
                "sqlalchemy.orm.Session",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "limit_per_queue",
            "type": [
                "None",
                "str",
                "int",
                "deeplearning.ml4pl.models.log_database.Database"
            ]
        },
        {
            "category": "arg",
            "name": "work_queue_ids",
            "type": [
                "None",
                "sqlalchemy.orm.session.Session",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "scheduled_before",
            "type": [
                "None",
                "str",
                "int",
                "deeplearning.ml4pl.models.log_database.Database"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "deeplearning.ml4pl.models.log_database.Database",
                "sqlalchemy.orm.Session",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "FlowRun",
            "type": [
                "int",
                "list",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "WorkQueue",
            "type": [
                "list[str]",
                "typing.Deque",
                "beagle.web.api.models.Graph"
            ]
        },
        {
            "category": "local",
            "name": "limit_per_queue",
            "type": [
                "None",
                "str",
                "int",
                "deeplearning.ml4pl.models.log_database.Database"
            ]
        },
        {
            "category": "local",
            "name": "scheduled_before",
            "type": [
                "None",
                "str",
                "int",
                "deeplearning.ml4pl.models.log_database.Database"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "typing.Type"
            ]
        },
        {
            "category": "return",
            "name": "get_scheduled_flow_runs_from_work_queues",
            "type": [
                "str",
                "typing.Type"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "T",
            "type": [
                "TypeVar"
            ]
        },
        {
            "category": "local",
            "name": "ONE_HOUR",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "jinja_env",
            "type": [
                "Environment",
                "str",
                "jinja2.Environment",
                "dict[str, str]"
            ]
        }
    ],
    "insert@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "obj",
            "type": [
                "T",
                "VT",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "sqlite",
            "type": [
                "list[typing.Union[T,VT,typing.Callable]]"
            ]
        },
        {
            "category": "local",
            "name": "obj",
            "type": [
                "T",
                "VT",
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "insert",
            "type": [
                "list[typing.Union[T,VT,typing.Callable]]"
            ]
        }
    ],
    "insert@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "obj",
            "type": [
                "T",
                "VT",
                "mode.utils.types.graphs._T"
            ]
        },
        {
            "category": "local",
            "name": "postgresql",
            "type": [
                "list[typing.Union[T,VT,mode.utils.types.graphs._T]]"
            ]
        },
        {
            "category": "local",
            "name": "obj",
            "type": [
                "T",
                "VT",
                "mode.utils.types.graphs._T"
            ]
        },
        {
            "category": "return",
            "name": "insert",
            "type": [
                "list[typing.Union[T,VT,mode.utils.types.graphs._T]]"
            ]
        }
    ],
    "insert@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "obj",
            "type": [
                "guillotina.db.orm.interfaces.IBaseObject",
                "dict",
                "T"
            ]
        },
        {
            "category": "return",
            "name": "insert",
            "type": [
                "None"
            ]
        }
    ],
    "json_arr_agg@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "json_array",
            "type": [
                "str",
                "dict[str, list[int]]",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "json_array",
            "type": [
                "str",
                "dict[str, list[int]]",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "json_arr_agg",
            "type": [
                "str",
                "bool",
                "itsim.types.AddressRepr"
            ]
        }
    ],
    "json_arr_agg@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "json_array",
            "type": [
                "list",
                "list[dict[typing.Any, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "json_array",
            "type": [
                "list",
                "list[dict[typing.Any, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "json_arr_agg",
            "type": [
                "list[docutils.nodes.Node]",
                "tuple[str]",
                "str"
            ]
        }
    ],
    "json_arr_agg@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "json_array",
            "type": [
                "list[dict[str, typing.Any]]",
                "typing.Sequence[typing.Sequence[int]]",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "json_arr_agg",
            "type": [
                "None"
            ]
        }
    ],
    "make_timestamp_intervals@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "start_time",
            "type": [
                "datetime.datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "arg",
            "name": "end_time",
            "type": [
                "datetime.datetime.datetime",
                "datetime.datetime.timedelta",
                "float"
            ]
        },
        {
            "category": "arg",
            "name": "interval",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "start_time",
            "type": [
                "datetime.datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "end_time",
            "type": [
                "datetime.datetime.datetime",
                "datetime.datetime.timedelta",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "interval",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "base_case",
            "type": [
                "typing.Callable[None, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "recursive_case",
            "type": [
                "list[\"Rule\"]"
            ]
        },
        {
            "category": "local",
            "name": "cte",
            "type": [
                "str",
                "int",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "make_timestamp_intervals",
            "type": []
        }
    ],
    "make_timestamp_intervals@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "start_time",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "arg",
            "name": "end_time",
            "type": [
                "datetime.datetime.datetime",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "interval",
            "type": [
                "datetime.datetime.datetime",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "dt",
            "type": [
                "datetime.datetime",
                "str",
                "cirq.value.timestamp.Timestamp"
            ]
        },
        {
            "category": "return",
            "name": "make_timestamp_intervals",
            "type": [
                "datetime.datetime",
                "int",
                "float"
            ]
        }
    ],
    "make_timestamp_intervals@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "start_time",
            "type": [
                "int",
                "datetime.datetime.timedelta",
                "datetime.datetime.datetime",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "end_time",
            "type": [
                "int",
                "datetime.datetime.timedelta",
                "datetime.datetime.datetime",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "interval",
            "type": [
                "int",
                "datetime.datetime.timedelta",
                "datetime.datetime.datetime",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "make_timestamp_intervals",
            "type": [
                "None"
            ]
        }
    ],
    "process_result_value@UUIDList": [
        {
            "category": "arg",
            "name": "value",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "dialect",
            "type": [
                "str",
                "sqlalchemy.engine.interfaces.Dialect",
                "typing.Iterable[str]"
            ]
        },
        {
            "category": "local",
            "name": "value",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "process_result_value",
            "type": [
                "None",
                "list[UUID]"
            ]
        },
        {
            "category": "local",
            "name": "v",
            "type": [
                "typing.Text",
                "UUID"
            ]
        }
    ],
    "queue_flow_run_notifications@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.engine.Connection",
                "sqlalchemy.orm.session.Session",
                "sqlalchemy.engine.Engine"
            ]
        },
        {
            "category": "arg",
            "name": "flow_run",
            "type": [
                "ultron8.api.models.trigger.TriggerCreate",
                "\"IConnection\"",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "flow_run",
            "type": [
                "ultron8.api.models.trigger.TriggerCreate",
                "\"IConnection\"",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "stmt",
            "type": [
                "list",
                "str",
                "typing.Callable[Type,BaseException,types.TracebackType, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.engine.Connection",
                "sqlalchemy.orm.session.Session",
                "sqlalchemy.engine.Engine"
            ]
        },
        {
            "category": "return",
            "name": "queue_flow_run_notifications",
            "type": [
                "None"
            ]
        }
    ],
    "read_configuration_value@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "anki_timelapse.database.Database"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "arg",
            "name": "key",
            "type": [
                "sqlalchemy.orm.Session",
                "sqlalchemy.engine.Connection",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "sqlalchemy.orm.Session",
                "anki_timelapse.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "value",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "key",
            "type": [
                "sqlalchemy.orm.Session",
                "sqlalchemy.engine.Connection",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "set",
                "str",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "configuration",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "return",
            "name": "read_configuration_value",
            "type": []
        }
    ],
    "set_state_id_on_inserted_flow_runs_statement@AioSqliteQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "int",
                "str",
                "list[fonduer.candidates.models.Candidate]"
            ]
        },
        {
            "category": "arg",
            "name": "inserted_flow_run_ids",
            "type": [
                "bool",
                "str",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "insert_flow_run_states",
            "type": [
                "int",
                "dict[int, bool]"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "int",
                "str",
                "list[fonduer.candidates.models.Candidate]"
            ]
        },
        {
            "category": "local",
            "name": "fr_model",
            "type": [
                "typing.Type",
                "bench.models.Onlogn",
                "django.db.models.Manager"
            ]
        },
        {
            "category": "local",
            "name": "frs_model",
            "type": [
                "typing.Type",
                "bench.models.Onlogn",
                "django.db.models.Manager"
            ]
        },
        {
            "category": "local",
            "name": "subquery",
            "type": [
                "int",
                "magic.models.deck.Deck",
                "taxonomy.db.models.period.Period"
            ]
        },
        {
            "category": "local",
            "name": "stmt",
            "type": [
                "int",
                "str",
                "dict[typing.Union[int,str], typing.Union[int,str]]"
            ]
        },
        {
            "category": "return",
            "name": "set_state_id_on_inserted_flow_runs_statement",
            "type": [
                "int",
                "str",
                "dict[typing.Union[int,str], typing.Union[int,str]]"
            ]
        }
    ],
    "set_state_id_on_inserted_flow_runs_statement@AsyncPostgresQueryComponents": [
        {
            "category": "arg",
            "name": "db",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "inserted_flow_run_ids",
            "type": [
                "bool",
                "asyncio.LifoQueue"
            ]
        },
        {
            "category": "arg",
            "name": "insert_flow_run_states",
            "type": [
                "bool",
                "asyncio.LifoQueue"
            ]
        },
        {
            "category": "local",
            "name": "db",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "FlowRun",
            "type": [
                "str",
                "bool",
                "typing.Callable[None, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "FlowRunState",
            "type": [
                "list",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "stmt",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "set_state_id_on_inserted_flow_runs_statement",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        }
    ],
    "set_state_id_on_inserted_flow_runs_statement@BaseQueryComponents": [
        {
            "category": "arg",
            "name": "inserted_flow_run_ids",
            "type": [
                "bool",
                "None",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "insert_flow_run_states",
            "type": [
                "bool",
                "None",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "set_state_id_on_inserted_flow_runs_statement",
            "type": [
                "None"
            ]
        }
    ],
    "unique_key@BaseQueryComponents": [
        {
            "category": "return",
            "name": "unique_key",
            "type": [
                "tuple"
            ]
        }
    ],
    "uses_json_strings@AioSqliteQueryComponents": [
        {
            "category": "return",
            "name": "uses_json_strings",
            "type": [
                "bool"
            ]
        }
    ],
    "uses_json_strings@AsyncPostgresQueryComponents": [
        {
            "category": "return",
            "name": "uses_json_strings",
            "type": [
                "bool"
            ]
        }
    ],
    "uses_json_strings@BaseQueryComponents": [
        {
            "category": "return",
            "name": "uses_json_strings",
            "type": [
                "None"
            ]
        }
    ]
}