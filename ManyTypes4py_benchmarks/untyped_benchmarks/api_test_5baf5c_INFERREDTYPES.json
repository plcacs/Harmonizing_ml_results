{
    "_base_filter@global": [
        {
            "category": "arg",
            "name": "query",
            "type": []
        },
        {
            "category": "return",
            "name": "_base_filter",
            "type": []
        }
    ],
    "global@global": [],
    "test_apply_dynamic_database_filter@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "flask.testing.FlaskClient",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "arg",
            "name": "app",
            "type": [
                "tests._TestServerFactory",
                "bool",
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "tests._TestServerFactory",
                "bool",
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "tests._TestServerFactory",
                "bool",
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "bool",
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "app",
            "type": [
                "tests._TestServerFactory",
                "bool",
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "tests._TestServerFactory",
                "bool",
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "tests._TestServerFactory",
                "bool",
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "flask.testing.FlaskClient",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "local",
            "name": "base_filter_mock",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "expected_db_names",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "actual_db_names",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "test_apply_dynamic_database_filter",
            "type": [
                "None"
            ]
        }
    ],
    "test_catalogs@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "unittesmock.Mock",
                "vico.database.DocumentDatabase"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "set[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseDAO",
            "type": [
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseDAO_",
            "type": [
                "str",
                "unittesmock.Mock",
                "vico.database.DocumentDatabase"
            ]
        },
        {
            "category": "local",
            "name": "security_manager",
            "type": [
                "tests.test_slack.Mock_SlackClient",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "security_manager_",
            "type": [
                "set[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_catalogs",
            "type": [
                "None"
            ]
        }
    ],
    "test_catalogs_with_oauth2@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "dict[str, dict[typing.Any, typing.Any]]",
                "dict[typing.Any, str]",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "OAuth2RedirectError"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseDAO",
            "type": [
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseDAO_",
            "type": [
                "dict[str, dict[typing.Any, typing.Any]]",
                "dict[typing.Any, str]",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "security_manager",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "security_manager_",
            "type": [
                "set[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_catalogs_with_oauth2",
            "type": [
                "None"
            ]
        }
    ],
    "test_columnar_metadata@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "str",
                "base.Connection"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "common.TestingContext"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "str",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "int",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "common.TestingContext"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_columnar_metadata",
            "type": [
                "None"
            ]
        }
    ],
    "test_columnar_metadata_bad_extension@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "int",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "flask.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_columnar_metadata_bad_extension",
            "type": [
                "None"
            ]
        }
    ],
    "test_columnar_metadata_validation@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "str",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "int",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_columnar_metadata_validation",
            "type": [
                "None"
            ]
        }
    ],
    "test_columnar_upload@global": [
        {
            "category": "arg",
            "name": "payload",
            "type": [
                "datetime.datetime",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "upload_called_with",
            "type": [
                "bool",
                "str",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "reader_called_with",
            "type": [
                "unittesmock.Mock",
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "bool",
                "unittesmock.Mock",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "datetime.datetime",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "init_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "init_mock_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "reader_mock",
            "type": [
                "mode.utils.mocks.Mock"
            ]
        },
        {
            "category": "local",
            "name": "reader_mock_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "datetime.datetime",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "payload",
            "type": [
                "datetime.datetime",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "upload_called_with",
            "type": [
                "bool",
                "str",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "reader_called_with",
            "type": [
                "unittesmock.Mock",
                "bool",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_columnar_upload",
            "type": [
                "None"
            ]
        }
    ],
    "test_columnar_upload_file_extension_invalid@global": [
        {
            "category": "arg",
            "name": "filename",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "tests.fixtures.cloud_uploader.Uploader"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "rotkehlchen.api.server.APIServer"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "tests.fixtures.cloud_uploader.Uploader"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "str",
                "tests.fixtures.cloud_uploader.Uploader",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "tests.fixtures.cloud_uploader.Uploader"
            ]
        },
        {
            "category": "local",
            "name": "filename",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "tests.fixtures.cloud_uploader.Uploader"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "flask.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_columnar_upload_file_extension_invalid",
            "type": [
                "None"
            ]
        }
    ],
    "test_columnar_upload_file_extension_valid@global": [
        {
            "category": "arg",
            "name": "filename",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "core_lib.core.repositories.VenueRepository"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "str",
                "tests.fixtures.cloud_uploader.Uploader",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "filename",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_columnar_upload_file_extension_valid",
            "type": [
                "None"
            ]
        }
    ],
    "test_columnar_upload_validation@global": [
        {
            "category": "arg",
            "name": "payload",
            "type": [
                "str",
                "list[str]",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "expected_response",
            "type": [
                "dict",
                "pymap.interfaces.session.SessionInterface",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "set",
                "golem.core.golem_async.AsyncRequest"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "list[str]",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "bool",
                "typing.Callable[typing.Any, None]",
                "typing.Iterable[str]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "list[str]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "payload",
            "type": [
                "str",
                "list[str]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_columnar_upload_validation",
            "type": [
                "None"
            ]
        }
    ],
    "test_csv_metadata@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "neuromation.api.Client",
                "dict",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "flask.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_csv_metadata",
            "type": [
                "None"
            ]
        }
    ],
    "test_csv_metadata_bad_extension@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "neuromation.api.Client",
                "app.utils.models.ModelManager",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "flask.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_csv_metadata_bad_extension",
            "type": [
                "None"
            ]
        }
    ],
    "test_csv_metadata_validation@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "neuromation.api.Client",
                "dict",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "dict[str, str]",
                "flask.wrappers.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_csv_metadata_validation",
            "type": [
                "None"
            ]
        }
    ],
    "test_csv_upload@global": [
        {
            "category": "arg",
            "name": "payload",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "upload_called_with",
            "type": [
                "bool",
                "pytest_mock.MockFixture",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "reader_called_with",
            "type": [
                "unittesmock.Mock",
                "bool",
                "None",
                "Exception"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "bool",
                "dict",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "init_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "init_mock_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "reader_mock",
            "type": [
                "mode.utils.mocks.Mock"
            ]
        },
        {
            "category": "local",
            "name": "reader_mock_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "payload",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "upload_called_with",
            "type": [
                "bool",
                "pytest_mock.MockFixture",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "reader_called_with",
            "type": [
                "unittesmock.Mock",
                "bool",
                "None",
                "Exception"
            ]
        },
        {
            "category": "return",
            "name": "test_csv_upload",
            "type": [
                "None"
            ]
        }
    ],
    "test_csv_upload_file_extension_invalid@global": [
        {
            "category": "arg",
            "name": "filename",
            "type": [
                "str",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "rotkehlchen.api.server.APIServer",
                "application.domain.common.TenantProvider"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "str",
                "tests.fixtures.cloud_uploader.Uploader",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "filename",
            "type": [
                "str",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "flask.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_csv_upload_file_extension_invalid",
            "type": [
                "None"
            ]
        }
    ],
    "test_csv_upload_file_extension_valid@global": [
        {
            "category": "arg",
            "name": "filename",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "core_lib.core.repositories.VenueRepository"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "str",
                "tests.fixtures.cloud_uploader.Uploader",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "filename",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_csv_upload_file_extension_valid",
            "type": [
                "None"
            ]
        }
    ],
    "test_csv_upload_validation@global": [
        {
            "category": "arg",
            "name": "payload",
            "type": [
                "str",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_response",
            "type": [
                "pymap.interfaces.session.SessionInterface",
                "dict",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "list[dict]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "bool",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "payload",
            "type": [
                "str",
                "None",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_csv_upload_validation",
            "type": [
                "None"
            ]
        }
    ],
    "test_database_connection@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "arg",
            "name": "app",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "base.Connection"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "base.Connection"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "sqlalchemy.orm.Session",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "base.Connection"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_database_connection",
            "type": [
                "None"
            ]
        }
    ],
    "test_delete_ssh_tunnel@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "app",
            "type": [
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "base.Connection"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "neuromation.api.Client",
                "base.Connection",
                "neuromation.api.Cluster"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "app",
            "type": [
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "base.Connection"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "sqlalchemy.orm.Session",
                "base.Connection"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "tunnel",
            "type": [
                "SSHTunnel"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "neuromation.api.Client",
                "base.Connection",
                "neuromation.api.Cluster"
            ]
        },
        {
            "category": "local",
            "name": "response_delete_tunnel",
            "type": [
                "str",
                "dict[int, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_delete_ssh_tunnel",
            "type": [
                "None"
            ]
        }
    ],
    "test_delete_ssh_tunnel_not_found@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "app",
            "type": [
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "base.Connection"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "base.Connection",
                "app.utils.models.ModelManager",
                "neuromation.api.Client"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "app",
            "type": [
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "base.Connection"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "sqlalchemy.orm.Session",
                "base.Connection"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "tunnel",
            "type": [
                "SSHTunnel"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "base.Connection",
                "app.utils.models.ModelManager",
                "neuromation.api.Client"
            ]
        },
        {
            "category": "local",
            "name": "response_delete_tunnel",
            "type": [
                "str",
                "dict[int, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_delete_ssh_tunnel_not_found",
            "type": [
                "None"
            ]
        }
    ],
    "test_excel_metadata@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "neuromation.api.Client",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "kata.data.io.network.GithubApi",
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_excel_metadata",
            "type": [
                "None"
            ]
        }
    ],
    "test_excel_metadata_bad_extension@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "neuromation.api.Client",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "flask.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_excel_metadata_bad_extension",
            "type": [
                "None"
            ]
        }
    ],
    "test_excel_metadata_validation@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "neuromation.api.Client",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "kata.data.io.network.GithubApi",
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "starfish.core.spots.FindSpots.trackpy_local_max_peak_finder.TrackpyLocalMaxPeakFinder"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_excel_metadata_validation",
            "type": [
                "None"
            ]
        }
    ],
    "test_excel_upload@global": [
        {
            "category": "arg",
            "name": "payload",
            "type": [
                "int",
                "None",
                "datetime.datetime",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "upload_called_with",
            "type": [
                "bool",
                "mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "reader_called_with",
            "type": [
                "unittesmock.Mock",
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "bool",
                "None",
                "mock.Mock",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "int",
                "None",
                "datetime.datetime",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "init_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "init_mock_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "reader_mock",
            "type": [
                "mode.utils.mocks.Mock"
            ]
        },
        {
            "category": "local",
            "name": "reader_mock_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "int",
                "None",
                "datetime.datetime",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "payload",
            "type": [
                "int",
                "None",
                "datetime.datetime",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "upload_called_with",
            "type": [
                "bool",
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "reader_called_with",
            "type": [
                "unittesmock.Mock",
                "bool",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_excel_upload",
            "type": [
                "None"
            ]
        }
    ],
    "test_excel_upload_file_extension_invalid@global": [
        {
            "category": "arg",
            "name": "filename",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "rotkehlchen.api.server.APIServer",
                "core_lib.core.repositories.VenueRepository"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "str",
                "tests.fixtures.cloud_uploader.Uploader",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "filename",
            "type": [
                "str",
                "None",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_excel_upload_file_extension_invalid",
            "type": [
                "None"
            ]
        }
    ],
    "test_excel_upload_validation@global": [
        {
            "category": "arg",
            "name": "payload",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "expected_response",
            "type": [
                "dict",
                "pymap.interfaces.session.SessionInterface",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "list[dict]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "bool",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "str",
                "unittesmock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "payload",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_excel_upload_validation",
            "type": [
                "None"
            ]
        }
    ],
    "test_filter_by_uuid@global": [
        {
            "category": "arg",
            "name": "session",
            "type": [
                "core.models.MyUser",
                "ultron8.api.models.user.UserInDB",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "str",
                "typing.Callable[..., None]",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "core.models.MyUser",
                "ultron8.api.models.user.UserInDB",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "core.models.MyUser",
                "ultron8.api.models.user.UserInDB",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_filter_by_uuid",
            "type": [
                "None"
            ]
        }
    ],
    "test_non_zip_import@global": [
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "typing.Callable[..., None]",
                "bool",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "buf",
            "type": [
                "BytesIO"
            ]
        },
        {
            "category": "local",
            "name": "form_data",
            "type": [
                "dict[typing.Text, tuple[typing.Union[BytesIO,typing.Text]]]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "flask.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_non_zip_import",
            "type": [
                "None"
            ]
        }
    ],
    "test_oauth2_error@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "core.models.Recipe"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "core.models.Recipe"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_oauth2_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_oauth2_happy_path@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "sqlalchemy.orm.Session",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "local",
            "name": "get_oauth2_token",
            "type": [
                "str",
                "typing.Callable[None,None,None, requests.models.Response]",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "get_oauth2_token_",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "app.utils.models.ModelManager",
                "nanaimo.fixtures.FixtureManager"
            ]
        },
        {
            "category": "local",
            "name": "decode_oauth2_state",
            "type": [
                "str",
                "bytes"
            ]
        },
        {
            "category": "local",
            "name": "decode_oauth2_state_",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "token",
            "type": [
                "str",
                "app.models.RenewToken",
                "app.models.oauth.token.OAuthToken",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_oauth2_happy_path",
            "type": [
                "None"
            ]
        }
    ],
    "test_oauth2_multiple_tokens@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "nanaimo.fixtures.FixtureManager",
                "kata.data.io.network.GithubApi",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "core.models.MyUser"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "core.models.MyUser"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "sqlalchemy.orm.Session",
                "core.models.MyUser"
            ]
        },
        {
            "category": "local",
            "name": "get_oauth2_token",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "get_oauth2_token_",
            "type": [
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "nanaimo.fixtures.FixtureManager",
                "kata.data.io.network.GithubApi",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "local",
            "name": "decode_oauth2_state",
            "type": [
                "str",
                "bytes"
            ]
        },
        {
            "category": "local",
            "name": "decode_oauth2_state_",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "local",
            "name": "tokens",
            "type": [
                "str",
                "app.models.RenewToken"
            ]
        },
        {
            "category": "local",
            "name": "token",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_oauth2_multiple_tokens",
            "type": [
                "None"
            ]
        }
    ],
    "test_password_mask@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.helpers.MockedFetcher"
            ]
        },
        {
            "category": "arg",
            "name": "app",
            "type": [
                "tests._TestServerFactory",
                "neuromation.api.Client"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "tests._TestServerFactory",
                "neuromation.api.Client"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.helpers.MockedFetcher"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_password_mask",
            "type": [
                "None"
            ]
        }
    ],
    "test_post_with_uuid@global": [
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "abilian.core.sqlalchemy.SQLAlchemy"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "tests.clienMDMClient",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "str",
                "typing.Callable[..., None]",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "abilian.core.sqlalchemy.SQLAlchemy"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "tests.clienMDMClient",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "tools.continuous_integration.bazel_test_db.Database",
                "list[str]",
                "vico.database.DocumentDatabase"
            ]
        },
        {
            "category": "return",
            "name": "test_post_with_uuid",
            "type": [
                "None"
            ]
        }
    ],
    "test_schemas@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "dict",
                "unittesmock.Mock",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "set[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "datamodel",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "datamodel_",
            "type": [
                "dict",
                "unittesmock.Mock",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "security_manager",
            "type": [
                "tests.test_slack.Mock_SlackClient",
                "tests.utils.MockCoroutine"
            ]
        },
        {
            "category": "local",
            "name": "security_manager_",
            "type": [
                "set[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_schemas",
            "type": [
                "None"
            ]
        }
    ],
    "test_schemas_with_oauth2@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "unittesmock.Mock",
                "vico.database.DocumentDatabase"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "OAuth2RedirectError"
            ]
        },
        {
            "category": "local",
            "name": "datamodel",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "datamodel_",
            "type": [
                "str",
                "unittesmock.Mock",
                "vico.database.DocumentDatabase"
            ]
        },
        {
            "category": "local",
            "name": "security_manager",
            "type": [
                "tests.test_slack.Mock_SlackClient",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "security_manager_",
            "type": [
                "set[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_schemas_with_oauth2",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_extra_metadata_happy_path@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "supersemodels.core.Database"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_extra_metadata_happy_path",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_extra_metadata_invalid_database@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.helpers.MockedFetcher"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.helpers.MockedFetcher"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_extra_metadata_invalid_database",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_extra_metadata_no_table@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "unittesmock.Mock",
                "str",
                "dict[str, typing.Union[typing.Any,int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_extra_metadata_no_table",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_extra_metadata_slashes@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "nanaimo.fixtures.FixtureManager",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "kata.data.io.network.GithubApi",
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "supersemodels.core.Database"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "nanaimo.fixtures.FixtureManager",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "return",
            "name": "test_table_extra_metadata_slashes",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_extra_metadata_unauthorized@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "unittesmock.Mock",
                "str",
                "dict[str, typing.Union[typing.Any,int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_extra_metadata_unauthorized",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_metadata_happy_path@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "vico.database.DocumentDatabase"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_metadata_happy_path",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_metadata_invalid_database@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.helpers.MockedFetcher"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.helpers.MockedFetcher"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_metadata_invalid_database",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_metadata_no_table@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "unittesmock.Mock",
                "str",
                "dict[str, typing.Union[typing.Any,int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_metadata_no_table",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_metadata_slashes@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "nanaimo.fixtures.FixtureManager",
                "app.utils.models.ModelManager",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "kata.data.io.network.GithubApi",
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "vico.database.DocumentDatabase"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "nanaimo.fixtures.FixtureManager",
                "app.utils.models.ModelManager",
                "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
            ]
        },
        {
            "category": "return",
            "name": "test_table_metadata_slashes",
            "type": [
                "None"
            ]
        }
    ],
    "test_table_metadata_unauthorized@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "unittesmock.Mock",
                "str",
                "dict[str, typing.Union[typing.Any,int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "raiden.api.resAPIServer",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "requests.models.Response"
            ]
        },
        {
            "category": "return",
            "name": "test_table_metadata_unauthorized",
            "type": [
                "None"
            ]
        }
    ],
    "test_update_with_password_mask@global": [
        {
            "category": "arg",
            "name": "app",
            "type": [
                "neuromation.api.Client"
            ]
        },
        {
            "category": "arg",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "ultron8.api.models.user.UserInDB",
                "core.models.MyUser"
            ]
        },
        {
            "category": "arg",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "arg",
            "name": "full_api_access",
            "type": [
                "neuromation.api.Client"
            ]
        },
        {
            "category": "local",
            "name": "session",
            "type": [
                "sqlalchemy.orm.Session",
                "ultron8.api.models.user.UserInDB",
                "core.models.MyUser"
            ]
        },
        {
            "category": "local",
            "name": "DatabaseRestApi_",
            "type": [
                "sqlalchemy.orm.Session",
                "ultron8.api.models.user.UserInDB",
                "core.models.MyUser"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database",
                "vico.database.DocumentDatabase",
                "dict[str, dict[str, typing.Any]]",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "return",
            "name": "test_update_with_password_mask",
            "type": [
                "None"
            ]
        }
    ]
}