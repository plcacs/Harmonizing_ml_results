{
    "global@global": [],
    "metrics@global": [
        {
            "category": "arg",
            "name": "metric",
            "type": [
                "float",
                "typing.Iterable[float]"
            ]
        },
        {
            "category": "local",
            "name": "metric",
            "type": [
                "float",
                "typing.Iterable[float]"
            ]
        },
        {
            "category": "return",
            "name": "metrics",
            "type": [
                "list[typing.Union[float,typing.Iterable[float]]]"
            ]
        }
    ],
    "nodes@global": [
        {
            "category": "arg",
            "name": "metricflow_time_spine_model",
            "type": [
                "float",
                "list[str]",
                "dict[str, \"Outcome\"]"
            ]
        },
        {
            "category": "local",
            "name": "metricflow_time_spine_model",
            "type": [
                "float",
                "list[str]",
                "dict[str, \"Outcome\"]"
            ]
        },
        {
            "category": "return",
            "name": "nodes",
            "type": [
                "list[typing.Union[float,list[str],dict[str, \"Outcome\"]]]"
            ]
        }
    ],
    "semantic_models@global": [
        {
            "category": "arg",
            "name": "semantic_model",
            "type": [
                "list[src.autoks.core.gp_model.GPModel]",
                "typing.AbstractSet"
            ]
        },
        {
            "category": "local",
            "name": "semantic_model",
            "type": [
                "list[src.autoks.core.gp_model.GPModel]",
                "typing.AbstractSet"
            ]
        },
        {
            "category": "return",
            "name": "semantic_models",
            "type": [
                "list[typing.Union[list[src.autoks.core.gp_model.GPModel],typing.AbstractSet]]"
            ]
        }
    ],
    "test_deprecate_cumulative_type_params@TestSemanticManifest": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "str",
                "list[tuple[str]]"
            ]
        },
        {
            "category": "arg",
            "name": "metric_type_params",
            "type": [
                "dict[str, typing.Any]",
                "str",
                "list[tuple[str]]"
            ]
        },
        {
            "category": "arg",
            "name": "num_warns",
            "type": [
                "int",
                "str",
                "dict",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "should_error",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "typing.Callable[typing.Any, str]"
            ]
        },
        {
            "category": "arg",
            "name": "flag_value",
            "type": [
                "bool",
                "str",
                "typing.Mapping",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "flag_value",
            "type": [
                "bool",
                "str",
                "typing.Mapping",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "patched_get_flags_",
            "type": [
                "bool",
                "str",
                "typing.Mapping",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "metric_type_params",
            "type": [
                "dict[str, typing.Any]",
                "str",
                "list[tuple[str]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "str",
                "list[tuple[str]]"
            ]
        },
        {
            "category": "local",
            "name": "sm_manifest",
            "type": [
                "SemanticManifest"
            ]
        },
        {
            "category": "return",
            "name": "test_deprecate_cumulative_type_params",
            "type": [
                "None"
            ]
        }
    ],
    "test_require_yaml_configuration_for_mf_time_spines@TestSemanticManifest": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "int",
                "core._Self"
            ]
        },
        {
            "category": "arg",
            "name": "metricflow_time_spine_model",
            "type": []
        },
        {
            "category": "local",
            "name": "patched_get_flags_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "int",
                "core._Self"
            ]
        },
        {
            "category": "local",
            "name": "sm_manifest",
            "type": [
                "SemanticManifest"
            ]
        },
        {
            "category": "return",
            "name": "test_require_yaml_configuration_for_mf_time_spines",
            "type": [
                "None"
            ]
        }
    ],
    "test_validate@TestSemanticManifest": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dbcontracts.graph.manifesManifest"
            ]
        },
        {
            "category": "local",
            "name": "patched_get_flags_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dbcontracts.graph.manifesManifest"
            ]
        },
        {
            "category": "local",
            "name": "sm_manifest",
            "type": [
                "SemanticManifest"
            ]
        },
        {
            "category": "return",
            "name": "test_validate",
            "type": [
                "None"
            ]
        }
    ]
}