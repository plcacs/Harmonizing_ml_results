{
    "_convert_dttm@global": [
        {
            "category": "arg",
            "name": "target_type",
            "type": []
        },
        {
            "category": "arg",
            "name": "dttm",
            "type": []
        },
        {
            "category": "arg",
            "name": "db_extra",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "_convert_dttm",
            "type": [
                "typing.Text",
                "None"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "VIRTUAL_TABLE_INT_TYPES",
            "type": [
                "dict[typing.Text, ]"
            ]
        },
        {
            "category": "local",
            "name": "VIRTUAL_TABLE_STRING_TYPES",
            "type": [
                "dict[typing.Text, ]"
            ]
        }
    ],
    "test__normalize_prequery_result_type@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "deeplearning.ml4pl.ir.ir_database.Database",
                "list[src.main.core.models.window.Window]",
                "\"PNSqlCursor\"",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "row",
            "type": [
                "int",
                "dict",
                "id3c.db.types.GenomeRecord"
            ]
        },
        {
            "category": "arg",
            "name": "dimension",
            "type": [
                "int",
                "dict",
                "id3c.db.types.GenomeRecord"
            ]
        },
        {
            "category": "arg",
            "name": "result",
            "type": [
                "dict",
                "id3c.db.types.GenomeRecord",
                "core.audio.AudioBackend"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "columns_by_name",
            "type": [
                "dict[typing.Text, TableColumn]"
            ]
        },
        {
            "category": "local",
            "name": "row",
            "type": [
                "int",
                "dict",
                "id3c.db.types.GenomeRecord"
            ]
        },
        {
            "category": "local",
            "name": "dimension",
            "type": [
                "int",
                "dict",
                "id3c.db.types.GenomeRecord"
            ]
        },
        {
            "category": "local",
            "name": "normalized",
            "type": [
                "bool",
                "dict[int, str]",
                "frozenset",
                "TextClause"
            ]
        },
        {
            "category": "return",
            "name": "test__normalize_prequery_result_type",
            "type": [
                "None"
            ]
        }
    ],
    "test__temporal_range_operator_in_adhoc_filter@global": [
        {
            "category": "arg",
            "name": "physical_dataset",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "physical_dataset",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list[tuple[typing.Union[typing.Any,int]]]",
                "list",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test__temporal_range_operator_in_adhoc_filter",
            "type": [
                "None"
            ]
        }
    ],
    "test_adhoc_metrics_and_calc_columns@TestDatabaseModel": [
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],list[dict[typing.Text, typing.Text]],bool]]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_adhoc_metrics_and_calc_columns",
            "type": [
                "None"
            ]
        }
    ],
    "test_boolean_type_where_operators@TestDatabaseModel": [
        {
            "category": "local",
            "name": "table",
            "type": [
                "list",
                "superseconnectors.sqla.models.SqlaTable",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool,list[dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]],dict]]"
            ]
        },
        {
            "category": "local",
            "name": "sqla_query",
            "type": [
                "str",
                "dict",
                "dict[int, None]"
            ]
        },
        {
            "category": "local",
            "name": "sql",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "dialect",
            "type": [
                "str",
                "dict[str, str]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "operand",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_boolean_type_where_operators",
            "type": [
                "None"
            ]
        }
    ],
    "test_db_column_types@TestDatabaseModel": [
        {
            "category": "local",
            "name": "test_cases",
            "type": [
                "dict[typing.Text, ]"
            ]
        },
        {
            "category": "local",
            "name": "tbl",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "col",
            "type": [
                "TableColumn"
            ]
        },
        {
            "category": "return",
            "name": "test_db_column_types",
            "type": [
                "None"
            ]
        }
    ],
    "test_dml_statement_raises_exception@TestDatabaseModel": [
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool]]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[str, typing.Union[None,typing.Any,bool]]",
                "dict[str, str]",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_dml_statement_raises_exception",
            "type": [
                "None"
            ]
        }
    ],
    "test_extra_cache_keys@global": [
        {
            "category": "arg",
            "name": "mock_user_email",
            "type": [
                "str",
                "typing.Callable[..., None]",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "mock_username",
            "type": [
                "str",
                "typing.Callable[..., None]",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "mock_user_id",
            "type": [
                "str",
                "typing.Callable[..., None]",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "table_name",
            "type": [
                "str",
                "models.user.User"
            ]
        },
        {
            "category": "arg",
            "name": "sql",
            "type": [
                "str",
                "models.user.User"
            ]
        },
        {
            "category": "arg",
            "name": "expected_cache_keys",
            "type": [
                "str",
                "set[str]",
                "dict[str, list[str]]"
            ]
        },
        {
            "category": "arg",
            "name": "has_extra_cache_keys",
            "type": [
                "str",
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "table_name",
            "type": [
                "str",
                "models.user.User"
            ]
        },
        {
            "category": "local",
            "name": "sql",
            "type": [
                "str",
                "models.user.User"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool]]"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "str",
                "dict",
                "core.arxiv.submission.domain.meta.Classification",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "extra_cache_keys",
            "type": [
                "set[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_extra_cache_keys",
            "type": [
                "None"
            ]
        }
    ],
    "test_extra_cache_keys_in_adhoc_metrics_and_columns@global": [
        {
            "category": "arg",
            "name": "mock_username",
            "type": [
                "typing.Callable[..., None]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_user_id",
            "type": [
                "typing.Callable[..., None]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "sql_expression",
            "type": [
                "str",
                "dict",
                "tuple[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_cache_keys",
            "type": [
                "str",
                "tests.helpers.MockedFetcher",
                "bytes"
            ]
        },
        {
            "category": "arg",
            "name": "has_extra_cache_keys",
            "type": [
                "str",
                "tests.helpers.MockedFetcher",
                "bytes"
            ]
        },
        {
            "category": "arg",
            "name": "item_type",
            "type": [
                "str",
                "dict",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list,bool]]"
            ]
        },
        {
            "category": "local",
            "name": "item_type",
            "type": [
                "str",
                "dict",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "sql_expression",
            "type": [
                "str",
                "dict",
                "tuple[str]"
            ]
        },
        {
            "category": "local",
            "name": "items",
            "type": [
                "dict[typing.Union[str,dict,tuple[str]], list[dict[typing.Text, typing.Union[None,typing.Text,dict,tuple[str]]]]]"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[dict[typing.Text, typing.Union[None,list,bool]], dict[typing.Union[str,dict,tuple[str]], list[dict[typing.Text, typing.Union[None,typing.Text,dict,tuple[str]]]]]]"
            ]
        },
        {
            "category": "local",
            "name": "extra_cache_keys",
            "type": [
                "str",
                "list[str]",
                "set[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_extra_cache_keys_in_adhoc_metrics_and_columns",
            "type": [
                "None"
            ]
        }
    ],
    "test_extra_cache_keys_in_dataset_metrics_and_columns@global": [
        {
            "category": "arg",
            "name": "mock_username",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_user_id",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool]]"
            ]
        },
        {
            "category": "local",
            "name": "extra_cache_keys",
            "type": [
                "list[str]",
                "set[str]",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_extra_cache_keys_in_dataset_metrics_and_columns",
            "type": [
                "None"
            ]
        }
    ],
    "test_extra_cache_keys_in_sql_expression@global": [
        {
            "category": "arg",
            "name": "mock_user_email",
            "type": [
                "str",
                "bytes",
                "typing.Final"
            ]
        },
        {
            "category": "arg",
            "name": "mock_username",
            "type": [
                "str",
                "bytes",
                "typing.Final"
            ]
        },
        {
            "category": "arg",
            "name": "mock_user_id",
            "type": [
                "str",
                "bytes",
                "typing.Final"
            ]
        },
        {
            "category": "arg",
            "name": "sql_expression",
            "type": [
                "str",
                "core_lib.core.models.Venue",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_cache_keys",
            "type": [
                "str",
                "core_lib.core.models.Venue",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "has_extra_cache_keys",
            "type": [
                "str",
                "core_lib.core.models.Venue",
                "tests.clienMDMClient"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool]]"
            ]
        },
        {
            "category": "local",
            "name": "sql_expression",
            "type": [
                "str",
                "core_lib.core.models.Venue",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[str, typing.Union[None,typing.Any,bool]]",
                "core.arxiv.submission.domain.evenversioning._base.EventData",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "extra_cache_keys",
            "type": [
                "str",
                "list[str]",
                "set[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_extra_cache_keys_in_sql_expression",
            "type": [
                "None"
            ]
        }
    ],
    "test_fetch_metadata_for_updated_virtual_table@TestDatabaseModel": [
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "cols",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_fetch_metadata_for_updated_virtual_table",
            "type": [
                "None"
            ]
        }
    ],
    "test_filter_on_text_column@global": [
        {
            "category": "arg",
            "name": "text_column_table",
            "type": [
                "dict[str, typing.Sequence[str]]",
                "dict[str, typing.Sequence[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "text_column_table",
            "type": [
                "dict[str, typing.Sequence[str]]",
                "dict[str, typing.Sequence[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "dict[str, typing.Sequence[str]]",
                "dict[str, typing.Sequence[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "result_object",
            "type": [
                "list",
                "list[posts.models.FriendGroupMember]",
                "tagdir.models.Entity",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_filter_on_text_column",
            "type": [
                "None"
            ]
        }
    ],
    "test_incorrect_jinja_syntax_raises_correct_exception@TestDatabaseModel": [
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool,dict]]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_incorrect_jinja_syntax_raises_correct_exception",
            "type": [
                "None"
            ]
        }
    ],
    "test_is_time_druid_time_col@TestDatabaseModel": [
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "tbl",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "col",
            "type": [
                "TableColumn"
            ]
        },
        {
            "category": "return",
            "name": "test_is_time_druid_time_col",
            "type": [
                "None"
            ]
        }
    ],
    "test_jinja_metric_macro@TestDatabaseModel": [
        {
            "category": "arg",
            "name": "mock_dataset_id_from_context",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "set",
                "dict[str, list[str]]",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "metric",
            "type": [
                "SqlMetric"
            ]
        },
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[dict[typing.Text, typing.Union[bool,typing.Text]]],bool,dict[typing.Text, typing.Text]]]"
            ]
        },
        {
            "category": "local",
            "name": "sqla_query",
            "type": [
                "str",
                "None",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "list[str]",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "metric_label",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_jinja_metric_macro",
            "type": [
                "None"
            ]
        }
    ],
    "test_jinja_metrics_and_calc_columns@TestDatabaseModel": [
        {
            "category": "arg",
            "name": "mock_username",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Union[typing.Text,dict[typing.Text, typing.Union[bool,typing.Text]]]],bool,dict[typing.Text, typing.Text]]]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "sqla_query",
            "type": [
                "str",
                "None",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "str",
                "list[str]",
                "typing.Type"
            ]
        },
        {
            "category": "return",
            "name": "test_jinja_metrics_and_calc_columns",
            "type": [
                "None"
            ]
        }
    ],
    "test_labels_expected_on_mutated_query@TestDatabaseModel": [
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]],bool,dict]]"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "sqlaq",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "pandas-master.pandas.tests.io.test_common.CustomFSPath"
            ]
        },
        {
            "category": "local",
            "name": "sql",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_labels_expected_on_mutated_query",
            "type": [
                "None"
            ]
        }
    ],
    "test_multiple_sql_statements_raises_exception@TestDatabaseModel": [
        {
            "category": "local",
            "name": "base_query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool]]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[str, typing.Union[None,typing.Any,bool]]",
                "dict[str, str]",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_multiple_sql_statements_raises_exception",
            "type": [
                "None"
            ]
        }
    ],
    "test_none_operand_in_filter@global": [
        {
            "category": "arg",
            "name": "login_as_admin",
            "type": [
                "grouper.models.service_accounServiceAccount",
                "bool",
                "sqlalchemy.orm.scoping.scoped_session"
            ]
        },
        {
            "category": "arg",
            "name": "physical_dataset",
            "type": [
                "sqlalchemy.orm.Session",
                "str",
                "None",
                "google.cloud.bigquery.job.LoadJob"
            ]
        },
        {
            "category": "local",
            "name": "expected_results",
            "type": [
                "list[dict[typing.Text, typing.Union[int,typing.Text]]]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "physical_dataset",
            "type": [
                "sqlalchemy.orm.Session",
                "str",
                "None",
                "google.cloud.bigquery.job.LoadJob"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "set",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_none_operand_in_filter",
            "type": [
                "None"
            ]
        }
    ],
    "test_query_format_strip_trailing_semicolon@TestDatabaseModel": [
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool,dict]]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "sqlaq",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "multinedb.models.table.Table"
            ]
        },
        {
            "category": "local",
            "name": "sql",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_query_format_strip_trailing_semicolon",
            "type": [
                "None"
            ]
        }
    ],
    "test_should_generate_closed_and_open_time_filter_range@global": [
        {
            "category": "arg",
            "name": "login_as_admin",
            "type": [
                "flask.testing.FlaskClient",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "result_object",
            "type": [
                "list[aw_core.models.Event]",
                "flask.blueprints.Blueprint",
                "set[tuple[int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_should_generate_closed_and_open_time_filter_range",
            "type": [
                "None"
            ]
        }
    ],
    "test_temporal_varchar@TestDatabaseModel": [
        {
            "category": "local",
            "name": "database",
            "type": [
                "vico.database.DocumentDatabase",
                "peewee.Database",
                "itsim.datastore.database.DatabaseSQLite"
            ]
        },
        {
            "category": "local",
            "name": "tbl",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "col",
            "type": [
                "TableColumn"
            ]
        },
        {
            "category": "local",
            "name": "col_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_temporal_varchar",
            "type": [
                "None"
            ]
        }
    ],
    "test_values_for_column_on_text_column@global": [
        {
            "category": "arg",
            "name": "text_column_table",
            "type": [
                "list[str]",
                "zam_repondeur.models.Lecture",
                "models.Name"
            ]
        },
        {
            "category": "local",
            "name": "text_column_table",
            "type": [
                "list[str]",
                "zam_repondeur.models.Lecture",
                "models.Name"
            ]
        },
        {
            "category": "local",
            "name": "with_null",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_values_for_column_on_text_column",
            "type": [
                "None"
            ]
        }
    ],
    "test_values_for_column_on_text_column_with_rls@global": [
        {
            "category": "arg",
            "name": "text_column_table",
            "type": [
                "str",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "text_column_table",
            "type": [
                "str",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "with_rls",
            "type": [
                "str",
                "int",
                "typing.Callable[None, bool]"
            ]
        },
        {
            "category": "return",
            "name": "test_values_for_column_on_text_column_with_rls",
            "type": [
                "None"
            ]
        }
    ],
    "test_values_for_column_on_text_column_with_rls_no_values@global": [
        {
            "category": "arg",
            "name": "text_column_table",
            "type": [
                "dict[str, typing.Sequence[str]]",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "text_column_table",
            "type": [
                "dict[str, typing.Sequence[str]]",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "with_rls",
            "type": [
                "str",
                "int",
                "typing.Callable[None, bool]"
            ]
        },
        {
            "category": "return",
            "name": "test_values_for_column_on_text_column_with_rls_no_values",
            "type": [
                "None"
            ]
        }
    ],
    "test_where_operators@TestDatabaseModel": [
        {
            "category": "local",
            "name": "filters",
            "type": [
                "tuple[FilterTestCase]"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "list",
                "superseconnectors.sqla.models.SqlaTable",
                "multinedb.models.table.Table"
            ]
        },
        {
            "category": "local",
            "name": "filter_",
            "type": [
                "FilterTestCase"
            ]
        },
        {
            "category": "local",
            "name": "filter__",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "query_obj",
            "type": [
                "dict[typing.Text, typing.Union[None,list[typing.Text],bool,list[dict[typing.Text, ]],dict]]"
            ]
        },
        {
            "category": "local",
            "name": "sqla_query",
            "type": [
                "str",
                "dict",
                "dict[int, None]"
            ]
        },
        {
            "category": "local",
            "name": "sql",
            "type": [
                "str",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test_where_operators",
            "type": [
                "None"
            ]
        }
    ],
    "text_column_table@global": [
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "text_column_table",
            "type": [
                "SqlaTable"
            ]
        }
    ]
}