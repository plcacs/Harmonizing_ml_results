{
    "global@global": [],
    "mock_increment_concurrency_slots@global": [
        {
            "category": "arg",
            "name": "monkeypatch",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "monkeypatch",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "mock_increment_concurrency_slots",
            "type": [
                "None"
            ]
        }
    ],
    "mocked_increment_concurrency_slots@global": [
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Response"
            ]
        },
        {
            "category": "return",
            "name": "mocked_increment_concurrency_slots",
            "type": [
                "None"
            ]
        }
    ],
    "my_flow@global": [
        {
            "category": "return",
            "name": "my_flow",
            "type": [
                "None"
            ]
        }
    ],
    "resource_heavy@global": [
        {
            "category": "local",
            "name": "executed",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "resource_heavy",
            "type": [
                "None"
            ]
        }
    ],
    "test_concurrency_can_be_used_while_event_loop_is_running@global": [
        {
            "category": "arg",
            "name": "concurrency_limit",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "executed",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "task_run_id",
            "type": [
                "UUID"
            ]
        },
        {
            "category": "return",
            "name": "test_concurrency_can_be_used_while_event_loop_is_running",
            "type": [
                "None"
            ]
        }
    ],
    "test_concurrency_can_be_used_within_a_flow@global": [
        {
            "category": "arg",
            "name": "concurrency_limit",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "executed",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "task_run_id",
            "type": [
                "UUID"
            ]
        },
        {
            "category": "return",
            "name": "test_concurrency_can_be_used_within_a_flow",
            "type": [
                "None"
            ]
        }
    ],
    "test_concurrency_emits_events@global": [
        {
            "category": "arg",
            "name": "v1_concurrency_limit",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "other_v1_concurrency_limit",
            "type": [
                "str",
                "list[dict]",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "asserting_events_worker",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_should_emit_events",
            "type": [
                "bool",
                "collections.abc.AsyncGenerator"
            ]
        },
        {
            "category": "arg",
            "name": "reset_worker_events",
            "type": [
                "bool",
                "collections.abc.AsyncGenerator"
            ]
        },
        {
            "category": "local",
            "name": "task_run_id",
            "type": [
                "UUID"
            ]
        },
        {
            "category": "local",
            "name": "phase",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_concurrency_emits_events",
            "type": [
                "None"
            ]
        }
    ],
    "test_concurrency_orchestrates_api@global": [
        {
            "category": "arg",
            "name": "concurrency_limit",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "executed",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "task_run_id",
            "type": [
                "UUID"
            ]
        },
        {
            "category": "return",
            "name": "test_concurrency_orchestrates_api",
            "type": [
                "None"
            ]
        }
    ],
    "test_concurrency_respects_timeout@global": [
        {
            "category": "local",
            "name": "task_run_id",
            "type": [
                "UUID"
            ]
        },
        {
            "category": "return",
            "name": "test_concurrency_respects_timeout",
            "type": [
                "None"
            ]
        }
    ],
    "test_concurrency_without_limit_names_sync@global": [
        {
            "category": "arg",
            "name": "names",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "executed",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "task_run_id",
            "type": [
                "UUID"
            ]
        },
        {
            "category": "return",
            "name": "test_concurrency_without_limit_names_sync",
            "type": [
                "None"
            ]
        }
    ]
}