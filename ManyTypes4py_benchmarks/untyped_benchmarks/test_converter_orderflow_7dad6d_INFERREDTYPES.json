{
    "candles@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "candles",
            "type": [
                "str",
                "bool",
                "None"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "BIN_SIZE_SCALE",
            "type": [
                "float",
                "int",
                "list"
            ]
        }
    ],
    "populate_dataframe_with_trades_dataframe@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": []
        },
        {
            "category": "return",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": []
        }
    ],
    "populate_dataframe_with_trades_trades@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": []
        },
        {
            "category": "return",
            "name": "populate_dataframe_with_trades_trades",
            "type": []
        }
    ],
    "public_trades_list@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "testdatadir",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "public_trades_list",
            "type": [
                "str",
                "list[str]",
                "typing.Iterator"
            ]
        }
    ],
    "public_trades_list_simple@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": []
        },
        {
            "category": "return",
            "name": "public_trades_list_simple",
            "type": []
        }
    ],
    "read_csv@global": [
        {
            "category": "arg",
            "name": "filename",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "converter_columns",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "filename",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "col",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "read_csv",
            "type": []
        }
    ],
    "test_analyze_with_orderflow@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "bool",
                "typing.Mapping",
                "dict[str, pandas.DataFrame]"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "set[str]",
                "dict",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "dict",
                "bool",
                "dict[str, pandas.DataFrame]"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "set[str]",
                "dict",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history",
            "type": [
                "set[str]",
                "dict",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "strategy",
            "type": [
                "StrategyTestV3"
            ]
        },
        {
            "category": "local",
            "name": "strategy_",
            "type": [
                "DataProvider"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "dict",
                "bool",
                "dict[str, pandas.DataFrame]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "bool",
                "typing.Mapping",
                "dict[str, pandas.DataFrame]"
            ]
        },
        {
            "category": "local",
            "name": "pair",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "df",
            "type": [
                "list",
                "list[str]",
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "df1",
            "type": [
                "list",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "df2",
            "type": [
                "list",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_analyze_with_orderflow",
            "type": [
                "None"
            ]
        }
    ],
    "test_public_trades_binned_big_sample_list@global": [
        {
            "category": "arg",
            "name": "public_trades_list",
            "type": [
                "list[dict[str, typing.Any]]",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "BIN_SIZE_SCALE",
            "type": [
                "float",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "typing.Type",
                "list[dict[str, typing.Any]]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "df",
            "type": [
                "pandas.DataFrame",
                "list",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_public_trades_binned_big_sample_list",
            "type": [
                "None"
            ]
        }
    ],
    "test_public_trades_columns_before_change@global": [
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "pandas.DataFrame",
                "decksite.data.competition.Competition"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "pandas.DataFrame",
                "typing.TextIO",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_public_trades_columns_before_change",
            "type": [
                "None"
            ]
        }
    ],
    "test_public_trades_config_max_trades@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "decksite.data.models.person.Person",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "dataframe",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "decksite.data.models.person.Person",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "orderflow_config",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[int,float]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_public_trades_config_max_trades",
            "type": [
                "None"
            ]
        }
    ],
    "test_public_trades_mock_populate_dataframe_with_trades__check_orderflow@global": [
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "pandas.DataFrame",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "dataframe",
            "type": [
                "pandas.DataFrame",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "pandas.DataFrame",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[int,float]]]]"
            ]
        },
        {
            "category": "local",
            "name": "df",
            "type": [
                "pandas.DataFrame",
                "pandas.Series",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "_",
            "type": [
                "list[str]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "of_values",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "of_values1",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "test_public_trades_mock_populate_dataframe_with_trades__check_orderflow",
            "type": [
                "None"
            ]
        }
    ],
    "test_public_trades_put_volume_profile_into_ohlcv_candles@global": [
        {
            "category": "arg",
            "name": "public_trades_list_simple",
            "type": [
                "dict",
                "dict[str, str]",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "candles",
            "type": [
                "typing.Deque",
                "list[tuple[str]]",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "trades_df",
            "type": [
                "int",
                "list",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "BIN_SIZE_SCALE",
            "type": [
                "int",
                "float",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "df",
            "type": [
                "pandas.DataFrame",
                "pandas.Series",
                "list[tuple[typing.Union[int,float]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_public_trades_put_volume_profile_into_ohlcv_candles",
            "type": [
                "None"
            ]
        }
    ],
    "test_public_trades_testdata_sanity@global": [
        {
            "category": "arg",
            "name": "candles",
            "type": [
                "bool",
                "list",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "public_trades_list",
            "type": [
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "public_trades_list_simple",
            "type": [
                "bool",
                "list[bytes]"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "list[dict]",
                "None",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "bool",
                "list[dict]",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_public_trades_testdata_sanity",
            "type": [
                "None"
            ]
        }
    ],
    "test_public_trades_trades_mock_populate_dataframe_with_trades__check_trades@global": [
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "arg",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "pandas.DataFrame",
                "list[int]",
                "dict[str, int]"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_dataframe",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "dataframe",
            "type": [
                "pandas.DataFrame",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "populate_dataframe_with_trades_trades",
            "type": [
                "pandas.DataFrame",
                "list[int]",
                "dict[str, int]"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "list[int]",
                "dict[str, int]"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[int,float]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_public_trades_trades_mock_populate_dataframe_with_trades__check_trades",
            "type": [
                "None"
            ]
        }
    ],
    "test_stacked_imbalances_multiple_prices@global": [
        {
            "category": "return",
            "name": "test_stacked_imbalances_multiple_prices",
            "type": [
                "None"
            ]
        }
    ],
    "test_timeframe_to_DateOffset@global": [
        {
            "category": "return",
            "name": "test_timeframe_to_DateOffset",
            "type": [
                "None"
            ]
        }
    ]
}