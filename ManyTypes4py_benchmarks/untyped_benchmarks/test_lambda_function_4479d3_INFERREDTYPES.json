{
    "_get_lambda_client@global": [
        {
            "category": "return",
            "name": "_get_lambda_client",
            "type": []
        }
    ],
    "add_lambda_version@global": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": []
        },
        {
            "category": "arg",
            "name": "lambda_mock",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mock_lambda_code_v2",
            "type": [
                "str",
                "typing.TextIO"
            ]
        },
        {
            "category": "local",
            "name": "lambda_mock",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mock_lambda_code_v2",
            "type": [
                "str",
                "typing.TextIO"
            ]
        },
        {
            "category": "local",
            "name": "r2",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "add_lambda_version",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "LAMBDA_TEST_CODE",
            "type": [
                "str",
                "dict[str, list[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "LAMBDA_TEST_CODE_V2",
            "type": [
                "str",
                "int"
            ]
        }
    ],
    "handler_a@global": [
        {
            "category": "arg",
            "name": "event",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "context",
            "type": [
                "dict",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "event",
            "type": [
                "dict",
                "list",
                "dict[str, typing.Any]",
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "return",
            "name": "handler_a",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        }
    ],
    "handler_b@global": [
        {
            "category": "arg",
            "name": "event",
            "type": [
                "dict",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "context",
            "type": [
                "dict",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "event",
            "type": [
                "dict[typing.Text, list[int]]"
            ]
        },
        {
            "category": "return",
            "name": "handler_b",
            "type": [
                "dict[typing.Text, list[int]]"
            ]
        }
    ],
    "iam_mock@global": [
        {
            "category": "arg",
            "name": "aws_credentials",
            "type": [
                "str",
                "dict",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "aws_credentials",
            "type": [
                "str",
                "dict",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "iam_mock",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "invoke@global": [
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "invoke",
            "type": []
        }
    ],
    "lambda_function@global": [
        {
            "category": "arg",
            "name": "aws_credentials",
            "type": [
                "str",
                "dict",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "aws_credentials",
            "type": [
                "str",
                "dict",
                "typing.Mapping"
            ]
        },
        {
            "category": "return",
            "name": "lambda_function",
            "type": [
                "LambdaFunction"
            ]
        }
    ],
    "lambda_mock@global": [
        {
            "category": "arg",
            "name": "aws_credentials",
            "type": [
                "str",
                "dict",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "aws_credentials",
            "type": [
                "str",
                "dict",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "lambda_mock",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "make_patched_invocation@global": [
        {
            "category": "arg",
            "name": "client",
            "type": []
        },
        {
            "category": "arg",
            "name": "handler",
            "type": []
        },
        {
            "category": "return",
            "name": "make_patched_invocation",
            "type": []
        }
    ],
    "mock_iam_rule@global": [
        {
            "category": "arg",
            "name": "iam_mock",
            "type": []
        },
        {
            "category": "return",
            "name": "mock_iam_rule",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "mock_invoke_base@global": [
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "monkeypatch",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "monkeypatch",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "mock_invoke_base",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "mock_invoke_updated@global": [
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "monkeypatch",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "client",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "monkeypatch",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "mock_invoke_updated",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "mock_lambda_code@global": [
        {
            "category": "local",
            "name": "LAMBDA_TEST_CODE",
            "type": [
                "str",
                "dict[str, list[typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "mock_lambda_code",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "mock_lambda_code_v2@global": [
        {
            "category": "local",
            "name": "LAMBDA_TEST_CODE_V2",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "mock_lambda_code_v2",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "mock_lambda_function@global": [
        {
            "category": "arg",
            "name": "lambda_mock",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mock_iam_rule",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_lambda_code",
            "type": [
                "int",
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "lambda_mock",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mock_iam_rule",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_lambda_code",
            "type": [
                "int",
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "r2",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "mock_lambda_function",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "test_ainvoke_lambda_client_context@TestLambdaFunctionAsync": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_ainvoke_lambda_client_context",
            "type": [
                "None"
            ]
        }
    ],
    "test_ainvoke_lambda_explicit@TestLambdaFunctionAsync": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "typing.Callable",
                "bool",
                "None",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable",
                "bool",
                "None",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "typing.Callable",
                "bool",
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "dict",
                "tuple[typing.Union[str,list[typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_ainvoke_lambda_explicit",
            "type": [
                "None"
            ]
        }
    ],
    "test_ainvoke_lambda_payloads@TestLambdaFunctionAsync": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": []
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": []
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "dict",
                "str",
                "tuple[typing.Union[str,list[typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_ainvoke_lambda_payloads",
            "type": [
                "None"
            ]
        }
    ],
    "test_ainvoke_lambda_qualifier_base_version@TestLambdaFunctionAsync": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": []
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable[dict, None]"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": []
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable[dict, None]"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "dict",
                "tuple[typing.Union[str,list[typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_ainvoke_lambda_qualifier_base_version",
            "type": [
                "None"
            ]
        }
    ],
    "test_ainvoke_lambda_qualifier_updated_version@TestLambdaFunctionAsync": [
        {
            "category": "arg",
            "name": "add_lambda_version",
            "type": []
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_updated",
            "type": [
                "collections.abc.Awaitable[typing.Any]",
                "typing.Callable[int, None]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "dict",
                "tuple[typing.Union[str,list[typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_ainvoke_lambda_qualifier_updated_version",
            "type": [
                "None"
            ]
        }
    ],
    "test_ainvoke_lambda_tail@TestLambdaFunctionAsync": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "dict[str, typing.Union[int,str]]",
                "typing.Callable",
                "dict[str, dict]"
            ]
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "int",
                "None",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "dict[str, typing.Union[int,str]]",
                "typing.Callable",
                "dict[str, dict]"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "int",
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "tuple[typing.Union[str,list[typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_ainvoke_lambda_tail",
            "type": [
                "None"
            ]
        }
    ],
    "test_flow@TestLambdaFunction": [
        {
            "category": "return",
            "name": "test_flow",
            "type": []
        }
    ],
    "test_flow@TestLambdaFunctionAsync": [
        {
            "category": "return",
            "name": "test_flow",
            "type": []
        }
    ],
    "test_init@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "aws_credentials",
            "type": [
                "str",
                "google.oauth2.credentials.Credentials"
            ]
        },
        {
            "category": "local",
            "name": "aws_credentials",
            "type": [
                "str",
                "google.oauth2.credentials.Credentials"
            ]
        },
        {
            "category": "local",
            "name": "function",
            "type": [
                "LambdaFunction"
            ]
        },
        {
            "category": "return",
            "name": "test_init",
            "type": [
                "None"
            ]
        }
    ],
    "test_invoke_lambda_async_dispatch@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "typing.Callable",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "typing.Callable",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "dict",
                "tuple[typing.Union[str,list[typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_invoke_lambda_async_dispatch",
            "type": [
                "None"
            ]
        }
    ],
    "test_invoke_lambda_client_context@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_invoke_lambda_client_context",
            "type": [
                "None"
            ]
        }
    ],
    "test_invoke_lambda_force_sync@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "test_invoke_lambda_force_sync",
            "type": [
                "None"
            ]
        }
    ],
    "test_invoke_lambda_payloads@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "payload",
            "type": [
                "str",
                "typing.Callable",
                "Exception"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "str",
                "typing.Callable",
                "Exception"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "str",
                "typing.Callable",
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "payload",
            "type": [
                "str",
                "typing.Callable",
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, str]",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "return",
            "name": "test_invoke_lambda_payloads",
            "type": [
                "None"
            ]
        }
    ],
    "test_invoke_lambda_qualifier_base_version@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": []
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": []
        },
        {
            "category": "return",
            "name": "test_invoke_lambda_qualifier_base_version",
            "type": [
                "None"
            ]
        }
    ],
    "test_invoke_lambda_qualifier_updated_version@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "add_lambda_version",
            "type": []
        },
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_updated",
            "type": [
                "typing.Callable",
                "collections.abc.Awaitable[typing.Any]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_invoke_lambda_qualifier_updated_version",
            "type": [
                "None"
            ]
        }
    ],
    "test_invoke_lambda_tail@TestLambdaFunction": [
        {
            "category": "arg",
            "name": "lambda_function",
            "type": [
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_lambda_function",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_invoke_base",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "lambda_function",
            "type": [
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "response_payload",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "return",
            "name": "test_invoke_lambda_tail",
            "type": [
                "None"
            ]
        }
    ]
}