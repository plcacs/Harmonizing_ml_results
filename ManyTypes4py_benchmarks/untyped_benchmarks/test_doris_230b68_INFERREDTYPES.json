{
    "global@global": [],
    "test_adjust_engine_params@global": [
        {
            "category": "arg",
            "name": "sqlalchemy_uri",
            "type": [
                "list[str]",
                "str",
                "django.db.models.QuerySet"
            ]
        },
        {
            "category": "arg",
            "name": "connect_args",
            "type": [
                "str",
                "list[str]",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "return_schema",
            "type": [
                "str",
                "bool",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "return_connect_args",
            "type": [
                "bool",
                "list[str]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "sqlalchemy_uri",
            "type": [
                "list[str]",
                "str",
                "django.db.models.QuerySet"
            ]
        },
        {
            "category": "local",
            "name": "url",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "connect_args",
            "type": [
                "str",
                "list[str]",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_adjust_engine_params",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_catalog_names@global": [
        {
            "category": "arg",
            "name": "mock_catalogs",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "unittesmock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict[str, int]"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "inspector",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_catalogs",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "inspector_",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_get_catalog_names",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_column_spec@global": [
        {
            "category": "arg",
            "name": "native_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "sqla_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "attrs",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "generic_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "is_dttm",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "native_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "sqla_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "attrs",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "generic_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "is_dttm",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "return",
            "name": "test_get_column_spec",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_default_catalog@global": [
        {
            "category": "arg",
            "name": "database_value",
            "type": [
                "sqlalchemy.orm.Session",
                "pymongo.database.Database"
            ]
        },
        {
            "category": "arg",
            "name": "expected_catalog",
            "type": [
                "deeplearning.ml4pl.ir.ir_database.Database",
                "sqlalchemy.engine.Engine",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "database_value",
            "type": [
                "sqlalchemy.orm.Session",
                "pymongo.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "sqlalchemy.orm.Session",
                "pymongo.database.Database"
            ]
        },
        {
            "category": "return",
            "name": "test_get_default_catalog",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_schema_from_engine_params@global": [
        {
            "category": "arg",
            "name": "url",
            "type": [
                "str",
                "dict[str, dict[str, str]]",
                "types.SchemaTypeOrStr"
            ]
        },
        {
            "category": "arg",
            "name": "expected_schema",
            "type": [
                "str",
                "dict[str, dict[str, str]]",
                "types.SchemaTypeOrStr"
            ]
        },
        {
            "category": "return",
            "name": "test_get_schema_from_engine_params",
            "type": [
                "None"
            ]
        }
    ]
}