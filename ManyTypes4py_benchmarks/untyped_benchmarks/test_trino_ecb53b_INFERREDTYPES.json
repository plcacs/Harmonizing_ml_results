{
    "_assert_columns_equal@global": [
        {
            "category": "arg",
            "name": "actual_cols",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_cols",
            "type": [
                "set[bytes]",
                "tuple[typing.Union[int,str]]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "actual_cols",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "expected_cols",
            "type": [
                "set[bytes]",
                "tuple[typing.Union[int,str]]",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "_assert_columns_equal",
            "type": [
                "None"
            ]
        }
    ],
    "_mock_execute@global": [
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "_mock_execute",
            "type": [
                "None"
            ]
        }
    ],
    "global@global": [],
    "oauth2_config@global": [
        {
            "category": "return",
            "name": "oauth2_config",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        }
    ],
    "test_adjust_engine_params_catalog_only@global": [
        {
            "category": "local",
            "name": "url",
            "type": [
                "str",
                "dict[str, str]",
                "caches.core.CacheURL"
            ]
        },
        {
            "category": "return",
            "name": "test_adjust_engine_params_catalog_only",
            "type": [
                "None"
            ]
        }
    ],
    "test_adjust_engine_params_fully_qualified@global": [
        {
            "category": "local",
            "name": "url",
            "type": [
                "str",
                "dict[str, str]",
                "caches.core.CacheURL"
            ]
        },
        {
            "category": "return",
            "name": "test_adjust_engine_params_fully_qualified",
            "type": [
                "None"
            ]
        }
    ],
    "test_auth_basic@global": [
        {
            "category": "arg",
            "name": "mock_auth",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "auth_params",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "params",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "connect_args",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_auth",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_auth_basic",
            "type": [
                "None"
            ]
        }
    ],
    "test_auth_certificate@global": [
        {
            "category": "arg",
            "name": "mock_auth",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "auth_params",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "params",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "connect_args",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_auth",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_auth_certificate",
            "type": [
                "None"
            ]
        }
    ],
    "test_auth_custom_auth@global": [
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "auth_class",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "auth_method",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "auth_params",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "params",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "connect_args",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_auth_custom_auth",
            "type": [
                "None"
            ]
        }
    ],
    "test_auth_custom_auth_denied@global": [
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "auth_method",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "auth_params",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "superset_",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_auth_custom_auth_denied",
            "type": [
                "None"
            ]
        }
    ],
    "test_auth_jwt@global": [
        {
            "category": "arg",
            "name": "mock_auth",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "auth_params",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "params",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "connect_args",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_auth",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_auth_jwt",
            "type": [
                "None"
            ]
        }
    ],
    "test_auth_kerberos@global": [
        {
            "category": "arg",
            "name": "mock_auth",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "auth_params",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]"
            ]
        },
        {
            "category": "local",
            "name": "params",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "connect_args",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_auth",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_auth_kerberos",
            "type": [
                "None"
            ]
        }
    ],
    "test_cancel_query_failed@global": [
        {
            "category": "arg",
            "name": "engine_mock",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "Query"
            ]
        },
        {
            "category": "local",
            "name": "cursor_mock",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock",
                "tests.utils.MockCoroutine"
            ]
        },
        {
            "category": "return",
            "name": "test_cancel_query_failed",
            "type": [
                "None"
            ]
        }
    ],
    "test_cancel_query_success@global": [
        {
            "category": "arg",
            "name": "engine_mock",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "Query"
            ]
        },
        {
            "category": "return",
            "name": "test_cancel_query_success",
            "type": [
                "None"
            ]
        }
    ],
    "test_convert_dttm@global": [
        {
            "category": "arg",
            "name": "target_type",
            "type": [
                "str",
                "bool",
                "dict[int, str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "str",
                "bool",
                "dict[int, str]"
            ]
        },
        {
            "category": "arg",
            "name": "dttm",
            "type": [
                "str",
                "bool",
                "dict[int, str]"
            ]
        },
        {
            "category": "local",
            "name": "target_type",
            "type": [
                "str",
                "bool",
                "dict[int, str]"
            ]
        },
        {
            "category": "local",
            "name": "expected_result",
            "type": [
                "str",
                "bool",
                "dict[int, str]"
            ]
        },
        {
            "category": "local",
            "name": "dttm",
            "type": [
                "str",
                "bool",
                "dict[int, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_convert_dttm",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_with_cursor_app_context@global": [
        {
            "category": "arg",
            "name": "app",
            "type": []
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "flask.ctx.AppContext",
                "flask.Flask"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "flask.ctx.AppContext",
                "flask.Flask"
            ]
        },
        {
            "category": "local",
            "name": "mock_cursor",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mock_cursor_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mock_query",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "g_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_with_cursor_app_context",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_with_cursor_in_parallel@global": [
        {
            "category": "arg",
            "name": "app",
            "type": []
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "mock.MagicMock",
                "flask.ctx.AppContext"
            ]
        },
        {
            "category": "local",
            "name": "query_id",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "mock.MagicMock",
                "flask.ctx.AppContext"
            ]
        },
        {
            "category": "local",
            "name": "mock_cursor",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mock_cursor_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mock_query",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_with_cursor_in_parallel",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_column_spec@global": [
        {
            "category": "arg",
            "name": "native_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "sqla_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "attrs",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "generic_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "is_dttm",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "native_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "sqla_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "attrs",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "generic_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "is_dttm",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "return",
            "name": "test_get_column_spec",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_columns@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "sqla_columns",
            "type": [
                "list[SQLAColumnType]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_inspector",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mock_inspector_",
            "type": [
                "list[SQLAColumnType]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "list[ResultSetColumnType]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_columns",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_columns_error@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_inspector",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mock_inspector_",
            "type": [
                "NoSuchTableError",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "Row",
            "type": [
                "list",
                "list[str]",
                "typing.Generator[typing.Optional[tuple[typing.Union[str,typing.Any]]]]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "list[ResultSetColumnType]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_columns_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_columns_expand_rows@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "sqla_columns",
            "type": [
                "list[SQLAColumnType]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_inspector",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mock_inspector_",
            "type": [
                "list[SQLAColumnType]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "list[ResultSetColumnType]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_columns_expand_rows",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_dbapi_exception_mapping@global": [
        {
            "category": "return",
            "name": "test_get_dbapi_exception_mapping",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_default_catalog@global": [
        {
            "category": "arg",
            "name": "sqlalchemy_uri",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "result",
            "type": [
                "str",
                "sqlalchemy.engine.Engine",
                "sqlalchemy.exdeclarative.DeclarativeMeta"
            ]
        },
        {
            "category": "local",
            "name": "sqlalchemy_uri",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "return",
            "name": "test_get_default_catalog",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_extra_params@global": [
        {
            "category": "arg",
            "name": "extra",
            "type": [
                "typing.MutableMapping",
                "dict[str, object]",
                "dict[str, dict]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "terrawrap.models.wrapper_config.BackendsConfig",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "extra",
            "type": [
                "typing.MutableMapping",
                "dict[str, object]",
                "dict[str, dict]"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_get_extra_params",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_extra_params_with_server_cert@global": [
        {
            "category": "arg",
            "name": "mock_create_ssl_cert_file",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "mock_create_ssl_cert_file_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "connect_args",
            "type": [
                "dict[str, str]",
                "tuple[typing.Literal]",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "mock_create_ssl_cert_file",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "return",
            "name": "test_get_extra_params_with_server_cert",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_extra_table_metadata@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "db_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "db_mock_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_get_extra_table_metadata",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexes_no_table@global": [
        {
            "category": "local",
            "name": "db_mock",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "inspector_mock",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "inspector_mock_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexes_no_table",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_oauth2_token@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "oauth2_config",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "requests",
            "type": [
                "dict",
                "str",
                "requests.models.Response"
            ]
        },
        {
            "category": "local",
            "name": "requests_",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_oauth2_token",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_cursor_early_cancel@global": [
        {
            "category": "arg",
            "name": "engine_mock",
            "type": [
                "unittesmock.Mock",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "cancel_query_mock",
            "type": [
                "unittesmock.Mock",
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "cancel_early",
            "type": [
                "unittesmock.Mock",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.Mock",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "query_id",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "cursor_mock_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "Query"
            ]
        },
        {
            "category": "local",
            "name": "cancel_early",
            "type": [
                "unittesmock.Mock",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_cursor_early_cancel",
            "type": [
                "None"
            ]
        }
    ],
    "test_prepare_cancel_query@global": [
        {
            "category": "arg",
            "name": "initial_extra",
            "type": [
                "bool",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "final_extra",
            "type": [
                "bool",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "initial_extra",
            "type": [
                "bool",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "query",
            "type": [
                "Query"
            ]
        },
        {
            "category": "return",
            "name": "test_prepare_cancel_query",
            "type": [
                "None"
            ]
        }
    ],
    "test_timegrain_expressions@global": [
        {
            "category": "arg",
            "name": "time_grain",
            "type": [
                "int",
                "None",
                "datetime.datetime.datetime"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "str",
                "float",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "time_grain",
            "type": [
                "int",
                "None",
                "datetime.datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "actual",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_timegrain_expressions",
            "type": [
                "None"
            ]
        }
    ],
    "test_where_latest_partition@global": [
        {
            "category": "arg",
            "name": "mock_latest_partition",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "column_type",
            "type": [
                "dict",
                "str",
                "boucanpy.core.dns_requesDnsRequestRepo"
            ]
        },
        {
            "category": "arg",
            "name": "column_value",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "expected_value",
            "type": [
                "dict",
                "str",
                "boucanpy.core.dns_requesDnsRequestRepo"
            ]
        },
        {
            "category": "local",
            "name": "column_value",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_latest_partition_",
            "type": [
                "tuple[typing.Union[list[typing.Text],list[typing.Union[unittesmock.MagicMock,unittesmock.Mock]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_where_latest_partition",
            "type": [
                "None"
            ]
        }
    ]
}