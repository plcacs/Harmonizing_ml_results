{
    "_mocked_execute_query@global": [
        {
            "category": "return",
            "name": "_mocked_execute_query",
            "type": []
        }
    ],
    "global@global": [],
    "test_execute_query_as_report_executor@global": [
        {
            "category": "arg",
            "name": "owner_names",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "creator_name",
            "type": [
                "models.RefreshToken",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "config",
            "type": [
                "typing.Collection",
                "bool",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "dict",
                "None",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "str",
                "bool",
                "typing.Callable[typing.Any, None]",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "get_user",
            "type": [
                "str",
                "recidiviz.persistence.database.sqlalchemy_engine_manager.SchemaType",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "typing.Collection",
                "bool",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "owner_names",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "owner_name",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "owners",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "creator_name",
            "type": [
                "models.RefreshToken",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "ReportSchedule"
            ]
        },
        {
            "category": "local",
            "name": "command",
            "type": [
                "AlertCommand"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str",
                "dict",
                "None",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "override_user_mock",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "dict[str, list[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "expected_result",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "bool",
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "cm",
            "type": [
                "dict",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_query_as_report_executor",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_query_failed_max_retries@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "app.GrpyApp",
                "str",
                "rouver.types.StartResponse"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_query_mock",
            "type": [
                "mode.utils.mocks.Mock"
            ]
        },
        {
            "category": "local",
            "name": "execute_query_mock_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "command",
            "type": [
                "AlertCommand"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_query_failed_max_retries",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_query_failed_no_retry@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "app.GrpyApp",
                "flask.ctx.AppContext"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "execute_query_mock",
            "type": [
                "mode.utils.mocks.Mock"
            ]
        },
        {
            "category": "local",
            "name": "execute_query_mock_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "command",
            "type": [
                "AlertCommand"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_query_failed_no_retry",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_query_mutate_query_disabled@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "get_user",
            "type": []
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mock_database",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "core_lib.core.models.Venue"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "ReportSchedule"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_query_mutate_query_disabled",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_query_mutate_query_enabled@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "get_user",
            "type": [
                "flask.testing.FlaskClient"
            ]
        },
        {
            "category": "local",
            "name": "mock_df_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mock_database",
            "type": [
                "dict[str, dict[str, str]]",
                "list[str]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_get_df",
            "type": [
                "str",
                "mode.utils.mocks.Mock",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_limited_sql",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_mutate_call",
            "type": [
                "str",
                "list",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "ReportSchedule"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_query_mutate_query_enabled",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_query_succeeded_no_retry@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "pytest_mock.plugin.MockFixture",
                "app.GrpyApp",
                "rouver.types.StartResponse"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "execute_query_mock",
            "type": [
                "str",
                "mode.utils.mocks.Mock"
            ]
        },
        {
            "category": "local",
            "name": "command",
            "type": [
                "AlertCommand"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_query_succeeded_no_retry",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_query_succeeded_with_retries@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.async_mock.MagicMock",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": [
                "str",
                "app.GrpyApp",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture",
                "tests.async_mock.MagicMock",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "execute_query_mock",
            "type": [
                "mode.utils.mocks.Mock"
            ]
        },
        {
            "category": "local",
            "name": "query_executed_count",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "expected_max_retries",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "execute_query_mock_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "command",
            "type": [
                "AlertCommand"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_query_succeeded_with_retries",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_alert_metadata_from_object@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": []
        },
        {
            "category": "arg",
            "name": "get_user",
            "type": []
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "ReportSchedule"
            ]
        },
        {
            "category": "local",
            "name": "cm",
            "type": [
                "AlertCommand"
            ]
        },
        {
            "category": "return",
            "name": "test_get_alert_metadata_from_object",
            "type": [
                "None"
            ]
        }
    ]
}