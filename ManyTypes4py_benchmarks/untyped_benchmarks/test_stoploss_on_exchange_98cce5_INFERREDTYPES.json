{
    "fetch_stoploss_order_mock@global": [
        {
            "category": "arg",
            "name": "order_id",
            "type": []
        },
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "fetch_stoploss_order_mock",
            "type": []
        }
    ],
    "global@global": [],
    "test_add_stoploss_on_exchange@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "float",
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "order",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "float",
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "list[typing.Union[rotkehlchen.exchanges.data_structures.Trade,list[rotkehlchen.exchanges.data_structures.Trade]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_add_stoploss_on_exchange",
            "type": [
                "None"
            ]
        }
    ],
    "test_create_stoploss_order_insufficient_funds@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": []
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "Exception",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "bytes",
                "tests.test_protocols.TransportMock"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "bytes",
                "tests.test_protocols.TransportMock"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "bytes",
                "tests.test_protocols.TransportMock"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "bytes",
                "tests.test_protocols.TransportMock"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "bytes"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "str",
                "tests.unicmk.special_agents.test_utils_datacache.KeksDose"
            ]
        },
        {
            "category": "local",
            "name": "mock_insuf",
            "type": [
                "str",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "Exception",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "monkq.assets.trade.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool",
                "bytes",
                "tests.test_protocols.TransportMock"
            ]
        },
        {
            "category": "return",
            "name": "test_create_stoploss_order_insufficient_funds",
            "type": [
                "None"
            ]
        }
    ],
    "test_create_stoploss_order_invalid_order@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "bool",
                "str",
                "typing.Type"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "\"GraphLogger\""
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "tuple[str]",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "int",
                "models.AutoTestStepResultState"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "int",
                "models.AutoTestStepResultState"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState"
            ]
        },
        {
            "category": "local",
            "name": "open_order",
            "type": [
                "set",
                "typing.OrderedDict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "order",
            "type": [
                "list[str]",
                "str",
                "Order"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "bool",
                "str",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "rpc_mock",
            "type": [
                "patch_RPCManager"
            ]
        },
        {
            "category": "local",
            "name": "create_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "tuple[str]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool",
                "models.AutoTestStepResultState"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "\"GraphLogger\""
            ]
        },
        {
            "category": "return",
            "name": "test_create_stoploss_order_invalid_order",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_trade_exit_down_stoploss_on_exchange_dry_run@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "accounts.models.Account"
            ]
        },
        {
            "category": "arg",
            "name": "ticker_usdt",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "ticker_usdt_sell_down",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "ticker_usdt_sell_up",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "rpc_mock",
            "type": [
                "patch_RPCManager"
            ]
        },
        {
            "category": "local",
            "name": "ticker_usdt",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "accounts.models.Account"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "monkq.assets.trade.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "ticker_usdt_sell_up",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "ticker_usdt_sell_down",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "float"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_trade_exit_down_stoploss_on_exchange_dry_run",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_trade_exit_sloe_cancel_exception@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "str",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "ticker_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "fee",
            "type": []
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "dict",
                "int",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "str",
                "int",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "tests.core.test_task_map.DivTask",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "create_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "rotkehlchen.exchanges.data_structures.Trade",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "PairLock_",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_trade_exit_sloe_cancel_exception",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_trade_exit_with_stoploss_on_exchange@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "ticker_usdt",
            "type": [
                "int",
                "float",
                "dict[str, float]"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "int",
                "float",
                "dict[str, float]"
            ]
        },
        {
            "category": "arg",
            "name": "ticker_usdt_sell_up",
            "type": [
                "float",
                "dict",
                "accounts.models.Account"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "int",
                "float",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "float",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "float",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "rpc_mock",
            "type": [
                "patch_RPCManager"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "cancel_order",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "ticker_usdt",
            "type": [
                "int",
                "float",
                "dict[str, float]"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "int",
                "float",
                "dict[str, float]"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "int",
                "float",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "monkq.assets.trade.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "int",
                "float",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "list[typing.Union[monkq.assets.trade.Trade,list[rotkehlchen.exchanges.data_structures.Trade]]]"
            ]
        },
        {
            "category": "local",
            "name": "ticker_usdt_sell_up",
            "type": [
                "float",
                "dict",
                "accounts.models.Account"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_trade_exit_with_stoploss_on_exchange",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_sle_cancel_cant_recreate@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "bool",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "rotkehlchen.exchanges.data_structures.Trade"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_sle_cancel_cant_recreate",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_stoploss_on_exchange@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "Exception",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "dict[str, typing.Any]",
                "zerver.models.UserProfile"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "stop_order_dict",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "Exception",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[dict[str, int]]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "hanging_stoploss_order",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "dict[str, typing.Any]",
                "zerver.models.UserProfile",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "canceled_stoploss_order",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_hit",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade_",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_stoploss_on_exchange",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_stoploss_on_exchange_custom_stop@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "list",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "float",
                "list[tuple[int]]"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade_",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "slo",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,int,dict[typing.Text, typing.Text]]]"
            ]
        },
        {
            "category": "local",
            "name": "slo_canceled",
            "type": [
                "dict[str, int]",
                "dict[str, typing.Union[int,typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "cancel_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_stoploss_on_exchange_custom_stop",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_stoploss_on_exchange_emergency@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "stop_order_dict",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str",
                "mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "monkq.assets.trade.Trade"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_cancelled",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "int",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_stoploss_on_exchange_emergency",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_stoploss_on_exchange_partial@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "stop_order_dict",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "monkq.assets.trade.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_hit",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_stoploss_on_exchange_partial",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_stoploss_on_exchange_partial_cancel_here@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "bool",
                "str",
                "\"GraphLogger\"",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "time_machine",
            "type": [
                "str",
                "None",
                "bool",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "stop_order_dict",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "time_machine",
            "type": [
                "str",
                "None",
                "bool",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "monkq.assets.trade.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_hit",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_cancel",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_stoploss_on_exchange_partial_cancel_here",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_stoploss_on_exchange_trailing@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "bid",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "ask",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "stop_price",
            "type": [
                "\"Cash\"",
                "django.db.models.QuerySet"
            ]
        },
        {
            "category": "arg",
            "name": "hang_price",
            "type": [
                "\"Cash\"",
                "int",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "time_machine",
            "type": [
                "datetime.timedelta",
                "bool",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "start_dt",
            "type": [
                "datetime.datetime",
                "str",
                "datetime.time"
            ]
        },
        {
            "category": "local",
            "name": "time_machine",
            "type": [
                "datetime.timedelta",
                "bool",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade_",
            "type": [
                "float"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "monkq.assets.trade.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "hang_price",
            "type": [
                "\"Cash\"",
                "int",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "stop_price",
            "type": [
                "\"Cash\"",
                "django.db.models.QuerySet"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_hanging",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,\"Cash\",int,dict[typing.Text, ]]]"
            ]
        },
        {
            "category": "local",
            "name": "bid",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "ask",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "cancel_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_stoploss_on_exchange_trailing",
            "type": [
                "None"
            ]
        }
    ],
    "test_handle_stoploss_on_exchange_trailing_error@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "mock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "arg",
            "name": "time_machine",
            "type": [
                "datetime.timedelta",
                "bool",
                "datetime.timezone"
            ]
        },
        {
            "category": "local",
            "name": "time_machine",
            "type": [
                "datetime.timedelta",
                "bool",
                "datetime.timezone"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "enter_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "object"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "mock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade_",
            "type": [
                "float"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool",
                "models.AutoTestStepResultState",
                "dict[str, object]",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_hanging",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,int,dict[typing.Text, typing.Text]]]"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "cancel_mock",
            "type": [
                "mock.MagicMock",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_handle_stoploss_on_exchange_trailing_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_may_execute_trade_exit_after_stoploss_on_exchange_hit@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "ticker_usdt",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "bytes"
            ]
        },
        {
            "category": "local",
            "name": "rpc_mock",
            "type": [
                "patch_RPCManager"
            ]
        },
        {
            "category": "local",
            "name": "ticker_usdt",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "bytes"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "monkq.assets.trade.Trade"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "list[typing.Union[list[rotkehlchen.exchanges.data_structures.Trade],monkq.assets.trade.Trade]]"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_executed",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_may_execute_trade_exit_after_stoploss_on_exchange_hit",
            "type": [
                "None"
            ]
        }
    ],
    "test_stoploss_on_exchange_price_rounding@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "tests.async_mock.MagicMock",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": []
        },
        {
            "category": "arg",
            "name": "open_trade_usdt",
            "type": [
                "bool",
                "None",
                "typing.Callable[List,bool, None]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "price_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "adjust_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "tests.async_mock.MagicMock",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "str",
                "int",
                "typing.Callable[None,None,None,None,None,None, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "open_trade_usdt_",
            "type": [
                "float"
            ]
        },
        {
            "category": "local",
            "name": "open_trade_usdt",
            "type": [
                "bool",
                "None",
                "typing.Callable[List,bool, None]"
            ]
        },
        {
            "category": "return",
            "name": "test_stoploss_on_exchange_price_rounding",
            "type": [
                "None"
            ]
        }
    ],
    "test_tsl_on_exchange_compatible_with_edge@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "edge_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "limit_order",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "limit_order",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "exit_order",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "stoploss",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "FreqtradeBot"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade_",
            "type": [
                "float"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "list[dict[str, int]]"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_hanging",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "cancel_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_tsl_on_exchange_compatible_with_edge",
            "type": [
                "None"
            ]
        }
    ]
}