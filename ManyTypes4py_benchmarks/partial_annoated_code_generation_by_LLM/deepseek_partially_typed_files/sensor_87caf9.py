"""Representation of Z-Wave sensors."""
from __future__ import annotations
from collections.abc import Callable, Mapping
from dataclasses import dataclass
from typing import Any, cast
import voluptuous as vol
from zwave_js_server.client import Client as ZwaveClient
from zwave_js_server.const import CommandClass
from zwave_js_server.const.command_class.meter import RESET_METER_OPTION_TARGET_VALUE, RESET_METER_OPTION_TYPE
from zwave_js_server.exceptions import BaseZwaveJSServerError
from zwave_js_server.model.controller import Controller
from zwave_js_server.model.controller.statistics import ControllerStatistics
from zwave_js_server.model.driver import Driver
from zwave_js_server.model.node import Node as ZwaveNode
from zwave_js_server.model.node.statistics import NodeStatistics
from zwave_js_server.util.command_class.meter import get_meter_type
from homeassistant.components.sensor import DOMAIN as SENSOR_DOMAIN, SensorDeviceClass, SensorEntity, SensorEntityDescription, SensorStateClass
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import CONCENTRATION_PARTS_PER_MILLION, LIGHT_LUX, PERCENTAGE, SIGNAL_STRENGTH_DECIBELS_MILLIWATT, UV_INDEX, EntityCategory, UnitOfElectricCurrent, UnitOfElectricPotential, UnitOfEnergy, UnitOfPower, UnitOfPressure, UnitOfTemperature, UnitOfTime
from homeassistant.core import HomeAssistant, callback
from homeassistant.exceptions import HomeAssistantError
from homeassistant.helpers import entity_platform
from homeassistant.helpers.dispatcher import async_dispatcher_connect
from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback
from homeassistant.helpers.typing import UNDEFINED, StateType
from .binary_sensor import is_valid_notification_binary_sensor
from .const import ATTR_METER_TYPE, ATTR_METER_TYPE_NAME, ATTR_VALUE, DATA_CLIENT, DOMAIN, ENTITY_DESC_KEY_BATTERY, ENTITY_DESC_KEY_CO, ENTITY_DESC_KEY_CO2, ENTITY_DESC_KEY_CURRENT, ENTITY_DESC_KEY_ENERGY_MEASUREMENT, ENTITY_DESC_KEY_ENERGY_PRODUCTION_POWER, ENTITY_DESC_KEY_ENERGY_PRODUCTION_TIME, ENTITY_DESC_KEY_ENERGY_PRODUCTION_TODAY, ENTITY_DESC_KEY_ENERGY_PRODUCTION_TOTAL, ENTITY_DESC_KEY_ENERGY_TOTAL_INCREASING, ENTITY_DESC_KEY_HUMIDITY, ENTITY_DESC_KEY_ILLUMINANCE, ENTITY_DESC_KEY_MEASUREMENT, ENTITY_DESC_KEY_POWER, ENTITY_DESC_KEY_POWER_FACTOR, ENTITY_DESC_KEY_PRESSURE, ENTITY_DESC_KEY_SIGNAL_STRENGTH, ENTITY_DESC_KEY_TARGET_TEMPERATURE, ENTITY_DESC_KEY_TEMPERATURE, ENTITY_DESC_KEY_TOTAL_INCREASING, ENTITY_DESC_KEY_UV_INDEX, ENTITY_DESC_KEY_VOLTAGE, LOGGER, SERVICE_RESET_METER
from .discovery import ZwaveDiscoveryInfo
from .discovery_data_template import NumericSensorDataTemplate, NumericSensorDataTemplateData
from .entity import ZWaveBaseEntity
from .helpers import get_device_info, get_valueless_base_unique_id
from .migrate import async_migrate_statistics_sensors
PARALLEL_UPDATES = 0
ENTITY_DESCRIPTION_KEY_DEVICE_CLASS_MAP: dict[tuple[str, str], SensorEntityDescription] = {(ENTITY_DESC_KEY_BATTERY, PERCENTAGE): SensorEntityDescription(key=ENTITY_DESC_KEY_BATTERY, device_class=SensorDeviceClass.BATTERY, entity_category=EntityCategory.DIAGNOSTIC, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=PERCENTAGE), (ENTITY_DESC_KEY_CURRENT, UnitOfElectricCurrent.AMPERE): SensorEntityDescription(key=ENTITY_DESC_KEY_CURRENT, device_class=SensorDeviceClass.CURRENT, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfElectricCurrent.AMPERE), (ENTITY_DESC_KEY_VOLTAGE, UnitOfElectricPotential.VOLT): SensorEntityDescription(key=ENTITY_DESC_KEY_VOLTAGE, device_class=SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfElectricPotential.VOLT, suggested_display_precision=0), (ENTITY_DESC_KEY_VOLTAGE, UnitOfElectricPotential.MILLIVOLT): SensorEntityDescription(key=ENTITY_DESC_KEY_VOLTAGE, device_class=SensorDeviceClass.VOLTAGE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT), (ENTITY_DESC_KEY_ENERGY_TOTAL_INCREASING, UnitOfEnergy.KILO_WATT_HOUR): SensorEntityDescription(key=ENTITY_DESC_KEY_ENERGY_TOTAL_INCREASING, device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING, native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR), (ENTITY_DESC_KEY_POWER, UnitOfPower.WATT): SensorEntityDescription(key=ENTITY_DESC_KEY_POWER, device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPower.WATT), (ENTITY_DESC_KEY_POWER_FACTOR, PERCENTAGE): SensorEntityDescription(key=ENTITY_DESC_KEY_POWER_FACTOR, device_class=SensorDeviceClass.POWER_FACTOR, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=PERCENTAGE), (ENTITY_DESC_KEY_CO, CONCENTRATION_PARTS_PER_MILLION): SensorEntityDescription(key=ENTITY_DESC_KEY_CO, device_class=SensorDeviceClass.CO, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION), (ENTITY_DESC_KEY_CO2, CONCENTRATION_PARTS_PER_MILLION): SensorEntityDescription(key=ENTITY_DESC_KEY_CO2, device_class=SensorDeviceClass.CO2, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=CONCENTRATION_PARTS_PER_MILLION), (ENTITY_DESC_KEY_HUMIDITY, PERCENTAGE): SensorEntityDescription(key=ENTITY_DESC_KEY_HUMIDITY, device_class=SensorDeviceClass.HUMIDITY, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=PERCENTAGE), (ENTITY_DESC_KEY_ILLUMINANCE, LIGHT_LUX): SensorEntityDescription(key=ENTITY_DESC_KEY_ILLUMINANCE, device_class=SensorDeviceClass.ILLUMINANCE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=LIGHT_LUX), (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.KPA): SensorEntityDescription(key=ENTITY_DESC_KEY_PRESSURE, device_class=SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPressure.KPA), (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.PSI): SensorEntityDescription(key=ENTITY_DESC_KEY_PRESSURE, device_class=SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPressure.PSI), (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.INHG): SensorEntityDescription(key=ENTITY_DESC_KEY_PRESSURE, device_class=SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPressure.INHG), (ENTITY_DESC_KEY_PRESSURE, UnitOfPressure.MMHG): SensorEntityDescription(key=ENTITY_DESC_KEY_PRESSURE, device_class=SensorDeviceClass.PRESSURE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPressure.MMHG), (ENTITY_DESC_KEY_SIGNAL_STRENGTH, SIGNAL_STRENGTH_DECIBELS_MILLIWATT): SensorEntityDescription(key=ENTITY_DESC_KEY_SIGNAL_STRENGTH, device_class=SensorDeviceClass.SIGNAL_STRENGTH, entity_category=EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT), (ENTITY_DESC_KEY_TEMPERATURE, UnitOfTemperature.CELSIUS): SensorEntityDescription(key=ENTITY_DESC_KEY_TEMPERATURE, device_class=SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfTemperature.CELSIUS), (ENTITY_DESC_KEY_TEMPERATURE, UnitOfTemperature.FAHRENHEIT): SensorEntityDescription(key=ENTITY_DESC_KEY_TEMPERATURE, device_class=SensorDeviceClass.TEMPERATURE, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT), (ENTITY_DESC_KEY_TARGET_TEMPERATURE, UnitOfTemperature.CELSIUS): SensorEntityDescription(key=ENTITY_DESC_KEY_TARGET_TEMPERATURE, device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.CELSIUS), (ENTITY_DESC_KEY_TARGET_TEMPERATURE, UnitOfTemperature.FAHRENHEIT): SensorEntityDescription(key=ENTITY_DESC_KEY_TARGET_TEMPERATURE, device_class=SensorDeviceClass.TEMPERATURE, native_unit_of_measurement=UnitOfTemperature.FAHRENHEIT), (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TIME, UnitOfTime.SECONDS): SensorEntityDescription(key=ENTITY_DESC_KEY_ENERGY_PRODUCTION_TIME, name='Energy production time', device_class=SensorDeviceClass.DURATION, native_unit_of_measurement=UnitOfTime.SECONDS), (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TIME, UnitOfTime.HOURS): SensorEntityDescription(key=ENTITY_DESC_KEY_ENERGY_PRODUCTION_TIME, device_class=SensorDeviceClass.DURATION, native_unit_of_measurement=UnitOfTime.HOURS), (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TODAY, UnitOfEnergy.WATT_HOUR): SensorEntityDescription(key=ENTITY_DESC_KEY_ENERGY_PRODUCTION_TODAY, name='Energy production today', device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING, native_unit_of_measurement=UnitOfEnergy.WATT_HOUR), (ENTITY_DESC_KEY_ENERGY_PRODUCTION_TOTAL, UnitOfEnergy.WATT_HOUR): SensorEntityDescription(key=ENTITY_DESC_KEY_ENERGY_PRODUCTION_TOTAL, name='Energy production total', device_class=SensorDeviceClass.ENERGY, state_class=SensorStateClass.TOTAL_INCREASING, native_unit_of_measurement=UnitOfEnergy.WATT_HOUR), (ENTITY_DESC_KEY_ENERGY_PRODUCTION_POWER, UnitOfPower.WATT): SensorEntityDescription(key=ENTITY_DESC_KEY_POWER, name='Energy production power', device_class=SensorDeviceClass.POWER, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UnitOfPower.WATT)}
ENTITY_DESCRIPTION_KEY_MAP: dict[str, SensorEntityDescription] = {ENTITY_DESC_KEY_CO: SensorEntityDescription(key=ENTITY_DESC_KEY_CO, state_class=SensorStateClass.MEASUREMENT), ENTITY_DESC_KEY_ENERGY_MEASUREMENT: SensorEntityDescription(key=ENTITY_DESC_KEY_ENERGY_MEASUREMENT, state_class=SensorStateClass.MEASUREMENT), ENTITY_DESC_KEY_HUMIDITY: SensorEntityDescription(key=ENTITY_DESC_KEY_HUMIDITY, state_class=SensorStateClass.MEASUREMENT), ENTITY_DESC_KEY_ILLUMINANCE: SensorEntityDescription(key=ENTITY_DESC_KEY_ILLUMINANCE, state_class=SensorStateClass.MEASUREMENT), ENTITY_DESC_KEY_POWER_FACTOR: SensorEntityDescription(key=ENTITY_DESC_KEY_POWER_FACTOR, state_class=SensorStateClass.MEASUREMENT), ENTITY_DESC_KEY_SIGNAL_STRENGTH: SensorEntityDescription(key=ENTITY_DESC_KEY_SIGNAL_STRENGTH, entity_category=EntityCategory.DIAGNOSTIC, entity_registry_enabled_default=False, state_class=SensorStateClass.MEASUREMENT), ENTITY_DESC_KEY_MEASUREMENT: SensorEntityDescription(key=ENTITY_DESC_KEY_MEASUREMENT, state_class=SensorStateClass.MEASUREMENT), ENTITY_DESC_KEY_TOTAL_INCREASING: SensorEntityDescription(key=ENTITY_DESC_KEY_TOTAL_INCREASING, state_class=SensorStateClass.TOTAL_INCREASING), ENTITY_DESC_KEY_UV_INDEX: SensorEntityDescription(key=ENTITY_DESC_KEY_UV_INDEX, state_class=SensorStateClass.MEASUREMENT, native_unit_of_measurement=UV_INDEX)}

def convert_nested_attr(statistics: Any, key: str) -> Any:
    """Convert a string that represents a nested attr to a value."""
    data = statistics
    for _key in key.split('.'):
        if data is None:
            return None
        data = getattr(data, _key)
    return data

@dataclass(frozen=True, kw_only=True)
class ZWaveJSStatisticsSensorEntityDescription(SensorEntityDescription):
    """Class to represent a Z-Wave JS statistics sensor entity description."""
    convert: Callable[[Any, str], Any] = getattr
    entity_registry_enabled_default: bool = False
ENTITY_DESCRIPTION_CONTROLLER_STATISTICS_LIST: list[ZWaveJSStatisticsSensorEntityDescription] = [ZWaveJSStatisticsSensorEntityDescription(key='messages_tx', translation_key='successful_messages', translation_placeholders={'direction': 'TX'}, state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='messages_rx', translation_key='successful_messages', translation_placeholders={'direction': 'RX'}, state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='messages_dropped_tx', translation_key='messages_dropped', translation_placeholders={'direction': 'TX'}, state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='messages_dropped_rx', translation_key='messages_dropped', translation_placeholders={'direction': 'RX'}, state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='nak', translation_key='nak', state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='can', translation_key='can', state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='timeout_ack', translation_key='timeout_ack', state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='timeout_response', translation_key='timeout_response', state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='timeout_callback', translation_key='timeout_callback', state_class=SensorStateClass.TOTAL), ZWaveJSStatisticsSensorEntityDescription(key='background_rssi.channel_0.average', translation_key='average_background_rssi', translation_placeholders={'channel': '0'}, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT, device_class=SensorDeviceClass.SIGNAL_STRENGTH, convert=convert_nested_attr), ZWaveJSStatisticsSensorEntityDescription(key='background_rssi.channel_0.current', translation_key='current_background_rssi', translation_placeholders={'channel': '0'}, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT, device_class=SensorDeviceClass.SIGNAL_STRENGTH, state_class=SensorStateClass.MEASUREMENT, convert=convert_nested_attr), ZWaveJSStatisticsSensorEntityDescription(key='background_rssi.channel_1.average', translation_key='average_background_rssi', translation_placeholders={'channel': '1'}, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT, device_class=SensorDeviceClass.SIGNAL_STRENGTH, convert=convert_nested_attr), ZWaveJSStatisticsSensorEntityDescription(key='background_rssi.channel_1.current', translation_key='current_background_rssi', translation_placeholders={'channel': '1'}, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT, device_class=SensorDeviceClass.SIGNAL_STRENGTH, state_class=SensorStateClass.MEASUREMENT, convert=convert_nested_attr), ZWaveJSStatisticsSensorEntityDescription(key='background_rssi.channel_2.average', translation_key='average_background_rssi', translation_placeholders={'channel': '2'}, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT, device_class=SensorDeviceClass.SIGNAL_STRENGTH, convert=convert_nested_attr), ZWaveJSStatisticsSensorEntityDescription(key='background_rssi.channel_2.current', translation_key='current_background_rssi', translation_placeholders={'channel': '2'}, native_unit_of_measurement=SIGNAL_STRENGTH_DECIBELS_MILLIWATT, device_class=SensorDeviceClass.SIGNAL_STRENGTH, state_class=SensorStateClass.MEASUREMENT, convert=convert_nested_attr)]
CONTROLLER_STATISTICS_KEY_MAP: dict[str, str] = {'messages_tx': 'messagesTX', 'messages_rx': 'messagesRX', 'messages_dropped_tx': 'messagesDroppedTX', 'messages_dropped_rx': 'messagesDroppedRX', 'nak': 'NAK', 'can': 'CAN', 'timeout_ack': 'timeoutAck', 'timeout_response': 'timeoutResponse', 'timeout_callback': 'timeoutCallback', 'background_rssi.channel_0