import pytest
from mimesis import BaseProvider, Generic

class TestGeneric:

    def test_reseed(self, generic: Generic):
        ...

    def test_str(self, generic: Generic):
        ...

    def test_base_person(self, generic: Generic):
        ...

    def test_base_text(self, generic: Generic):
        ...

    def test_base_payment(self, generic: Generic):
        ...

    def test_base_address(self, generic: Generic):
        ...

    def test_base_food(self, generic: Generic):
        ...

    def test_base_finance(self, generic: Generic):
        ...

    def test_base_code(self, generic: Generic):
        ...

    def test_base_binary_file(self, generic: Generic):
        ...

    def test_bad_argument(self, generic: Generic):
        ...

    def test_add_providers(self, generic: Generic):
        ...

    def test_add_provider_generic_to_generic(self, generic: Generic):
        ...

    def test_add_providers_generic_to_generic(self, generic: Generic):
        ...

    def test_add_provider(self, generic: Generic):
        ...

    def test_dir(self, generic: Generic):
        ...

class TestSeededGeneric:

    @pytest.fixture
    def g1(self, seed: int) -> Generic:
        ...

    @pytest.fixture
    def g2(self, seed: int) -> Generic:
        ...

    def test_generic_address(self, g1: Generic, g2: Generic):
        ...

    def test_generic_finance(self, g1: Generic, g2: Generic):
        ...

    def test_generic_code(self, g1: Generic, g2: Generic):
        ...

    def test_generic_cryptographic(self, g1: Generic, g2: Generic):
        ...

    def test_generic_datetime(self, g1: Generic, g2: Generic):
        ...

    def test_generic_development(self, g1: Generic, g2: Generic):
        ...

    def test_generic_file(self, g1: Generic, g2: Generic):
        ...

    def test_generic_food(self, g1: Generic, g2: Generic):
        ...

    def test_generic_hardware(self, g1: Generic, g2: Generic):
        ...

    def test_generic_internet(self, g1: Generic, g2: Generic):
        ...

    def test_generic_numbers(self, g1: Generic, g2: Generic):
        ...

    def test_generic_path(self, g1: Generic, g2: Generic):
        ...

    def test_generic_payment(self, g1: Generic, g2: Generic):
        ...

    def test_generic_person(self, g1: Generic, g2: Generic):
        ...

    def test_generic_science(self, g1: Generic, g2: Generic):
        ...

    def test_generic_transport(self, g1: Generic, g2: Generic):
        ...
