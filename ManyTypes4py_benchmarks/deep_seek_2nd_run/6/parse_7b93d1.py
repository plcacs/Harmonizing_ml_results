"""Parser engine for the grammar tables generated by pgen.

The grammar table must be loaded first.

See Parser/parser.c in the Python distribution for additional info on
how this parsing engine works.

"""
from typing import Any, Callable, Dict, List, Optional, Set, Tuple, TypeVar
from . import token

T = TypeVar('T')
Context = Any
Node = Tuple[int, Optional[str], Optional[Context], Optional[List[T]]]
ConvertFunc = Callable[['Grammar', Node], T]

class ParseError(Exception):
    """Exception to signal the parser is stuck."""

    def __init__(self, msg: str, type: int, value: Optional[str], context: Optional[Context]) -> None:
        Exception.__init__(self, '%s: type=%r, value=%r, context=%r' % (msg, type, value, context))
        self.msg = msg
        self.type = type
        self.value = value
        self.context = context

class Parser(object):
    """Parser engine."""

    def __init__(self, grammar: 'Grammar', convert: Optional[ConvertFunc[T]] = None) -> None:
        self.grammar = grammar
        self.convert = convert or (lambda grammar, node: node)
        self.stack: List[Tuple[Tuple[List[Dict[int, int]], Set[int]], int, Node[T]]] = []
        self.rootnode: Optional[T] = None
        self.used_names: Set[str] = set()

    def setup(self, start: Optional[int] = None) -> None:
        """Prepare for parsing."""
        if start is None:
            start = self.grammar.start
        newnode: Node[T] = (start, None, None, [])
        stackentry = (self.grammar.dfas[start], 0, newnode)
        self.stack = [stackentry]
        self.rootnode = None
        self.used_names = set()

    def addtoken(self, type: int, value: Optional[str], context: Optional[Context]) -> bool:
        """Add a token; return True iff this is the end of the program."""
        ilabel = self.classify(type, value, context)
        while True:
            dfa, state, node = self.stack[-1]
            states, first = dfa
            arcs = states[state]
            for i, newstate in arcs.items():
                t, v = self.grammar.labels[i]
                if ilabel == i:
                    assert t < 256
                    self.shift(type, value, newstate, context)
                    state = newstate
                    while states[state] == {0: state}:
                        self.pop()
                        if not self.stack:
                            return True
                        dfa, state, node = self.stack[-1]
                        states, first = dfa
                    return False
                elif t >= 256:
                    itsdfa = self.grammar.dfas[t]
                    itsstates, itsfirst = itsdfa
                    if ilabel in itsfirst:
                        self.push(t, self.grammar.dfas[t], newstate, context)
                        break
            else:
                if 0 in arcs and arcs[0] == state:
                    self.pop()
                    if not self.stack:
                        raise ParseError('too much input', type, value, context)
                else:
                    raise ParseError('bad input', type, value, context)

    def classify(self, type: int, value: Optional[str], context: Optional[Context]) -> int:
        """Turn a token into a label.  (Internal)"""
        if type == token.NAME and value is not None:
            self.used_names.add(value)
            ilabel = self.grammar.keywords.get(value)
            if ilabel is not None:
                return ilabel
        ilabel = self.grammar.tokens.get(type)
        if ilabel is None:
            raise ParseError('bad token', type, value, context)
        return ilabel

    def shift(self, type: int, value: Optional[str], newstate: int, context: Optional[Context]) -> None:
        """Shift a token.  (Internal)"""
        dfa, state, node = self.stack[-1]
        newnode: Node[T] = (type, value, context, None)
        newnode = self.convert(self.grammar, newnode)
        if newnode is not None:
            node[-1].append(newnode)
        self.stack[-1] = (dfa, newstate, node)

    def push(self, type: int, newdfa: Tuple[List[Dict[int, int]], Set[int]], newstate: int, context: Optional[Context]) -> None:
        """Push a nonterminal.  (Internal)"""
        dfa, state, node = self.stack[-1]
        newnode: Node[T] = (type, None, context, [])
        self.stack[-1] = (dfa, newstate, node)
        self.stack.append((newdfa, 0, newnode))

    def pop(self) -> None:
        """Pop a nonterminal.  (Internal)"""
        popdfa, popstate, popnode = self.stack.pop()
        newnode = self.convert(self.grammar, popnode)
        if newnode is not None:
            if self.stack:
                dfa, state, node = self.stack[-1]
                node[-1].append(newnode)
            else:
                self.rootnode = newnode
                self.rootnode.used_names = self.used_names
