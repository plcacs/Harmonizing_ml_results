from typing import Any, Callable, Dict, Optional, Union

def format_timedelta(time_delta: timedelta) -> str:
    ...

def base_json_conv(obj: Any) -> Union[int, bool, list, float, str]:
    ...

def json_iso_dttm_ser(obj: Any, pessimistic: bool = False) -> str:
    ...

def pessimistic_json_iso_dttm_ser(obj: Any) -> str:
    ...

def json_int_dttm_ser(obj: Any) -> Union[float, int]:
    ...

def json_dumps_w_dates(payload: Any, sort_keys: bool = False) -> str:
    ...

def validate_json(obj: Union[bytes, bytearray, str]) -> None:
    ...

def dumps(obj: Any, default: Callable = json_iso_dttm_ser, allow_nan: bool = False, ignore_nan: bool = True, sort_keys: bool = False, indent: Optional[int] = None, separators: Optional[Tuple[str, str]] = None, cls: Optional[Type[simplejson.JSONEncoder]] = None, encoding: str = 'utf-8') -> str:
    ...

def loads(obj: str, encoding: Optional[str] = None, allow_nan: bool = False, object_hook: Optional[Callable] = None) -> Any:
    ...

def redact_sensitive(payload: Any, sensitive_fields: List[str]) -> Any:
    ...

def reveal_sensitive(old_payload: Any, new_payload: Any, sensitive_fields: List[str]) -> Any:
    ...
