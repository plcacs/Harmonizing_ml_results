from typing import List, Tuple, Dict, Set, Union

def get_topic_from_message_info(message_info: Dict[str, Any]) -> str:
    ...

def filter_by_topic_name_via_message(query, topic_name: str):
    ...

def messages_for_topic(realm_id: int, stream_recipient_id: int, topic_name: str):
    ...

def get_first_message_for_user_in_topic(realm_id: int, user_profile, recipient_id: int, topic_name: str, history_public_to_subscribers: bool, acting_user_has_channel_content_access: bool = False) -> Union[int, None]:
    ...

def save_message_for_edit_use_case(message):
    ...

def user_message_exists_for_topic(user_profile, recipient_id: int, topic_name: str) -> bool:
    ...

def update_edit_history(message, last_edit_time: datetime, edit_history_event: EditHistoryEvent):
    ...

def update_messages_for_topic_edit(acting_user, edited_message, message_edit_request: StreamMessageEditRequest, edit_history_event: EditHistoryEvent, last_edit_time: datetime) -> Tuple[QuerySet, Callable]:
    ...

def generate_topic_history_from_db_rows(rows: List[Tuple[str, int]], allow_empty_topic_name: bool) -> List[Dict[str, Union[str, int]]]:
    ...

def get_topic_history_for_public_stream(realm_id: int, recipient_id: int, allow_empty_topic_name: bool) -> List[Dict[str, Union[str, int]]]:
    ...

def get_topic_history_for_stream(user_profile, recipient_id: int, public_history: bool, allow_empty_topic_name: bool) -> List[Dict[str, Union[str, int]]]:
    ...

def get_topic_resolution_and_bare_name(stored_name: str) -> Tuple[bool, str]:
    ...

def participants_for_topic(realm_id: int, recipient_id: int, topic_name: str) -> Set[int]:
    ...

def maybe_rename_general_chat_to_empty_topic(topic_name: str) -> str:
    ...

def maybe_rename_empty_topic_to_general_chat(topic_name: str, is_channel_message: bool, allow_empty_topic_name: bool) -> str:
    ...

def get_topic_display_name(topic_name: str, language: str) -> str:
    ...
