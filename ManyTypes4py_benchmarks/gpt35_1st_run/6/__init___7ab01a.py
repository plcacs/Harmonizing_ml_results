from typing import List, Tuple, Union, Callable, Any

class error(Exception):
    def __init__(self, msg: str, error: Any, pattern: str = None, flags: int = 0, pos: int = None) -> None:
        ...

class ReIndexError(IndexError):
    ...

class Match:
    def __init__(self, mObj: List[Union[None, Any]], string: str, pos: int, endpos: int, rObj: Any, namedGroups: dict = None) -> None:
        ...

    def expand(self, template: str) -> None:
        ...

    def group(self, *args: Union[str, int]) -> Union[str, Tuple[str]]:
        ...

    def groups(self, default: Any = None) -> Tuple:
        ...

    def groupdict(self, default: Any = None) -> dict:
        ...

    def start(self, group: Union[str, int] = 0) -> int:
        ...

    def end(self, group: Union[str, int] = 0) -> int:
        ...

    def span(self, group: Union[str, int] = 0) -> Tuple[int, int]:
        ...

class Regex:
    def __init__(self, pattern: str, flags: int) -> None:
        ...

    def search(self, string: str, pos: int = 0, endpos: int = None) -> Match:
        ...

    def match(self, string: str, pos: int = 0, endpos: int = None) -> Match:
        ...

    def fullmatch(self, string: str, pos: int = 0, endpos: int = None) -> Match:
        ...

    def split(self, string: str, maxsplit: int = 0) -> List[str]:
        ...

    def findall(self, string: str, pos: int = 0, endpos: int = None) -> List[Union[str, Tuple[str]]]:
        ...

    def finditer(self, string: str, pos: int, endpos: int = None) -> iter:
        ...

    def sub(self, repl: Union[str, Callable], string: str, count: int = 0) -> str:
        ...

    def subn(self, repl: Union[str, Callable], string: str, count: int = 0) -> Tuple[str, int]:
        ...

class PyRegExp(Regex):
    def __init__(self, pyPattern: str, flags: int) -> None:
        ...

def compile(pattern: str, flags: int = 0) -> Union[Regex, PyRegExp]:
    ...

def search(pattern: str, string: str, flags: int = 0) -> Match:
    ...

def match(pattern: str, string: str, flags: int = 0) -> Match:
    ...

def fullmatch(pattern: str, string: str, flags: int = 0) -> Match:
    ...

def split(pattern: str, string: str, maxsplit: int = 0, flags: int = 0) -> List[str]:
    ...

def findall(pattern: str, string: str, flags: int = 0) -> List[Union[str, Tuple[str]]]:
    ...

def finditer(pattern: str, string: str, flags: int = 0) -> iter:
    ...

def sub(pattern: str, repl: Union[str, Callable], string: str, count: int = 0, flags: int = 0) -> str:
    ...

def subn(pattern: str, repl: Union[str, Callable], string: str, count: int = 0, flags: int = 0) -> Tuple[str, int]:
    ...

def escape(string: str) -> str:
    ...

def purge() -> None:
    ...
