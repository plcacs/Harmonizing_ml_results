from typing import Any, Dict, List, Optional, Union

def test_parse_success(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_parse_failure(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_with_custom_kwargs(mock_dbt_runner: Any, settings: Any) -> None:
    ...

async def test_ainvoke_with_custom_kwargs(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_with_parsing(mock_dbt_runner: Any, settings: Any) -> None:
    ...

async def test_ainvoke_with_parsing(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_raises_on_failure(mock_dbt_runner: Any, settings: Any) -> None:
    ...

async def test_ainvoke_raises_on_failure(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_multiple_failures(mock_dbt_runner: Any, settings: Any) -> None:
    ...

async def test_ainvoke_multiple_failures(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_no_raise_on_failure(mock_dbt_runner: Any, settings: Any) -> None:
    ...

async def test_ainvoke_no_raise_on_failure(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_command_return_types(mock_dbt_runner: Any, settings: Any, command: List[str], expected_type: Union[type, None], requires_manifest: bool) -> None:
    ...

async def test_ainvoke_command_return_types(mock_dbt_runner: Any, settings: Any, command: List[str], expected_type: Union[type, None], requires_manifest: bool) -> None:
    ...

def test_invoke_with_manifest_requiring_commands(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_with_preloaded_manifest(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_invoke_debug_command(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_failure_result_types(mock_dbt_runner: Any, settings: Any, command: List[str], expected_type: Union[type, None]) -> None:
    ...

async def test_failure_result_types_async(mock_dbt_runner: Any, settings: Any, command: List[str], expected_type: Union[type, None]) -> None:
    ...

def test_logging_callback(mock_dbt_runner: Any, settings: Any, caplog: Any) -> None:
    ...

def test_logging_callback_no_flow(mock_dbt_runner: Any, settings: Any, caplog: Any) -> None:
    ...

def test_events_callback_node_finished(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_events_callback_with_emit_events_false(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_events_callback_with_emit_node_events_false(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_events_callback_with_emit_lineage_events_false(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_events_callback_with_all_events_disabled(mock_dbt_runner: Any, settings: Any) -> None:
    ...

def test_emit_lineage_events(mock_dbt_runner: Any, settings: Any, mock_manifest_with_nodes: Any, provide_manifest: bool) -> None:
    ...

async def test_aemit_lineage_events(mock_dbt_runner: Any, settings: Any, mock_manifest_with_nodes: Any, provide_manifest: bool) -> None:
    ...
