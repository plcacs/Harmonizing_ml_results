def validator(*fields: str, pre: bool = False, each_item: bool = False, always: bool = False, check_fields: bool = True, whole: Optional[bool] = None, allow_reuse: bool = False) -> Callable[[Callable], Callable]:
    ...

def root_validator(_func: Optional[Callable] = None, *, pre: bool = False, allow_reuse: bool = False, skip_on_failure: bool = False) -> Union[Callable, Callable[[Callable], Callable]]:
    ...

def _prepare_validator(function: Callable, allow_reuse: bool) -> classmethod:
    ...

def make_generic_validator(validator: Union[partial, partialmethod, Callable]) -> Callable:
    ...

def prep_validators(v_funcs: List[Callable]) -> List[Callable]:
    ...

def _generic_validator_cls(validator: Callable, sig, args: Set[str]) -> Callable:
    ...

def _generic_validator_basic(validator: Callable, sig, args: Set[str]) -> Callable:
    ...

def gather_all_validators(type_: Type) -> Dict[str, Union[Validator, Validator]]:
    ...
