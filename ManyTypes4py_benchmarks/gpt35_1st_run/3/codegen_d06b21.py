from typing import Any, Callable, Dict, List, Mapping, Tuple, cast

__all__: List[str] = ['Function', 'Method', 'InitMethod', 'HashMethod', 'CompareMethod', 'EqMethod', 'NeMethod', 'LeMethod', 'LtMethod', 'GeMethod', 'GtMethod', 'build_function', 'build_function_source', 'reprkwargs', 'reprcall']
MISSING: Any = object()

def Function(name: str, args: List[str], body: List[str], *, globals: Dict[str, Any] = None, locals: Dict[str, Any] = None, return_type: Any = MISSING, argsep: str = ', ') -> Callable:
    ...

def build_closure_source(name: str, args: List[str], body: List[str], *, outer_name: str = '__outer__', outer_args: List[str] = None, closures: Mapping[str, str], return_type: Any = MISSING, indentlevel: int = 0, indentspaces: int = 4, argsep: str = ', ') -> str:
    ...

def build_closure(outer_name: str, source: str, *args: Any, return_type: Any = MISSING, globals: Dict[str, Any] = None, locals: Dict[str, Any] = None) -> Callable:
    ...

def build_function(name: str, source: str, *, return_type: Any = MISSING, globals: Dict[str, Any] = None, locals: Dict[str, Any] = None) -> Callable:
    ...

def build_function_source(name: str, args: List[str], body: List[str], *, return_type: Any = MISSING, indentlevel: int = 0, indentspaces: int = 4, argsep: str = ', ') -> str:
    ...

def Method(name: str, args: List[str], body: List[str], **kwargs: Any) -> Callable:
    ...

def InitMethod(args: List[str], body: List[str], **kwargs: Any) -> Callable:
    ...

def HashMethod(attrs: List[str], **kwargs: Any) -> Callable:
    ...

def EqMethod(fields: List[str], **kwargs: Any) -> Callable:
    ...

def NeMethod(fields: List[str], **kwargs: Any) -> Callable:
    ...

def GeMethod(fields: List[str], **kwargs: Any) -> Callable:
    ...

def GtMethod(fields: List[str], **kwargs: Any) -> Callable:
    ...

def LeMethod(fields: List[str], **kwargs: Any) -> Callable:
    ...

def LtMethod(fields: List[str], **kwargs: Any) -> Callable:
    ...

def CompareMethod(name: str, op: str, fields: List[str], **kwargs: Any) -> Callable:
    ...

def obj_attrs_tuple(obj_name: str, attrs: List[str]) -> str:
    ...

def reprkwargs(kwargs: Dict[str, Any], *, sep: str = ', ', fmt: str = '{0}={1}') -> str:
    ...

def reprcall(name: str, args: Tuple[Any, ...] = (), kwargs: Dict[str, Any] = {}, *, sep: str = ', ') -> str:
    ...
