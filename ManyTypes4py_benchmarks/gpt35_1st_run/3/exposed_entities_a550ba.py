from __future__ import annotations
from collections.abc import Callable, Mapping
import dataclasses
from typing import Any, TypedDict

class AssistantPreferences:
    def to_json(self) -> dict: ...

class ExposedEntity:
    def to_json(self) -> dict: ...

class SerializedExposedEntities(TypedDict):
    ...

class ExposedEntities:
    def __init__(self, hass: HomeAssistant): ...

    async def async_initialize(self) -> None: ...

    def async_listen_entity_updates(self, assistant: str, listener: Callable) -> Callable: ...

    def async_set_assistant_option(self, assistant: str, entity_id: str, key: str, value: Any) -> None: ...

    def _async_set_legacy_assistant_option(self, assistant: str, entity_id: str, key: str, value: Any) -> None: ...

    def async_get_expose_new_entities(self, assistant: str) -> bool: ...

    def async_set_expose_new_entities(self, assistant: str, expose_new: bool) -> None: ...

    def async_get_assistant_settings(self, assistant: str) -> dict: ...

    def async_get_entity_settings(self, entity_id: str) -> dict: ...

    def async_should_expose(self, assistant: str, entity_id: str) -> bool: ...

    def _async_should_expose_legacy_entity(self, assistant: str, entity_id: str) -> bool: ...

    def _is_default_exposed(self, entity_id: str, registry_entry: Any) -> bool: ...

    def _update_exposed_entity(self, assistant: str, entity_id: str, key: str, value: Any) -> ExposedEntity: ...

    def _new_exposed_entity(self, assistant: str, key: str, value: Any) -> ExposedEntity: ...

    async def _async_load_data(self) -> dict: ...

    def _async_schedule_save(self) -> None: ...

    def _data_to_save(self) -> dict: ...

def ws_expose_entity(hass: HomeAssistant, connection: Any, msg: dict) -> None: ...

def ws_list_exposed_entities(hass: HomeAssistant, connection: Any, msg: dict) -> None: ...

def ws_expose_new_entities_get(hass: HomeAssistant, connection: Any, msg: dict) -> None: ...

def ws_expose_new_entities_set(hass: HomeAssistant, connection: Any, msg: dict) -> None: ...

def async_listen_entity_updates(hass: HomeAssistant, assistant: str, listener: Callable) -> Callable: ...

def async_get_assistant_settings(hass: HomeAssistant, assistant: str) -> dict: ...

def async_get_entity_settings(hass: HomeAssistant, entity_id: str) -> dict: ...

def async_expose_entity(hass: HomeAssistant, assistant: str, entity_id: str, should_expose: bool) -> None: ...

def async_should_expose(hass: HomeAssistant, assistant: str, entity_id: str) -> bool: ...

def async_set_assistant_option(hass: HomeAssistant, assistant: str, entity_id: str, option: str, value: Any) -> None: ...
