from typing import Any, Dict, Optional, Union, List

class MockRequest:
    def __init__(self, request: Any) -> None:
        ...

    def get_type(self) -> str:
        ...

    def get_host(self) -> str:
        ...

    def get_origin_req_host(self) -> str:
        ...

    def get_full_url(self) -> str:
        ...

    def is_unverifiable(self) -> bool:
        ...

    def has_header(self, name: str) -> bool:
        ...

    def get_header(self, name: str, default: Optional[str] = None) -> Optional[str]:
        ...

    def add_unredirected_header(self, name: str, value: str) -> None:
        ...

    def get_new_headers(self) -> Dict[str, str]:
        ...

    @property
    def unverifiable(self) -> bool:
        ...

    @property
    def origin_req_host(self) -> str:
        ...

    @property
    def host(self) -> str:
        ...

class Headers:
    def __init__(self, headers: Any) -> None:
        ...

    def get_all(self, key: str, default: Any) -> List[str]:
        ...

class MockResponse:
    def __init__(self, headers: Any) -> None:
        ...

    def get_all(self, name: str, default: Any) -> List[str]:
        ...

    def info(self) -> Any:
        ...

    def getheaders(self, name: str) -> List[str]:
        ...

    @property
    def headers(self) -> Headers:
        ...

def extract_cookies_to_jar(jar: Any, request: Any, response: Any) -> None:
    ...

def get_cookie_header(jar: Any, request: Any) -> Optional[str]:
    ...

def remove_cookie_by_name(cookiejar: Any, name: str, domain: Optional[str] = None, path: Optional[str] = None) -> None:
    ...

class CookieConflictError(RuntimeError):
    ...

class RequestsCookieJar(cookielib.CookieJar, MutableMapping):
    def get(self, name: str, default: Any = None, domain: Optional[str] = None, path: Optional[str] = None) -> Any:
        ...

    def set(self, name: str, value: Any, **kwargs: Any) -> None:
        ...

    def iterkeys(self) -> List[str]:
        ...

    def keys(self) -> List[str]:
        ...

    def itervalues(self) -> List[str]:
        ...

    def values(self) -> List[str]:
        ...

    def iteritems(self) -> List[Tuple[str, str]]:
        ...

    def items(self) -> List[Tuple[str, str]]:
        ...

    def list_domains(self) -> List[str]:
        ...

    def list_paths(self) -> List[str]:
        ...

    def multiple_domains(self) -> bool:
        ...

    def get_dict(self, domain: Optional[str] = None, path: Optional[str] = None) -> Dict[str, str]:
        ...

    def __contains__(self, name: str) -> bool:
        ...

    def __getitem__(self, name: str) -> Any:
        ...

    def __setitem__(self, name: str, value: Any) -> None:
        ...

    def __delitem__(self, name: str) -> None:
        ...

    def set_cookie(self, cookie: Any, *args: Any, **kwargs: Any) -> Any:
        ...

    def update(self, other: Any) -> None:
        ...

    def _find(self, name: str, domain: Optional[str] = None, path: Optional[str] = None) -> Any:
        ...

    def _find_no_duplicates(self, name: str, domain: Optional[str] = None, path: Optional[str] = None) -> Any:
        ...

    def __getstate__(self) -> Dict[str, Any]:
        ...

    def __setstate__(self, state: Dict[str, Any]) -> None:
        ...

    def copy(self) -> 'RequestsCookieJar':
        ...

    def get_policy(self) -> Any:
        ...

def _copy_cookie_jar(jar: Any) -> Any:
    ...

def create_cookie(name: str, value: Any, **kwargs: Any) -> Any:
    ...

def morsel_to_cookie(morsel: Any) -> Any:
    ...

def cookiejar_from_dict(cookie_dict: Dict[str, str], cookiejar: Optional[RequestsCookieJar] = None, overwrite: bool = True) -> RequestsCookieJar:
    ...

def merge_cookies(cookiejar: cookielib.CookieJar, cookies: Union[Dict[str, str], cookielib.CookieJar]) -> cookielib.CookieJar:
    ...
