from __future__ import annotations
import asyncio
from collections.abc import Callable
from datetime import timedelta
from typing import Any, overload

from homeassistant.core import HomeAssistant, callback as hass_callback
from homeassistant.helpers.debounce import Debouncer
from homeassistant.helpers.event import async_track_time_interval
from homeassistant.helpers.service_info.usb import UsbServiceInfo as _UsbServiceInfo
from homeassistant.loader import USBMatcher, async_get_usb
from .models import USBDevice
from .utils import usb_device_from_port

PORT_EVENT_CALLBACK_TYPE = Callable[[set[USBDevice], set[USBDevice]], None]
POLLING_MONITOR_SCAN_PERIOD = timedelta(seconds=5)
REQUEST_SCAN_COOLDOWN = 10
ADD_REMOVE_SCAN_COOLDOWN = 5

@overload
def human_readable_device_name(device: Any, serial_number: str, manufacturer: str, description: str, vid: str, pid: str) -> str: ...

@overload
def human_readable_device_name(device: Any, serial_number: str, manufacturer: str, description: str, vid: str, pid: str) -> str: ...

def human_readable_device_name(device: Any, serial_number: str, manufacturer: str, description: str, vid: str, pid: str) -> str: ...

def get_serial_by_id(dev_path: str) -> str: ...

async def async_setup(hass: HomeAssistant, config: Any) -> bool: ...

def _fnmatch_lower(name: str, pattern: str) -> bool: ...

def _is_matching(device: USBDevice, matcher: dict[str, str]) -> bool: ...

class USBDiscovery:
    def __init__(self, hass: HomeAssistant, usb: Any) -> None: ...

    async def async_setup(self) -> None: ...

    async def async_start(self, event: Any) -> None: ...

    def async_stop(self, event: Any) -> None: ...

    def _async_supports_monitoring(self) -> bool: ...

    async def _async_start_monitor(self) -> None: ...

    def _async_start_monitor_polling(self) -> None: ...

    def _async_start_aiousbwatcher(self) -> None: ...

    def async_register_scan_request_callback(self, _callback: Callable) -> Callable: ...

    def async_register_initial_scan_callback(self, callback: Callable) -> Callable: ...

    def async_register_port_event_callback(self, callback: Callable) -> Callable: ...

    async def _async_process_discovered_usb_device(self, device: USBDevice) -> None: ...

    async def _async_process_ports(self, ports: Any) -> None: ...

    def _async_delayed_add_remove_scan(self) -> None: ...

    async def _async_scan_serial(self) -> None: ...

    async def _async_scan(self) -> None: ...

    async def async_request_scan(self) -> None: ...

@websocket_api.require_admin
@websocket_api.websocket_command({vol.Required('type'): 'usb/scan'})
@websocket_api.async_response
async def websocket_usb_scan(hass: HomeAssistant, connection: ActiveConnection, msg: dict[str, Any]) -> None: ...
