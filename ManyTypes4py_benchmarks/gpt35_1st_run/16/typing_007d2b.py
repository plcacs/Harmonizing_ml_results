def is_none_type(type_: type) -> bool:
    ...

def display_as_type(v: type) -> str:
    ...

def resolve_annotations(raw_annotations: Dict[str, Any], module_name: str) -> Dict[str, Any]:
    ...

def is_callable_type(type_: type) -> bool:
    ...

def is_literal_type(type_: type) -> bool:
    ...

def literal_values(type_: type) -> Tuple:
    ...

def all_literal_values(type_: type) -> Tuple:
    ...

def is_namedtuple(type_: type) -> bool:
    ...

def is_typeddict(type_: type) -> bool:
    ...

def _check_typeddict_special(type_: type) -> bool:
    ...

def is_typeddict_special(type_: type) -> bool:
    ...

def is_new_type(type_: type) -> bool:
    ...

def new_type_supertype(type_: type) -> type:
    ...

def _check_classvar(v: Any) -> bool:
    ...

def _check_finalvar(v: Any) -> bool:
    ...

def is_classvar(ann_type: Any) -> bool:
    ...

def is_finalvar(ann_type: Any) -> bool:
    ...

def update_field_forward_refs(field: ModelField, globalns: Dict[str, Any], localns: Dict[str, Any]) -> None:
    ...

def update_model_forward_refs(model: Any, fields: List[ModelField], json_encoders: Dict[type, Callable], localns: Dict[str, Any], exc_to_suppress: Tuple[Exception]) -> None:
    ...

def get_class(type_: type) -> Union[bool, None]:
    ...

def get_sub_types(tp: type) -> List[type]:
    ...
