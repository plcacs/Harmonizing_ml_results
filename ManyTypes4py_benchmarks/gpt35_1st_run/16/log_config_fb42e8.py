def _chain(first_func: Callable, *funcs: Callable) -> Callable:
    ...

def _match_list(module_rule: Tuple[List[str], str], logger_name: str) -> Tuple[int, Optional[str]:
    ...

class LogFilter:
    def __init__(self, config: Dict[str, str], default_level: str) -> None:
        ...

    def _get_log_level(self, logger_name: str) -> str:
        ...

    def should_log(self, logger_name: str, level: str) -> bool:
        ...

class RaidenFilter(logging.Filter):
    def __init__(self, log_level_config: Dict[str, str], name: str = '') -> None:
        ...

    def filter(self, record: logging.LogRecord) -> bool:
        ...

def add_greenlet_name(_logger: Any, _method_name: str, event_dict: Dict[str, Any]) -> Dict[str, Any]:
    ...

def redactor(blacklist: Dict[Pattern, str]) -> Callable[[str], str]:
    ...

def configure_debug_logfile_path(debug_log_file_path: Optional[str]) -> str:
    ...

def configure_logging(logger_level_config: Optional[Dict[str, str]] = None, colorize: bool = True, log_json: bool = False, log_file: Optional[str] = None, disable_debug_logfile: bool = False, debug_log_file_path: Optional[str] = None, cache_logger_on_first_use: bool = True, _first_party_packages: FrozenSet[str] = _FIRST_PARTY_PACKAGES, _debug_log_file_additional_level_filters: Optional[Dict[str, str]] = None) -> None:
    ...
