from typing import Dict, Any, Generator, List, Tuple

def _set_operations_by_dict(spec: Any, block: Any, operation_dict: Dict[str, Any]) -> None:
    ...

def _state_transition_and_sign_block_at_slot(spec: Any, state: Any, sync_aggregate: Any = None, operation_dict: Dict[str, Any] = None) -> Any:
    ...

def _all_blocks(_) -> bool:
    ...

def skip_slots(*slots: int) -> Callable[[Any], bool]:
    ...

def no_blocks(_) -> bool:
    ...

def only_at(slot: int) -> Callable[[Any], bool]:
    ...

def state_transition_across_slots(spec: Any, state: Any, to_slot: int, block_filter: Callable[[Any], bool] = _all_blocks) -> Generator[Any, None, None]:
    ...

def state_transition_across_slots_with_ignoring_proposers(spec: Any, state: Any, to_slot: int, ignoring_proposers: List[int], only_last_block: bool = False) -> Generator[Any, None, None]:
    ...

def get_upgrade_fn(spec: Any, fork: Any) -> Any:
    ...

def do_fork(state: Any, spec: Any, post_spec: Any, fork_epoch: int, with_block: bool = True, sync_aggregate: Any = None, operation_dict: Dict[str, Any] = None) -> Tuple[Any, Any]:
    ...

def transition_until_fork(spec: Any, state: Any, fork_epoch: int) -> None:
    ...

def _transition_until_fork_minus_one(spec: Any, state: Any, fork_epoch: int) -> None:
    ...

def transition_across_forks(spec: Any, state: Any, to_slot: int, phases: Any = None, with_block: bool = False, sync_aggregate: Any = None) -> Tuple[Any, Any, Any]:
    ...

def transition_to_next_epoch_and_append_blocks(spec: Any, state: Any, post_tag: Any, blocks: List[Any], only_last_block: bool = False, ignoring_proposers: List[int] = None) -> None:
    ...

def run_transition_with_operation(state: Any, fork_epoch: int, spec: Any, post_spec: Any, pre_tag: Any, post_tag: Any, operation_type: Any, operation_at_slot: int) -> Generator[Tuple[str, Any], None, None]:
    ...

def _transition_until_active(post_spec: Any, state: Any, post_tag: Any, blocks: List[Any], validator_index: int) -> Any:
    ...
