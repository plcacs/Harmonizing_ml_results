from typing import List, Dict, Any, Tuple, Union

def func_no_args() -> None:
    ...

async def coroutine(arg: Any, exec: bool = False) -> None:
    ...

def function_signature_stress_test(number: int, no_annotation: Any = None, text: str = 'default', *, debug: bool = False, **kwargs: Any) -> str:
    ...

def spaces(a: int = 1, b: Tuple = (), c: List = [], d: Dict = {}, e: bool = True, f: int = -1, g: int = 1 if False else 2, h: str = '', i: str = '') -> None:
    ...

def spaces_types(a: int = 1, b: Tuple = (), c: List = [], d: Dict = {}, e: bool = True, f: int = -1, g: int = 1 if False else 2, h: str = '', i: str = '') -> None:
    ...

def spaces2(result: Any = None) -> None:
    ...

def subscriptlist() -> None:
    ...

def import_as_names() -> None:
    ...

def testlist_star_expr() -> None:
    ...

def yield_expr() -> None:
    ...

def example(session: Any) -> None:
    ...

def off_and_on_without_data() -> None:
    ...

def on_and_off_broken() -> None:
    ...

def long_lines() -> None:
    ...

def single_literal_yapf_disable() -> None:
    ...
