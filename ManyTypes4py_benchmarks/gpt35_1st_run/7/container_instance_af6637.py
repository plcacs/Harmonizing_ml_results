from typing import Any, Dict, List, Optional, Union

def _get_default_arm_template() -> Dict[str, Any]:
    ...

class AzureContainerJobConfiguration(BaseJobConfiguration):
    ...

class AzureContainerVariables(BaseVariables):
    ...

class AzureContainerWorkerResult(BaseWorkerResult):
    ...

class AzureContainerWorker(BaseWorker):
    ...

    async def run(self, flow_run: FlowRun, configuration: AzureContainerJobConfiguration, task_status: Any = None) -> AzureContainerWorkerResult:
        ...

    def _wait_for_task_container_start(self, client: ContainerInstanceManagementClient, configuration: AzureContainerJobConfiguration, container_group_name: str, creation_status_poller: LROPoller) -> Optional[ContainerGroup]:
        ...

    async def _provision_container_group(self, aci_client: ContainerInstanceManagementClient, resource_client: ResourceManagementClient, configuration: AzureContainerJobConfiguration, container_group_name: str) -> ContainerGroup:
        ...

    def _watch_task_and_get_exit_code(self, client: ContainerInstanceManagementClient, configuration: AzureContainerJobConfiguration, container_group: ContainerGroup, run_start_time: datetime.datetime) -> int:
        ...

    async def _wait_for_container_group_deletion(self, aci_client: ContainerInstanceManagementClient, configuration: AzureContainerJobConfiguration, container_group_name: str) -> None:
        ...

    def _get_container(self, container_group: ContainerGroup) -> Container:
        ...

    @staticmethod
    def _get_container_group(client: ContainerInstanceManagementClient, resource_group_name: str, container_group_name: str) -> ContainerGroup:
        ...

    def _get_and_stream_output(self, client: ContainerInstanceManagementClient, configuration: AzureContainerJobConfiguration, container_group: ContainerGroup, last_log_time: datetime.datetime) -> datetime.datetime:
        ...

    def _get_logs(self, client: ContainerInstanceManagementClient, configuration: AzureContainerJobConfiguration, container_group: ContainerGroup, max_lines: int = 100) -> str:
        ...

    def _stream_output(self, log_content: str, last_log_time: datetime.datetime) -> datetime.datetime:
        ...

    @property
    def _log_prefix(self) -> str:
        ...

    @staticmethod
    def _provisioning_succeeded(container_group: ContainerGroup) -> bool:
        ...
