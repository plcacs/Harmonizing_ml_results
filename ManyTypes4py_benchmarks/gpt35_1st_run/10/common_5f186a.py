from typing import Annotated, Any

def get_setup_webhook_message(integration: str, user_name: str = None) -> str:
    ...

def notify_bot_owner_about_invalid_json(user_profile: UserProfile, webhook_client_name: str) -> None:
    ...

class MissingHTTPEventHeaderError(AnomalousWebhookPayloadError):
    def __init__(self, header: str) -> None:
        ...

def check_send_webhook_message(request: HttpRequest, user_profile: UserProfile, topic: str, body: str, complete_event_type: str = None, *, stream: str = None, user_specified_topic: OptionalUserSpecifiedTopicStr = None, only_events: list[str] = None, exclude_events: list[str] = None, unquote_url_parameters: bool = False) -> None:
    ...

def standardize_headers(input_headers: dict[str, Any]) -> dict[str, str]:
    ...

def validate_extract_webhook_http_header(request: HttpRequest, header: str, integration_name: str) -> str:
    ...

def get_fixture_http_headers(integration_name: str, fixture_name: str) -> dict[str, str]:
    ...

def get_http_headers_from_filename(http_header_key: str) -> Callable[[str], dict[str, str]]:
    ...

def unix_milliseconds_to_timestamp(milliseconds: int, webhook: str) -> datetime:
    ...

def parse_multipart_string(body: str) -> dict[str, str]:
    ...
