from typing import List, Array

class ClassName(TreeNameDefinition):
    def __init__(self, class_value: ClassValue, tree_name, name_context, apply_decorators):
        ...

class ClassFilter(ParserTreeFilter):
    def __init__(self, class_value: ClassValue, node_context=None, until_position=None, origin_scope=None, is_instance=False):
        ...

class ClassMixin:
    def is_class(self) -> bool:
        ...
    def is_class_mixin(self) -> bool:
        ...
    def py__call__(self, arguments: Array):
        ...
    def py__class__(self) -> ClassValue:
        ...
    def py__name__(self) -> str:
        ...
    def py__mro__(self) -> List[ClassValue]:
        ...
    def get_filters(self, origin_scope=None, is_instance=False, include_metaclasses=True, include_type_when_class=True):
        ...
    def get_signatures(self) -> List[Signature]:
        ...
    def _as_context(self) -> ClassContext:
        ...
    def get_type_hint(self, add_class_info=True) -> str:
        ...
    def is_typeddict(self) -> bool:
        ...
    def py__getitem__(self, index_value_set: ValueSet, contextualized_node) -> ValueSet:
        ...
    def with_generics(self, generics_tuple) -> GenericClass:
        ...
    def define_generics(self, type_var_dict) -> ValueSet:
        ...
    def list_type_vars(self) -> List[ValueName]:
        ...
    def _get_bases_arguments(self) -> TreeArguments:
        ...
    def py__bases__(self) -> List[LazyKnownValues]:
        ...
    def get_metaclass_filters(self, metaclasses, is_instance) -> List[ClassFilter]:
        ...
    def get_metaclasses(self) -> ValueSet:
        ...
    def get_metaclass_signatures(self, metaclasses) -> List[Signature]:
        ...

class ClassValue(ClassMixin, FunctionAndClassBase, metaclass=CachedMetaClass):
    def list_type_vars(self) -> List[ValueName]:
        ...
    def py__bases__(self) -> List[LazyKnownValues]:
        ...
    def get_metaclass_filters(self, metaclasses, is_instance) -> List[ClassFilter]:
        ...
    def get_metaclasses(self) -> ValueSet:
        ...
    def get_metaclass_signatures(self, metaclasses) -> List[Signature]:
        ...
