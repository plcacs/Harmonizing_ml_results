from typing import Any, Callable, Coroutine, Dict, ForwardRef, List, Mapping, Optional, Sequence, Tuple, Type, Union

def ensure_multipart_is_installed() -> None:
    ...

def get_param_sub_dependant(*, param_name: str, depends: params.Depends, path: str, security_scopes: Optional[List[str]] = None) -> Dependant:
    ...

def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:
    ...

def get_sub_dependant(*, depends: params.Depends, dependency: Callable[..., Any], path: str, name: Optional[str] = None, security_scopes: Optional[List[str]] = None) -> Dependant:
    ...

def get_flat_dependant(dependant: Dependant, *, skip_repeats: bool = False, visited: Optional[List[CacheKey]] = None) -> Dependant:
    ...

def _get_flat_fields_from_params(fields: List[ModelField]) -> List[ModelField]:
    ...

def get_flat_params(dependant: Dependant) -> List[ModelField]:
    ...

def get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:
    ...

def get_typed_annotation(annotation: Any, globalns: Dict[str, Any]) -> Any:
    ...

def get_typed_return_annotation(call: Callable[..., Any]) -> Any:
    ...

def get_dependant(*, path: str, call: Callable[..., Any], name: Optional[str] = None, security_scopes: Optional[List[str]] = None, use_cache: bool = True) -> Dependant:
    ...

def add_non_field_param_to_dependency(*, param_name: str, type_annotation: Type, dependant: Dependant) -> Optional[None]:
    ...

def get_flat_dependant(dependant: Dependant, *, skip_repeats: bool = False, visited: Optional[List[CacheKey]] = None) -> Dependant:
    ...

def _validate_value_with_model_field(*, field: ModelField, value: Any, values: Dict[str, Any], loc: Tuple[str, ...]) -> Tuple[Any, List[ErrorWrapper]]:
    ...

def _get_multidict_value(field: ModelField, values: Union[ImmutableMultiDict, Headers], alias: Optional[str] = None) -> Any:
    ...

def request_params_to_args(fields: List[ModelField], received_params: Union[ImmutableMultiDict, Headers]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:
    ...

def _should_embed_body_fields(fields: List[ModelField]) -> bool:
    ...

def _extract_form_body(body_fields: List[ModelField], received_body: FormData) -> Dict[str, Any]:
    ...

def request_body_to_args(body_fields: List[ModelField], received_body: Union[FormData, Dict[str, Any]], embed_body_fields: bool) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:
    ...

def get_body_field(*, flat_dependant: Dependant, name: str, embed_body_fields: bool) -> Optional[ModelField]:
    ...
