from typing import Any, List, Dict, Union

def test_trigger_dbt_cli_command(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

def test_trigger_dbt_cli_command_cli_argument_list(profiles_dir: str, dbt_cli_profile_bare: Any, dbt_runner_freshness_success: MagicMock) -> None:
    ...

def test_trigger_dbt_cli_command_failed(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

def test_trigger_dbt_cli_command_run_twice_overwrite(profiles_dir: str, dbt_cli_profile: Any, dbt_cli_profile_bare: Any) -> None:
    ...

def test_trigger_dbt_cli_command_run_twice_exists(profiles_dir: str, dbt_cli_profile: Any, dbt_cli_profile_bare: Any) -> None:
    ...

def test_trigger_dbt_cli_command_missing_profile(profiles_dir: str) -> None:
    ...

def test_trigger_dbt_cli_command_find_home(dbt_cli_profile_bare: Any) -> None:
    ...

def test_trigger_dbt_cli_command_find_env(profiles_dir: str, dbt_cli_profile_bare: Any, monkeypatch: Any) -> None:
    ...

def test_trigger_dbt_cli_command_project_dir(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

def test_trigger_dbt_cli_command_extra_command_args(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

class TestDbtCoreOperation:
    def test_find_valid_profiles_dir_default_env(self, tmp_path: str, mock_open_process: MagicMock, mock_shell_process: MagicMock, monkeypatch: Any) -> None:
        ...

    def test_find_valid_profiles_dir_input_env(self, tmp_path: str, mock_open_process: MagicMock, mock_shell_process: MagicMock) -> None:
        ...

    def test_find_valid_profiles_dir_overwrite_without_profile(self, tmp_path: str, mock_open_process: MagicMock, mock_shell_process: MagicMock) -> None:
        ...

    def test_find_valid_profiles_dir_overwrite_with_profile(self, tmp_path: str, dbt_cli_profile: Any, mock_open_process: MagicMock, mock_shell_process: MagicMock) -> None:
        ...

    def test_find_valid_profiles_dir_not_overwrite_with_profile(self, tmp_path: str, dbt_cli_profile: Any, mock_open_process: MagicMock, mock_shell_process: MagicMock) -> None:
        ...

    def test_find_valid_profiles_dir_path_without_profile(self) -> None:
        ...

    def test_append_dirs_to_commands(self, tmp_path: str, dbt_cli_profile: Any, mock_open_process: MagicMock, mock_shell_process: MagicMock, monkeypatch: Any) -> None:
        ...

def test_sync_dbt_cli_command_creates_artifact(profiles_dir: str, dbt_cli_profile: Any) -> None:
    ...

async def test_run_dbt_build_creates_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

async def test_run_dbt_test_creates_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

async def test_run_dbt_snapshot_creates_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

async def test_run_dbt_seed_creates_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

async def test_run_dbt_model_creates_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

async def test_run_dbt_source_freshness_creates_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

@pytest.fixture
def dbt_runner_model_error(monkeypatch: Any, mock_dbt_runner_model_error: MagicMock) -> None:
    ...

async def test_run_dbt_model_creates_unsuccessful_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

async def test_run_dbt_source_freshness_creates_unsuccessful_artifact(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...

@pytest.mark.usefixtures('dbt_runner_failed_result')
async def test_run_dbt_model_throws_error(profiles_dir: str, dbt_cli_profile_bare: Any) -> None:
    ...
