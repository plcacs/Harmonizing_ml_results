from typing import List, Dict

class Parse:
    @classmethod
    def _song_url_by_id(cls, sid: str) -> Tuple[str, str]:
        ...

    @classmethod
    def song_url(cls, song: Dict) -> Tuple[str, str]:
        ...

    @classmethod
    def song_album(cls, song: Dict) -> Tuple[str, str]:
        ...

    @classmethod
    def song_artist(cls, song: Dict) -> str:
        ...

    @classmethod
    def songs(cls, songs: List[Dict]) -> List[Dict]:
        ...

    @classmethod
    def artists(cls, artists: List[Dict]) -> List[Dict]:
        ...

    @classmethod
    def albums(cls, albums: List[Dict]) -> List[Dict]:
        ...

    @classmethod
    def playlists(cls, playlists: List[Dict]) -> List[Dict]:
        ...

class NetEase:
    def __init__(self):
        ...

    @property
    def toplists(self) -> List[str]:
        ...

    def logout(self) -> None:
        ...

    def _raw_request(self, method: str, endpoint: str, data=None) -> requests.Response:
        ...

    def make_cookie(self, name: str, value: str) -> Cookie:
        ...

    def request(self, method: str, path: str, params={}, default={'code': -1}, custom_cookies={}) -> Dict:
        ...

    def login(self, username: str, password: str) -> Dict:
        ...

    def daily_task(self, is_mobile: bool = True) -> Dict:
        ...

    def user_playlist(self, uid: str, offset: int = 0, limit: int = 50) -> List[Dict]:
        ...

    def recommend_resource(self) -> List[Dict]:
        ...

    def recommend_playlist(self, total: bool = True, offset: int = 0, limit: int = 20) -> List[Dict]:
        ...

    def personal_fm(self) -> List[Dict]:
        ...

    def fm_like(self, songid: str, like: bool = True, time: int = 25, alg: str = 'itembased') -> bool:
        ...

    def fm_trash(self, songid: str, time: int = 25, alg: str = 'RT') -> bool:
        ...

    def search(self, keywords: str, stype: int = 1, offset: int = 0, total: str = 'true', limit: int = 50) -> Dict:
        ...

    def new_albums(self, offset: int = 0, limit: int = 50) -> List[Dict]:
        ...

    def top_playlists(self, category: str = '全部', order: str = 'hot', offset: int = 0, limit: int = 50) -> List[Dict]:
        ...

    def playlist_catelogs(self) -> Dict:
        ...

    def playlist_songlist(self, playlist_id: str) -> List[Dict]:
        ...

    def top_artists(self, offset: int = 0, limit: int = 100) -> List[Dict]:
        ...

    def top_songlist(self, idx: int = 0, offset: int = 0, limit: int = 100) -> List[Dict]:
        ...

    def artists(self, artist_id: str) -> List[Dict]:
        ...

    def get_artist_album(self, artist_id: str, offset: int = 0, limit: int = 50) -> List[Dict]:
        ...

    def album(self, album_id: str) -> List[Dict]:
        ...

    def song_comments(self, music_id: str, offset: int = 0, total: str = 'false', limit: int = 100) -> Dict:
        ...

    def songs_detail(self, ids: List[str]) -> List[Dict]:
        ...

    def songs_url(self, ids: List[str]) -> List[Dict]:
        ...

    def song_lyric(self, music_id: str) -> List[str]:
        ...

    def song_tlyric(self, music_id: str) -> List[str]:
        ...

    def djRadios(self, offset: int = 0, limit: int = 50) -> List[Dict]:
        ...

    def djprograms(self, radio_id: str, asc: bool = False, offset: int = 0, limit: int = 50) -> List[Dict]:
        ...

    def alldjprograms(self, radio_id: str, asc: bool = False, offset: int = 0, limit: int = 500) -> List[Dict]:
        ...

    def get_version(self) -> Dict:
        ...

    def dig_info(self, data, dig_type: str) -> List[Dict]:
        ...
