from typing import Iterator, Tuple, Any, Dict, Set, FrozenSet, ChainMap, Counter, DefaultDict, Deque, Optional, Union, ClassVar, Type, TypeVar, Callable, Protocol, NewType, TypedDict

_PROXY_CLASS_TYPES: List[str] = 'Tuple Generic Protocol Callable Type'.split()
_TYPE_ALIAS_TYPES: Dict[str, str] = {'List': 'builtins.list', 'Dict': 'builtins.dict', 'Set': 'builtins.set', 'FrozenSet': 'builtins.frozenset', 'ChainMap': 'collections.ChainMap', 'Counter': 'collections.Counter', 'DefaultDict': 'collections.defaultdict', 'Deque': 'collections.deque'}
_PROXY_TYPES: List[str] = 'Optional Union ClassVar'.split()

def infer(self) -> ValueSet:
    ...

def _remap(self) -> Iterator:
    ...

def execute_annotation(self) -> ValueSet:
    ...

def gather_annotation_classes(self) -> ValueSet:
    ...

def _create_instance_with_generics(self, generics_manager) -> 'ProxyWithGenerics':
    ...

def infer_type_vars(self, value_set) -> Dict:
    ...

def py__getitem__(self, index_value_set, contextualized_node) -> ValueSet:
    ...

def py__bases__(self) -> List:
    ...

def get_metaclasses(self) -> List:
    ...

def name(self) -> ValueName:
    ...

def infer_type_vars(self, value_set) -> Dict:
    ...

def _create_instance_with_generics(self, generics_manager) -> 'TypingClassWithGenerics':
    ...

def infer_type_vars(self, value_set) -> Dict:
    ...

def _get_wrapped_value(self) -> Value:
    ...

def infer_type_vars(self, value_set) -> Dict:
    ...

def py__call__(self, arguments) -> ValueSet:
    ...

def py__simple_getitem__(self, index) -> ValueSet:
    ...

def py__iter__(self, contextualized_node=None) -> Iterator:
    ...

def py__getitem__(self, index_value_set, contextualized_node) -> ValueSet:
    ...

def _get_wrapped_value(self) -> Value:
    ...

def infer_type_vars(self, value_set) -> Dict:
    ...

def py__call__(self, func_value_set) -> ValueSet:
    ...

def py__call__(self, arguments) -> ValueSet:
    ...

def py__call__(self, type_value_set, object_value_set) -> ValueSet:
    ...

def __init__(self, definition_class) -> None:
    ...

def py__simple_getitem__(self, index) -> ValueSet:
    ...

def get_key_values(self) -> ValueSet:
    ...

def _get_wrapped_value(self) -> Value:
    ...
