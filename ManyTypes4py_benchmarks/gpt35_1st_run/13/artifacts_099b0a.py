from __future__ import annotations
from typing import TYPE_CHECKING, Any, Optional, Union
from prefect.client.schemas.actions import ArtifactCreate as ArtifactRequest
from prefect.client.schemas.actions import ArtifactUpdate
from prefect.client.schemas.filters import ArtifactFilter, ArtifactFilterKey
from prefect.client.schemas.objects import Artifact as ArtifactResponse
from prefect.client.schemas.sorting import ArtifactSort
from prefect.context import MissingContextError
from prefect.logging.loggers import get_logger
from prefect.utilities.context import get_task_and_flow_run_ids

if TYPE_CHECKING:
    import logging

class Artifact(ArtifactRequest):
    async def acreate(self, client=None) -> ArtifactResponse: ...

    def create(self, client=None) -> ArtifactResponse: ...

    @classmethod
    async def aget(cls, key=None, client=None) -> Optional[ArtifactResponse]: ...

    @classmethod
    def get(cls, key=None, client=None) -> Optional[ArtifactResponse]: ...

    @classmethod
    async def aget_or_create(cls, key=None, description=None, data=None, client=None, **kwargs) -> Union[ArtifactResponse, bool]: ...

    @classmethod
    def get_or_create(cls, key=None, description=None, data=None, client=None, **kwargs) -> Union[ArtifactResponse, bool]: ...

    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class LinkArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class MarkdownArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class TableArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class ProgressArtifact(Artifact):
    async def aformat(self) -> float: ...

    def format(self) -> float: ...

class ImageArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

async def acreate_link_artifact(link, link_text=None, key=None, description=None, client=None) -> UUID: ...

def create_link_artifact(link, link_text=None, key=None, description=None, client=None) -> UUID: ...

async def acreate_markdown_artifact(markdown, key=None, description=None) -> UUID: ...

def create_markdown_artifact(markdown, key=None, description=None) -> UUID: ...

async def acreate_table_artifact(table, key=None, description=None) -> UUID: ...

def create_table_artifact(table, key=None, description=None) -> UUID: ...

async def acreate_progress_artifact(progress, key=None, description=None) -> UUID: ...

def create_progress_artifact(progress, key=None, description=None) -> UUID: ...

async def aupdate_progress_artifact(artifact_id, progress, description=None, client=None) -> UUID: ...

def update_progress_artifact(artifact_id, progress, description=None, client=None) -> UUID: ...

async def acreate_image_artifact(image_url, key=None, description=None) -> UUID: ...

def create_image_artifact(image_url, key=None, description=None) -> UUID: ...
