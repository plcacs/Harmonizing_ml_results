from typing import Any, Dict, Optional, List, Union

class AbstractDataset:
    def load(self) -> Any: ...
    def save(self, data: Any) -> None: ...
    def exists(self) -> bool: ...
    def release(self) -> None: ...
    def confirm(self) -> None: ...

class AbstractVersionedDataset(AbstractDataset):
    def _copy(self, _version: Any) -> AbstractVersionedDataset: ...

class MemoryDataset(AbstractDataset):
    def __init__(self, data: Any): ...

class Version:
    def __init__(self, version: Optional[Any], none: Any): ...

class CatalogConfigResolver:
    def __init__(self): ...
    def match_pattern(self, dataset_name: str) -> Optional[str]: ...
    def list_patterns(self) -> List[str]: ...
    def is_pattern(self, dataset_name: str) -> bool: ...
    def resolve_pattern(self, dataset_name: str) -> Optional[Dict[str, Any]]: ...
    def add_runtime_patterns(self, extra_dataset_patterns: Dict[str, Any]) -> None: ...

class DataCatalog:
    def __init__(self, datasets: Optional[Dict[str, AbstractDataset]] = None, feed_dict: Optional[Dict[str, Any]] = None, dataset_patterns: Optional[Dict[str, Any]] = None, load_versions: Optional[Dict[str, Any]] = None, save_version: Optional[str] = None, default_pattern: Optional[Dict[str, Any]] = None, config_resolver: Optional[CatalogConfigResolver] = None): ...
    @classmethod
    def from_config(cls, catalog: Dict[str, Dict[str, Any], credentials: Optional[Dict[str, Dict[str, Any]]] = None, load_versions: Optional[Dict[str, Any]] = None, save_version: Optional[str] = None) -> DataCatalog: ...
    def load(self, name: str, version: Optional[Any] = None) -> Any: ...
    def save(self, name: str, data: Any) -> None: ...
    def exists(self, name: str) -> bool: ...
    def release(self, name: str) -> None: ...
    def add(self, dataset_name: str, dataset: AbstractDataset, replace: bool = False) -> None: ...
    def add_all(self, datasets: Dict[str, AbstractDataset], replace: bool = False) -> None: ...
    def add_feed_dict(self, feed_dict: Dict[str, Any], replace: bool = False) -> None: ...
    def list(self, regex_search: Optional[str] = None) -> List[str]: ...
    def shallow_copy(self, extra_dataset_patterns: Optional[Dict[str, Any]] = None) -> DataCatalog: ...
    def confirm(self, name: str) -> None: ...
