from typing import List, Set, Dict, Any, Tuple, Optional

def get_to_device_broadcast_messages(to_device_mock: MagicMock, expected_receiver_addresses: List[str], device_id: str) -> List[Any]:
    ...

def ping_pong_message_success(transport0: MatrixTransport, transport1: MatrixTransport) -> bool:
    ...

def is_reachable(transport: MatrixTransport, address: Address) -> None:
    ...

def _wait_for_peer_reachability(transport: MatrixTransport, target_address: Address, target_reachability: AddressReachability, timeout: int = 5) -> None:
    ...

def wait_for_peer_unreachable(transport: MatrixTransport, target_address: Address, timeout: int = 5) -> None:
    ...

def wait_for_peer_reachable(transport: MatrixTransport, target_address: Address, timeout: int = 5) -> None:
    ...

def test_matrix_message_sync(matrix_transports: List[MatrixTransport]) -> None:
    ...

def test_matrix_message_retry(local_matrix_servers: List[str], retry_interval_initial: int, retry_interval_max: int, retries_before_backoff: int) -> None:
    ...

def test_matrix_message_broadcast(matrix_transports: List[MatrixTransport], services: List[str], device_id: str) -> None:
    ...

def test_monitoring_broadcast_messages(matrix_transports: List[MatrixTransport], environment_type: Environment, services: List[str], monkeypatch: Any) -> None:
    ...

def test_monitoring_broadcast_messages_in_production_if_bigger_than_threshold(matrix_transports: List[MatrixTransport], services: List[str], monkeypatch: Any, channel_balance_dai: int, expected_messages: int, environment_type: Environment) -> None:
    ...

def test_pfs_broadcast_messages(matrix_transports: List[MatrixTransport], services: List[str], monkeypatch: Any) -> None:
    ...

def test_matrix_user_roaming(matrix_transports: List[MatrixTransport], roaming_peer: str) -> None:
    ...

def test_matrix_multi_user_roaming(matrix_transports: List[MatrixTransport], roaming_peer: str) -> None:
    ...

def test_populate_services_addresses(service_registry_address: Address, private_keys: List[str], web3: Any, contract_manager: Any) -> None:
    ...
