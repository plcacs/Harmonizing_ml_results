from typing import List, Tuple

def get_user_topics(user_profile: UserProfile, include_deactivated: bool = False, include_stream_name: bool = False, visibility_policy: UserTopic.VisibilityPolicy = None) -> List[UserTopicDict]:
    ...

def get_topic_mutes(user_profile: UserProfile, include_deactivated: bool = False) -> List[Tuple[str, str, int]]:
    ...

def set_topic_visibility_policy(user_profile: UserProfile, topics: List[Tuple[str, str]], visibility_policy: UserTopic.VisibilityPolicy, last_updated: datetime = None) -> None:
    ...

def get_topic_visibility_policy(user_profile: UserProfile, stream_id: int, topic_name: str) -> UserTopic.VisibilityPolicy:
    ...

def bulk_set_user_topic_visibility_policy_in_database(user_profiles: List[UserProfile], stream_id: int, topic_name: str, *, visibility_policy: UserTopic.VisibilityPolicy, recipient_id: int = None, last_updated: datetime = None) -> List[UserProfile]:
    ...

def topic_has_visibility_policy(user_profile: UserProfile, stream_id: int, topic_name: str, visibility_policy: UserTopic.VisibilityPolicy) -> bool:
    ...

def exclude_stream_and_topic_mutes(conditions: List[ClauseElement], user_profile: UserProfile, stream_id: int) -> List[ClauseElement]:
    ...

def build_get_topic_visibility_policy(user_profile: UserProfile) -> Callable[[int, str], UserTopic.VisibilityPolicy]:
    ...

def get_users_with_user_topic_visibility_policy(stream_id: int, topic_name: str) -> QuerySet:
    ...
