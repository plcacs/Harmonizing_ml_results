from typing import List, Union, Optional, Dict, Any, AsyncGenerator, AsyncIterator, Generator, Tuple

def test_read_write_roundtrip(s3_bucket: S3Bucket) -> None:
    ...

def test_write_with_missing_directory_succeeds(s3_bucket: S3Bucket) -> None:
    ...

def test_read_fails_does_not_exist(s3_bucket: S3Bucket) -> None:
    ...

def test_aws_bucket_folder(s3_bucket: S3Bucket, aws_creds_block: AwsCredentials, delimiter: str, type_: Union[PureWindowsPath, PurePosixPath, str]) -> None:
    ...

def test_get_directory(nested_s3_bucket_structure: Any, s3_bucket: S3Bucket, tmp_path: Path) -> None:
    ...

def test_get_directory_respects_bucket_folder(nested_s3_bucket_structure: Any, s3_bucket: S3Bucket, tmp_path: Path, aws_creds_block: AwsCredentials) -> None:
    ...

def test_get_directory_respects_from_path(nested_s3_bucket_structure: Any, s3_bucket: S3Bucket, tmp_path: Path, aws_creds_block: AwsCredentials) -> None:
    ...

def test_put_directory(s3_bucket: S3Bucket, tmp_path: Path) -> None:
    ...

def test_put_directory_respects_basepath(s3_bucket: S3Bucket, tmp_path: Path, aws_creds_block: AwsCredentials) -> None:
    ...

def test_put_directory_with_ignore_file(s3_bucket: S3Bucket, tmp_path: Path, aws_creds_block: AwsCredentials) -> None:
    ...

def test_put_directory_respects_local_path(s3_bucket: S3Bucket, tmp_path: Path, aws_creds_block: AwsCredentials) -> None:
    ...

def test_read_path_in_sync_context(s3_bucket_with_file: Tuple[S3Bucket, str]) -> None:
    ...

def test_write_path_in_sync_context(s3_bucket: S3Bucket) -> None:
    ...

def test_resolve_path(s3_bucket: S3Bucket) -> None:
    ...

def test_list_objects_empty(s3_bucket_empty: S3Bucket, client_parameters: str) -> None:
    ...

def test_list_objects_one(s3_bucket_with_object: S3Bucket, client_parameters: str) -> None:
    ...

def test_list_objects(s3_bucket_with_objects: S3Bucket, client_parameters: str) -> None:
    ...

def test_list_objects_with_params(s3_bucket_with_similar_objects: S3Bucket, client_parameters: str) -> None:
    ...

def test_download_object_to_path(s3_bucket_with_object: S3Bucket, to_path: Optional[Path], client_parameters: str, tmp_path: Path) -> None:
    ...

def test_download_object_to_file_object(s3_bucket_with_object: S3Bucket, client_parameters: str, tmp_path: Path) -> None:
    ...

def test_download_folder_to_path(s3_bucket_with_objects: S3Bucket, client_parameters: str, tmp_path: Path, to_path: Optional[Path]) -> None:
    ...

def test_download_object_with_bucket_folder(s3_bucket_empty: S3Bucket, client_parameters: str, tmp_path: Path) -> None:
    ...

def test_stream_from(s3_bucket_2_with_object: S3Bucket, s3_bucket_empty: S3Bucket, client_parameters: str, to_path: Optional[Path]) -> None:
    ...

def test_upload_from_path(s3_bucket_empty: S3Bucket, client_parameters: str, tmp_path: Path, to_path: Optional[str]) -> None:
    ...

def test_upload_from_file_object(s3_bucket_empty: S3Bucket, client_parameters: str, tmp_path: Path) -> None:
    ...

def test_upload_from_folder(s3_bucket_empty: S3Bucket, client_parameters: str, tmp_path: Path, caplog: Any) -> None:
    ...

def test_copy_object(s3_bucket_with_object: S3Bucket, s3_bucket_2_empty: S3Bucket) -> None:
    ...

def test_copy_subpaths(s3_bucket_with_object: S3Bucket, s3_bucket_2_empty: S3Bucket, to_bucket: Union[S3Bucket, str], bucket_folder: Optional[str], expected_path: str) -> None:
    ...

def test_move_object_within_bucket(s3_bucket_with_object: S3Bucket) -> None:
    ...

def test_move_object_to_nonexistent_bucket_fails(s3_bucket_with_object: S3Bucket) -> None:
    ...

def test_move_object_onto_itself_fails(s3_bucket_with_object: S3Bucket) -> None:
    ...

def test_move_object_between_buckets(s3_bucket_with_object: S3Bucket, s3_bucket_2_empty: S3Bucket) -> None:
    ...

def test_move_subpaths(s3_bucket_with_object: S3Bucket, s3_bucket_2_empty: S3Bucket, to_bucket: Union[S3Bucket, str], bucket_folder: Optional[str], expected_path: str) -> None:
    ...

def test_round_trip_default_credentials() -> None:
    ...

def test_async_download_from_bucket(object: Any, client_parameters: str, aws_credentials: Any) -> None:
    ...

def test_async_list_objects(object: Any, object_in_folder: Any, client_parameters: str, aws_credentials: Any) -> None:
    ...

def test_async_copy_objects(object: Any, bucket: Any, bucket_2: Any, aws_credentials: Any) -> None:
    ...

def test_async_move_objects(object: Any, bucket: Any, bucket_2: Any, aws_credentials: Any) -> None:
    ...
