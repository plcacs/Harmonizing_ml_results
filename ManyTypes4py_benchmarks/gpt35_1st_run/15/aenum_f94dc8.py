from typing import Any, Iterable, Mapping, Tuple

class EnumMeta(type):
    def __call__(cls, value: Any, names: Any = None, module: Any = None, type: Any = None, start: int = 1) -> Any: ...

    def __getitem__(cls, name: str) -> Any: ...

    def __iter__(cls) -> Iterable: ...

    def __reversed__(cls) -> Iterable: ...

    def __len__(cls) -> int: ...

    def __bool__(cls) -> bool: ...

    def __repr__(cls) -> str: ...

    def __setattr__(cls, name: str, value: Any) -> None: ...

    @staticmethod
    def _get_mixins_(bases: Tuple) -> Tuple: ...

    @staticmethod
    def _find_new_(classdict: Mapping, member_type: Any, first_enum: Any) -> Tuple: ...

    @staticmethod
    def _reduce_ex_by_name(self, proto: int) -> str: ...

    @staticmethod
    def unique(enumeration: Any) -> Any: ...

class IntEnum(int, Enum): ...

def unique(enumeration: Any) -> Any: ...
