from typing import List, Dict, Union

def build_email(template_prefix: str, to_user_ids: List[int] = None, to_emails: List[str] = None, from_name: str = None, from_address: str = None, reply_to_email: str = None, language: str = None, context: Dict[str, Any] = {}, realm: Realm = None) -> EmailMultiAlternatives:
    ...

def send_email(template_prefix: str, to_user_ids: List[int] = None, to_emails: List[str] = None, from_name: str = None, from_address: str = None, reply_to_email: str = None, language: str = None, context: Dict[str, Any] = {}, realm: Realm = None, connection: BaseEmailBackend = None, dry_run: bool = False, request: HttpRequest = None) -> None:
    ...

def send_future_email(template_prefix: str, realm: Realm, to_user_ids: List[int] = None, to_emails: List[str] = None, from_name: str = None, from_address: str = None, language: str = None, context: Dict[str, Any] = {}, delay: timedelta = timedelta(0)) -> None:
    ...

def send_email_to_admins(template_prefix: str, realm: Realm, from_name: str = None, from_address: str = None, language: str = None, context: Dict[str, Any] = {}) -> None:
    ...

def send_email_to_billing_admins_and_realm_owners(template_prefix: str, realm: Realm, from_name: str = None, from_address: str = None, language: str = None, context: Dict[str, Any] = {}) -> None:
    ...

def clear_scheduled_invitation_emails(email: str) -> None:
    ...

def clear_scheduled_emails(user_id: int, email_type: str = None) -> None:
    ...

def deliver_scheduled_emails(email: ScheduledEmail) -> None:
    ...

def get_header(option: str, header: str, name: str) -> str:
    ...

def custom_email_sender(markdown_template_path: str, dry_run: bool, subject: str = None, from_address: str = FromAddress.SUPPORT, from_name: str = None, reply_to: str = None, **kwargs) -> Callable:
    ...

def send_custom_email(users: QuerySet[UserProfile], dry_run: bool, options: Dict[str, Union[str, bool]], add_context: Callable = None, distinct_email: bool = False) -> QuerySet[UserProfile]:
    ...

def send_custom_server_email(remote_servers: QuerySet[RemoteZulipServer], dry_run: bool, options: Dict[str, Union[str, bool]], add_context: Callable = None) -> None:
    ...

def log_email_config_errors() -> None:
    ...
