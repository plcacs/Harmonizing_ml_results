from typing import List, Dict, Any, Union

def get_stream_permission_policy_name(*, invite_only: bool = None, history_public_to_subscribers: bool = None, is_web_public: bool = None) -> str:
    ...

def get_default_value_for_history_public_to_subscribers(realm: Any, invite_only: bool, history_public_to_subscribers: bool) -> bool:
    ...

def render_stream_description(text: str, realm: Any, *, acting_user: Any = None) -> str:
    ...

def send_stream_creation_event(realm: Any, stream: Any, user_ids: List[int], recent_traffic: Any = None, setting_groups_dict: Any = None) -> None:
    ...

def get_stream_permission_default_group(setting_name: str, system_groups_name_dict: Dict[str, Any], creator: Any = None) -> Any:
    ...

def get_default_values_for_stream_permission_group_settings(realm: Any, creator: Any = None) -> Dict[str, Any]:
    ...

def get_user_ids_with_metadata_access_via_permission_groups(stream: Any) -> set:
    ...

def create_stream_if_needed(realm: Any, stream_name: str, *, invite_only: bool = False, is_web_public: bool = False, history_public_to_subscribers: bool = None, stream_description: str = '', message_retention_days: int = None, can_add_subscribers_group: Any = None, can_administer_channel_group: Any = None, can_send_message_group: Any = None, can_remove_subscribers_group: Any = None, acting_user: Any = None, setting_groups_dict: Any = None) -> Tuple[Any, bool]:
    ...

def create_streams_if_needed(realm: Any, stream_dicts: List[Dict[str, Any]], acting_user: Any = None, setting_groups_dict: Any = None) -> Tuple[List[Any], List[Any]]:
    ...

def subscribed_to_stream(user_profile: Any, stream_id: int) -> bool:
    ...

def is_user_in_can_administer_channel_group(stream: Any, user_recursive_group_ids: set) -> bool:
    ...

def is_user_in_can_add_subscribers_group(stream: Any, user_recursive_group_ids: set) -> bool:
    ...

def is_user_in_can_remove_subscribers_group(stream: Any, user_recursive_group_ids: set) -> bool:
    ...

def check_stream_access_based_on_can_send_message_group(sender: Any, stream: Any) -> None:
    ...

def access_stream_for_send_message(sender: Any, stream: Any, forwarder_user_profile: Any, archived_channel_notice: bool = False) -> None:
    ...

def check_for_exactly_one_stream_arg(stream_id: Union[int, None], stream: Union[Any, None]) -> None:
    ...

def access_stream_for_delete_or_update_requiring_metadata_access(user_profile: Any, stream_id: int) -> Tuple[Any, Any]:
    ...

def has_metadata_access_to_channel_via_groups(user_profile: Any, user_recursive_group_ids: set, can_administer_channel_group_id: int, can_add_subscribers_group_id: int) -> bool:
    ...

def check_basic_stream_access(user_profile: Any, stream: Any, *, is_subscribed: bool, require_content_access: bool = True) -> bool:
    ...

def access_stream_common(user_profile: Any, stream: Any, error: str, require_active: bool = True, require_content_access: bool = True) -> Any:
    ...

def access_stream_by_id(user_profile: Any, stream_id: int, require_active: bool = True, require_content_access: bool = True) -> Tuple[Any, Any]:
    ...

def access_stream_by_id_for_message(user_profile: Any, stream_id: int, require_active: bool = True, require_content_access: bool = True) -> Tuple[Any, Any]:
    ...

def get_public_streams_queryset(realm: Any) -> Any:
    ...

def get_web_public_streams_queryset(realm: Any) -> Any:
    ...

def check_stream_name_available(realm: Any, name: str) -> None:
    ...

def access_stream_by_name(user_profile: Any, stream_name: str, require_content_access: bool = True) -> Tuple[Any, Any]:
    ...

def access_web_public_stream(stream_id: int, realm: Any) -> Any:
    ...

def access_stream_to_remove_visibility_policy_by_name(user_profile: Any, stream_name: str, error: str) -> Any:
    ...

def access_stream_to_remove_visibility_policy_by_id(user_profile: Any, stream_id: int, error: str) -> Any:
    ...

def private_stream_user_ids(stream_id: int) -> set:
    ...

def public_stream_user_ids(stream: Any) -> set:
    ...

def can_access_stream_metadata_user_ids(stream: Any) -> set:
    ...

def can_access_stream_history(user_profile: Any, stream: Any) -> bool:
    ...

def can_access_stream_history_by_name(user_profile: Any, stream_name: str) -> bool:
    ...

def can_access_stream_history_by_id(user_profile: Any, stream_id: int) -> bool:
    ...

def bulk_can_remove_subscribers_from_streams(streams: List[Any], user_profile: Any) -> bool:
    ...

def get_streams_to_which_user_cannot_add_subscribers(streams: List[Any], user_profile: Any, *, allow_default_streams: bool = False) -> List[Any]:
    ...

def can_administer_accessible_channel(channel: Any, user_profile: Any) -> bool:
    ...

def filter_stream_authorization(user_profile: Any, streams: List[Any], is_subscribing_other_users: bool = False) -> Any:
    ...

def list_to_streams(streams_raw: List[Dict[str, Any]], user_profile: Any, autocreate: bool = False, unsubscribing_others: bool = False, is_default_stream: bool = False, setting_groups_dict: Any = None) -> Tuple[List[Any], List[Any]]:
    ...

def access_default_stream_group_by_id(realm: Any, group_id: int) -> Any:
    ...

def get_stream_by_narrow_operand_access_unchecked(operand: Union[str, int], realm: Any) -> Any:
    ...

def ensure_stream(realm: Any, stream_name: str, invite_only: bool = False, stream_description: str = '', *, acting_user: Any) -> Any:
    ...

def get_occupied_streams(realm: Any) -> Any:
    ...

def get_stream_post_policy_value_based_on_group_setting(setting_group: Any) -> str:
    ...

def stream_to_dict(stream: Any, recent_traffic: Any = None, setting_groups_dict: Any = None) -> Dict[str, Any]:
    ...

def get_web_public_streams(realm: Any) -> List[Dict[str, Any]]:
    ...

def get_streams_for_user(user_profile: Any, include_public: bool = True, include_web_public: bool = False, include_subscribed: bool = True, exclude_archived: bool = True, include_all_active: bool = False, include_owner_subscribed: bool = False) -> List[Dict[str, Any]]:
    ...

def get_subscribed_private_streams_for_user(user_profile: Any) -> Any:
    ...

def notify_stream_is_recently_active_update(stream: Any, value: bool) -> None:
    ...

@transaction.atomic(durable=True)
def update_stream_active_status_for_realm(realm: Any, date_days_ago: Any) -> int:
    ...

def check_update_all_streams_active_status(days: int = Stream.LAST_ACTIVITY_DAYS_BEFORE_FOR_ACTIVE) -> int:
    ...

def send_stream_deletion_event(realm: Any, user_ids: List[int], streams: List[Any]) -> None:
    ...
