from typing import IO, Any, Literal, overload

def overwrite_symlink(src: str, dst: str) -> None:
    ...

def parse_cache_script_args(description: str) -> argparse.Namespace:
    ...

def parse_version_from(deploy_path: str, merge_base: bool = False) -> str:
    ...

def get_deployment_version(extract_path: str) -> str:
    ...

def is_invalid_upgrade(current_version: str, new_version: str) -> bool:
    ...

def get_zulip_pwent() -> pwd.struct_passwd:
    ...

def get_postgres_pwent() -> pwd.struct_passwd:
    ...

def su_to_zulip(save_suid: bool = False) -> None:
    ...

def make_deploy_path() -> str:
    ...

def get_dev_uuid_var_path(create_if_missing: bool = False) -> str:
    ...

def get_deployment_lock(error_rerun_script: str) -> None:
    ...

def release_deployment_lock() -> None:
    ...

def run(args: List[str], **kwargs: Any) -> None:
    ...

def log_management_command(cmd: List[str], log_path: str) -> None:
    ...

def get_environment() -> str:
    ...

def get_recent_deployments(threshold_days: int) -> Set[str]:
    ...

def get_threshold_timestamp(threshold_days: int) -> int:
    ...

def get_caches_to_be_purged(caches_dir: str, caches_in_use: Set[str], threshold_days: int) -> Set[str]:
    ...

def purge_unused_caches(caches_dir: str, caches_in_use: Set[str], cache_type: str, args: argparse.Namespace) -> None:
    ...

def generate_sha1sum_emoji(zulip_path: str) -> str:
    ...

def maybe_perform_purging(dirs_to_purge: Set[str], dirs_to_keep: Set[str], dir_type: str, dry_run: bool, verbose: bool, no_headings: bool) -> None:
    ...

def parse_os_release() -> Dict[str, str]:
    ...

def os_families() -> Set[str]:
    ...

def get_tzdata_zi() -> IO:
    ...

def files_and_string_digest(filenames: List[str], extra_strings: List[str]) -> str:
    ...

def is_digest_obsolete(hash_name: str, filenames: List[str], extra_strings: List[str] = []) -> bool:
    ...

def write_new_digest(hash_name: str, filenames: List[str], extra_strings: List[str] = []) -> None:
    ...

def run_as_root(args: List[str], **kwargs: Any) -> None:
    ...

def assert_not_running_as_root() -> None:
    ...

def assert_running_as_root(strip_lib_from_paths: bool = False) -> None:
    ...

@overload
def get_config(config_file: configparser.RawConfigParser, section: str, key: str, default_value: None) -> Any:
    ...

@overload
def get_config(config_file: configparser.RawConfigParser, section: str, key: str, default_value: Any) -> Any:
    ...

@overload
def get_config(config_file: configparser.RawConfigParser, section: str, key: str, default_value: Any) -> Any:
    ...

def get_config(config_file: configparser.RawConfigParser, section: str, key: str, default_value: Any = None) -> Any:
    ...

def get_config_file() -> configparser.RawConfigParser:
    ...

def get_deploy_options(config_file: configparser.RawConfigParser) -> List[str]:
    ...

def run_psql_as_postgres(config_file: configparser.RawConfigParser, sql_query: str) -> None:
    ...

def get_tornado_ports(config_file: configparser.RawConfigParser) -> List[int]:
    ...

def get_or_create_dev_uuid_var_path(path: str) -> str:
    ...

def is_vagrant_env_host(path: str) -> bool:
    ...

def has_application_server(once: bool = False) -> bool:
    ...

def has_process_fts_updates() -> bool:
    ...

def deport(netloc: str) -> str:
    ...

def start_arg_parser(action: str, add_help: bool = False) -> argparse.ArgumentParser:
    ...

def listening_publicly(port: int) -> List[str]:
    ...

def atomic_nagios_write(name: str, status: str, message: str = None, event_time: int = None) -> int:
    ...
