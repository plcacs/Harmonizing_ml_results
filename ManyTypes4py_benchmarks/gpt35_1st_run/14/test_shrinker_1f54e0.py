from typing import List, Tuple

def test_can_shrink_variable_draws_with_just_deletion(n: int) -> None:
    ...

def test_deletion_and_lowering_fails_to_shrink(monkeypatch) -> None:
    ...

def test_duplicate_nodes_that_go_away() -> None:
    ...

def test_accidental_duplication() -> None:
    ...

def test_can_zero_subintervals() -> None:
    ...

def test_can_pass_to_an_indirect_descendant() -> None:
    ...

def test_shrinking_blocks_from_common_offset() -> None:
    ...

def test_handle_empty_draws() -> None:
    ...

def test_can_reorder_examples() -> None:
    ...

def test_permits_but_ignores_raising_order(monkeypatch) -> None:
    ...

def test_block_deletion_can_delete_short_ranges() -> None:
    ...

def test_dependent_block_pairs_is_up_to_shrinking_integers() -> None:
    ...

def test_finding_a_minimal_balanced_binary_tree() -> None:
    ...

def test_node_programs_are_adaptive() -> None:
    ...

def test_zero_examples_with_variable_min_size() -> None:
    ...

def test_zero_contained_examples() -> None:
    ...

def test_zig_zags_quickly() -> None:
    ...

def test_zig_zags_quickly_with_shrink_towards(min_value: int, max_value: int, forced: int, shrink_towards: int, expected: Tuple[int, int]) -> None:
    ...

def test_zero_irregular_examples() -> None:
    ...

def test_retain_end_of_buffer() -> None:
    ...

def test_can_expand_zeroed_region() -> None:
    ...

def test_can_expand_deleted_region() -> None:
    ...

def test_shrink_pass_method_is_idempotent() -> None:
    ...

def test_will_terminate_stalled_shrinks() -> None:
    ...

def test_will_let_fixate_shrink_passes_do_a_full_run_through() -> None:
    ...

def test_can_simultaneously_lower_non_duplicated_nearby_integers(n_gap: int) -> None:
    ...

def test_redistribute_with_forced_node_integer() -> None:
    ...

def test_can_quickly_shrink_to_trivial_collection(n: int) -> None:
    ...

def test_alternative_shrinking_will_lower_to_alternate_value() -> None:
    ...

def test_silly_shrinker_subclass() -> None:
    ...

def test_redistribute_numeric_pairs(node1: ChoiceNode, node2: ChoiceNode, stop: int) -> None:
    ...
