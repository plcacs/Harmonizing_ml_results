    def _has_key(self, key: Any) -> bool:
        ...

    def _get_key(self, key: Any) -> Any:
        ...

    def _set_key(self, key: Any, value: Any) -> None:
        ...

    def _del_key(self, key: Any) -> None:
        ...

    def __init__(self, app: AppT, *, name: str = None, default: Any = None, store: str = None, schema: SchemaT = None, key_type: ModelArg = None, value_type: ModelArg = None, partitions: int = None, window: WindowT = None, changelog_topic: str = None, help: str = None, on_recover: RecoverCallback = None, on_changelog_event: ChangelogEventCallback = None, recovery_buffer_size: int = 1000, standby_buffer_size: int = None, extra_topic_configs: Mapping[str, Any] = None, recover_callbacks: Set[Callable[[], Any]] = None, options: MutableMapping[str, Any] = None, use_partitioner: bool = False, on_window_close: WindowCloseCallback = None, is_global: bool = False, **kwargs: Any) -> None:
        ...

    def _serializer_from_type(self, typ: Any) -> str:
        ...

    def _new_store_by_url(self, url: URL) -> StoreT:
        ...

    def data(self) -> StoreT:
        ...

    async def on_start(self) -> None:
        ...

    def on_recover(self, fun: Callable[[], Any]) -> Callable[[], Any]:
        ...

    def info(self) -> Mapping[str, Any]:
        ...

    def persisted_offset(self, tp: TP) -> Optional[int]:
        ...

    async def need_active_standby_for(self, tp: TP) -> bool:
        ...

    def reset_state(self) -> None:
        ...

    def send_changelog(self, partition: int, key: Any, value: Any, key_serializer: str = None, value_serializer: str = None) -> FutureMessage:
        ...

    def partition_for_key(self, key: Any) -> Optional[int]:
        ...

    def _verify_source_topic_partitions(self, source_topic: str) -> None:
        ...

    async def _clean_data(self) -> None:
        ...

    async def _del_old_keys(self) -> None:
        ...

    async def on_window_close(self, key: Any, value: Any) -> None:
        ...

    def _maybe_set_key_ttl(self, key: Any, partition: int) -> None:
        ...

    def _maybe_del_key_ttl(self, key: Any, partition: int) -> None:
        ...

    def _on_changelog_sent(self, fut: FutureMessage) -> None:
        ...

    async def on_rebalance(self, assigned: Set[TP], revoked: Set[TP], newly_assigned: Set[TP]) -> None:
        ...

    async def on_recovery_completed(self, active_tps: Set[TP], standby_tps: Set[TP]) -> None:
        ...

    async def call_recover_callbacks(self) -> None:
        ...

    async def on_changelog_event(self, event: EventT) -> None:
        ...

    @property
    def changelog_topic(self) -> TopicT:
        ...

    @changelog_topic.setter
    def changelog_topic(self, topic: TopicT) -> None:
        ...

    def apply_changelog_batch(self, batch: Iterable[Tuple[bytes, bytes]]) -> None:
        ...

    def _to_key(self, k: Any) -> Any:
        ...

    def _to_value(self, v: Any) -> Any:
        ...

    def _human_channel(self) -> str:
        ...

    def _repr_info(self) -> str:
        ...
