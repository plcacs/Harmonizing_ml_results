def _state_validator(config: dict) -> dict:
    ...

def _state_schema(state: str) -> vol.Schema:
    ...

async def async_setup_platform(hass: HomeAssistant, config: ConfigType, add_entities: AddEntitiesCallback, discovery_info: DiscoveryInfoType = None) -> None:
    ...

class ManualMQTTAlarm(AlarmControlPanelEntity):
    def __init__(self, hass: HomeAssistant, name: str, code: str, code_template: Any, disarm_after_trigger: bool, state_topic: str, command_topic: str, qos: int, code_arm_required: bool, payload_disarm: str, payload_arm_home: str, payload_arm_away: str, payload_arm_night: str, payload_arm_vacation: str, payload_arm_custom_bypass: str, config: dict) -> None:
        ...

    @property
    def alarm_state(self) -> str:
        ...

    @property
    def _active_state(self) -> str:
        ...

    def _pending_time(self, state: str) -> datetime.timedelta:
        ...

    def _within_pending_time(self, state: str) -> bool:
        ...

    @property
    def code_format(self) -> CodeFormat:
        ...

    async def async_alarm_disarm(self, code: str = None) -> None:
        ...

    async def async_alarm_arm_home(self, code: str = None) -> None:
        ...

    async def async_alarm_arm_away(self, code: str = None) -> None:
        ...

    async def async_alarm_arm_night(self, code: str = None) -> None:
        ...

    async def async_alarm_arm_vacation(self, code: str = None) -> None:
        ...

    async def async_alarm_arm_custom_bypass(self, code: str = None) -> None:
        ...

    async def async_alarm_trigger(self, code: str = None) -> None:
        ...

    def _async_update_state(self, state: str) -> None:
        ...

    def _async_validate_code(self, code: str, state: str) -> None:
        ...

    @property
    def extra_state_attributes(self) -> dict:
        ...

    @callback
    def async_scheduled_update(self, now: datetime.datetime) -> None:
        ...

    async def async_added_to_hass(self) -> None:
        ...

    async def _async_state_changed_listener(self, event: Event) -> None:
        ...
