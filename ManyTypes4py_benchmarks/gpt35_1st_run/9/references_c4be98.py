from typing import List, Set, Dict, Iterator
from jedi.inference.names import Name
from jedi.inference.context import Context

def _resolve_names(definition_names: Set[Name], avoid_names: Set[str] = ()) -> Iterator[Name]:
    ...

def _dictionarize(names: Set[Name]) -> Dict[str, Name]:
    ...

def _find_defining_names(module_context: Context, tree_name) -> Set[Name]:
    ...

def _find_names(module_context: Context, tree_name) -> Set[Name]:
    ...

def _add_names_in_same_context(context: Context, string_name: str) -> Iterator[Name]:
    ...

def _find_global_variables(names: Set[Name], search_name: str) -> Iterator[Name]:
    ...

def find_references(module_context: Context, tree_name, only_in_module: bool = False) -> List[Name]:
    ...

def _check_fs(inference_state, file_io, regex) -> Context:
    ...

def gitignored_lines(folder_io, file_io) -> Tuple[Set[str], Set[str]]:
    ...

def recurse_find_python_folders_and_files(folder_io, except_paths=()) -> Iterator[Tuple[FolderIO, None], Tuple[None, KnownContentFileIO]]:
    ...

def recurse_find_python_files(folder_io, except_paths=()) -> Iterator[KnownContentFileIO]:
    ...

def _find_python_files_in_sys_path(inference_state, module_contexts) -> Iterator[KnownContentFileIO]:
    ...

def _find_project_modules(inference_state, module_contexts) -> Iterator[KnownContentFileIO]:
    ...

def get_module_contexts_containing_name(inference_state, module_contexts, name, limit_reduction=1) -> Iterator[Context]:
    ...

def search_in_file_ios(inference_state, file_io_iterator, name, limit_reduction=1, complete=False) -> Iterator[Context]:
    ...
