def arrays_to_mgr(arrays: Sequence[ArrayLike], columns: Index, index: Index, *, dtype: DtypeObj = None, verify_integrity: bool = True, consolidate: bool = True) -> Manager:
    ...

def rec_array_to_mgr(data: ma.MaskedArray, index: Index, columns: Index, dtype: DtypeObj, copy: bool) -> Manager:
    ...

def ndarray_to_mgr(values: ArrayLike, index: Index, columns: Index, dtype: DtypeObj, copy: bool) -> Manager:
    ...

def _check_values_indices_shape_match(values: np.ndarray, index: Index, columns: Index) -> None:
    ...

def dict_to_mgr(data: dict, index: Index, columns: Index, *, dtype: DtypeObj = None, copy: bool = True) -> Manager:
    ...

def nested_data_to_arrays(data: Sequence[ArrayLike], columns: Index, index: Index, dtype: DtypeObj) -> Tuple[List[ArrayLike], Index, Index]:
    ...

def treat_as_nested(data: Sequence[ArrayLike]) -> bool:
    ...

def _prep_ndarraylike(values: ArrayLike, copy: bool = True) -> np.ndarray:
    ...

def _ensure_2d(values: np.ndarray) -> np.ndarray:
    ...

def _homogenize(data: Sequence[ArrayLike], index: Index, dtype: DtypeObj) -> Tuple[List[ArrayLike], List[Hashable]]:
    ...

def _extract_index(data: Sequence[ArrayLike]) -> Index:
    ...

def reorder_arrays(arrays: List[ArrayLike], arr_columns: Index, columns: Index, length: int) -> Tuple[List[ArrayLike], Index]:
    ...

def _get_names_from_index(data: Sequence[ArrayLike]) -> Index:
    ...

def _get_axes(N: int, K: int, index: Index, columns: Index) -> Tuple[Index, Index]:
    ...

def dataclasses_to_dicts(data: List[Type[dataclass]]) -> List[dict]:
    ...

def to_arrays(data: Sequence[ArrayLike], columns: Index, dtype: DtypeObj = None) -> Tuple[List[ArrayLike], Index]:
    ...

def _list_to_arrays(data: Sequence[ArrayLike]) -> np.ndarray:
    ...

def _list_of_series_to_arrays(data: Sequence[ABCSeries], columns: Index) -> Tuple[np.ndarray, Index]:
    ...

def _list_of_dict_to_arrays(data: Sequence[dict], columns: Index) -> Tuple[np.ndarray, Index]:
    ...

def _finalize_columns_and_data(content: List[np.ndarray], columns: Index, dtype: DtypeObj) -> Tuple[List[ArrayLike], Index]:
    ...

def _validate_or_indexify_columns(content: List[np.ndarray], columns: Index) -> Index:
    ...

def convert_object_array(content: List[np.ndarray], dtype: DtypeObj, dtype_backend: str = 'numpy', coerce_float: bool = False) -> List[ArrayLike]:
    ...
