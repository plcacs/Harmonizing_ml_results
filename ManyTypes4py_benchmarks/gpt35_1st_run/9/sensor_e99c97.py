def calc_min(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

def calc_max(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

def calc_mean(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

def calc_median(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

def calc_last(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], Any]:
    ...

def calc_range(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

def calc_stdev(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

def calc_sum(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

def calc_product(sensor_values: list[tuple[str, float, State]]) -> tuple[dict[str, str], float]:
    ...

class SensorGroup(GroupEntity, SensorEntity):
    def __init__(self, hass: HomeAssistant, unique_id: str, name: str, entity_ids: list[str], ignore_non_numeric: bool, sensor_type: str, unit_of_measurement: str, state_class: str, device_class: str):
        ...

    def calculate_state_attributes(self, valid_state_entities: list[str]) -> None:
        ...

    def async_update_group_state(self) -> None:
        ...

    @property
    def extra_state_attributes(self) -> dict[str, Any]:
        ...

    @property
    def icon(self) -> str:
        ...

    def _calculate_state_class(self, state_class: str, valid_state_entities: list[str]) -> str:
        ...

    def _calculate_device_class(self, device_class: str, valid_state_entities: list[str]) -> str:
        ...

    def _calculate_unit_of_measurement(self, unit_of_measurement: str, valid_state_entities: list[str]) -> str:
        ...

    def _get_valid_units(self) -> set[str]:
        ...

    def _get_valid_entities(self) -> list[str]:
        ...
