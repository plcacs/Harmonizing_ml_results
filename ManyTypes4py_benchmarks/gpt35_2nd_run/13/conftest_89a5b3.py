def patch_zeroconf_multiple_catcher() -> None:
    ...

def prevent_io() -> None:
    ...

def entity_registry_enabled_by_default() -> None:
    ...

def stub_blueprint_populate() -> AsyncGenerator:
    ...

def mock_tts_get_cache_files() -> AsyncGenerator:
    ...

def mock_tts_init_cache_dir(init_tts_cache_dir_side_effect: Callable) -> AsyncGenerator:
    ...

def init_tts_cache_dir_side_effect() -> Callable:
    ...

def mock_tts_cache_dir(tmp_path: Path, mock_tts_init_cache_dir: MagicMock, mock_tts_get_cache_files: MagicMock, request: Any) -> AsyncGenerator:
    ...

def tts_mutagen_mock() -> AsyncGenerator:
    ...

def mock_conversation_agent(hass: HomeAssistant) -> MockAgent:
    ...

def prevent_ffmpeg_subprocess() -> None:
    ...

def mock_light_entities() -> List[MockLight]:
    ...

def mock_sensor_entities() -> List[MockSensor]:
    ...

def mock_switch_entities() -> List[MockSwitch]:
    ...

def mock_legacy_device_scanner() -> MockScanner:
    ...

def mock_legacy_device_tracker_setup() -> Callable:
    ...

def addon_manager_fixture(hass: HomeAssistant, supervisor_client: MagicMock) -> AddonManager:
    ...

def discovery_info_fixture() -> List:
    ...

def discovery_info_side_effect_fixture() -> None:
    ...

def get_addon_discovery_info_fixture(supervisor_client: MagicMock, discovery_info: List, discovery_info_side_effect: None) -> Callable:
    ...

def get_discovery_message_side_effect_fixture() -> None:
    ...

def get_discovery_message_fixture(supervisor_client: MagicMock, get_discovery_message_side_effect: None) -> Callable:
    ...

def addon_store_info_side_effect_fixture() -> None:
    ...

def addon_store_info_fixture(supervisor_client: MagicMock, addon_store_info_side_effect: None) -> MagicMock:
    ...

def addon_info_side_effect_fixture() -> None:
    ...

def addon_info_fixture(supervisor_client: MagicMock, addon_info_side_effect: None) -> MagicMock:
    ...

def addon_not_installed_fixture(addon_store_info: MagicMock, addon_info: MagicMock) -> MagicMock:
    ...

def addon_installed_fixture(addon_store_info: MagicMock, addon_info: MagicMock) -> MagicMock:
    ...

def addon_running_fixture(addon_store_info: MagicMock, addon_info: MagicMock) -> MagicMock:
    ...

def install_addon_side_effect_fixture(addon_store_info: MagicMock, addon_info: MagicMock) -> Callable:
    ...

def install_addon_fixture(supervisor_client: MagicMock, install_addon_side_effect: Callable) -> Callable:
    ...

def start_addon_side_effect_fixture(addon_store_info: MagicMock, addon_info: MagicMock) -> Callable:
    ...

def start_addon_fixture(supervisor_client: MagicMock, start_addon_side_effect: Callable) -> Callable:
    ...

def restart_addon_side_effect_fixture() -> None:
    ...

def restart_addon_fixture(supervisor_client: MagicMock, restart_addon_side_effect: None) -> Callable:
    ...

def stop_addon_fixture(supervisor_client: MagicMock) -> Callable:
    ...

def addon_options_fixture(addon_info: MagicMock) -> MagicMock:
    ...

def set_addon_options_side_effect_fixture(addon_options: MagicMock) -> Callable:
    ...

def set_addon_options_fixture(supervisor_client: MagicMock, set_addon_options_side_effect: Callable) -> Callable:
    ...

def uninstall_addon_fixture(supervisor_client: MagicMock) -> Callable:
    ...

def create_backup_fixture() -> AsyncGenerator:
    ...

def update_addon_fixture(supervisor_client: MagicMock) -> Callable:
    ...

def store_addons_fixture() -> List:
    ...

def store_repositories_fixture() -> List:
    ...

def store_info_fixture(supervisor_client: MagicMock, store_addons: List, store_repositories: List) -> MagicMock:
    ...

def addon_stats_fixture(supervisor_client: MagicMock) -> MagicMock:
    ...

def addon_changelog_fixture(supervisor_client: MagicMock) -> MagicMock:
    ...

def supervisor_is_connected_fixture(supervisor_client: MagicMock) -> MagicMock:
    ...

def resolution_info_fixture(supervisor_client: MagicMock) -> MagicMock:
    ...

def resolution_suggestions_for_issue_fixture(supervisor_client: MagicMock) -> MagicMock:
    ...

def supervisor_client() -> MagicMock:
    ...

def ignore_translations() -> List:
    ...

def _validate_translation_placeholders(full_key: str, translation: str, description_placeholders: Any, translation_errors: Dict) -> None:
    ...

async def _validate_translation(hass: HomeAssistant, translation_errors: Dict, category: str, component: str, key: str, description_placeholders: Any, *, translation_required: bool = True) -> None:
    ...

def _get_integration_quality_scale(integration: str) -> Dict:
    ...

def _get_integration_quality_scale_rule(integration: str, rule: str) -> str:
    ...

async def _check_step_or_section_translations(hass: HomeAssistant, translation_errors: Dict, category: str, integration: str, translation_prefix: str, description_placeholders: Any, data_schema: Any) -> None:
    ...

async def _check_config_flow_result_translations(manager: Union[ConfigEntriesFlowManager, OptionsFlowManager, repairs.RepairsFlowManager], flow: FlowHandler, result: FlowResult, translation_errors: Dict) -> None:
    ...

async def _check_create_issue_translations(issue_registry: ir.IssueRegistry, issue: ir.Issue, translation_errors: Dict) -> None:
    ...

def _get_request_quality_scale(request: Any, rule: str) -> QualityScaleStatus:
    ...

async def _check_exception_translation(hass: HomeAssistant, exception: HomeAssistantError, translation_errors: Dict, request: Any) -> None:
    ...

@pytest.fixture(autouse=True)
async def check_translations(ignore_translations: List, request: Any) -> None:
    ...
