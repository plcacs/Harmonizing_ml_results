from typing import List

def _is_indentation_error_leaf(node) -> bool:
    ...

def _get_previous_leaf_if_indentation(leaf) -> Leaf:
    ...

def _get_next_leaf_if_indentation(leaf) -> Leaf:
    ...

def _get_suite_indentation(tree_node) -> int:
    ...

def _get_indentation(tree_node) -> int:
    ...

def _assert_valid_graph(node) -> None:
    ...

def _assert_nodes_are_equal(node1, node2) -> None:
    ...

def _get_debug_error_message(module, old_lines, new_lines) -> str:
    ...

def _get_last_line(node_or_leaf) -> int:
    ...

def _skip_dedent_error_leaves(leaf) -> Leaf:
    ...

def _ends_with_newline(leaf, suffix='') -> bool:
    ...

def _flows_finished(pgen_grammar, stack) -> bool:
    ...

def _func_or_class_has_suite(node) -> bool:
    ...

def _suite_or_file_input_is_valid(pgen_grammar, stack) -> bool:
    ...

def _is_flow_node(node) -> bool:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

def _update_positions(nodes, line_offset, last_leaf) -> None:
    ...

def _update_positions(nodes: List[Node], line_offset: int, last_leaf: Leaf) -> None:
    ...

class DiffParser:
    def __init__(self, pgen_grammar, tokenizer, module) -> None:
        ...

    def _reset(self) -> None:
        ...

    def update(self, old_lines, new_lines) -> Module:
        ...

    def _enabled_debugging(self, old_lines, lines_new) -> None:
        ...

    def _copy_from_old_parser(self, line_offset, start_line_old, until_line_old, until_line_new) -> None:
        ...

    def _get_old_line_stmt(self, old_line) -> Node:
        ...

    def _parse(self, until_line) -> None:
        ...

    def _try_parse_part(self, until_line) -> Node:
        ...

    def _diff_tokenize(self, lines, until_line, line_offset=0) -> List[PythonToken]:
        ...

class _PositionUpdatingFinished(Exception):
    ...

def _copy_nodes(self, working_stack, nodes, until_line, line_offset, prefix='', is_nested=False) -> Tuple[List[Node], List[_NodesTreeNode], str, List[int]:
    ...

class _NodesTreeNode:
    def __init__(self, tree_node, parent=None, indentation=0) -> None:
        ...

    def finish(self) -> None:
        ...

    def add_child_node(self, child_node) -> None:
        ...

    def add_tree_nodes(self, prefix, children, line_offset=0, last_line_offset_leaf=None) -> None:
        ...

    def get_last_line(self, suffix) -> int:
        ...

class _NodesTree:
    def __init__(self, module) -> None:
        ...

    def add_parsed_nodes(self, tree_nodes, keyword_token_indents) -> None:
        ...

    def _update_insertion_node(self, indentation) -> _NodesTreeNode:
        ...

    def copy_nodes(self, tree_nodes, until_line, line_offset) -> List[Node]:
        ...

    def close(self) -> None:
        ...
