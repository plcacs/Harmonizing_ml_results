from __future__ import annotations
from typing import TYPE_CHECKING, Any, Optional, Union
from prefect.client.schemas.actions import ArtifactCreate as ArtifactRequest
from prefect.client.schemas.actions import ArtifactUpdate
from prefect.client.schemas.filters import ArtifactFilter, ArtifactFilterKey
from prefect.client.schemas.objects import Artifact as ArtifactResponse
from prefect.client.schemas.sorting import ArtifactSort

if TYPE_CHECKING:
    from prefect.client.orchestration import PrefectClient
    from typing import cast

class Artifact(ArtifactRequest):
    async def acreate(self, client: Optional[PrefectClient] = None) -> ArtifactResponse: ...

    def create(self, client: Optional[PrefectClient] = None) -> ArtifactResponse: ...

    @classmethod
    async def aget(cls, key: Optional[str] = None, client: Optional[PrefectClient] = None) -> Optional[ArtifactResponse]: ...

    @classmethod
    def get(cls, key: Optional[str] = None, client: Optional[PrefectClient] = None) -> Optional[ArtifactResponse]: ...

    @classmethod
    async def aget_or_create(cls, key: Optional[str] = None, description: Optional[str] = None, data: Optional[Any] = None, client: Optional[PrefectClient] = None, **kwargs: Any) -> Union[ArtifactResponse, bool]: ...

    @classmethod
    def get_or_create(cls, key: Optional[str] = None, description: Optional[str] = None, data: Optional[Any] = None, client: Optional[PrefectClient] = None, **kwargs: Any) -> Union[ArtifactResponse, bool]: ...

    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class LinkArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class MarkdownArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class TableArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

class ProgressArtifact(Artifact):
    async def aformat(self) -> float: ...

    def format(self) -> float: ...

class ImageArtifact(Artifact):
    async def aformat(self) -> str: ...

    def format(self) -> str: ...

async def acreate_link_artifact(link: str, link_text: Optional[str] = None, key: Optional[str] = None, description: Optional[str] = None, client: Optional[PrefectClient] = None) -> UUID: ...

def create_link_artifact(link: str, link_text: Optional[str] = None, key: Optional[str] = None, description: Optional[str] = None, client: Optional[PrefectClient] = None) -> UUID: ...

async def acreate_markdown_artifact(markdown: str, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...

def create_markdown_artifact(markdown: str, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...

async def acreate_table_artifact(table: Any, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...

def create_table_artifact(table: Any, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...

async def acreate_progress_artifact(progress: float, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...

def create_progress_artifact(progress: float, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...

async def aupdate_progress_artifact(artifact_id: UUID, progress: float, description: Optional[str] = None, client: Optional[PrefectClient] = None) -> UUID: ...

def update_progress_artifact(artifact_id: UUID, progress: float, description: Optional[str] = None, client: Optional[PrefectClient] = None) -> UUID: ...

async def acreate_image_artifact(image_url: str, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...

def create_image_artifact(image_url: str, key: Optional[str] = None, description: Optional[str] = None) -> UUID: ...
