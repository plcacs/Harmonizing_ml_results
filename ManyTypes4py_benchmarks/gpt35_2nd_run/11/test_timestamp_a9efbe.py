from datetime import datetime, timedelta, timezone
from typing import Optional

def test_properties_business(self) -> None:
    ...

def test_fields(self, attr: str, expected: int, tz: Optional[str]) -> None:
    ...

def test_millisecond_raises(self, tz: Optional[str]) -> None:
    ...

def test_is_start(self, start: str, tz: Optional[str]) -> None:
    ...

def test_is_end(self, end: str, tz: Optional[str]) -> None:
    ...

def test_names(self, tz: Optional[str], time_locale: Optional[str]) -> None:
    ...

def test_is_leap_year(self, tz_naive_fixture: timezone) -> None:
    ...

def test_woy_boundary(self) -> None:
    ...

def test_resolution(self) -> None:
    ...

def test_dow_historic(self, date_string: str, expected: int) -> None:
    ...

def test_dow_parametric(self, ts: datetime, sign: str) -> None:
    ...

def test_disallow_setting_tz(self, tz: Optional[timezone]) -> None:
    ...

def test_default_to_stdlib_utc(self) -> None:
    ...

def test_tz(self) -> None:
    ...

def test_utc_z_designator(self) -> None:
    ...

def test_asm8(self) -> None:
    ...

def test_class_ops(self) -> None:
    ...

def test_basics_nanos(self) -> None:
    ...

def test_roundtrip(self) -> None:
    ...

def test_hash_equivalent(self) -> None:
    ...

def test_hash_timestamp_with_fold(self, timezone: str, year: int, month: int, day: int, hour: int) -> None:
    ...

def test_timestamp_class_min_max_resolution() -> None:
    ...

def test_delimited_date() -> None:
    ...

def test_utctimetuple() -> None:
    ...

def test_negative_dates() -> None:
    ...
