from contextlib import contextmanager
from typing import Any

def patch_bluetooth_time(mock_time: Any) -> Any:
    ...

def generate_advertisement_data(**kwargs: Any) -> Any:
    ...

def generate_ble_device(address: Any = None, name: Any = None, details: Any = None, rssi: Any = None, **kwargs: Any) -> Any:
    ...

def _get_manager() -> Any:
    ...

def inject_advertisement(hass: Any, device: Any, adv: Any) -> Any:
    ...

def inject_advertisement_with_source(hass: Any, device: Any, adv: Any, source: Any) -> Any:
    ...

def inject_advertisement_with_time_and_source(hass: Any, device: Any, adv: Any, time: Any, source: Any) -> Any:
    ...

def inject_advertisement_with_time_and_source_connectable(hass: Any, device: Any, adv: Any, time: Any, source: Any, connectable: Any) -> Any:
    ...

def inject_bluetooth_service_info_bleak(hass: Any, info: Any) -> Any:
    ...

def inject_bluetooth_service_info(hass: Any, info: Any) -> Any:
    ...

def patch_all_discovered_devices(mock_discovered: Any) -> Any:
    ...

def patch_discovered_devices(mock_discovered: Any) -> Any:
    ...

async def async_setup_with_default_adapter(hass: Any) -> Any:
    ...

async def async_setup_with_one_adapter(hass: Any) -> Any:
    ...

async def _async_setup_with_adapter(hass: Any, address: Any) -> Any:
    ...

class MockBleakClient(BleakClient):
    ...

class FakeScannerMixin:
    ...

class FakeScanner(FakeScannerMixin, BaseHaScanner):
    ...

class FakeRemoteScanner(BaseHaRemoteScanner):
    ...
