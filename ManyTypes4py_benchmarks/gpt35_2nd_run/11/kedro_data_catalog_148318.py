from typing import Any, Iterator, List

class _LazyDataset:
    def __init__(self, name: str, config: dict, load_version: Any = None, save_version: Any = None) -> None:
        ...

    def materialize(self) -> AbstractDataset:
        ...

class KedroDataCatalog(CatalogProtocol):
    def __init__(self, datasets: dict = None, raw_data: dict = None, config_resolver: CatalogConfigResolver = None, load_versions: dict = None, save_version: Any = None) -> None:
        ...

    @property
    def datasets(self) -> dict:
        ...

    def __getattribute__(self, key: str) -> Any:
        ...

    @property
    def config_resolver(self) -> CatalogConfigResolver:
        ...

    def __contains__(self, dataset_name: str) -> bool:
        ...

    def keys(self) -> List[str]:
        ...

    def values(self) -> List[AbstractDataset]:
        ...

    def items(self) -> List[tuple]:
        ...

    def __iter__(self) -> Iterator[str]:
        ...

    def __getitem__(self, ds_name: str) -> AbstractDataset:
        ...

    def __setitem__(self, key: str, value: Any) -> None:
        ...

    def __len__(self) -> int:
        ...

    def get(self, key: str, default: Any = None) -> AbstractDataset:
        ...

    def _ipython_key_completions_(self) -> List[str]:
        ...

    @classmethod
    def from_config(cls, catalog: dict, credentials: dict = None, load_versions: dict = None, save_version: Any = None) -> KedroDataCatalog:
        ...

    def to_config(self) -> tuple:
        ...

    @staticmethod
    def _validate_dataset_config(ds_name: str, ds_config: dict) -> None:
        ...

    def _add_from_config(self, ds_name: str, ds_config: dict) -> None:
        ...

    def get_dataset(self, ds_name: str, version: Any = None, suggest: bool = True) -> AbstractDataset:
        ...

    def _get_dataset(self, dataset_name: str, version: Any = None, suggest: bool = True) -> AbstractDataset:
        ...

    def add(self, ds_name: str, dataset: AbstractDataset, replace: bool = False) -> None:
        ...

    def filter(self, name_regex=None, type_regex=None, by_type=None) -> List[str]:
        ...

    def list(self, regex_search=None, regex_flags=0) -> List[str]:
        ...

    def save(self, name: str, data: Any) -> None:
        ...

    def load(self, name: str, version: Any = None) -> Any:
        ...

    def release(self, name: str) -> None:
        ...

    def confirm(self, name: str) -> None:
        ...

    def add_feed_dict(self, feed_dict: dict, replace: bool = False) -> None:
        ...

    def shallow_copy(self, extra_dataset_patterns: dict = None) -> KedroDataCatalog:
        ...

    def exists(self, name: str) -> bool:
        ...
