from django.http import HttpRequest, HttpResponse
from zerver.models.users import UserProfile

def update_user_activity(request: HttpRequest, user_profile: UserProfile, query: str) -> None:
    ...

def require_post(func: Callable) -> Callable:
    ...

def require_realm_owner(func: Callable) -> Callable:
    ...

def require_realm_admin(func: Callable) -> Callable:
    ...

def check_if_user_can_manage_default_streams(func: Callable) -> Callable:
    ...

def require_organization_member(func: Callable) -> Callable:
    ...

def require_billing_access(func: Callable) -> Callable:
    ...

def process_client(request: HttpRequest, user: UserProfile, is_browser_view: bool = False, client_name: str = None, query: str = None) -> None:
    ...

def validate_api_key(request: HttpRequest, role: str, api_key: str, allow_webhook_access: bool = False, client_name: str = None) -> UserProfile:
    ...

def validate_account_and_subdomain(request: HttpRequest, user_profile: UserProfile) -> None:
    ...

def access_user_by_api_key(request: HttpRequest, api_key: str, email: str = None) -> UserProfile:
    ...

def log_unsupported_webhook_event(request: HttpRequest, summary: str) -> None:
    ...

def log_exception_to_webhook_logger(request: HttpRequest, err: Exception) -> None:
    ...

def full_webhook_client_name(raw_client_name: str = None) -> str:
    ...

def webhook_view(webhook_client_name: str, notify_bot_owner_on_invalid_json: bool = True, all_event_types: Sequence[str] = None) -> Callable:
    ...

def zulip_redirect_to_login(request: HttpRequest, login_url: str = None, redirect_field_name: str = 'next') -> HttpResponse:
    ...

def user_passes_test(test_func: Callable, login_url: str = None, redirect_field_name: str = 'next') -> Callable:
    ...

def logged_in_and_active(request: HttpRequest) -> bool:
    ...

def do_two_factor_login(request: HttpRequest, user_profile: UserProfile) -> None:
    ...

def do_login(request: HttpRequest, user_profile: UserProfile) -> None:
    ...

def log_view_func(view_func: Callable) -> Callable:
    ...

def add_logging_data(view_func: Callable) -> Callable:
    ...

def human_users_only(view_func: Callable) -> Callable:
    ...

def zulip_login_required(function: Callable = None, redirect_field_name: str = 'next', login_url: str = settings.HOME_NOT_LOGGED_IN) -> Callable:
    ...

def web_public_view(view_func: Callable, redirect_field_name: str = 'next', login_url: str = settings.HOME_NOT_LOGGED_IN) -> Callable:
    ...

def require_server_admin(view_func: Callable) -> Callable:
    ...

def require_server_admin_api(view_func: Callable) -> Callable:
    ...

def require_non_guest_user(view_func: Callable) -> Callable:
    ...

def require_member_or_admin(view_func: Callable) -> Callable:
    ...

def require_user_group_create_permission(view_func: Callable) -> Callable:
    ...

def authenticated_uploads_api_view(skip_rate_limiting: bool = False) -> Callable:
    ...

def get_basic_credentials(request: HttpRequest, beanstalk_email_decode: bool = False) -> Tuple[str, str]:
    ...

def authenticated_rest_api_view(webhook_client_name: str = None, allow_webhook_access: bool = False, skip_rate_limiting: bool = False, beanstalk_email_decode: bool = False) -> Callable:
    ...

def process_as_post(view_func: Callable) -> Callable:
    ...

def public_json_view(view_func: Callable, skip_rate_limiting: bool = False) -> Callable:
    ...

def authenticated_json_view(view_func: Callable, skip_rate_limiting: bool = False) -> Callable:
    ...

def authenticate_internal_api(request: HttpRequest, secret: str) -> bool:
    ...

def internal_api_view(is_tornado_view: bool) -> Callable:
    ...

def to_utc_datetime(timestamp: float) -> datetime:
    ...

def return_success_on_head_request(view_func: Callable) -> Callable:
    ...

def zulip_otp_required_if_logged_in(redirect_field_name: str = 'next', login_url: str = settings.HOME_NOT_LOGGED_IN) -> Callable:
    ...

def add_google_analytics_context(context: dict) -> None:
    ...

def add_google_analytics(view_func: Callable) -> Callable:
    ...
