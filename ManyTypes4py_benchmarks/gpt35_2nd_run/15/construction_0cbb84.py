def array(data: Sequence, dtype: Union[str, np.dtype, ExtensionDtype] = None, copy: bool = True) -> ExtensionArray:
    ...

def extract_array(obj: Any, extract_numpy: bool = ..., extract_range: bool = ...) -> Any:
    ...

def ensure_wrapped_if_datetimelike(arr: Union[np.ndarray, Any]) -> Union[np.ndarray, DatetimeArray, TimedeltaArray]:
    ...

def sanitize_masked_array(data: ma.MaskedArray) -> ma.MaskedArray:
    ...

def sanitize_array(data: Any, index: Optional[Index] = None, dtype: Optional[Union[np.dtype, ExtensionDtype]] = None, copy: bool = False, allow_2d: bool = False) -> Union[np.ndarray, ExtensionArray]:
    ...

def range_to_ndarray(rng: range) -> np.ndarray:
    ...

def _sanitize_non_ordered(data: Union[set, frozenset]) -> None:
    ...

def _sanitize_ndim(result: np.ndarray, data: Any, dtype: Optional[Union[np.dtype, ExtensionDtype]], index: Optional[Index], allow_2d: bool = False) -> np.ndarray:
    ...

def _sanitize_str_dtypes(result: np.ndarray, data: Any, dtype: Union[np.dtype, ExtensionDtype], copy: bool) -> np.ndarray:
    ...

def _maybe_repeat(arr: np.ndarray, index: Optional[Index]) -> np.ndarray:
    ...

def _try_cast(arr: Union[np.ndarray, List], dtype: np.dtype, copy: bool) -> Union[np.ndarray, ExtensionArray]:
    ...
