from typing import Any, Iterable, Mapping, Tuple

class EnumMeta(type):
    def __call__(cls, value: Any, names: Any = None, module: Any = None, type: Any = None, start: int = 1) -> Any: ...

    def __contains__(cls, member: Any) -> bool: ...

    def __delattr__(cls, attr: str) -> None: ...

    def __dir__(self) -> Iterable[str]: ...

    @property
    def __members__(cls) -> Mapping[str, Any]: ...

    def __getattr__(cls, name: str) -> Any: ...

    def __getitem__(cls, name: str) -> Any: ...

    def __iter__(cls) -> Iterable[Any]: ...

    def __reversed__(cls) -> Iterable[Any]: ...

    def __len__(cls) -> int: ...

    def __bool__(cls) -> bool: ...

    def __repr__(cls) -> str: ...

    def __setattr__(cls, name: str, value: Any) -> None: ...

    def _create_(cls, class_name: str, names: Any = None, module: Any = None, type: Any = None, start: int = 1) -> Any: ...

    @staticmethod
    def _get_mixins_(bases: Tuple) -> Tuple[Any, Any]: ...

    @staticmethod
    def _find_new_(classdict: Mapping[str, Any], member_type: Any, first_enum: Any) -> Tuple[Any, bool, bool]: ...

class IntEnum(int, Enum):
    pass

def unique(enumeration: Any) -> Any: ...
