def sanitize_datasource_data(datasource_data: Optional[dict]) -> Optional[dict]:
    ...

def bootstrap_user_data(user: User, include_perms: bool = False) -> dict:
    ...

def get_permissions(user: User) -> tuple:
    ...

def get_viz(form_data: dict, datasource_type: str, datasource_id: int, force: bool = False, force_cached: bool = False) -> BaseViz:
    ...

def loads_request_json(request_json_data: str) -> dict:
    ...

def get_form_data(slice_id: Optional[int] = None, use_slice_data: bool = False, initial_form_data: Optional[dict] = None) -> tuple:
    ...

def add_sqllab_custom_filters(form_data: dict) -> None:
    ...

def get_datasource_info(datasource_id: Optional[int], datasource_type: str, form_data: dict) -> tuple:
    ...

def apply_display_max_row_limit(sql_results: dict, rows: Optional[int] = None) -> dict:
    ...

def get_dashboard_extra_filters(slice_id: int, dashboard_id: int) -> list:
    ...

def build_extra_filters(layout: dict, filter_scopes: dict, default_filters: dict, slice_id: int) -> list:
    ...

def is_slice_in_container(layout: dict, container_id: str, slice_id: int) -> bool:
    ...

def check_resource_permissions(check_perms: Callable) -> Callable:
    ...

def check_explore_cache_perms(_self, cache_key: str) -> None:
    ...

def check_datasource_perms(_self, datasource_type: Optional[str] = None, datasource_id: Optional[int] = None, **kwargs) -> None:
    ...

def _deserialize_results_payload(payload: Union[bytes, str], query: Query, use_msgpack: bool = False) -> dict:
    ...

def get_cta_schema_name(database: Database, user: User, schema: str, sql: str) -> Optional[str]:
    ...

def redirect_with_flash(url: str, message: str, category: str) -> Response:
    ...
