from typing import Any, Callable, ClassVar, Iterable, List, Mapping, MutableMapping, Optional, Tuple, Type, Union

class Response:
    @property
    def status(self) -> Any: ...
    @property
    def body(self) -> Any: ...
    @property
    def headers(self) -> Any: ...
    @property
    def content_length(self) -> Any: ...
    @property
    def content_type(self) -> Any: ...
    @property
    def charset(self) -> Any: ...
    @property
    def chunked(self) -> Any: ...
    @property
    def compression(self) -> Any: ...
    @property
    def keep_alive(self) -> Any: ...
    @property
    def body_length(self) -> Any: ...

class BlueprintManager:
    def __init__(self, initial: Optional[List[Tuple[str, str]]] = None) -> None: ...
    def add(self, prefix: str, blueprint: str) -> None: ...
    def apply(self, web: Any) -> None: ...
    def _apply_blueprint(self, web: Any, prefix: str, bp: Any) -> None: ...

class Web(Service):
    def __init__(self, app: Any, **kwargs: Any) -> None: ...
    def text(self, value: Any, *, content_type: Optional[str] = None, status: int = 200, reason: Optional[str] = None, headers: Optional[Mapping[str, str]] = None) -> None: ...
    def html(self, value: Any, *, content_type: Optional[str] = None, status: int = 200, reason: Optional[str] = None, headers: Optional[Mapping[str, str]] = None) -> None: ...
    def json(self, value: Any, *, content_type: Optional[str] = None, status: int = 200, reason: Optional[str] = None, headers: Optional[Mapping[str, str]] = None) -> None: ...
    def bytes(self, value: Any, *, content_type: Optional[str] = None, status: int = 200, reason: Optional[str] = None, headers: Optional[Mapping[str, str]] = None) -> None: ...
    def bytes_to_response(self, s: bytes) -> None: ...
    def response_to_bytes(self, response: Any) -> None: ...
    def route(self, pattern: str, handler: Callable, cors_options: Optional[Any] = None) -> None: ...
    def add_static(self, prefix: str, path: str, **kwargs: Any) -> None: ...
    async def read_request_content(self, request: Any) -> None: ...
    async def wsgi(self) -> None: ...
    def add_view(self, view_cls: Type[Any], *, prefix: str = '', cors_options: Optional[Any] = None) -> Any: ...
    def url_for(self, view_name: str, **kwargs: Any) -> str: ...
    def init_server(self) -> None: ...
    @property
    def url(self) -> Any: ...

class Request(abc.ABC):
    @abc.abstractmethod
    def can_read_body(self) -> Any: ...
    async def read(self) -> Any: ...
    async def text(self) -> Any: ...
    async def json(self) -> Any: ...
    async def post(self) -> Any: ...
    @property
    @abc.abstractmethod
    def match_info(self) -> Any: ...
    @property
    @abc.abstractmethod
    def query(self) -> Any: ...
    @property
    @abc.abstractmethod
    def cookies(self) -> Any: ...
