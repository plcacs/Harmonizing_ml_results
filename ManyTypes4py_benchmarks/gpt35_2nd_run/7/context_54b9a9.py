from typing import Any, Callable, Sequence, Dict

def _prepare_state(balances_fn: Callable, threshold_fn: Callable, spec: Any, phases: Dict[str, Any]) -> Any:
    ...

def with_custom_state(balances_fn: Callable, threshold_fn: Callable) -> Callable:
    ...

def default_activation_threshold(spec: Any) -> Any:
    ...

def zero_activation_threshold(spec: Any) -> Any:
    ...

def default_balances(spec: Any) -> Any:
    ...

def default_balances_electra(spec: Any) -> Any:
    ...

def scaled_churn_balances_min_churn_limit(spec: Any) -> Any:
    ...

def scaled_churn_balances_equal_activation_churn_limit(spec: Any) -> Any:
    ...

def scaled_churn_balances_exceed_activation_churn_limit(spec: Any) -> Any:
    ...

def scaled_churn_balances_exceed_activation_exit_churn_limit(spec: Any) -> Any:
    ...

def with_state(fn: Callable) -> Callable:
    ...

def low_balances(spec: Any) -> Any:
    ...

def misc_balances(spec: Any) -> Any:
    ...

def misc_balances_electra(spec: Any) -> Any:
    ...

def misc_balances_in_default_range_with_many_validators(spec: Any) -> Any:
    ...

def low_single_balance(spec: Any) -> Any:
    ...

def large_validator_set(spec: Any) -> Any:
    ...

def single_phase(fn: Callable) -> Callable:
    ...

def dump_skipping_message(reason: str) -> None:
    ...

def description(case_description: str) -> Callable:
    ...

def spec_test(fn: Callable) -> Callable:
    ...

def spec_state_test(fn: Callable) -> Callable:
    ...

def spec_configured_state_test(conf: Dict[str, Any]) -> Callable:
    ...

def _check_current_version(spec: Any, state: Any, version_name: str) -> bool:
    ...

def config_fork_epoch_overrides(spec: Any, state: Any) -> Dict[str, Any]:
    ...

def with_matching_spec_config(emitted_fork: Any) -> Callable:
    ...

def spec_state_test_with_matching_config(fn: Callable) -> Callable:
    ...

def expect_assertion_error(fn: Callable) -> None:
    ...

def never_bls(fn: Callable) -> Callable:
    ...

def always_bls(fn: Callable) -> Callable:
    ...

def bls_switch(fn: Callable) -> Callable:
    ...

def disable_process_reveal_deadlines(fn: Callable) -> Callable:
    ...

def with_all_phases(fn: Callable) -> Callable:
    ...

def with_all_phases_from(earliest_phase: str, all_phases: Sequence[str]) -> Callable:
    ...

def with_all_phases_from_except(earliest_phase: str, except_phases: Sequence[str]) -> Callable:
    ...

def with_all_phases_from_to(from_phase: str, to_phase: str, other_phases: Sequence[str], all_phases: Sequence[str]) -> Callable:
    ...

def with_all_phases_except(exclusion_phases: Sequence[str]) -> Callable:
    ...

def _get_preset_targets(kw: Dict[str, Any]) -> Dict[str, Any]:
    ...

def _get_run_phases(phases: Sequence[str], kw: Dict[str, Any]) -> Sequence[str]:
    ...

def _get_available_phases(run_phases: Sequence[str], other_phases: Sequence[str]) -> Sequence[str]:
    ...

def _run_test_case_with_phases(fn: Callable, phases: Sequence[str], other_phases: Sequence[str], kw: Dict[str, Any], args: Any, is_fork_transition: bool = False) -> Any:
    ...

def with_phases(phases: Sequence[str], other_phases: Sequence[str] = None) -> Callable:
    ...

def with_presets(preset_bases: Sequence[str], reason: str = None) -> Callable:
    ...

def with_light_client(fn: Callable) -> Callable:
    ...

def with_altair_and_later(fn: Callable) -> Callable:
    ...

def with_bellatrix_and_later(fn: Callable) -> Callable:
    ...

def with_capella_and_later(fn: Callable) -> Callable:
    ...

def with_deneb_and_later(fn: Callable) -> Callable:
    ...

def with_electra_and_later(fn: Callable) -> Callable:
    ...

def with_whisk_and_later(fn: Callable) -> Callable:
    ...

def with_fulu_and_later(fn: Callable) -> Callable:
    ...

def _get_basic_dict(ssz_dict: Dict[str, Any]) -> Dict[str, Any]:
    ...

def get_copy_of_spec(spec: Any) -> Any:
    ...

def spec_with_config_overrides(spec: Any, config_overrides: Dict[str, Any]) -> Tuple[Any, Dict[str, Any]]:
    ...

def with_config_overrides(config_overrides: Dict[str, Any], emitted_fork: Any = None, emit: bool = True) -> Callable:
    ...

def only_generator(reason: str) -> Callable:
    ...

def with_test_suite_name(suite_name: str) -> Callable:
    ...

def set_fork_metas(fork_metas: Sequence[Any]) -> Callable:
    ...

def with_fork_metas(fork_metas: Sequence[Any]) -> Callable:
    ...

def yield_fork_meta(fork_metas: Sequence[Any]) -> Callable:
    ...
