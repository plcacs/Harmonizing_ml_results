from typing import List

def get_web_public_subs(realm: Realm) -> SubscriptionInfo:
    ...

def build_unsubscribed_sub_from_stream_dict(user: UserProfile, sub_dict: RawSubscriptionDict, stream_dict: RawStreamDict) -> SubscriptionStreamDict:
    ...

def build_stream_api_dict(raw_stream_dict: RawStreamDict, recent_traffic: Any, setting_groups_dict: AnonymousSettingGroupDict) -> APIStreamDict:
    ...

def build_stream_dict_for_sub(user: UserProfile, sub_dict: RawSubscriptionDict, stream_dict: APIStreamDict) -> SubscriptionStreamDict:
    ...

def build_stream_dict_for_never_sub(raw_stream_dict: RawStreamDict, recent_traffic: Any, setting_groups_dict: AnonymousSettingGroupDict) -> NeverSubscribedStreamDict:
    ...

def validate_user_access_to_subscribers(user_profile: UserProfile, stream: Stream) -> None:
    ...

def validate_user_access_to_subscribers_helper(user_profile: UserProfile, stream_dict: dict, check_user_subscribed: Callable[[UserProfile], bool], user_group_membership_details: UserGroupMembershipDetails) -> None:
    ...

def bulk_get_subscriber_user_ids(stream_dicts: List[dict], user_profile: UserProfile, subscribed_stream_ids: set) -> dict:
    ...

def get_subscribers_query(stream: Stream, requesting_user: UserProfile) -> QuerySet:
    ...

def bulk_get_subscriber_peer_info(realm: Realm, streams: List[Stream]) -> SubscriberPeerInfo:
    ...

def has_metadata_access_to_previously_subscribed_stream(user_profile: UserProfile, stream_dict: dict, user_recursive_group_ids: set, can_administer_channel_group_id: int, can_add_subscribers_group_id: int) -> bool:
    ...

def gather_subscriptions_helper(user_profile: UserProfile, include_subscribers: bool = True, include_archived_channels: bool = False) -> SubscriptionInfo:
    ...

def gather_subscriptions(user_profile: UserProfile, include_subscribers: bool = False) -> Tuple[List[SubscriptionStreamDict], List[SubscriptionStreamDict]]:
    ...
