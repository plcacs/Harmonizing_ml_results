from typing import ContextManager, Any, Tuple, List, Dict, Union

def cd(path: str) -> ContextManager[None]:
    ...

def basic_app(tmpdir: Any) -> str:
    ...

class ThreadedLocalServer(Thread):
    def __init__(self, port: int, host: str = 'localhost') -> None:
        ...

    def wait_for_server_ready(self) -> None:
        ...

    def configure(self, app_object: Any, config: Any) -> None:
        ...

    def run(self) -> None:
        ...

    def make_call(self, method: Any, path: str, port: int, timeout: float = 0.5) -> Any:
        ...

    def shutdown(self) -> None:
        ...

def config() -> Any:
    ...

def unused_tcp_port() -> int:
    ...

def http_session() -> Any:
    ...

class HTTPFetcher:
    def __init__(self, session: Any) -> None:
        ...

    def json_get(self, url: str) -> Dict[str, Union[str, int]]:
        ...

def local_server_factory(unused_tcp_port: int) -> Tuple[Any, int]:
    ...

def sample_app() -> Any:
    ...

def test_has_thread_safe_current_request(config: Any, sample_app: Any, local_server_factory: Any) -> None:
    ...

def test_can_accept_get_request(config: Any, sample_app: Any, local_server_factory: Any) -> None:
    ...

def test_can_get_unicode_string_content_length(config: Any, local_server_factory: Any) -> None:
    ...

def test_can_accept_options_request(config: Any, sample_app: Any, local_server_factory: Any) -> None:
    ...

def test_can_accept_multiple_options_request(config: Any, sample_app: Any, local_server_factory: Any) -> None:
    ...

def test_can_accept_multiple_connections(config: Any, sample_app: Any, local_server_factory: Any) -> None:
    ...

def test_can_import_env_vars(unused_tcp_port: int, http_session: Any) -> None:
    ...

def _wait_for_server_ready(process: Any) -> None:
    ...

def _assert_env_var_loaded(port_number: int, http_session: Any) -> None:
    ...

def test_can_reload_server(unused_tcp_port: int, basic_app: Any, http_session: Any) -> None:
    ...
