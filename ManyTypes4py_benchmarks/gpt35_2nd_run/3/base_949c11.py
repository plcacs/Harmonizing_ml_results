from time import monotonic
from typing import Any, Dict, Iterator, Mapping, Optional, Set
from mode import Service
from faust import web
from faust.types import AppT, CollectionT, EventT, StreamT
from faust.types.assignor import PartitionAssignorT
from faust.types.tuples import Message, PendingMessage, RecordMetadata, TP
from faust.types.sensors import SensorDelegateT, SensorT
from faust.types.transports import ConsumerT, ProducerT

class Sensor(SensorT, Service):
    def on_message_in(self, tp: TP, offset: int, message: Message) -> None:
        ...

    def on_stream_event_in(self, tp: TP, offset: int, stream: StreamT, event: EventT) -> Optional[Dict[SensorT, Any]]:
        ...

    def on_stream_event_out(self, tp: TP, offset: int, stream: StreamT, event: EventT, state: Optional[Dict[SensorT, Any]] = None) -> None:
        ...

    def on_message_out(self, tp: TP, offset: int, message: Message) -> None:
        ...

    def on_topic_buffer_full(self, tp: TP) -> None:
        ...

    def on_table_get(self, table: CollectionT, key: Any) -> None:
        ...

    def on_table_set(self, table: CollectionT, key: Any, value: Any) -> None:
        ...

    def on_table_del(self, table: CollectionT, key: Any) -> None:
        ...

    def on_commit_initiated(self, consumer: ConsumerT) -> Dict[SensorT, Any]:
        ...

    def on_commit_completed(self, consumer: ConsumerT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_send_initiated(self, producer: ProducerT, topic: str, message: PendingMessage, keysize: int, valsize: int) -> Dict[SensorT, Any]:
        ...

    def on_send_completed(self, producer: ProducerT, state: Dict[SensorT, Any], metadata: RecordMetadata) -> None:
        ...

    def on_send_error(self, producer: ProducerT, exc: Exception, state: Dict[SensorT, Any]) -> None:
        ...

    def on_assignment_start(self, assignor: PartitionAssignorT) -> Dict[SensorT, Any]:
        ...

    def on_assignment_error(self, assignor: PartitionAssignorT, state: Dict[SensorT, Any], exc: Exception) -> None:
        ...

    def on_assignment_completed(self, assignor: PartitionAssignorT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_rebalance_start(self, app: AppT) -> Dict[SensorT, Any]:
        ...

    def on_rebalance_return(self, app: AppT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_rebalance_end(self, app: AppT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_web_request_start(self, app: AppT, request: web.Request, view: Optional[Any] = None) -> Dict[SensorT, Any]:
        ...

    def on_web_request_end(self, app: AppT, request: web.Request, response: web.Response, state: Dict[SensorT, Any], view: Optional[Any] = None) -> None:
        ...

    def asdict(self) -> Dict[str, Any]:
        ...

class SensorDelegate(SensorDelegateT):
    def __init__(self, app: AppT):
        ...

    def add(self, sensor: SensorT) -> None:
        ...

    def remove(self, sensor: SensorT) -> None:
        ...

    def __iter__(self) -> Iterator[SensorT]:
        ...

    def on_message_in(self, tp: TP, offset: int, message: Message) -> None:
        ...

    def on_stream_event_in(self, tp: TP, offset: int, stream: StreamT, event: EventT) -> Dict[SensorT, Any]:
        ...

    def on_stream_event_out(self, tp: TP, offset: int, stream: StreamT, event: EventT, state: Optional[Dict[SensorT, Any]] = None) -> None:
        ...

    def on_topic_buffer_full(self, tp: TP) -> None:
        ...

    def on_message_out(self, tp: TP, offset: int, message: Message) -> None:
        ...

    def on_table_get(self, table: CollectionT, key: Any) -> None:
        ...

    def on_table_set(self, table: CollectionT, key: Any, value: Any) -> None:
        ...

    def on_table_del(self, table: CollectionT, key: Any) -> None:
        ...

    def on_commit_initiated(self, consumer: ConsumerT) -> Dict[SensorT, Any]:
        ...

    def on_commit_completed(self, consumer: ConsumerT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_send_initiated(self, producer: ProducerT, topic: str, message: PendingMessage, keysize: int, valsize: int) -> Dict[SensorT, Any]:
        ...

    def on_send_completed(self, producer: ProducerT, state: Dict[SensorT, Any], metadata: RecordMetadata) -> None:
        ...

    def on_send_error(self, producer: ProducerT, exc: Exception, state: Dict[SensorT, Any]) -> None:
        ...

    def on_assignment_start(self, assignor: PartitionAssignorT) -> Dict[SensorT, Any]:
        ...

    def on_assignment_error(self, assignor: PartitionAssignorT, state: Dict[SensorT, Any], exc: Exception) -> None:
        ...

    def on_assignment_completed(self, assignor: PartitionAssignorT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_rebalance_start(self, app: AppT) -> Dict[SensorT, Any]:
        ...

    def on_rebalance_return(self, app: AppT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_rebalance_end(self, app: AppT, state: Dict[SensorT, Any]) -> None:
        ...

    def on_web_request_start(self, app: AppT, request: web.Request, view: Optional[Any] = None) -> Dict[SensorT, Any]:
        ...

    def on_web_request_end(self, app: AppT, request: web.Request, response: web.Response, state: Dict[SensorT, Any], view: Optional[Any] = None) -> None:
        ...

    def __repr__(self) -> str:
        ...
