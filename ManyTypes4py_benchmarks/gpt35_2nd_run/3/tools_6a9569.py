def do_adjust_figure(fig: mpl.figure.Figure) -> bool:
    ...

def maybe_adjust_figure(fig: mpl.figure.Figure, *args, **kwargs) -> None:
    ...

def format_date_labels(ax: mpl.axes.Axes, rot: float) -> None:
    ...

def table(ax: mpl.axes.Axes, data: Union[DataFrame, Series], rowLabels: Optional[Iterable] = None, colLabels: Optional[Iterable] = None, **kwargs) -> mpl.table.Table:
    ...

def _get_layout(nplots: int, layout: Optional[Tuple[int, int]] = None, layout_type: str = 'box') -> Tuple[int, int]:
    ...

def create_subplots(naxes: int, sharex: bool = False, sharey: bool = False, squeeze: bool = True, subplot_kw: Optional[Dict] = None, ax: Optional[mpl.axes.Axes] = None, layout: Optional[Tuple[int, int]] = None, layout_type: str = 'box', **fig_kw) -> Tuple[mpl.figure.Figure, Union[mpl.axes.Axes, np.ndarray]]:
    ...

def _remove_labels_from_axis(axis: mpl.axis.Axis) -> None:
    ...

def _has_externally_shared_axis(ax1: mpl.axes.Axes, compare_axis: str) -> bool:
    ...

def handle_shared_axes(axarr: np.ndarray, nplots: int, naxes: int, nrows: int, ncols: int, sharex: bool, sharey: bool) -> None:
    ...

def flatten_axes(axes: Union[mpl.axes.Axes, np.ndarray]) -> Generator[mpl.axes.Axes, None, None]:
    ...

def set_ticks_props(axes: Union[mpl.axes.Axes, np.ndarray], xlabelsize: Optional[int] = None, xrot: Optional[float] = None, ylabelsize: Optional[int] = None, yrot: Optional[float] = None) -> Union[mpl.axes.Axes, np.ndarray]:
    ...

def get_all_lines(ax: mpl.axes.Axes) -> List[mpl.lines.Line2D]:
    ...

def get_xlim(lines: List[mpl.lines.Line2D]) -> Tuple[float, float]:
    ...
