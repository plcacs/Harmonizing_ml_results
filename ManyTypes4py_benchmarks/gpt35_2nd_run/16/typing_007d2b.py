def get_args(t: Any) -> Tuple:
    ...

def get_origin(tp: Any) -> Type[Any]:
    ...

def get_sub_types(tp: Any) -> List[Type[Any]]:
    ...

def get_all_type_hints(obj: Any, globalns: Optional[Dict[str, Any]] = None, localns: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    ...

def is_union(tp: Any) -> bool:
    ...

def is_none_type(type_: Type) -> bool:
    ...

def display_as_type(v: Any) -> str:
    ...

def resolve_annotations(raw_annotations: Dict[str, Any], module_name: str) -> Dict[str, Any]:
    ...

def is_callable_type(type_: Type) -> bool:
    ...

def is_literal_type(type_: Type) -> bool:
    ...

def literal_values(type_: Type) -> Tuple:
    ...

def all_literal_values(type_: Type) -> Tuple:
    ...

def is_namedtuple(type_: Type) -> bool:
    ...

def is_typeddict(type_: Type) -> bool:
    ...

def is_typeddict_special(type_: Type) -> bool:
    ...

def is_new_type(type_: Type) -> bool:
    ...

def new_type_supertype(type_: Type) -> Type:
    ...

def is_classvar(ann_type: Any) -> bool:
    ...

def is_finalvar(ann_type: Any) -> bool:
    ...

def update_field_forward_refs(field: ModelField, globalns: Dict[str, Any], localns: Optional[Dict[str, Any]]) -> None:
    ...

def update_model_forward_refs(model: Type, fields: List[ModelField], json_encoders: Dict[str, Any], localns: Dict[str, Any], exc_to_suppress: Tuple) -> None:
    ...

def get_class(type_: Type) -> Union[bool, Type]:
    ...
