from typing import List, Dict, Any, Union

def _limit_value_infers(func: Any) -> Any:
    def wrapper(context: Any, *args: Any, **kwargs: Any) -> Any:
        ...

def infer_node(context: Any, element: Any) -> Any:
    ...

def _infer_node_if_inferred(context: Any, element: Any) -> Any:
    ...

def _infer_node_cached(context: Any, element: Any) -> Any:
    ...

def _infer_node(context: Any, element: Any) -> Any:
    ...

def infer_trailer(context: Any, atom_values: Any, trailer: Any) -> Any:
    ...

def infer_atom(context: Any, atom: Any) -> Any:
    ...

def infer_expr_stmt(context: Any, stmt: Any, seek_name: Any = None) -> Any:
    ...

def _infer_expr_stmt(context: Any, stmt: Any, seek_name: Any = None) -> Any:
    ...

def infer_or_test(context: Any, or_test: Any) -> Any:
    ...

def infer_factor(value_set: Any, operator: Any) -> Any:
    ...

def _literals_to_types(inference_state: Any, result: Any) -> Any:
    ...

def _infer_comparison(context: Any, left_values: Any, operator: Any, right_values: Any) -> Any:
    ...

def _is_annotation_name(name: Any) -> Any:
    ...

def _is_list(value: Any) -> Any:
    ...

def _is_tuple(value: Any) -> Any:
    ...

def _bool_to_value(inference_state: Any, bool_: Any) -> Any:
    ...

def _get_tuple_ints(value: Any) -> Any:
    ...

def _infer_comparison_part(inference_state: Any, context: Any, left: Any, operator: Any, right: Any) -> Any:
    ...

def tree_name_to_values(inference_state: Any, context: Any, tree_name: Any) -> Any:
    ...

def _apply_decorators(context: Any, node: Any) -> Any:
    ...

def check_tuple_assignments(name: Any, value_set: Any) -> Any:
    ...

class ContextualizedSubscriptListNode(ContextualizedNode):
    def infer(self) -> Any:
        ...

def _infer_subscript_list(context: Any, index: Any) -> Any:
    ...
