def take_nd(arr: np.ndarray | ExtensionArray, indexer: np.ndarray, axis: int = 0, fill_value: Any = lib.no_default, allow_fill: bool = True) -> np.ndarray | ExtensionArray:
    ...

def take_2d_multi(arr: np.ndarray, indexer: Tuple[np.ndarray, np.ndarray], fill_value: Any = np.nan) -> np.ndarray:
    ...

def _get_take_nd_function_cached(ndim: int, arr_dtype: np.dtype, out_dtype: np.dtype, axis: int) -> Optional[Callable]:
    ...

def _get_take_nd_function(ndim: int, arr_dtype: np.dtype, out_dtype: np.dtype, axis: int = 0, mask_info: Optional[Tuple[Tuple[np.ndarray, np.ndarray], Tuple[bool, bool]]] = None) -> Callable:
    ...

def _view_wrapper(f: Callable, arr_dtype: Optional[np.dtype] = None, out_dtype: Optional[np.dtype] = None, fill_wrap: Optional[Callable] = None) -> Callable:
    ...

def _convert_wrapper(f: Callable, conv_dtype: np.dtype) -> Callable:
    ...

def _take_nd_object(arr: np.ndarray, indexer: np.ndarray, out: np.ndarray, axis: int, fill_value: Any, mask_info: Optional[Tuple[np.ndarray, bool]]) -> None:
    ...

def _take_2d_multi_object(arr: np.ndarray, indexer: Tuple[np.ndarray, np.ndarray], out: np.ndarray, fill_value: Any, mask_info: Optional[Tuple[Tuple[np.ndarray, np.ndarray], Tuple[bool, bool]]) -> None:
    ...

def _take_preprocess_indexer_and_fill_value(arr: np.ndarray, indexer: np.ndarray, fill_value: Any, allow_fill: bool, mask: Optional[np.ndarray] = None) -> Tuple[np.dtype, Any, Optional[Tuple[np.ndarray, bool]]]:
    ...
