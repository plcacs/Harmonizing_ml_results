from typing import Any, List, Tuple

def move_rows(base_model: Model, raw_query: str, *, src_db_table: str = None, returning_id: bool = False, **kwargs: Any) -> List[int]:
    ...

def run_archiving(query: str, type: str, realm: Realm = None, chunk_size: int = MESSAGE_BATCH_SIZE, **kwargs: Any) -> int:
    ...

def move_expired_messages_to_archive_by_recipient(recipient: Recipient, message_retention_days: int, realm: Realm, chunk_size: int = MESSAGE_BATCH_SIZE) -> int:
    ...

def move_expired_direct_messages_to_archive(realm: Realm, chunk_size: int = MESSAGE_BATCH_SIZE) -> int:
    ...

def move_models_with_message_key_to_archive(msg_ids: List[int]) -> None:
    ...

def move_attachments_to_archive(msg_ids: List[int]) -> None:
    ...

def move_attachment_messages_to_archive(msg_ids: List[int]) -> None:
    ...

def delete_messages(msg_ids: List[int]) -> None:
    ...

def delete_expired_attachments(realm: Realm) -> None:
    ...

def move_related_objects_to_archive(msg_ids: List[int]) -> None:
    ...

def archive_messages_by_recipient(recipient: Recipient, message_retention_days: int, realm: Realm, chunk_size: int = MESSAGE_BATCH_SIZE) -> int:
    ...

def archive_direct_messages(realm: Realm, chunk_size: int = MESSAGE_BATCH_SIZE) -> None:
    ...

def archive_stream_messages(realm: Realm, streams: List[Stream], chunk_size: int = STREAM_MESSAGE_BATCH_SIZE) -> None:
    ...

def archive_messages(chunk_size: int = MESSAGE_BATCH_SIZE) -> None:
    ...

def get_realms_and_streams_for_archiving() -> List[Tuple[Realm, List[Stream]]]:
    ...

def move_messages_to_archive(message_ids: List[int], realm: Realm = None, chunk_size: int = MESSAGE_BATCH_SIZE) -> None:
    ...

def restore_messages_from_archive(archive_transaction_id: int) -> List[int]:
    ...

def restore_models_with_message_key_from_archive(archive_transaction_id: int) -> None:
    ...

def restore_attachments_from_archive(archive_transaction_id: int) -> None:
    ...

def restore_attachment_messages_from_archive(archive_transaction_id: int) -> None:
    ...

def restore_data_from_archive(archive_transaction: ArchiveTransaction) -> int:
    ...

def restore_data_from_archive_by_transactions(archive_transactions: List[ArchiveTransaction]) -> int:
    ...

def restore_data_from_archive_by_realm(realm: Realm) -> None:
    ...

def restore_all_data_from_archive(restore_manual_transactions: bool = True) -> None:
    ...

def restore_retention_policy_deletions_for_stream(stream: Stream) -> None:
    ...

def clean_archived_data() -> None:
    ...

def parse_message_retention_days(value: Any, special_values_map: dict) -> int:
    ...
