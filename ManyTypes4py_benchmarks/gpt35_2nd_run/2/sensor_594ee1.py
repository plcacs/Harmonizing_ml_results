from __future__ import annotations
from collections import deque
from collections.abc import Callable
from datetime import datetime, timedelta
import logging
import math
import statistics
import time
from typing import Any, cast

def _callable_characteristic_fn(characteristic: str, binary: bool) -> Callable[[deque[bool | float], deque[datetime], int], datetime | int | float | None]:
    ...

def _stat_average_linear(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_average_step(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_average_timeless(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_change(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_change_sample(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_change_second(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_count(states: deque[float], ages: deque[datetime], percentile: int) -> int:
    ...

def _stat_datetime_newest(states: deque[float], ages: deque[datetime], percentile: int) -> datetime | None:
    ...

def _stat_datetime_oldest(states: deque[float], ages: deque[datetime], percentile: int) -> datetime | None:
    ...

def _stat_datetime_value_max(states: deque[float], ages: deque[datetime], percentile: int) -> datetime | None:
    ...

def _stat_datetime_value_min(states: deque[float], ages: deque[datetime], percentile: int) -> datetime | None:
    ...

def _stat_distance_95_percent_of_values(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_distance_99_percent_of_values(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_distance_absolute(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_mean(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_mean_circular(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_median(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_noisiness(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_percentile(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_standard_deviation(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_sum(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_sum_differences(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_sum_differences_nonnegative(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_total(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_value_max(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_value_min(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_variance(states: deque[float], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_binary_average_step(states: deque[bool], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_binary_average_timeless(states: deque[bool], ages: deque[datetime], percentile: int) -> float | None:
    ...

def _stat_binary_count(states: deque[bool], ages: deque[datetime], percentile: int) -> int:
    ...

def _stat_binary_count_on(states: deque[bool], ages: deque[datetime], percentile: int) -> int:
    ...

def _stat_binary_count_off(states: deque[bool], ages: deque[datetime], percentile: int) -> int:
    ...

def _stat_binary_datetime_newest(states: deque[bool], ages: deque[datetime], percentile: int) -> datetime | None:
    ...

def _stat_binary_datetime_oldest(states: deque[bool], ages: deque[datetime], percentile: int) -> datetime | None:
    ...

def _stat_binary_mean(states: deque[bool], ages: deque[datetime], percentile: int) -> float | None:
    ...
