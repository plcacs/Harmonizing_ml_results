from typing import Callable, Any, Dict, Generic, Iterator, List, Optional, Type, TypeVar, Union, overload

def get_unused_port_socket(host: str, family: int = socket.AF_INET) -> socket.socket:
    ...

def get_port_socket(host: str, port: int, family: int = socket.AF_INET) -> socket.socket:
    ...

def unused_port() -> int:
    ...

class BaseTestServer(ABC, Generic[_Request]):
    ...

    def __init__(self, *, scheme: str = '', host: str = '127.0.0.1', port: Optional[int] = None, skip_url_asserts: bool = False, socket_factory: Callable = get_port_socket, **kwargs: Any) -> None:
    ...

    async def start_server(self, **kwargs: Any) -> None:
    ...

    @abstractmethod
    async def _make_runner(self, **kwargs: Any) -> Any:
    ...

    def make_url(self, path: str) -> URL:
    ...

    @property
    def started(self) -> bool:
    ...

    @property
    def closed(self) -> bool:
    ...

    @property
    def handler(self) -> Any:
    ...

    async def close(self) -> None:
    ...

class TestServer(BaseTestServer[Request]):
    ...

    def __init__(self, app: Application, *, scheme: str = '', host: str = '127.0.0.1', port: Optional[int] = None, **kwargs: Any) -> None:
    ...

    async def _make_runner(self, **kwargs: Any) -> Any:
    ...

class RawTestServer(BaseTestServer[BaseRequest]):
    ...

    def __init__(self, handler: Any, *, scheme: str = '', host: str = '127.0.0.1', port: Optional[int] = None, **kwargs: Any) -> None:
    ...

    async def _make_runner(self, **kwargs: Any) -> Any:
    ...

class TestClient(Generic[_Request, _ApplicationNone]):
    ...

    def __init__(self, server: BaseTestServer, *, cookie_jar: Optional[aiohttp.CookieJar] = None, **kwargs: Any) -> None:
    ...

    async def start_server(self) -> None:
    ...

    @property
    def scheme(self) -> str:
    ...

    @property
    def host(self) -> str:
    ...

    @property
    def port(self) -> int:
    ...

    @property
    def server(self) -> BaseTestServer:
    ...

    @property
    def app(self) -> Optional[Application]:
    ...

    @property
    def session(self) -> aiohttp.ClientSession:
    ...

    def make_url(self, path: str) -> URL:
    ...

    async def _request(self, method: str, path: str, **kwargs: Any) -> Any:
    ...

    def request(self, method: str, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def get(self, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def options(self, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def head(self, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def post(self, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def put(self, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def patch(self, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def delete(self, path: str, **kwargs: Any) -> _RequestContextManager:
    ...

    def ws_connect(self, path: str, **kwargs: Any) -> _WSRequestContextManager:
    ...

    async def _ws_connect(self, path: str, **kwargs: Any) -> Any:
    ...

    async def close(self) -> None:
    ...

class AioHTTPTestCase(IsolatedAsyncioTestCase, ABC):
    ...

    @abstractmethod
    async def get_application(self) -> Application:
    ...

    async def asyncSetUp(self) -> None:
    ...

    async def asyncTearDown(self) -> None:
    ...

    async def get_server(self, app: Application) -> TestServer:
    ...

    async def get_client(self, server: TestServer) -> TestClient:
    ...

@contextlib.contextmanager
def loop_context(loop_factory: Callable[[], asyncio.AbstractEventLoop] = asyncio.new_event_loop, fast: bool = False) -> Iterator[asyncio.AbstractEventLoop]:
    ...

def setup_test_loop(loop_factory: Callable[[], asyncio.AbstractEventLoop] = asyncio.new_event_loop) -> asyncio.AbstractEventLoop:
    ...

def teardown_test_loop(loop: asyncio.AbstractEventLoop, fast: bool = False) -> None:
    ...

def _create_app_mock() -> Application:
    ...

def _create_transport(sslcontext: Optional[SSLContext] = None) -> Any:
    ...

def make_mocked_request(method: str, path: str, headers: Optional[Dict[str, str]] = None, *, match_info: Optional[Dict[str, str]] = None, version: HttpVersion = HttpVersion(1, 1), closing: bool = False, app: Optional[Application] = None, writer: Optional[AbstractStreamWriter] = None, protocol: Any = None, transport: Any = None, payload: Any = EMPTY_PAYLOAD, sslcontext: Optional[SSLContext] = None, client_max_size: int = 1024 ** 2, loop: Any = ...) -> Request:
    ...

def make_mocked_coro(return_value: Any = sentinel, raise_exception: Any = sentinel) -> Any:
    ...
