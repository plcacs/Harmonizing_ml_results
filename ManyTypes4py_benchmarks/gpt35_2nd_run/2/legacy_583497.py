def get_significant_states(hass: HomeAssistant, start_time: datetime, end_time: datetime = None, entity_ids: Iterable[str] = None, filters: Any = None, include_start_time_state: bool = True, significant_changes_only: bool = True, minimal_response: bool = False, no_attributes: bool = False, compressed_state_format: bool = False) -> dict[str, list[State]]:
    ...

def get_significant_states_with_session(hass: HomeAssistant, session: Session, start_time: datetime, end_time: datetime = None, entity_ids: Iterable[str] = None, filters: Any = None, include_start_time_state: bool = True, significant_changes_only: bool = True, minimal_response: bool = False, no_attributes: bool = False, compressed_state_format: bool = False) -> dict[str, list[State]]:
    ...

def get_full_significant_states_with_session(hass: HomeAssistant, session: Session, start_time: datetime, end_time: datetime = None, entity_ids: Iterable[str] = None, filters: Any = None, include_start_time_state: bool = True, significant_changes_only: bool = True, no_attributes: bool = False) -> dict[str, list[State]]:
    ...

def state_changes_during_period(hass: HomeAssistant, start_time: datetime, end_time: datetime = None, entity_id: str = None, no_attributes: bool = False, descending: bool = False, limit: int = None, include_start_time_state: bool = True) -> dict[str, list[State]]:
    ...

def get_last_state_changes(hass: HomeAssistant, number_of_states: int, entity_id: str) -> dict[str, list[State]]:
    ...

def _get_rows_with_session(hass: HomeAssistant, session: Session, utc_point_in_time: datetime, entity_ids: Iterable[str], *, no_attributes: bool = False) -> list[State]:
    ...

def _get_single_entity_states_stmt(utc_point_in_time: datetime, entity_id: str, no_attributes: bool = False) -> StatementLambdaElement:
    ...

def _sorted_states_to_dict(hass: HomeAssistant, session: Session, states: Iterable[Row], start_time: datetime, entity_ids: Iterable[str], include_start_time_state: bool = True, minimal_response: bool = False, no_attributes: bool = False, compressed_state_format: bool = False) -> dict[str, list[State]:
    ...
