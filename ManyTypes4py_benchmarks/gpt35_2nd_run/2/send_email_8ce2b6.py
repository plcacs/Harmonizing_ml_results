from typing import List, Dict, Optional

def build_email(template_prefix: str, to_user_ids: Optional[List[int]] = None, to_emails: Optional[List[str]] = None, from_name: Optional[str] = None, from_address: Optional[str] = None, reply_to_email: Optional[str] = None, language: Optional[str] = None, context: Dict[str, Any] = {}, realm: Optional[Any] = None) -> Any:
    ...

def send_email(template_prefix: str, to_user_ids: Optional[List[int]] = None, to_emails: Optional[List[str]] = None, from_name: Optional[str] = None, from_address: Optional[str] = None, reply_to_email: Optional[str] = None, language: Optional[str] = None, context: Dict[str, Any] = {}, realm: Optional[Any] = None, connection: Optional[Any] = None, dry_run: bool = False, request: Optional[Any] = None) -> None:
    ...

def send_future_email(template_prefix: str, realm: Any, to_user_ids: Optional[List[int]] = None, to_emails: Optional[List[str]] = None, from_name: Optional[str] = None, from_address: Optional[str] = None, language: Optional[str] = None, context: Dict[str, Any] = {}, delay: timedelta = timedelta(0)) -> None:
    ...

def send_email_to_admins(template_prefix: str, realm: Any, from_name: Optional[str] = None, from_address: Optional[str] = None, language: Optional[str] = None, context: Dict[str, Any] = {}) -> None:
    ...

def send_email_to_billing_admins_and_realm_owners(template_prefix: str, realm: Any, from_name: Optional[str] = None, from_address: Optional[str] = None, language: Optional[str] = None, context: Dict[str, Any] = {}) -> None:
    ...

def clear_scheduled_invitation_emails(email: str) -> None:
    ...

def clear_scheduled_emails(user_id: int, email_type: Optional[Any] = None) -> None:
    ...

def deliver_scheduled_emails(email: Any) -> None:
    ...

def get_header(option: Optional[str], header: Optional[str], name: str) -> str:
    ...

def custom_email_sender(markdown_template_path: str, dry_run: bool, subject: Optional[str] = None, from_address: Optional[str] = FromAddress.SUPPORT, from_name: Optional[str] = None, reply_to: Optional[str] = None, **kwargs: Any) -> Callable:
    ...

def send_custom_email(users: QuerySet, dry_run: bool, options: Dict[str, Any], add_context: Optional[Callable] = None, distinct_email: bool = False) -> QuerySet:
    ...

def send_custom_server_email(remote_servers: QuerySet, dry_run: bool, options: Dict[str, Any], add_context: Optional[Callable] = None) -> None:
    ...

def log_email_config_errors() -> None:
    ...
