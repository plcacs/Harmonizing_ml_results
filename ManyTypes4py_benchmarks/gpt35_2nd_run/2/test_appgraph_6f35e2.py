from chalice.app import Chalice
from chalice.config import Config
from chalice.constants import LAMBDA_TRUST_POLICY
from chalice.deploy import models
from chalice.deploy.appgraph import ApplicationGraphBuilder, ChaliceBuildError
from chalice.deploy.deployer import BuildStage, PolicyGenerator
from chalice.utils import serialize_to_json, OSUtils
from typing import List, Dict, Any, Union

def create_config(self, app: Chalice, app_name: str = 'lambda-only', iam_role_arn: Union[str, None] = None, policy_file: Union[str, None] = None, api_gateway_stage: str = 'api', autogen_policy: bool = False, security_group_ids: Union[List[str], None] = None, subnet_ids: Union[List[str], None] = None, reserved_concurrency: Union[int, None] = None, layers: Union[List[str], None] = None, automatic_layer: bool = False, api_gateway_endpoint_type: Union[str, None] = None, api_gateway_endpoint_vpce: Union[str, None] = None, api_gateway_policy_file: Union[str, None] = None, api_gateway_custom_domain: Union[Dict[str, Any], None] = None, websocket_api_custom_domain: Union[Dict[str, Any], None] = None, log_retention_in_days: Union[int, None] = None, project_dir: str = '.') -> Config:
    ...

def test_can_build_single_lambda_function_app(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_can_build_single_lambda_function_app_with_log_retention(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_can_build_single_lambda_function_app_with_managed_layer(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_all_lambda_functions_share_managed_layer(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_can_build_lambda_function_with_layers(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_can_build_app_with_domain_name(self, sample_app: Chalice) -> None:
    ...

def test_can_build_lambda_function_app_with_vpc_config(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_vpc_trait_added_when_vpc_configured(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_exception_raised_when_missing_vpc_params(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_can_build_lambda_function_app_with_reserved_concurrency(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_multiple_lambda_functions_share_role_and_package(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_autogen_policy_for_function(self, sample_app_lambda_only: Chalice) -> None:
    ...

def test_cloudwatch_event_models(self, sample_cloudwatch_event_app: Chalice) -> None:
    ...

def test_scheduled_event_models(self, sample_app_schedule_only: Chalice) -> None:
    ...

def test_can_build_private_rest_api(self, sample_app: Chalice) -> None:
    ...

def test_can_build_private_rest_api_custom_policy(self, tmpdir, sample_app: Chalice) -> None:
    ...

def test_can_build_rest_api(self, sample_app: Chalice) -> None:
    ...

def test_can_build_rest_api_with_authorizer(self, sample_app_with_auth: Chalice) -> None:
    ...

def test_can_create_s3_event_handler(self, sample_s3_event_app: Chalice) -> None:
    ...

def test_can_create_sns_event_handler(self, sample_sns_event_app: Chalice) -> None:
    ...

def test_can_create_sqs_event_handler(self, sample_sqs_event_app: Chalice) -> None:
    ...

def test_can_create_sqs_handler_with_queue_arn(self, sample_sqs_event_app: Chalice) -> None:
    ...

def test_can_create_kinesis_event_handler(self, sample_kinesis_event_app: Chalice) -> None:
    ...

def test_can_create_ddb_event_handler(self, sample_ddb_event_app: Chalice) -> None:
    ...

def test_can_create_websocket_event_handler(self, sample_websocket_app: Chalice) -> None:
    ...

def test_can_create_websocket_api_with_domain_name(self, sample_websocket_app: Chalice) -> None:
    ...

def test_can_create_websocket_app_missing_connect(self, websocket_app_without_connect: Chalice) -> None:
    ...

def test_can_create_websocket_app_missing_message(self, websocket_app_without_message: Chalice) -> None:
    ...

def test_can_create_websocket_app_missing_disconnect(self, websocket_app_without_disconnect: Chalice) -> None:
    ...
