from typing import List, Tuple, Union

class ClassName(TreeNameDefinition):
    def __init__(self, class_value: ClassValue, tree_name: Any, name_context: Any, apply_decorators: bool) -> None:
        ...

class ClassFilter(ParserTreeFilter):
    def __init__(self, class_value: ClassValue, node_context: Any = None, until_position: Any = None, origin_scope: Any = None, is_instance: bool = False) -> None:
        ...

class ClassMixin:
    def is_class(self) -> bool:
        ...
    def is_class_mixin(self) -> bool:
        ...
    def py__call__(self, arguments: List[Any]) -> ValueSet:
        ...
    def py__class__(self) -> Any:
        ...
    def py__name__(self) -> str:
        ...
    def py__mro__(self) -> Generator:
        ...
    def get_filters(self, origin_scope: Any = None, is_instance: bool = False, include_metaclasses: bool = True, include_type_when_class: bool = True) -> Generator:
        ...
    def get_signatures(self) -> List:
        ...
    def _as_context(self) -> ClassContext:
        ...
    def get_type_hint(self, add_class_info: bool = True) -> str:
        ...
    def is_typeddict(self) -> bool:
        ...
    def py__getitem__(self, index_value_set: ValueSet, contextualized_node: Any) -> ValueSet:
        ...
    def with_generics(self, generics_tuple: Tuple) -> Any:
        ...
    def define_generics(self, type_var_dict: dict) -> ValueSet:
        ...
    def list_type_vars(self) -> List:
        ...
    def _get_bases_arguments(self) -> Any:
        ...
    def py__bases__(self) -> List:
        ...
    def get_metaclass_filters(self, metaclasses: List, is_instance: bool) -> List:
        ...
    def get_metaclasses(self) -> ValueSet:
        ...
    def get_metaclass_signatures(self, metaclasses: List) -> List:
        ...

class ClassValue(ClassMixin, FunctionAndClassBase, metaclass=CachedMetaClass):
    def list_type_vars(self) -> List:
        ...
    def _get_bases_arguments(self) -> Any:
        ...
    def py__bases__(self) -> List:
        ...
    def get_metaclass_filters(self, metaclasses: List, is_instance: bool) -> List:
        ...
    def get_metaclasses(self) -> ValueSet:
        ...
    def get_metaclass_signatures(self, metaclasses: List) -> List:
        ...
