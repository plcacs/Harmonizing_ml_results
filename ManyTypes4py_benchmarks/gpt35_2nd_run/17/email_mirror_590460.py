from email.message import Message
from typing import Optional

def redact_email_address(error_message: str) -> str:
    ...

def log_error(email_message: Message, error_message: str, to: Optional[str]) -> None:
    ...

def generate_missed_message_token() -> str:
    ...

def is_missed_message_address(address: str) -> bool:
    ...

def is_mm_32_format(msg_string: str) -> bool:
    ...

def get_missed_message_token_from_address(address: str) -> str:
    ...

def get_usable_missed_message_address(address: str) -> str:
    ...

def create_missed_message_address(user_profile, message) -> str:
    ...

def construct_zulip_body(message, realm, *, sender, show_sender=False, include_quotes=False, include_footer=False, prefer_text=True) -> str:
    ...

def send_zulip(sender, stream, topic_name, content) -> None:
    ...

def send_mm_reply_to_stream(user_profile, stream, topic_name, body) -> None:
    ...

def get_message_part_by_type(message: Message, content_type: str) -> Optional[str]:
    ...

def extract_body(message: Message, include_quotes=False, prefer_text=True) -> str:
    ...

def extract_plaintext_body(message: Message, include_quotes=False) -> Optional[str]:
    ...

def extract_html_body(message: Message, include_quotes=False) -> Optional[str]:
    ...

def filter_footer(text: str) -> str:
    ...

def extract_and_upload_attachments(message: Message, realm, sender) -> str:
    ...

def decode_stream_email_address(email: str) -> tuple:
    ...

def find_emailgateway_recipient(message: Message) -> str:
    ...

def strip_from_subject(subject: str) -> str:
    ...

def is_forwarded(subject: str) -> bool:
    ...

def process_stream_message(to: str, message: Message) -> None:
    ...

def process_missed_message(to: str, message: Message) -> None:
    ...

def process_message(message: Message, rcpt_to: Optional[str] = None) -> None:
    ...

def validate_to_address(rcpt_to: str) -> None:
    ...

def mirror_email_message(rcpt_to: str, msg_base64: str) -> dict:
    ...

class RateLimitedRealmMirror(RateLimitedObject):

    def __init__(self, realm) -> None:
        ...

    def key(self) -> str:
        ...

    def rules(self) -> dict:
        ...

def rate_limit_mirror_by_realm(recipient_realm) -> None:
    ...
