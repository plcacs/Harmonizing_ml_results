from typing import Any, Dict, Optional
from pathlib import Path

def call_pipeline_create(cli: Any, metadata: Any, pipeline_name: str = 'my_pipeline') -> None:
    ...

def call_micropkg_package(cli: Any, metadata: Any, alias: Optional[str] = None, destination: Optional[str] = None, pipeline_name: str = 'my_pipeline') -> None:
    ...

def call_pipeline_delete(cli: Any, metadata: Any, pipeline_name: str = 'my_pipeline') -> None:
    ...

def assert_package_files_exist(self, source_path: Path) -> None:
    ...

def test_pull_local_sdist(self, fake_project_cli: Any, fake_repo_path: Path, fake_package_path: Path, env: Optional[str], alias: Optional[str], destination: Optional[str], fake_metadata: Any) -> None:
    ...

def test_pull_local_sdist_compare(self, fake_project_cli: Any, fake_repo_path: Path, fake_package_path: Path, env: Optional[str], alias: Optional[str], destination: Optional[str], fake_metadata: Any) -> None:
    ...

def test_micropkg_pull_same_alias_package_name(self, fake_project_cli: Any, fake_repo_path: Path, fake_package_path: Path, fake_metadata: Any) -> None:
    ...

def test_micropkg_pull_nested_destination(self, fake_project_cli: Any, fake_repo_path: Path, fake_package_path: Path, fake_metadata: Any) -> None:
    ...

def test_micropkg_alias_refactors_imports(self, fake_project_cli: Any, fake_package_path: Path, fake_repo_path: Path, fake_metadata: Any) -> None:
    ...

def test_micropkg_pull_from_aliased_pipeline_conflicting_name(self, fake_project_cli: Any, fake_package_path: Path, fake_repo_path: Path, fake_metadata: Any) -> None:
    ...

def test_micropkg_pull_as_aliased_pipeline_conflicting_name(self, fake_project_cli: Any, fake_package_path: Path, fake_repo_path: Path, fake_metadata: Any) -> None:
    ...

def test_pull_sdist_fs_args(self, fake_project_cli: Any, fake_repo_path: Path, mocker: Any, tmp_path: Path, fake_metadata: Any) -> None:
    ...

def test_pull_tests_missing(self, fake_project_cli: Any, fake_repo_path: Path, fake_package_path: Path, env: Optional[str], alias: Optional[str], fake_metadata: Any) -> None:
    ...

def test_pull_config_missing(self, fake_project_cli: Any, fake_repo_path: Path, fake_package_path: Path, env: Optional[str], alias: Optional[str], fake_metadata: Any) -> None:
    ...

def test_pull_from_pypi(self, fake_project_cli: Any, fake_repo_path: Path, mocker: Any, tmp_path: Path, fake_package_path: Path, env: Optional[str], alias: Optional[str], fake_metadata: Any, temp_dir_with_context_manager: Any) -> None:
    ...

def test_invalid_pull_from_pypi(self, fake_project_cli: Any, mocker: Any, tmp_path: Path, fake_metadata: Any, temp_dir_with_context_manager: Any) -> None:
    ...

def test_pull_from_pypi_more_than_one_sdist_file(self, fake_project_cli: Any, mocker: Any, tmp_path: Path, fake_metadata: Any, temp_dir_with_context_manager: Any) -> None:
    ...

def test_pull_unsupported_protocol_by_fsspec(self, fake_project_cli: Any, fake_metadata: Any, tmp_path: Path, mocker: Any, temp_dir_with_context_manager: Any) -> None:
    ...

def test_micropkg_pull_invalid_sdist(self, fake_project_cli: Any, fake_repo_path: Path, fake_metadata: Any, tmp_path: Path) -> None:
    ...

def test_micropkg_pull_invalid_package_contents(self, fake_project_cli: Any, fake_repo_path: Path, fake_metadata: Any, tmp_path: Path) -> None:
    ...

def test_path_traversal(self, tar_members: List[str], path_name: str) -> None:
    ...

def test_micropkg_pull_all(self, fake_repo_path: Path, fake_project_cli: Any, fake_metadata: Any, mocker: Any) -> None:
    ...

def test_micropkg_pull_all_empty_toml(self, fake_repo_path: Path, fake_project_cli: Any, fake_metadata: Any, mocker: Any) -> None:
    ...

def test_invalid_toml(self, fake_repo_path: Path, fake_project_cli: Any, fake_metadata: Any) -> None:
    ...

def test_micropkg_pull_no_arg_provided(self, fake_project_cli: Any, fake_metadata: Any) -> None:
    ...
