def extract_include_exclude_filter_conf(conf: ConfigType) -> dict[str, dict[str, set[str]]]:
    ...

def merge_include_exclude_filters(base_filter: dict[str, dict[str, set[str]], add_filter: dict[str, dict[str, set[str]]]) -> dict[str, dict[str, set[str]]]:
    ...

def sqlalchemy_filter_from_include_exclude_conf(conf: ConfigType) -> Filters | None:
    ...

class Filters:
    def __init__(self, excluded_entities: list[str] | None = None, excluded_domains: list[str] | None = None, excluded_entity_globs: list[str] | None = None, included_entities: list[str] | None = None, included_domains: list[str] | None = None, included_entity_globs: list[str] | None = None):
        ...

    def __repr__(self) -> str:
        ...

    @property
    def has_config(self) -> bool:
        ...

    @property
    def _have_exclude(self) -> bool:
        ...

    @property
    def _have_include(self) -> bool:
        ...

    def _generate_filter_for_columns(self, columns: Iterable[ColumnElement], encoder: Callable[[Any], Any]) -> ColumnElement:
        ...

    def states_entity_filter(self) -> ColumnElement:
        ...

    def states_metadata_entity_filter(self) -> ColumnElement:
        ...

    def events_entity_filter(self) -> ColumnElement:
        ...

def _globs_to_like(glob_strs: list[str], columns: Iterable[ColumnElement], encoder: Callable[[str], str]) -> ColumnElement:
    ...

def _entity_matcher(entity_ids: list[str], columns: Iterable[ColumnElement], encoder: Callable[[str], str]) -> ColumnElement:
    ...

def _domain_matcher(domains: list[str], columns: Iterable[ColumnElement], encoder: Callable[[str], str]) -> ColumnElement:
    ...

def like_domain_matchers(domains: list[str]) -> list[str]:
    ...
