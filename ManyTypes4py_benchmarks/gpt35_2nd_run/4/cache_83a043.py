from typing import Any, Dict, List, Tuple

def get_remote_cache_time() -> float:
    return remote_cache_total_time

def get_remote_cache_requests() -> int:
    return remote_cache_total_requests

def remote_cache_stats_start() -> None:
    global remote_cache_time_start
    remote_cache_time_start = time.time()

def remote_cache_stats_finish() -> None:
    global remote_cache_total_time, remote_cache_total_requests
    remote_cache_total_requests += 1
    remote_cache_total_time += time.time() - remote_cache_time_start

def get_or_create_key_prefix() -> str:
    ...

def bounce_key_prefix_for_testing(test_name: str) -> None:
    ...

def get_cache_backend(cache_name: str = None) -> BaseCache:
    ...

def cache_with_key(keyfunc: Callable, cache_name: str = None, timeout: int = None) -> Callable:
    ...

def cache_set(key: str, val: Any, cache_name: str = None, timeout: int = None) -> None:
    ...

def cache_get(key: str, cache_name: str = None) -> Any:
    ...

def cache_get_many(keys: List[str], cache_name: str = None) -> Dict[str, Any]:
    ...

def safe_cache_get_many(keys: List[str], cache_name: str = None) -> Dict[str, Any]:
    ...

def cache_set_many(items: Dict[str, Any], cache_name: str = None, timeout: int = None) -> None:
    ...

def safe_cache_set_many(items: Dict[str, Any], cache_name: str = None, timeout: int = None) -> None:
    ...

def cache_delete(key: str, cache_name: str = None) -> None:
    ...

def cache_delete_many(items: List[str], cache_name: str = None) -> None:
    ...

def filter_good_and_bad_keys(keys: List[str]) -> Tuple[List[str], List[str]:
    ...

def generic_bulk_cached_fetch(cache_key_function: Callable, query_function: Callable, object_ids: List[int], *,
                              extractor: Callable, setter: Callable, id_fetcher: Callable, cache_transformer: Callable) -> Dict[int, Any]:
    ...

def bulk_cached_fetch(cache_key_function: Callable, query_function: Callable, object_ids: List[int], *,
                      id_fetcher: Callable) -> Dict[int, Any]:
    ...

def preview_url_cache_key(url: str) -> str:
    ...

def display_recipient_cache_key(recipient_id: int) -> str:
    ...

def single_user_display_recipient_cache_key(user_id: int) -> str:
    ...

def user_profile_by_email_realm_id_cache_key(email: str, realm_id: int) -> str:
    ...

def user_profile_by_email_realm_cache_key(email: str, realm: Any) -> str:
    ...

def user_profile_delivery_email_cache_key(delivery_email: str, realm_id: int) -> str:
    ...

def bot_profile_cache_key(email: str, realm_id: int) -> str:
    ...

def user_profile_by_id_cache_key(user_profile_id: int) -> str:
    ...

def user_profile_narrow_by_id_cache_key(user_profile_id: int) -> str:
    ...

def user_profile_by_api_key_cache_key(api_key: str) -> str:
    ...

def get_cross_realm_dicts_key() -> str:
    ...

def realm_user_dicts_cache_key(realm_id: int) -> str:
    ...

def get_muting_users_cache_key(muted_user_id: int) -> str:
    ...

def get_realm_used_upload_space_cache_key(realm_id: int) -> str:
    ...

def get_realm_seat_count_cache_key(realm_id: int) -> str:
    ...

def active_user_ids_cache_key(realm_id: int) -> str:
    ...

def active_non_guest_user_ids_cache_key(realm_id: int) -> str:
    ...

def bot_dicts_in_realm_cache_key(realm_id: int) -> str:
    ...

def delete_user_profile_caches(user_profiles: List[Any], realm_id: int) -> None:
    ...

def delete_display_recipient_cache(user_profile: Any) -> None:
    ...

def changed(update_fields: List[str], fields: List[str]) -> bool:
    ...

def flush_user_profile(*, instance: Any, update_fields: List[str] = None, **kwargs: Any) -> None:
    ...

def flush_muting_users_cache(*, instance: Any, **kwargs: Any) -> None:
    ...

def flush_realm(*, instance: Any, update_fields: List[str] = None, from_deletion: bool = False, **kwargs: Any) -> None:
    ...

def realm_alert_words_cache_key(realm_id: int) -> str:
    ...

def realm_alert_words_automaton_cache_key(realm_id: int) -> str:
    ...

def realm_rendered_description_cache_key(realm: Any) -> str:
    ...

def realm_text_description_cache_key(realm: Any) -> str:
    ...

def flush_stream(*, instance: Any, update_fields: List[str] = None, **kwargs: Any) -> None:
    ...

def flush_used_upload_space_cache(*, instance: Any, created: bool = True, **kwargs: Any) -> None:
    ...

def to_dict_cache_key_id(message_id: int) -> str:
    ...

def to_dict_cache_key(message: Any, realm_id: int = None) -> str:
    ...

def open_graph_description_cache_key(content: str, request_url: str) -> str:
    ...

def zoom_server_access_token_cache_key(account_id: int) -> str:
    ...

def flush_zoom_server_access_token_cache(account_id: int) -> None:
    ...

def flush_message(*, instance: Any, **kwargs: Any) -> None:
    ...

def flush_submessage(*, instance: Any, **kwargs: Any) -> None:
    ...

def ignore_unhashable_lru_cache(maxsize: int = 128, typed: bool = False) -> Callable:
    ...

def dict_to_items_tuple(user_function: Callable) -> Callable:
    ...

def items_tuple_to_dict(user_function: Callable) -> Callable:
    ...
