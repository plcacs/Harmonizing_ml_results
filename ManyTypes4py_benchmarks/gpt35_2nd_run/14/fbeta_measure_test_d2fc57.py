    def setup_method(self) -> None:
        ...

    def test_config_errors(self, device: Any) -> None:
        ...

    def test_runtime_errors(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_state(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_metric(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_with_mask(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_macro_average_metric(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_micro_average_metric(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_with_explicit_labels(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_with_macro_average(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_with_micro_average(self, device: Any) -> None:
        ...

    def test_fbeta_multiclass_with_weighted_average(self, device: Any) -> None:
        ...

    def test_fbeta_handles_batch_size_of_one(self, device: Any) -> None:
        ...

    def test_fbeta_handles_no_prediction_false_last_class(self, device: Any) -> None:
        ...

    def test_fbeta_handles_no_prediction_true_last_class(self, device: Any) -> None:
        ...

    def test_fbeta_handles_no_prediction_true_other_class(self, device: Any) -> None:
        ...

    def test_fbeta_handles_no_prediction_true_all_class(self, device: Any) -> None:
        ...

    def test_distributed_fbeta_measure(self) -> None:
        ...

    def test_multiple_distributed_runs(self) -> None:
        ...

def multiple_runs(global_rank: int, world_size: int, gpu_id: int, metric: FBetaMeasure, metric_kwargs: Dict[str, Any], desired_values: Dict[str, List[float]], exact: bool) -> None:
    ...
