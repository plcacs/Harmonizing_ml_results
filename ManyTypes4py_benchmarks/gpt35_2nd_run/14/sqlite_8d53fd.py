from typing import List, Tuple, Optional, Union, Dict

class Range(Generic[ID]):
    def __post_init__(self) -> None:
        ...

class FilteredDBQuery(NamedTuple):
    ...

class EventEncodedRecord(NamedTuple):
    ...

class StateChangeEncodedRecord(NamedTuple):
    ...

class SnapshotEncodedRecord(NamedTuple):
    ...

class EventRecord(NamedTuple):
    ...

class StateChangeRecord(NamedTuple):
    ...

class SnapshotRecord(NamedTuple):
    ...

def adapt_ulid_identifier(ulid: ULID) -> bytes:
    ...

def convert_ulid_identifier(data: bytes) -> ULID:
    ...

def _sanitize_limit_and_offset(limit: Optional[int] = None, offset: Optional[int] = None) -> Tuple[int, int]:
    ...

def _filter_from_dict(current: Dict[str, Any]) -> Dict[str, Any]:
    ...

def _query_to_string(query: FilteredDBQuery) -> Tuple[str, List[str]]:
    ...

def _prepend_and_save_ids(ulid_factory, ids, items) -> Generator[Tuple[ID, Any], None, None]:
    ...

def write_state_change(ulid_factory, cursor, state_change) -> StateChangeID:
    ...

def write_events(ulid_factory, cursor, events) -> List[EventID]:
    ...

def assert_sqlite_version() -> bool:
    ...

def _form_and_execute_json_query(query: str, limit: Optional[int] = None, offset: Optional[int] = None, filters: Optional[List[Tuple[str, Any]]] = None, logical_and: bool = True):
    ...

def get_latest_event_by_data_field(query: FilteredDBQuery) -> Optional[EventRecord]:
    ...

def get_latest_state_change_by_data_field(query: FilteredDBQuery) -> Optional[StateChangeRecord]:
    ...

def get_statechanges_records_by_range(db_range: Range[ID]) -> List[StateChangeRecord]:
    ...

def get_raiden_events_payment_history_with_timestamps(event_types: List[str], limit: Optional[int] = None, offset: Optional[int] = None, token_network_address: Optional[Address] = None, partner_address: Optional[Address] = None) -> List[TimestampedEvent]:
    ...

def get_events_with_timestamps(limit: Optional[int] = None, offset: Optional[int] = None, filters: Optional[List[Tuple[str, Any]]] = None, logical_and: bool = True) -> List[TimestampedEvent]:
    ...

def get_state_changes_stream(retry_timeout: int, limit: Optional[int] = None, offset: int = 0) -> Generator[List[StateChange], None, None]:
    ...
