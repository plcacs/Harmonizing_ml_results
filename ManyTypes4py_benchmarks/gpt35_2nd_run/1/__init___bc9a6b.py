from typing import Any, Dict, List, Tuple, Union

def _load_feature_fixtures() -> Dict[str, Any]:
    ...

async def setup_platform_for_device(hass: HomeAssistant, config_entry: ConfigEntry, platform: Platform, device: Device) -> None:
    ...

async def snapshot_platform(hass: HomeAssistant, entity_registry: Any, device_registry: Any, snapshot: Any, config_entry_id: str) -> None:
    ...

async def setup_automation(hass: HomeAssistant, alias: str, entity_id: str) -> None:
    ...

def _mock_protocol() -> BaseProtocol:
    ...

def _mocked_device(device_config: Any = DEVICE_CONFIG_LEGACY, credentials_hash: str = CREDENTIALS_HASH_LEGACY, mac: str = MAC_ADDRESS, device_id: str = DEVICE_ID, alias: str = ALIAS, model: str = MODEL, ip_address: str = None, modules: Dict[str, Any] = None, children: List[Any] = None, features: List[str] = None, device_type: DeviceType = None, spec: Any = Device) -> Device:
    ...

def _mocked_feature(id: str, require_fixture: bool = False, value: Any = UNDEFINED, name: str = None, type_: Any = None, category: Any = None, precision_hint: Any = None, choices: List[str] = None, unit: Any = None, minimum_value: Any = None, maximum_value: Any = None, expected_module_key: str = None) -> Feature:
    ...

def _mocked_light_module(device: Device) -> Light:
    ...

def _mocked_light_effect_module(device: Device) -> LightEffect:
    ...

def _mocked_fan_module(effect: Any) -> Fan:
    ...

def _mocked_alarm_module(device: Device) -> Alarm:
    ...

def _mocked_camera_module(device: Device) -> Camera:
    ...

def _mocked_thermostat_module(device: Device) -> Thermostat:
    ...

def _mocked_clean_module(device: Device) -> Clean:
    ...

def _mocked_speaker_module(device: Device) -> Speaker:
    ...

def _mocked_strip_children(features: List[str] = None, alias: str = None) -> List[Device]:
    ...

def _mocked_energy_features(power: Any = None, total: Any = None, voltage: Any = None, current: Any = None, today: Any = None) -> List[Feature]:
    ...

def _patch_discovery(device: Device = None, no_device: bool = False, ip_address: str = IP_ADDRESS) -> patch:
    ...

def _patch_single_discovery(device: Device = None, no_device: bool = False) -> patch:
    ...

def _patch_connect(device: Device = None, no_device: bool = False) -> patch:
    ...

async def initialize_config_entry_for_device(hass: HomeAssistant, dev: Device) -> ConfigEntry:
    ...
