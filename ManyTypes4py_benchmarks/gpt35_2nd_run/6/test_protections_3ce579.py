from datetime import datetime, timedelta, timezone
from typing import List, Dict, Union

def generate_mock_trade(pair: str, fee: float, is_open: bool, exit_reason: str = ExitType.EXIT_SIGNAL, min_ago_open: int = None, min_ago_close: int = None, profit_rate: float = 0.9, is_short: bool = False) -> Trade:
    ...

def test_protectionmanager(mocker, default_conf: Dict) -> None:
    ...

def test_validate_protections(protconf: List[Dict], expected: Union[str, None]) -> None:
    ...

def test_protections_init(default_conf: Dict, timeframe: str, expected_lookback: int, expected_stop: Union[int, str], protconf: List[Dict]) -> None:
    ...

def test_stoploss_guard(mocker, default_conf: Dict, fee, caplog, is_short: bool) -> None:
    ...

def test_stoploss_guard_perpair(mocker, default_conf: Dict, fee, caplog, only_per_pair: bool, only_per_side: bool) -> None:
    ...

def test_CooldownPeriod(mocker, default_conf: Dict, fee, caplog) -> None:
    ...

def test_CooldownPeriod_unlock_at(mocker, default_conf: Dict, fee, caplog, time_machine) -> None:
    ...

def test_LowProfitPairs(mocker, default_conf: Dict, fee, caplog, only_per_side: bool) -> None:
    ...

def test_MaxDrawdown(mocker, default_conf: Dict, fee, caplog) -> None:
    ...

def test_protection_manager_desc(mocker, default_conf: Dict, protectionconf: Dict, desc_expected: str, exception_expected: Union[str, None]) -> None:
    ...
