from typing import Any, Callable, ItemsView, Iterator, KeysView, Optional, Tuple, Type, ValuesView
from faust.types.tables import KT, VT, WindowSetT, WindowWrapperT, WindowedItemsViewT, WindowedValuesViewT
from faust.streams import current_event
from faust.types import EventT, FieldDescriptorT
from .table import Table as _Table

class WindowedKeysView(KeysView):
    def __init__(self, mapping: Any, event: Optional[EventT] = None) -> None: ...

    def __iter__(self) -> Iterator: ...

    def __len__(self) -> int: ...

    def now(self) -> Iterator: ...

    def current(self, event: Optional[EventT] = None) -> Iterator: ...

    def delta(self, d: Any, event: Optional[EventT] = None) -> Iterator: ...

class WindowedItemsView(WindowedItemsViewT):
    def __init__(self, mapping: Any, event: Optional[EventT] = None) -> None: ...

    def __iter__(self) -> Iterator: ...

    def now(self) -> Iterator: ...

    def current(self, event: Optional[EventT] = None) -> Iterator: ...

    def delta(self, d: Any, event: Optional[EventT] = None) -> Iterator: ...

class WindowedValuesView(WindowedValuesViewT):
    def __init__(self, mapping: Any, event: Optional[EventT] = None) -> None: ...

    def __iter__(self) -> Iterator: ...

    def now(self) -> Iterator: ...

    def current(self, event: Optional[EventT] = None) -> Iterator: ...

    def delta(self, d: Any, event: Optional[EventT] = None) -> Iterator: ...

class WindowSet(WindowSetT[KT, VT]):
    def __init__(self, key: KT, table: _Table, wrapper: WindowWrapper, event: Optional[EventT] = None) -> None: ...

    def apply(self, op: Callable, value: Any, event: Optional[EventT] = None) -> 'WindowSet': ...

    def value(self, event: Optional[EventT] = None) -> VT: ...

    def now(self) -> VT: ...

    def current(self, event: Optional[EventT] = None) -> VT: ...

    def delta(self, d: Any, event: Optional[EventT] = None) -> VT: ...

class WindowWrapper(WindowWrapperT):
    def __init__(self, table: _Table, relative_to: Optional[Any] = None, key_index: bool = False, key_index_table: Optional[Any] = None) -> None: ...

    def clone(self, relative_to: Optional[Any]) -> 'WindowWrapper': ...

    def relative_to(self, ts: Any) -> 'WindowWrapper': ...

    def relative_to_now(self) -> 'WindowWrapper': ...

    def relative_to_field(self, field: FieldDescriptorT) -> 'WindowWrapper': ...

    def relative_to_stream(self) -> 'WindowWrapper': ...

    def get_timestamp(self, event: Optional[EventT] = None) -> Any: ...

    def on_recover(self, fun: Callable) -> Any: ...

    def __contains__(self, key: Any) -> bool: ...

    def __getitem__(self, key: Any) -> WindowSet: ...

    def __setitem__(self, key: Any, value: Any) -> None: ...

    def on_set_key(self, key: Any, value: Any) -> None: ...

    def on_del_key(self, key: Any) -> None: ...

    def __delitem__(self, key: Any) -> None: ...

    def __len__(self) -> int: ...

    def _relative_handler(self, relative_to: Any) -> Any: ...

    def __iter__(self) -> Iterator: ...

    def keys(self) -> WindowedKeysView: ...

    def _keys(self) -> Iterator: ...

    def values(self, event: Optional[EventT] = None) -> WindowedValuesView: ...

    def items(self, event: Optional[EventT] = None) -> WindowedItemsView: ...

    def _items(self, event: Optional[EventT] = None) -> Iterator: ...

    def _items_now(self) -> Iterator: ...

    def _items_current(self, event: Optional[EventT] = None) -> Iterator: ...

    def _items_delta(self, d: Any, event: Optional[EventT] = None) -> Iterator: ...

    def as_ansitable(self, title: str = '{table.name}', **kwargs: Any) -> Any: ...

    @property
    def get_relative_timestamp(self) -> Any: ...

    @get_relative_timestamp.setter
    def get_relative_timestamp(self, relative_to: Any) -> None: ...
