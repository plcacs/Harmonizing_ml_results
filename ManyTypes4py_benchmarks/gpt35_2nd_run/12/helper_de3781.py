def get_and_check_entity_basics(hass: HomeAssistant, mock_hap: HomematicipHAP, entity_id: str, entity_name: str, device_model: str) -> Tuple[State, Union[AsyncDevice, AsyncGroup]]:
    ...

async def async_manipulate_test_data(hass: HomeAssistant, hmip_device: Union[AsyncDevice, AsyncGroup], attribute: str, new_value: Any, channel: int = 1, fire_device: Optional[Union[AsyncHome, AsyncDevice]] = None) -> None:
    ...

class HomeFactory:
    def __init__(self, hass: HomeAssistant, mock_connection: Mock, hmip_config_entry: MockConfigEntry) -> None:
        ...

    async def async_get_mock_hap(self, test_devices: Optional[List[str]] = None, test_groups: Optional[List[str]] = None) -> HomematicipHAP:
        ...

class HomeTemplate(Home):
    def __init__(self, connection: Any = None, home_name: str = '', test_devices: Optional[List[str]] = None, test_groups: Optional[List[str]] = None) -> None:
        ...

    def _cleanup_json(self, json: Dict[str, Any]) -> Dict[str, Any]:
        ...

    def init_home(self) -> 'HomeTemplate':
        ...

    def update_home(self, json_state: Dict[str, Any], clearConfig: bool = False) -> Any:
        ...

    def _generate_mocks(self) -> None:
        ...

    def download_configuration(self) -> Dict[str, Any]:
        ...

    def get_async_home_mock(self) -> Mock:
        ...

def _get_mock(instance: Any) -> Mock:
    ...
