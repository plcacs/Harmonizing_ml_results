from typing import Any, cast, Optional, Union

def handle_query_error(ex: Exception, query: Query, payload: Optional[dict] = None, prefix_message: str = '') -> dict:
    ...

def get_query_backoff_handler(details: dict) -> None:
    ...

def get_query_giveup_handler(_: Any) -> None:
    ...

def get_query(query_id: int) -> Query:
    ...

def get_sql_results(query_id: int, rendered_query: str, return_results: bool = True, store_results: bool = False, username: Optional[str] = None, start_time: Optional[float] = None, expand_data: bool = False, log_params: Optional[dict] = None) -> dict:
    ...

def execute_sql_statement(sql_statement: str, query: Query, cursor: Any, log_params: Any, apply_ctas: bool = False) -> SupersetResultSet:
    ...

def apply_limit_if_exists(database: Database, increased_limit: Optional[int], query: Query, sql: str) -> str:
    ...

def _serialize_payload(payload: dict, use_msgpack: bool = False) -> Union[bytes, str]:
    ...

def _serialize_and_expand_data(result_set: SupersetResultSet, db_engine_spec: BaseEngineSpec, use_msgpack: bool = False, expand_data: bool = False) -> Tuple[Any, Any, Any, Any]:
    ...

def execute_sql_statements(query_id: int, rendered_query: str, return_results: bool, store_results: bool, start_time: float, expand_data: bool, log_params: dict) -> dict:
    ...

def cancel_query(query: Query) -> bool:
    ...
