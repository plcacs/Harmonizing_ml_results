from typing import Any, Dict, Tuple, Union

class MultipartResponseWrapper:
    def __init__(self, resp: 'ClientResponse', stream: 'MultipartReader') -> None: ...

class BodyPartReader:
    def __init__(self, boundary: str, headers: Dict[str, str], content: 'StreamReader', *,
                 subtype: str = 'mixed', default_charset: str = None) -> None: ...

    def decode(self, data: bytes) -> bytes: ...

    def get_charset(self, default: str) -> str: ...

    def at_eof(self) -> bool: ...

    def name(self) -> str: ...

    def filename(self) -> str: ...

class MultipartReader:
    def __init__(self, headers: Dict[str, str], content: 'StreamReader') -> None: ...

    @classmethod
    def from_response(cls, response: 'ClientResponse') -> 'MultipartReader': ...

    def at_eof(self) -> bool: ...

    async def next(self) -> Union[None, BodyPartReader]: ...

    async def release(self) -> None: ...

class MultipartWriter:
    def __init__(self, subtype: str = 'mixed', boundary: str = None) -> None: ...

    def append(self, obj: Any, headers: Dict[str, str] = None) -> Any: ...

    def append_payload(self, payload: 'Payload') -> 'Payload': ...

    def append_json(self, obj: Any, headers: Dict[str, str] = None) -> 'Payload': ...

    def append_form(self, obj: Union[Sequence, Dict], headers: Dict[str, str] = None) -> 'Payload': ...

    @property
    def size(self) -> Union[int, None]: ...

    def decode(self, encoding: str = 'utf-8', errors: str = 'strict') -> str: ...

    async def write(self, writer: Any, close_boundary: bool = True) -> None: ...

class MultipartPayloadWriter:
    def __init__(self, writer: Any) -> None: ...

    def enable_encoding(self, encoding: str) -> None: ...

    def enable_compression(self, encoding: str = 'deflate', strategy: int = zlib.Z_DEFAULT_STRATEGY) -> None: ...

    async def write_eof(self) -> None: ...

    async def write(self, chunk: bytes) -> None: ...
