from kedro.io.core import AbstractDataSet
from kedro.io import DataCatalog, MemoryDataSet, Version
from pathlib import Path
from datetime import datetime
from typing import Dict, Union, List

def data_catalog_from_config(correct_config: Dict) -> DataCatalog:
    return KedroDataCatalog.from_config(**correct_config)

def test_save_and_load(self, data_catalog: DataCatalog, dummy_dataframe: pd.DataFrame) -> None:
    ...

def test_add_save_and_load(self, dataset: AbstractDataSet, dummy_dataframe: pd.DataFrame) -> None:
    ...

def test_load_error(self, data_catalog: DataCatalog) -> None:
    ...

def test_add_dataset_twice(self, data_catalog: DataCatalog, dataset: AbstractDataSet) -> None:
    ...

def test_load_from_unregistered(self) -> None:
    ...

def test_save_to_unregistered(self, dummy_dataframe: pd.DataFrame) -> None:
    ...

def test_feed_dict(self, memory_catalog: DataCatalog, conflicting_feed_dict: Dict[str, Union[int, List[int]]]) -> None:
    ...

def test_exists(self, data_catalog: DataCatalog, dummy_dataframe: pd.DataFrame) -> None:
    ...

def test_exists_not_implemented(self, caplog: Any) -> None:
    ...

def test_exists_invalid(self, data_catalog: DataCatalog) -> None:
    ...

def test_release_unregistered(self, data_catalog: DataCatalog) -> None:
    ...

def test_release_unregistered_typo(self, data_catalog: DataCatalog) -> None:
    ...

def test_multi_catalog_list(self, multi_catalog: DataCatalog) -> None:
    ...

def test_multi_catalog_list_regex(self, multi_catalog: DataCatalog, pattern: str, expected: List[str]) -> None:
    ...

def test_multi_catalog_list_bad_regex(self, multi_catalog: DataCatalog) -> None:
    ...

def test_catalog_filter_regex(self, multi_catalog: DataCatalog, name_regex: Union[str, re.Pattern], type_regex: Union[str, re.Pattern], expected: List[str]) -> None:
    ...

def test_from_config_catalog_filter_regex(self, data_catalog_from_config: DataCatalog, name_regex: Union[str, re.Pattern], type_regex: Union[str, re.Pattern], by_type: Union[str, List[str], None], expected: List[str]) -> None:
    ...

def test_eq(self, multi_catalog: DataCatalog, data_catalog: DataCatalog) -> None:
    ...

def test_datasets_on_init(self, data_catalog_from_config: DataCatalog) -> None:
    ...

def test_datasets_on_add(self, data_catalog_from_config: DataCatalog) -> None:
    ...

def test_adding_datasets_not_allowed(self, data_catalog_from_config: DataCatalog) -> None:
    ...

def test_confirm(self, mocker: Any, caplog: Any) -> None:
    ...

def test_bad_confirm(self, data_catalog: DataCatalog, dataset_name: str, error_pattern: str) -> None:
    ...

def test_shallow_copy_returns_correct_class_type(self) -> None:
    ...

def test_shallow_copy_adds_patterns(self, data_catalog: DataCatalog, runtime_patterns: Dict[str, Dict[str, str]], sorted_keys_expected: List[str]) -> None:
    ...

def test_init_with_raw_data(self, dummy_dataframe: pd.DataFrame, dataset: AbstractDataSet) -> None:
    ...

def test_repr(self, data_catalog_from_config: DataCatalog) -> None:
    ...

def test_repr_no_type_found(self, data_catalog_from_config: DataCatalog) -> None:
    ...

def test_missing_keys_from_load_versions(self, correct_config: Dict) -> None:
    ...

def test_get_dataset_matching_pattern(self, data_catalog: DataCatalog) -> None:
    ...

def test_remove_runtime_pattern(self, data_catalog: DataCatalog) -> None:
    ...

def test_release(self, data_catalog: DataCatalog) -> None:
    ...

def test_dataset_property(self, data_catalog_from_config: DataCatalog) -> None:
    ...

def test_to_config(self, correct_config_versioned: Dict, dataset: AbstractDataSet, filepath: str) -> None:
    ...

def test_from_correct_config(self, data_catalog_from_config: DataCatalog, dummy_dataframe: pd.DataFrame) -> None:
    ...

def test_config_missing_type(self, correct_config: Dict) -> None:
    ...

def test_config_invalid_module(self, correct_config: Dict) -> None:
    ...

def test_config_relative_import(self, correct_config: Dict) -> None:
    ...

def test_config_import_kedro_datasets(self, correct_config: Dict, mocker: Any) -> None:
    ...

def test_config_missing_class(self, correct_config: Dict) -> None:
    ...

def test_config_invalid_dataset(self, correct_config: Dict) -> None:
    ...

def test_config_invalid_arguments(self, correct_config: Dict) -> None:
    ...

def test_config_invalid_dataset_config(self, correct_config: Dict) -> None:
    ...

def test_empty_config() -> None:
    ...

def test_missing_credentials(self, correct_config: Dict) -> None:
    ...

def test_link_credentials(self, correct_config: Dict, mocker: Any) -> None:
    ...

def test_nested_credentials(self, correct_config_with_nested_creds: Dict, mocker: Any) -> None:
    ...

def test_missing_nested_credentials(self, correct_config_with_nested_creds: Dict) -> None:
    ...

def test_missing_dependency(self, correct_config: Dict, mocker: Any) -> None:
    ...

def test_idempotent_catalog(self, correct_config: Dict) -> None:
    ...

def test_error_dataset_init(self, bad_config: Dict) -> None:
    ...

def test_validate_dataset_config() -> None:
    ...

def test_confirm(self, tmp_path: Path, caplog: Any, mocker: Any) -> None:
    ...

def test_bad_confirm(self, correct_config: Dict, dataset_name: str, pattern: str) -> None:
    ...

def test_iteration(self, correct_config: Dict) -> None:
    ...

def test_getitem_setitem(self, correct_config: Dict) -> None:
    ...

def test_ipython_key_completions(self, correct_config: Dict) -> None:
    ...

def test_from_correct_config_versioned(self, correct_config: Dict, dummy_dataframe: pd.DataFrame) -> None:
    ...

def test_from_correct_config_versioned_warn(self, caplog: Any, correct_config: Dict, versioned: bool) -> None:
    ...

def test_from_correct_config_load_versions_warn(self, correct_config: Dict) -> None:
    ...

def test_compare_tracking_and_other_dataset_versioned(self, correct_config_with_tracking_ds: Dict, dummy_dataframe: pd.DataFrame) -> None:
    ...

def test_load_version(self, correct_config: Dict, dummy_dataframe: pd.DataFrame, mocker: Any) -> None:
    ...

def test_load_version_on_unversioned_dataset(self, correct_config: Dict, dummy_dataframe: pd.DataFrame, mocker: Any) -> None:
    ...

def test_redefine_save_version_via_catalog(self, correct_config: Dict, dataset_versioned: AbstractDataSet) -> None:
    ...

def test_set_load_and_save_versions(self, correct_config: Dict, dataset_versioned: AbstractDataSet) -> None:
    ...

def test_set_same_versions(self, correct_config: Dict, dataset_versioned: AbstractDataSet) -> None:
    ...

def test_redefine_load_version(self, correct_config: Dict, dataset_versioned: AbstractDataSet) -> None:
    ...

def test_redefine_save_version(self, correct_config: Dict, dataset_versioned: AbstractDataSet) -> None:
    ...

def test_redefine_save_version_with_cached_dataset(self, correct_config: Dict, cached_dataset_versioned: AbstractDataSet) -> None:
    ...
