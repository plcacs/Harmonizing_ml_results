from typing import Set

async def collect_task_run_inputs(expr: Any, max_depth: int = -1) -> Set[TaskRunResult]:
    ...

def collect_task_run_inputs_sync(expr: Any, future_cls: Type[PrefectFuture] = PrefectFuture, max_depth: int = -1) -> Set[TaskRunResult]:
    ...

async def resolve_inputs(parameters: dict, return_data: bool = True, max_depth: int = -1) -> dict:
    ...

def resolve_inputs_sync(parameters: dict, return_data: bool = True, max_depth: int = -1) -> dict:
    ...

async def propose_state(client: Union[PrefectClient, SyncPrefectClient], state: State, force: bool = False, task_run_id: Optional[UUID] = None, flow_run_id: Optional[UUID] = None) -> State:
    ...

def propose_state_sync(client: Union[PrefectClient, SyncPrefectClient], state: State, force: bool = False, task_run_id: Optional[UUID] = None, flow_run_id: Optional[UUID] = None) -> State:
    ...

def get_state_for_result(obj: Any) -> Optional[State]:
    ...

def link_state_to_result(state: State, result: Any) -> None:
    ...

def should_log_prints(flow_or_task: Union[Flow, Task]) -> bool:
    ...

async def check_api_reachable(client: Union[PrefectClient, SyncPrefectClient], fail_message: str) -> None:
    ...

def resolve_to_final_result(expr: Any, context: dict) -> Any:
    ...
