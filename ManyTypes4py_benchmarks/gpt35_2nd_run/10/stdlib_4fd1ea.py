from typing import Any, List, Tuple, Dict, Set

def execute(callback: Any) -> Any:
    ...

def _follow_param(inference_state: Any, arguments: Any, index: int) -> Any:
    ...

def argument_clinic(clinic_string: str, want_value: bool = False, want_context: bool = False, want_arguments: bool = False, want_inference_state: bool = False, want_callback: bool = False) -> Any:
    ...

def builtins_next(iterators: Any, defaults: Any, inference_state: Any) -> Any:
    ...

def builtins_iter(iterators_or_callables: Any, defaults: Any) -> Any:
    ...

def builtins_getattr(objects: Any, names: Any, defaults: Any = None) -> Any:
    ...

def builtins_type(objects: Any, bases: Any, dicts: Any) -> Any:
    ...

class SuperInstance(LazyValueWrapper):
    ...

def builtins_super(types: Any, objects: Any, context: Any) -> Any:
    ...

class ReversedObject(AttributeOverwrite):
    ...

def builtins_reversed(sequences: Any, value: Any, arguments: Any) -> Any:
    ...

def builtins_isinstance(objects: Any, types: Any, arguments: Any, inference_state: Any) -> Any:
    ...

class StaticMethodObject(ValueWrapper):
    ...

def builtins_staticmethod(functions: Any) -> Any:
    ...

class ClassMethodObject(ValueWrapper):
    ...

class ClassMethodGet(ValueWrapper):
    ...

class ClassMethodArguments(TreeArgumentsWrapper):
    ...

def builtins_classmethod(functions: Any, value: Any, arguments: Any) -> Any:
    ...

class PropertyObject(AttributeOverwrite, ValueWrapper):
    ...

def builtins_property(functions: Any, callback: Any) -> Any:
    ...

def collections_namedtuple(value: Any, arguments: Any, callback: Any) -> Any:
    ...

class PartialObject(ValueWrapper):
    ...

class PartialMethodObject(PartialObject):
    ...

class PartialSignature(SignatureWrapper):
    ...

class MergedPartialArguments(AbstractArguments):
    ...

def functools_partial(value: Any, arguments: Any, callback: Any) -> Any:
    ...

def functools_partialmethod(value: Any, arguments: Any, callback: Any) -> Any:
    ...

def _return_first_param(firsts: Any) -> Any:
    ...

def _random_choice(sequences: Any) -> Any:
    ...

def _dataclass(value: Any, arguments: Any, callback: Any) -> Any:
    ...

class DataclassWrapper(ValueWrapper, ClassMixin):
    ...

class DataclassSignature(AbstractSignature):
    ...

class DataclassParamName(BaseTreeParamName):
    ...

class ItemGetterCallable(ValueWrapper):
    ...

def _functools_wraps(funcs: Any) -> Any:
    ...

class WrapsCallable(ValueWrapper):
    ...

class Wrapped(ValueWrapper, FunctionMixin):
    ...

def _operator_itemgetter(args_value_set: Any, value: Any, arguments: Any) -> Any:
    ...

def _create_string_input_function(func: Any) -> Any:
    ...

def _os_path_join(args_set: Any, callback: Any) -> Any:
    ...

def get_metaclass_filters(func: Any) -> Any:
    ...

class EnumInstance(LazyValueWrapper):
    ...

def tree_name_to_values(func: Any) -> Any:
    ...
