from typing import IO, NamedTuple, Protocol

class StepPrinter(Protocol):
    def __call__(self, description: str, error: bool = False) -> None: ...

def _deploy_contract(deployer: ContractDeployer, name: str, args: List[Any]) -> Address: ...

def ensure_executable(cmd: str) -> None: ...

def deploy_smoketest_contracts(client: JSONRPCClient, chain_id: ChainID, contract_manager: ContractManager, token_address: TokenAddress) -> Dict[str, Address]: ...

def get_private_key(keystore: str) -> PrivateKey: ...

def setup_testchain(eth_client: EthClient, free_port_generator: Iterator[Port], base_datadir: str, base_logdir: str) -> Dict[str, Any]: ...

def setup_matrix_for_smoketest(print_step: StepPrinter, free_port_generator: Iterator[Port]) -> Any: ...

def setup_testchain_for_smoketest(eth_client: EthClient, print_step: StepPrinter, free_port_generator: Iterator[Port], base_datadir: str, base_logdir: str) -> Any: ...

def setup_raiden(matrix_server: str, print_step: StepPrinter, contracts_version: str, eth_rpc_endpoint: URI, web3: Web3, base_datadir: str, keystore: str, free_port_generator: Iterator[Port]) -> RaidenTestSetup: ...

def run_smoketest(print_step: StepPrinter, setup: RaidenTestSetup) -> None: ...

def _start_dummy_pfs(url: str, token_network_registry_address: str, user_deposit_address: str) -> None: ...

def setup_smoketest(*, eth_client: EthClient, print_step: StepPrinter, free_port_generator: Iterator[Port], debug: bool = False, stdout: IO, append_report: Callable[[str], None]) -> Any: ...

def step_printer(step_count: int, stdout: IO) -> StepPrinter: ...
