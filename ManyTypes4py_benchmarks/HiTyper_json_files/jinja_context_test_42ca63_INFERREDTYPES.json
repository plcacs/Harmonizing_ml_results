{
    "func@global": [
        {
            "category": "arg",
            "name": "input_",
            "type": []
        },
        {
            "category": "return",
            "name": "func",
            "type": []
        }
    ],
    "global@global": [],
    "mutator@global": [
        {
            "category": "arg",
            "name": "sql",
            "type": []
        },
        {
            "category": "return",
            "name": "mutator",
            "type": [
                "typing.Text"
            ]
        }
    ],
    "test_dataset_macro@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "columns",
            "type": [
                "list[TableColumn]"
            ]
        },
        {
            "category": "local",
            "name": "metrics",
            "type": [
                "list[SqlMetric]"
            ]
        },
        {
            "category": "local",
            "name": "dataset",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "list[dict[str, str]]",
                "str",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "space",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_dataset_macro",
            "type": [
                "None"
            ]
        }
    ],
    "test_dataset_macro_mutator_with_comments@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "list[dict[str, str]]",
                "models.DAOWrapper",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_dataset_macro_mutator_with_comments",
            "type": [
                "None"
            ]
        }
    ],
    "test_filter_values_adhoc_filters@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_filter_values_adhoc_filters",
            "type": [
                "None"
            ]
        }
    ],
    "test_filter_values_default@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_filter_values_default",
            "type": [
                "None"
            ]
        }
    ],
    "test_filter_values_extra_filters@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_filter_values_extra_filters",
            "type": [
                "None"
            ]
        }
    ],
    "test_filter_values_no_default@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_filter_values_no_default",
            "type": [
                "None"
            ]
        }
    ],
    "test_filter_values_remove_not_present@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_filter_values_remove_not_present",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_filters_adhoc_filters@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_get_filters_adhoc_filters",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_filters_remove_not_present@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_get_filters_remove_not_present",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_time_filter@global": [
        {
            "category": "arg",
            "name": "description",
            "type": [
                "bool",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "sqlalchemy_uri",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "queries",
            "type": [
                "bool",
                "None",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "time_filter",
            "type": [
                "bool",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "removed_filters",
            "type": [
                "bool",
                "None",
                "typing.Sequence[str]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "applied_filters",
            "type": [
                "bool",
                "None",
                "typing.Any"
            ]
        },
        {
            "category": "local",
            "name": "columns",
            "type": [
                "list[TableColumn]"
            ]
        },
        {
            "category": "local",
            "name": "sqlalchemy_uri",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "Database"
            ]
        },
        {
            "category": "local",
            "name": "table",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "queries",
            "type": [
                "bool",
                "None",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_get_time_filter",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_invalid_dataset_id@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_get_form_data",
            "type": [
                "list",
                "str",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "list[dict[str, str]]",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_invalid_dataset_id",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_available_in_request_form_data@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "list[dict[str, str]]",
                "dict[str, dict[typing.Any, typing.Any]]",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict",
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_available_in_request_form_data",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_no_context@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "list[dict[str, str]]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "str",
                "dict[str, dict[typing.Any, typing.Any]]",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_no_context",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_with_context_chart_id@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "ChartDAO",
            "type": [
                "str",
                "list['Book']",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "ChartDAO_",
            "type": [
                "Slice"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "list[dict[str, str]]",
                "dict[str, dict[typing.Any, typing.Any]]",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict",
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, int]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_with_context_chart_id",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_with_context_datasource_id@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "list[dict[str, str]]",
                "dict[str, dict[typing.Any, typing.Any]]",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict",
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, int]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_with_context_datasource_id",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_with_context_datasource_id_none@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict",
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, None]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_with_context_datasource_id_none",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_with_context_deleted_chart@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "ChartDAO",
            "type": [
                "str",
                "list[dict[str, typing.Any]]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "ChartDAO_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "list[dict[str, str]]",
                "dict[str, dict[typing.Any, typing.Any]]",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict",
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, int]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_with_context_deleted_chart",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_with_context_missing_info@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "list[dict[str, str]]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "str",
                "dict[str, dict[typing.Any, typing.Any]]",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict[typing.Text, list]"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_with_context_missing_info",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_no_dataset_id_with_context_slice_id_none@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict",
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, None]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_no_dataset_id_with_context_slice_id_none",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_recursive@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "str",
                "dict[str, dict[typing.Any, typing.Any]]",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict[typing.Text, dict[typing.Text, int]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_recursive",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_recursive_compound@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "str",
                "dict[str, dict[typing.Any, typing.Any]]",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict[typing.Text, dict[typing.Text, int]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_recursive_compound",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_recursive_cyclic@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "str",
                "dict[str, dict[typing.Any, typing.Any]]",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict[typing.Text, dict[typing.Text, int]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_recursive_cyclic",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_recursive_infinite@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "str",
                "dict[str, dict[typing.Any, typing.Any]]",
                "list[dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "dict[typing.Text, dict[typing.Text, int]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_recursive_infinite",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_with_dataset_id@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_get_form_data",
            "type": [
                "list",
                "str",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_with_dataset_id",
            "type": [
                "None"
            ]
        }
    ],
    "test_metric_macro_with_dataset_id_invalid_key@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_get_form_data",
            "type": [
                "list",
                "str",
                "dict[str, typing.Union[int,str]]"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO",
            "type": [
                "str",
                "models.DAOWrapper"
            ]
        },
        {
            "category": "local",
            "name": "DatasetDAO_",
            "type": [
                "SqlaTable"
            ]
        },
        {
            "category": "return",
            "name": "test_metric_macro_with_dataset_id_invalid_key",
            "type": [
                "None"
            ]
        }
    ],
    "test_safe_proxy_dict@global": [
        {
            "category": "return",
            "name": "test_safe_proxy_dict",
            "type": [
                "None"
            ]
        }
    ],
    "test_safe_proxy_lambda@global": [
        {
            "category": "return",
            "name": "test_safe_proxy_lambda",
            "type": [
                "None"
            ]
        }
    ],
    "test_safe_proxy_nested_lambda@global": [
        {
            "category": "return",
            "name": "test_safe_proxy_nested_lambda",
            "type": [
                "None"
            ]
        }
    ],
    "test_safe_proxy_primitive@global": [
        {
            "category": "return",
            "name": "test_safe_proxy_primitive",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_default@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_default",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_escaped_default_form_data@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_escaped_default_form_data",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_escaped_form_data@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_escaped_form_data",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_form_data@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_form_data",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_no_default@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_no_default",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_query@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_query",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_unescaped_default_form_data@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_unescaped_default_form_data",
            "type": [
                "None"
            ]
        }
    ],
    "test_url_param_unescaped_form_data@global": [
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_url_param_unescaped_form_data",
            "type": [
                "None"
            ]
        }
    ],
    "test_user_macros@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "dict[str, str]",
                "list[dict[str, str]]",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "mock_cache_key_wrapper",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "int",
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_user_macros",
            "type": [
                "None"
            ]
        }
    ],
    "test_user_macros_without_cache_key_inclusion@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mock_g",
            "type": [
                "dict[str, str]",
                "list[dict[str, str]]",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "mock_cache_key_wrapper",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "int",
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_user_macros_without_cache_key_inclusion",
            "type": [
                "None"
            ]
        }
    ],
    "test_user_macros_without_user_info@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "local",
            "name": "mock_g_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "cache",
            "type": [
                "ExtraCache"
            ]
        },
        {
            "category": "return",
            "name": "test_user_macros_without_user_info",
            "type": [
                "None"
            ]
        }
    ],
    "test_where_in@global": [
        {
            "category": "local",
            "name": "where_in",
            "type": [
                "WhereInMacro"
            ]
        },
        {
            "category": "return",
            "name": "test_where_in",
            "type": [
                "None"
            ]
        }
    ]
}