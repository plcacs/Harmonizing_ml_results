{
    "_mock_blu_rtv_device@global": [
        {
            "category": "arg",
            "name": "version",
            "type": [
                "None",
                "str",
                "dict",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_BLU_TRV_REMOTE_CONFIG",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_SHELLY_RPC",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "version",
            "type": [
                "None",
                "str",
                "dict",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_STATUS_RPC",
            "type": [
                "tests.conftesConfluentAvroConsumerMock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "device",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "type()_",
            "type": [
                "PropertyMock"
            ]
        },
        {
            "category": "return",
            "name": "_mock_blu_rtv_device",
            "type": [
                "Mock"
            ]
        }
    ],
    "_mock_rpc_device@global": [
        {
            "category": "arg",
            "name": "version",
            "type": [
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_CONFIG",
            "type": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text,dict[typing.Text, None]]],dict[typing.Text, dict[typing.Text, typing.Text]],dict[typing.Text, dict[typing.Text, bool]],dict[typing.Text, typing.Union[bool,None]]]]"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_SHELLY_RPC",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "version",
            "type": [
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_STATUS_RPC",
            "type": [
                "tests.conftesConfluentAvroConsumerMock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "device",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "type()_",
            "type": [
                "PropertyMock"
            ]
        },
        {
            "category": "return",
            "name": "_mock_rpc_device",
            "type": [
                "Mock"
            ]
        }
    ],
    "disconnected@global": [
        {
            "category": "return",
            "name": "disconnected",
            "type": [
                "None"
            ]
        }
    ],
    "event@global": [
        {
            "category": "return",
            "name": "event",
            "type": [
                "None"
            ]
        }
    ],
    "events@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "events",
            "type": []
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "MOCK_SETTINGS",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int]],list[dict[typing.Text, typing.Text]],list[dict[typing.Text, bool]],int,list[dict[typing.Text, list[typing.Text]]]]]",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_BLOCKS",
            "type": [
                "list[Mock]",
                "unittesmock.Mock",
                "tests.conftesConfluentAvroConsumerMock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_CONFIG",
            "type": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text,dict[typing.Text, None]]],dict[typing.Text, dict[typing.Text, typing.Text]],dict[typing.Text, dict[typing.Text, bool]],dict[typing.Text, typing.Union[bool,None]]]]"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_BLU_TRV_REMOTE_CONFIG",
            "type": [
                "dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[int,float]],dict[typing.Text, typing.Union[int,typing.Text,None,list,dict]]]]],dict[typing.Text, typing.Union[int,typing.Text]]]]",
                "mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_BLU_TRV_REMOTE_STATUS",
            "type": [
                "dict[typing.Text, dict[typing.Text, typing.Union[int,float,list]]]",
                "dict[str, typing.Type]"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_SHELLY_COAP",
            "type": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_SHELLY_RPC",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,int,None]]",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_STATUS_COAP",
            "type": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,bool]]]",
                "unittesmock.Mock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_STATUS_RPC",
            "type": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,None]],dict[typing.Text, typing.Union[int,dict[typing.Text, typing.Union[int,float]],float]],dict[typing.Text, typing.Union[bool,float,list[int]]],dict[typing.Text, typing.Union[typing.Text,bool,float]],dict[typing.Text, typing.Union[dict[typing.Text, dict[typing.Text, typing.Text]],bool]]]]",
                "tests.conftesConfluentAvroConsumerMock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_SCRIPTS",
            "type": [
                "list[typing.Text]"
            ]
        }
    ],
    "initialized@global": [
        {
            "category": "return",
            "name": "initialized",
            "type": [
                "None"
            ]
        }
    ],
    "mock_block_device@global": [
        {
            "category": "local",
            "name": "MOCK_BLOCKS",
            "type": [
                "unittesmock.Mock",
                "tests.conftesConfluentAvroConsumerMock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_SETTINGS",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_SHELLY_COAP",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "MOCK_STATUS_COAP",
            "type": [
                "unittesmock.Mock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "device",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "type()_",
            "type": [
                "PropertyMock"
            ]
        },
        {
            "category": "local",
            "name": "block_device_mock_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "return",
            "name": "mock_block_device",
            "type": [
                "typing.Generator[Mock]"
            ]
        }
    ],
    "mock_blu_trv@global": [
        {
            "category": "local",
            "name": "device",
            "type": [
                "libsoundtouch.tests.test_libsoundtouch.MockDevice",
                "list",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "blu_trv_device_mock_",
            "type": [
                "libsoundtouch.tests.test_libsoundtouch.MockDevice",
                "list",
                "str",
                "Mock"
            ]
        },
        {
            "category": "return",
            "name": "mock_blu_trv",
            "type": [
                "typing.Generator[typing.Union[libsoundtouch.tests.test_libsoundtouch.MockDevice,list,str]]"
            ]
        }
    ],
    "mock_bluetooth@global": [
        {
            "category": "arg",
            "name": "enable_bluetooth",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "mock_bluetooth",
            "type": [
                "None"
            ]
        }
    ],
    "mock_coap@global": [
        {
            "category": "return",
            "name": "mock_coap",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "mock_light_set_state@global": [
        {
            "category": "arg",
            "name": "turn",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "arg",
            "name": "mode",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "arg",
            "name": "red",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "green",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "blue",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "white",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "gain",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "temp",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "brightness",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "effect",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "transition",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "turn",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "mode",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "red",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "green",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "blue",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "white",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "gain",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "temp",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "brightness",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "effect",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "transition",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "mock_light_set_state",
            "type": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ]
        }
    ],
    "mock_rpc_device@global": [
        {
            "category": "local",
            "name": "device",
            "type": [
                "libsoundtouch.tests.test_libsoundtouch.MockDevice",
                "dict[str, typing.Any]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "rpc_device_mock_",
            "type": [
                "libsoundtouch.tests.test_libsoundtouch.MockDevice",
                "dict[str, typing.Any]",
                "str",
                "Mock"
            ]
        },
        {
            "category": "return",
            "name": "mock_rpc_device",
            "type": [
                "typing.Generator[typing.Union[libsoundtouch.tests.test_libsoundtouch.MockDevice,dict[str, typing.Any],str]]"
            ]
        }
    ],
    "mock_white_light_set_state@global": [
        {
            "category": "arg",
            "name": "turn",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "arg",
            "name": "temp",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "gain",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "brightness",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "transition",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "turn",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "gain",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "temp",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "brightness",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "transition",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "mock_white_light_set_state",
            "type": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ]
        }
    ],
    "mock_ws_server@global": [
        {
            "category": "return",
            "name": "mock_ws_server",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "online@global": [
        {
            "category": "return",
            "name": "online",
            "type": [
                "None"
            ]
        }
    ],
    "update@global": [
        {
            "category": "return",
            "name": "update",
            "type": [
                "None"
            ]
        }
    ],
    "update_reply@global": [
        {
            "category": "return",
            "name": "update_reply",
            "type": [
                "None"
            ]
        }
    ]
}