{
    "__init__@MockExecutor": [
        {
            "category": "arg",
            "name": "stmt",
            "type": []
        },
        {
            "category": "return",
            "name": "__init__",
            "type": [
                "None"
            ]
        }
    ],
    "_drop_table@global": [
        {
            "category": "return",
            "name": "_drop_table",
            "type": [
                "None"
            ]
        }
    ],
    "_last_run_was_recently_clean@global": [
        {
            "category": "arg",
            "name": "cursor",
            "type": []
        },
        {
            "category": "return",
            "name": "_last_run_was_recently_clean",
            "type": []
        }
    ],
    "_make_cursor_mock@global": [
        {
            "category": "arg",
            "name": "_",
            "type": []
        },
        {
            "category": "return",
            "name": "_make_cursor_mock",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "all@MockExecutor": [
        {
            "category": "return",
            "name": "all",
            "type": [
                "list[typing.Text]"
            ]
        }
    ],
    "execute_mock@global": [
        {
            "category": "arg",
            "name": "statement",
            "type": []
        },
        {
            "category": "return",
            "name": "execute_mock",
            "type": [
                "None"
            ]
        }
    ],
    "fetchall_mock@global": [
        {
            "category": "return",
            "name": "fetchall_mock",
            "type": [
                "list[list]",
                "None"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "NonRetryable",
            "type": [
                "OperationalError"
            ]
        },
        {
            "category": "local",
            "name": "Retryable",
            "type": [
                "OperationalError"
            ]
        }
    ],
    "job@Test": [
        {
            "category": "arg",
            "name": "instance",
            "type": []
        },
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "job",
            "type": []
        }
    ],
    "job@global": [
        {
            "category": "arg",
            "name": "instance",
            "type": []
        },
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "job",
            "type": []
        }
    ],
    "mock_recorder_before_hass@global": [
        {
            "category": "arg",
            "name": "async_test_recorder",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "mock_recorder_before_hass",
            "type": [
                "None"
            ]
        }
    ],
    "setup_recorder@global": [
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "lib.Path",
                "neuromation.api.login._AuthConfig"
            ]
        },
        {
            "category": "return",
            "name": "setup_recorder",
            "type": [
                "None"
            ]
        }
    ],
    "test_basic_sanity_check@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "arg",
            "name": "setup_recorder",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_db_url",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "cursor",
            "type": [
                "sqlite3.dbapi2.Cursor",
                "list",
                "sqlite3.dbapi2.Connection"
            ]
        },
        {
            "category": "return",
            "name": "test_basic_sanity_check",
            "type": [
                "None"
            ]
        }
    ],
    "test_build_mysqldb_conv@global": [
        {
            "category": "local",
            "name": "mock_converters",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_constants",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_build_mysqldb_conv",
            "type": [
                "None"
            ]
        }
    ],
    "test_combined_checks@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "setup_recorder",
            "type": [
                "tests.async_mock.Mock",
                "tests.setup.SetupTest",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_db_url",
            "type": [
                "tests.async_mock.Mock",
                "tests.setup.SetupTest",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "instance_",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "cursor",
            "type": [
                "sqlite3.Cursor"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "return",
            "name": "test_combined_checks",
            "type": [
                "None"
            ]
        }
    ],
    "test_database_job_retry_wrapper@global": [
        {
            "category": "arg",
            "name": "side_effect",
            "type": [
                "bool",
                "list[aw_core.models.Event]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "dialect",
            "type": [
                "bool",
                "list[aw_core.models.Event]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "retval",
            "type": [
                "int",
                "list[str]",
                "list[tuple[int]]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "bool",
                "list[aw_core.models.Event]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "num_calls",
            "type": [
                "str",
                "list[str]",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "instance",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "instance_",
            "type": [
                "int",
                "bool",
                "list[aw_core.models.Event]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "dialect",
            "type": [
                "bool",
                "list[aw_core.models.Event]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "side_effect",
            "type": [
                "bool",
                "list[aw_core.models.Event]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_job",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "expected_result",
            "type": [
                "bool",
                "list[aw_core.models.Event]",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_database_job_retry_wrapper",
            "type": [
                "None"
            ]
        }
    ],
    "test_end_incomplete_runs@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "setup_recorder",
            "type": [
                "tests.async_mock.Mock",
                "typing.Generator[typing.Optional[typing.Any]]",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "return",
            "name": "test_end_incomplete_runs",
            "type": [
                "None"
            ]
        }
    ],
    "test_execute_stmt_lambda_element@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "setup_recorder",
            "type": [
                "tests.async_mock.Mock",
                "typing.Generator[typing.Optional[typing.Any]]",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "new_state",
            "type": [
                "bool",
                "src.models.generic_task.TaskState"
            ]
        },
        {
            "category": "local",
            "name": "tomorrow",
            "type": [
                "set[str]",
                "list",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "one_week_from_now",
            "type": [
                "int",
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "all_calls",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "metadata_id",
            "type": [
                "str",
                "int",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "start_time_ts",
            "type": [
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "stmt",
            "type": [
                "bool",
                "core.arxiv.submission.domain.evenSetAbstract",
                "str",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_execute_stmt_lambda_element",
            "type": [
                "None"
            ]
        }
    ],
    "test_fail_outdated_mysql@global": [
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "pathlib.Path",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "mysql_version",
            "type": [
                "str",
                "pathlib.Path",
                "neuromation.api.Client"
            ]
        },
        {
            "category": "arg",
            "name": "message",
            "type": [
                "pathlib.Path",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_fail_outdated_mysql",
            "type": [
                "None"
            ]
        }
    ],
    "test_fail_outdated_pgsql@global": [
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "pathlib.Path"
            ]
        },
        {
            "category": "arg",
            "name": "pgsql_version",
            "type": [
                "str",
                "tuple['T']",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "message",
            "type": [
                "str",
                "pathlib.Path"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_fail_outdated_pgsql",
            "type": [
                "None"
            ]
        }
    ],
    "test_fail_outdated_sqlite@global": [
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "sqlite_version",
            "type": [
                "set[str]",
                "helpers.JSONType"
            ]
        },
        {
            "category": "arg",
            "name": "message",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_fail_outdated_sqlite",
            "type": [
                "None"
            ]
        }
    ],
    "test_is_second_sunday@global": [
        {
            "category": "return",
            "name": "test_is_second_sunday",
            "type": [
                "None"
            ]
        }
    ],
    "test_issue_for_mariadb_with_MDEV_25020@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "mysql_version",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "min_version",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "issue_registry",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock_",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "issue_registry",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_issue_for_mariadb_with_MDEV_25020",
            "type": [
                "None"
            ]
        }
    ],
    "test_last_run_was_recently_clean@global": [
        {
            "category": "arg",
            "name": "async_setup_recorder_instance",
            "type": [
                "typing.Callable[List,bool, None]",
                "homeassistancore.HomeAssistant",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "dict[, int]"
            ]
        },
        {
            "category": "local",
            "name": "return_values",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "thirty_min_future_time",
            "type": [
                "datetime.timedelta"
            ]
        },
        {
            "category": "return",
            "name": "test_last_run_was_recently_clean",
            "type": [
                "None"
            ]
        }
    ],
    "test_no_issue_for_mariadb_with_MDEV_25020@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "mysql_version",
            "type": [
                "str",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "issue_registry",
            "type": [
                "str",
                "bool",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock_",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "issue_registry",
            "type": [
                "str",
                "bool",
                "raiden.api.resAPIServer"
            ]
        },
        {
            "category": "return",
            "name": "test_no_issue_for_mariadb_with_MDEV_25020",
            "type": [
                "None"
            ]
        }
    ],
    "test_periodic_db_cleanups@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "tests.setup.SetupTest",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "arg",
            "name": "setup_recorder",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_db_url",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "tests.setup.SetupTest",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "return",
            "name": "test_periodic_db_cleanups",
            "type": [
                "None"
            ]
        }
    ],
    "test_recorder_bad_execute@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "tests.async_mock.Mock",
                "typing.Generator[typing.Optional[typing.Any]]",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "setup_recorder",
            "type": [
                "tests.async_mock.Mock",
                "typing.Generator[typing.Optional[typing.Any]]",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "mck1",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "to_native",
            "type": [
                "bytes",
                "list",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "mck1_",
            "type": [
                "bytes",
                "list",
                "typing.Type"
            ]
        },
        {
            "category": "return",
            "name": "test_recorder_bad_execute",
            "type": [
                "None"
            ]
        }
    ],
    "test_resolve_period@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "arg",
            "name": "freezer",
            "type": [
                "datetime.timedelta",
                "typing.Any",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "arg",
            "name": "start_time",
            "type": [
                "datetime.timedelta",
                "typing.Any",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "arg",
            "name": "periods",
            "type": [
                "typing.Any",
                "datetime.datetime.datetime",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "freezer",
            "type": [
                "datetime.timedelta",
                "typing.Any",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "start_time",
            "type": [
                "datetime.timedelta",
                "typing.Any",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "start_t",
            "type": [
                "datetime.datetime",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "end_t",
            "type": [
                "datetime.datetime",
                "datetime.date"
            ]
        },
        {
            "category": "return",
            "name": "test_resolve_period",
            "type": [
                "None"
            ]
        }
    ],
    "test_retryable_database_job@global": [
        {
            "category": "arg",
            "name": "side_effect",
            "type": [
                "bool",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "retval",
            "type": [
                "str",
                "bool",
                "pathlib.Path"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "bool",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "dialect",
            "type": [
                "bool",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "instance",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "instance_",
            "type": [
                "int",
                "bool",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "dialect",
            "type": [
                "bool",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "side_effect",
            "type": [
                "bool",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "mock_job",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "expected_result",
            "type": [
                "bool",
                "str",
                "list[dict]"
            ]
        },
        {
            "category": "return",
            "name": "test_retryable_database_job",
            "type": [
                "None"
            ]
        }
    ],
    "test_retryable_database_job_method@global": [
        {
            "category": "arg",
            "name": "side_effect",
            "type": [
                "bool",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "retval",
            "type": [
                "bool",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "bool",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "dialect",
            "type": [
                "bool",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "instance",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "instance_",
            "type": [
                "int",
                "bool",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "dialect",
            "type": [
                "bool",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "side_effect",
            "type": [
                "bool",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "mock_job",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "test",
            "type": [
                "Test"
            ]
        },
        {
            "category": "local",
            "name": "expected_result",
            "type": [
                "bool",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_retryable_database_job_method",
            "type": [
                "None"
            ]
        }
    ],
    "test_session_scope_not_setup@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "setup_recorder",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "return",
            "name": "test_session_scope_not_setup",
            "type": [
                "None"
            ]
        }
    ],
    "test_setup_connection_for_dialect_mysql@global": [
        {
            "category": "arg",
            "name": "mysql_version",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_setup_connection_for_dialect_mysql",
            "type": [
                "None"
            ]
        }
    ],
    "test_setup_connection_for_dialect_sqlite@global": [
        {
            "category": "arg",
            "name": "sqlite_version",
            "type": [
                "str",
                "int",
                "typing.IO"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_setup_connection_for_dialect_sqlite",
            "type": [
                "None"
            ]
        }
    ],
    "test_setup_connection_for_dialect_sqlite_zero_commit_interval@global": [
        {
            "category": "arg",
            "name": "sqlite_version",
            "type": [
                "int",
                "list[pathlib.Path]"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_setup_connection_for_dialect_sqlite_zero_commit_interval",
            "type": [
                "None"
            ]
        }
    ],
    "test_supported_mysql@global": [
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "pathlib.Path"
            ]
        },
        {
            "category": "arg",
            "name": "mysql_version",
            "type": [
                "boucanpy.core.security.TokenPayload",
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_supported_mysql",
            "type": [
                "None"
            ]
        }
    ],
    "test_supported_pgsql@global": [
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "tests.basilisp.helpers.CompileFn",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "pgsql_version",
            "type": [
                "str",
                "tuple['T']",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_supported_pgsql",
            "type": [
                "None"
            ]
        }
    ],
    "test_supported_sqlite@global": [
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "sqlite_version",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "execute_args",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "close_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_supported_sqlite",
            "type": [
                "None"
            ]
        }
    ],
    "test_validate_or_move_away_sqlite_database@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "pathlib.Path",
                "cli_ui.tests.MessageRecorder"
            ]
        },
        {
            "category": "arg",
            "name": "tmp_path",
            "type": [
                "pathlib.Path",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "pathlib.Path"
            ]
        },
        {
            "category": "local",
            "name": "tmp_path",
            "type": [
                "pathlib.Path",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "test_dir",
            "type": [
                "pathlib.Path",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "test_db_file",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "dburl",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_validate_or_move_away_sqlite_database",
            "type": [
                "None"
            ]
        }
    ],
    "test_warn_unsupported_dialect@global": [
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "dialect",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "message",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "instance_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dbapi_connection",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dialect",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_warn_unsupported_dialect",
            "type": [
                "None"
            ]
        }
    ],
    "test_write_lock_db@global": [
        {
            "category": "arg",
            "name": "async_setup_recorder_instance",
            "type": [
                "bool",
                "str",
                "pathfinding_service.api.PFSApi"
            ]
        },
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "bool",
                "str",
                "pathfinding_service.api.PFSApi"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_db_url",
            "type": [
                "str",
                "pathfinding_service.api.PFSApi"
            ]
        },
        {
            "category": "local",
            "name": "recorder_db_url",
            "type": [
                "str",
                "pathfinding_service.api.PFSApi"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "dict[, str]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "bool",
                "str",
                "pathfinding_service.api.PFSApi"
            ]
        },
        {
            "category": "local",
            "name": "instance",
            "type": [
                "int",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_write_lock_db",
            "type": [
                "None"
            ]
        }
    ],
    "to_native@global": [
        {
            "category": "arg",
            "name": "validate_entity_id",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "to_native",
            "type": [
                "None"
            ]
        }
    ]
}