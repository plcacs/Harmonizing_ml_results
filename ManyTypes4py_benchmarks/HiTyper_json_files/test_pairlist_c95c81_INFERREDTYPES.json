{
    "global@global": [
        {
            "category": "local",
            "name": "TESTABLE_PAIRLISTS",
            "type": [
                "list"
            ]
        }
    ],
    "static_pl_conf@global": [
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "return",
            "name": "static_pl_conf",
            "type": []
        }
    ],
    "test_FullTradesFilter@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "dict",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "test_FullTradesFilter",
            "type": [
                "None"
            ]
        }
    ],
    "test_MarketCapPairList_exceptions@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "unittesmock.MagicMock",
                "backup.util.GlobalInfo"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "backup.util.GlobalInfo"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "unittesmock.MagicMock",
                "backup.util.GlobalInfo"
            ]
        },
        {
            "category": "local",
            "name": "exchange",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "backup.util.GlobalInfo"
            ]
        },
        {
            "category": "return",
            "name": "test_MarketCapPairList_exceptions",
            "type": [
                "None"
            ]
        }
    ],
    "test_MarketCapPairList_filter@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "tuple[list]"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "trade_mode",
            "type": [
                "bool",
                "list[str]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "tuple[list]"
            ]
        },
        {
            "category": "arg",
            "name": "pairlists",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "result",
            "type": [
                "str",
                "collections.abc.Awaitable",
                "set[str]"
            ]
        },
        {
            "category": "arg",
            "name": "coin_market_calls",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "dict[\"core.Edge\", \"state.State\"]"
            ]
        },
        {
            "category": "local",
            "name": "test_value",
            "type": [
                "list[dict[typing.Text, typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "trade_mode",
            "type": [
                "bool",
                "list[str]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "pairlists",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "tuple[list]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "tuple[list]"
            ]
        },
        {
            "category": "local",
            "name": "gcm_mock",
            "type": [
                "str",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "local",
            "name": "coin_market_calls",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "dict[\"core.Edge\", \"state.State\"]",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "call",
            "type": [
                "str",
                "\"core.Edge\""
            ]
        },
        {
            "category": "return",
            "name": "test_MarketCapPairList_filter",
            "type": [
                "None"
            ]
        }
    ],
    "test_MarketCapPairList_filter_special_no_pair_from_coingecko@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "exchange",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "return",
            "name": "test_MarketCapPairList_filter_special_no_pair_from_coingecko",
            "type": [
                "None"
            ]
        }
    ],
    "test_MarketCapPairList_timing@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "time_machine",
            "type": []
        },
        {
            "category": "local",
            "name": "test_value",
            "type": [
                "list[dict[typing.Text, typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "markets_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "start_dt",
            "type": [
                "datetime.datetime",
                "str",
                "datetime.time"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "return",
            "name": "test_MarketCapPairList_timing",
            "type": [
                "None"
            ]
        }
    ],
    "test_OffsetFilter_error@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_OffsetFilter_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_PerformanceFilter_error@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "backup.util.GlobalInfo",
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "exchange",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "return",
            "name": "test_PerformanceFilter_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_PerformanceFilter_keep_mid_order@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.common.MockConfigEntry"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.common.MockConfigEntry"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "test_PerformanceFilter_keep_mid_order",
            "type": [
                "None"
            ]
        }
    ],
    "test_PerformanceFilter_lookback@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "test_PerformanceFilter_lookback",
            "type": [
                "None"
            ]
        }
    ],
    "test_PrecisionFilter_error@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "return",
            "name": "test_PrecisionFilter_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_ProducerPairlist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests._TestServerFactory"
            ]
        },
        {
            "category": "local",
            "name": "dp",
            "type": [
                "DataProvider"
            ]
        },
        {
            "category": "local",
            "name": "pairs",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "pm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "return",
            "name": "test_ProducerPairlist",
            "type": [
                "None"
            ]
        }
    ],
    "test_ProducerPairlist_no_emc@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "return",
            "name": "test_ProducerPairlist_no_emc",
            "type": [
                "None"
            ]
        }
    ],
    "test_ShuffleFilter_init@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest",
                "experimental.util.alice.alice_pb2.RunRequest"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest",
                "experimental.util.alice.alice_pb2.RunRequest"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "exchange",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "plm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "return",
            "name": "test_ShuffleFilter_init",
            "type": [
                "None"
            ]
        }
    ],
    "test_VolatilityFilter_RangeStabilityFilter_sort@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "dict[str, str]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "time_machine",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "pairlist",
            "type": [
                "str",
                "bool",
                "typing.Callable[..., None]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_pairlist",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "pairlist",
            "type": [
                "str",
                "bool",
                "typing.Callable[..., None]"
            ]
        },
        {
            "category": "local",
            "name": "df1",
            "type": [
                "pandas.DataFrame",
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "df2",
            "type": [
                "pandas.DataFrame",
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "df3",
            "type": [
                "int",
                "pandas.Series",
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "df4",
            "type": [
                "int",
                "pandas.Series",
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "df5",
            "type": [
                "int",
                "pandas.Series",
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "df6",
            "type": [
                "int",
                "pandas.Series",
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "time_machine",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_data",
            "type": [
                "dict[tuple[typing.Text], typing.Union[pandas.DataFrame,dict,str,int,pandas.Series]]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "dict[str, str]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "exchange_",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "plm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "return",
            "name": "test_VolatilityFilter_RangeStabilityFilter_sort",
            "type": [
                "None"
            ]
        }
    ],
    "test_VolatilityFilter_error@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "volatility_filter",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,int]]",
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "exchange_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "exchange_mock_",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_VolatilityFilter_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_VolumePairList_range@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "shitcoinmarkets",
            "type": [
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "ohlcv_history",
            "type": [
                "list[str]",
                "list[dict[str, typing.Any]]",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "pairlists",
            "type": [
                "list[str]",
                "freqtrade.pairlisIPairLisIPairList"
            ]
        },
        {
            "category": "arg",
            "name": "base_currency",
            "type": [
                "str",
                "bool",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "exchange",
            "type": [
                "str",
                "typing.Iterable[str]"
            ]
        },
        {
            "category": "arg",
            "name": "volumefilter_result",
            "type": [
                "collections.abc.Awaitable",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "time_machine",
            "type": [
                "datetime.datetime.datetime",
                "recidiviz.persistence.database.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "pairlists",
            "type": [
                "list[str]",
                "freqtrade.pairlisIPairLisIPairList"
            ]
        },
        {
            "category": "local",
            "name": "base_currency",
            "type": [
                "str",
                "bool",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "exchange",
            "type": [
                "str",
                "typing.Iterable[str]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history",
            "type": [
                "list[str]",
                "list[dict[str, typing.Any]]",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_data",
            "type": [
                "dict[tuple[typing.Text], typing.Union[list[str],list[dict[str, typing.Any]],bool]]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "volumefilter_result",
            "type": [
                "collections.abc.Awaitable",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_VolumePairList_range",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "shitcoinmarkets",
            "type": [
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "start_dt",
            "type": [
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "time_machine",
            "type": [
                "datetime.datetime.datetime",
                "recidiviz.persistence.database.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "ohclv_mock",
            "type": [
                "str",
                "unittesmock.MagicMock"
            ]
        }
    ],
    "test_VolumePairList_refresh_empty@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "markets_empty",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "markets_empty",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "test_VolumePairList_refresh_empty",
            "type": [
                "None"
            ]
        }
    ],
    "test_VolumePairList_whitelist_gen@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "shitcoinmarkets",
            "type": [
                "unittesmock.MagicMock",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "ohlcv_history",
            "type": [
                "dict",
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "pairlists",
            "type": [
                "freqtrade.pairlisIPairLisIPairList"
            ]
        },
        {
            "category": "arg",
            "name": "base_currency",
            "type": [
                "str",
                "bool",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_result",
            "type": [
                "list[str]",
                "tests.hints.RightFolderCall",
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "str",
                "logging.Logger",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "pairlists",
            "type": [
                "freqtrade.pairlisIPairLisIPairList"
            ]
        },
        {
            "category": "local",
            "name": "base_currency",
            "type": [
                "str",
                "bool",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history",
            "type": [
                "dict",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history_high_vola",
            "type": [
                "dict",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_data",
            "type": [
                "dict[tuple[typing.Text], typing.Union[dict,list[dict]]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "shitcoinmarkets",
            "type": [
                "unittesmock.MagicMock",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_result",
            "type": [
                "list[str]",
                "tests.hints.RightFolderCall",
                "list[dict]",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "logmsg",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_VolumePairList_whitelist_gen",
            "type": [
                "None"
            ]
        }
    ],
    "test__whitelist_for_active_markets@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "pairlist",
            "type": [
                "tuple[str]",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist",
            "type": [
                "bool",
                "typing.Collection",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": []
        },
        {
            "category": "arg",
            "name": "log_message",
            "type": [
                "str",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "pairlist",
            "type": [
                "tuple[str]",
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "bool",
                "typing.Collection",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test__whitelist_for_active_markets",
            "type": [
                "None"
            ]
        }
    ],
    "test__whitelist_for_active_markets_empty@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "arg",
            "name": "pairlist",
            "type": [
                "tuple[str]",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "pairlist",
            "type": [
                "tuple[str]",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "return",
            "name": "test__whitelist_for_active_markets_empty",
            "type": [
                "None"
            ]
        }
    ],
    "test_agefilter_caching@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf_agefilter",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "ohlcv_history",
            "type": [
                "dict[str, typing.Any]",
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history",
            "type": [
                "dict[str, typing.Any]",
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_data",
            "type": [
                "dict[tuple[typing.Text], typing.Union[dict[str, typing.Any],typing.Iterator]]"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf_agefilter",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test_agefilter_caching",
            "type": [
                "None"
            ]
        }
    ],
    "test_agefilter_max_days_lower_than_min_days@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "return",
            "name": "test_agefilter_max_days_lower_than_min_days",
            "type": [
                "None"
            ]
        }
    ],
    "test_agefilter_min_days_listed_too_large@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_agefilter_min_days_listed_too_large",
            "type": [
                "None"
            ]
        }
    ],
    "test_agefilter_min_days_listed_too_small@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "return",
            "name": "test_agefilter_min_days_listed_too_small",
            "type": [
                "None"
            ]
        }
    ],
    "test_backtesting_modes@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": []
        },
        {
            "category": "arg",
            "name": "pairlists",
            "type": [
                "bool",
                "dict[str, str]",
                "typing.Collection"
            ]
        },
        {
            "category": "arg",
            "name": "expected_error",
            "type": [
                "bool",
                "typing.Callable[str, str]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_warning",
            "type": [
                "typing.Collection",
                "bool",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "typing.Collection",
                "bool",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "pairlists",
            "type": [
                "bool",
                "dict[str, str]",
                "typing.Collection"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "expected_error",
            "type": [
                "bool",
                "typing.Callable[str, str]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "expected_warning",
            "type": [
                "typing.Collection",
                "bool",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_backtesting_modes",
            "type": [
                "None"
            ]
        }
    ],
    "test_expand_pairlist@global": [
        {
            "category": "arg",
            "name": "wildcardlist",
            "type": [
                "str",
                "set[str]",
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "pairs",
            "type": [
                "typing.Sequence[resolvers.Defn]",
                "set[str]",
                "typing.Sequence[typing.Sequence]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "set[str]",
                "bool",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "set[str]",
                "bool",
                "T",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "wildcardlist",
            "type": [
                "str",
                "set[str]",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "pairs",
            "type": [
                "typing.Sequence[resolvers.Defn]",
                "set[str]",
                "typing.Sequence[typing.Sequence]"
            ]
        },
        {
            "category": "local",
            "name": "conf",
            "type": [
                "dict[typing.Text, typing.Union[str,set[str],list[dict],dict[typing.Text, typing.Union[bool,dict[typing.Text, list[typing.Text]]]]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_expand_pairlist",
            "type": [
                "None"
            ]
        }
    ],
    "test_expand_pairlist_keep_invalid@global": [
        {
            "category": "arg",
            "name": "wildcardlist",
            "type": [
                "typing.Callable",
                "str",
                "set[str]"
            ]
        },
        {
            "category": "arg",
            "name": "pairs",
            "type": [
                "typing.Callable",
                "str",
                "set[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "typing.Callable",
                "tuple[typing.Union[str,int]]",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "typing.Callable",
                "tuple[typing.Union[str,int]]",
                "T",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "wildcardlist",
            "type": [
                "typing.Callable",
                "str",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "pairs",
            "type": [
                "typing.Callable",
                "str",
                "set[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_expand_pairlist_keep_invalid",
            "type": [
                "None"
            ]
        }
    ],
    "test_gen_pair_whitelist_not_supported@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_gen_pair_whitelist_not_supported",
            "type": [
                "None"
            ]
        }
    ],
    "test_invalid_blacklist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo",
                "kata.data.repos.KataLanguageRepo"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": []
        },
        {
            "category": "arg",
            "name": "static_pl_conf",
            "type": [
                "freqtrade.worker.Worker"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "typing.IO",
                "dict",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "static_pl_conf",
            "type": [
                "freqtrade.worker.Worker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo",
                "kata.data.repos.KataLanguageRepo"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "tests.unitest_mixins.MigrationTestWithBothMigrateTargets",
                "tests.core.test_task_map.ListTask",
                "tests.core.test_task_map.AddTask"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "typing.IO",
                "dict",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_invalid_blacklist",
            "type": [
                "None"
            ]
        }
    ],
    "test_load_pairlist_noexist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest",
                "tests.components.withings.common.ComponentFactory",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.components.withings.common.ComponentFactory",
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest",
                "tests.components.withings.common.ComponentFactory",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.components.withings.common.ComponentFactory",
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "plm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "return",
            "name": "test_load_pairlist_noexist",
            "type": [
                "None"
            ]
        }
    ],
    "test_load_pairlist_verify_multi@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "markets_static",
            "type": [
                "unittesmock.MagicMock",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "markets_static",
            "type": [
                "unittesmock.MagicMock",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "plm",
            "type": [
                "PairListManager"
            ]
        },
        {
            "category": "return",
            "name": "test_load_pairlist_verify_multi",
            "type": [
                "None"
            ]
        }
    ],
    "test_log_cached@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "static_pl_conf",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "static_pl_conf",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "logmock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_log_cached",
            "type": [
                "None"
            ]
        }
    ],
    "test_pair_whitelist_not_supported_Spread@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.setup.SetupTest",
                "tuple[typing.Union[str,mock.Mock]]"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "lightbus.plugins.PluginRegistry"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "lightbus.plugins.PluginRegistry"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.setup.SetupTest",
                "tuple[typing.Union[str,mock.Mock]]"
            ]
        },
        {
            "category": "return",
            "name": "test_pair_whitelist_not_supported_Spread",
            "type": [
                "None"
            ]
        }
    ],
    "test_pairlist_class@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "pairlist",
            "type": []
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.async_mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_pairlist_class",
            "type": [
                "None"
            ]
        }
    ],
    "test_pairlistmanager_no_pairlist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests.setup.SetupTest",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_pairlistmanager_no_pairlist",
            "type": [
                "None"
            ]
        }
    ],
    "test_performance_filter@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "pairlists",
            "type": [
                "list[str]",
                "freqtrade.pairlisIPairLisIPairList",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "pair_allowlist",
            "type": [
                "list[str]",
                "str",
                "typing.Callable[..., bool]"
            ]
        },
        {
            "category": "arg",
            "name": "overall_performance",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "allowlist_result",
            "type": [
                "bool",
                "typing.Callable[typing.Optional, None]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "ohlcv_history_list",
            "type": [
                "bool",
                "Exception",
                "None",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "pairlists",
            "type": [
                "list[str]",
                "freqtrade.pairlisIPairLisIPairList",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "pair_allowlist",
            "type": [
                "list[str]",
                "str",
                "typing.Callable[..., bool]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history_list",
            "type": [
                "bool",
                "Exception",
                "None",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "overall_performance",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "test_performance_filter",
            "type": [
                "None"
            ]
        }
    ],
    "test_pricefilter_desc@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict[str, str]",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "pairlistconfig",
            "type": [
                "bool",
                "dict[str, typing.Any]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "desc_expected",
            "type": [
                "bool",
                "str",
                "None",
                "typing.Mapping"
            ]
        },
        {
            "category": "arg",
            "name": "exception_expected",
            "type": [
                "bool",
                "str",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict[str, str]",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "pairlistconfig",
            "type": [
                "bool",
                "dict[str, typing.Any]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "desc_expected",
            "type": [
                "bool",
                "str",
                "None",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "short_desc",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "exception_expected",
            "type": [
                "bool",
                "str",
                "typing.Type"
            ]
        },
        {
            "category": "return",
            "name": "test_pricefilter_desc",
            "type": [
                "None"
            ]
        }
    ],
    "test_rangestabilityfilter_caching@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "ohlcv_history",
            "type": [
                "bool",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "min_rate_of_change",
            "type": [
                "bool",
                "float"
            ]
        },
        {
            "category": "arg",
            "name": "max_rate_of_change",
            "type": [
                "bool",
                "float"
            ]
        },
        {
            "category": "arg",
            "name": "expected_length",
            "type": [
                "bool",
                "freqtrade.pairlisIPairLisIPairList"
            ]
        },
        {
            "category": "local",
            "name": "min_rate_of_change",
            "type": [
                "bool",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "max_rate_of_change",
            "type": [
                "bool",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history",
            "type": [
                "bool",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_data",
            "type": [
                "dict[tuple[typing.Text], typing.Union[bool,dict,dict[str, typing.Any]]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_rangestabilityfilter_caching",
            "type": [
                "None"
            ]
        }
    ],
    "test_rangestabilityfilter_checks@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "return",
            "name": "test_rangestabilityfilter_checks",
            "type": [
                "None"
            ]
        }
    ],
    "test_refresh_market_pair_not_in_whitelist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock",
                "kata.data.repos.KataLanguageRepo"
            ]
        },
        {
            "category": "arg",
            "name": "static_pl_conf",
            "type": []
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock",
                "kata.data.repos.KataLanguageRepo"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "return",
            "name": "test_refresh_market_pair_not_in_whitelist",
            "type": [
                "None"
            ]
        }
    ],
    "test_refresh_pairlist_dynamic@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "shitcoinmarkets",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tests.async_mock.MagicMock",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "unittesmock.MagicMock",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tests.async_mock.MagicMock",
                "kata.data.io.network.GithubApi"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "qcodes.tests.instrument_mocks.DummyInstrument",
                "tests.core.test_task_map.IdTask"
            ]
        },
        {
            "category": "local",
            "name": "shitcoinmarkets",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "return",
            "name": "test_refresh_pairlist_dynamic",
            "type": [
                "None"
            ]
        }
    ],
    "test_refresh_pairlist_dynamic_2@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "arg",
            "name": "shitcoinmarkets",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "list[dict[str, typing.Any]]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf_2",
            "type": []
        },
        {
            "category": "local",
            "name": "tickers_dict",
            "type": [
                "dict[str, str]",
                "dict[str, int]"
            ]
        },
        {
            "category": "local",
            "name": "shitcoinmarkets",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "return",
            "name": "test_refresh_pairlist_dynamic_2",
            "type": [
                "None"
            ]
        }
    ],
    "test_refresh_static_pairlist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "static_pl_conf",
            "type": []
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "return",
            "name": "test_refresh_static_pairlist",
            "type": [
                "None"
            ]
        }
    ],
    "test_refresh_static_pairlist_noexist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "unittesmock.MagicMock",
                "dict[str, str]",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "static_pl_conf",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "pairs",
            "type": [
                "list[str]",
                "set",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "dict[str, typing.Any]",
                "str",
                "None",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "static_pl_conf",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "pairs",
            "type": [
                "list[str]",
                "set",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "unittesmock.MagicMock",
                "dict[str, str]",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "dict[str, typing.Any]",
                "str",
                "None",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_refresh_static_pairlist_noexist",
            "type": [
                "None"
            ]
        }
    ],
    "test_remove_logs_for_pairs_already_in_blacklist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": []
        },
        {
            "category": "arg",
            "name": "static_pl_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "logging.Logger"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock",
                "kata.data.repos.HardCoded.ConfigRepo"
            ]
        },
        {
            "category": "local",
            "name": "whitelist",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "logging.Logger"
            ]
        },
        {
            "category": "local",
            "name": "new_whitelist",
            "type": [
                "dict",
                "list[dict]",
                "set[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_remove_logs_for_pairs_already_in_blacklist",
            "type": [
                "None"
            ]
        }
    ],
    "test_spreadfilter_invalid_data@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str",
                "typing.Callable[List,bool, None]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "dict",
                "bool",
                "\"GraphLogger\"",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str",
                "typing.Callable[List,bool, None]"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_spreadfilter_invalid_data",
            "type": [
                "None"
            ]
        }
    ],
    "test_volumepairlist_caching@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]",
                "dict",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "tuple[str]",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]",
                "dict",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "tuple[str]",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_volumepairlist_caching",
            "type": [
                "None"
            ]
        }
    ],
    "test_volumepairlist_invalid_sortvalue@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": []
        },
        {
            "category": "arg",
            "name": "whitelist_conf",
            "type": [
                "lightbus.plugins.PluginRegistry",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "whitelist_conf",
            "type": [
                "lightbus.plugins.PluginRegistry",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test_volumepairlist_invalid_sortvalue",
            "type": [
                "None"
            ]
        }
    ],
    "whitelist_conf@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "return",
            "name": "whitelist_conf",
            "type": []
        }
    ],
    "whitelist_conf_2@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "return",
            "name": "whitelist_conf_2",
            "type": []
        }
    ],
    "whitelist_conf_agefilter@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "return",
            "name": "whitelist_conf_agefilter",
            "type": []
        }
    ]
}