{
    "extra_table_metadata@ThirdPartyDBEngineSpec": [
        {
            "category": "arg",
            "name": "cls",
            "type": []
        },
        {
            "category": "arg",
            "name": "database",
            "type": []
        },
        {
            "category": "arg",
            "name": "table_name",
            "type": []
        },
        {
            "category": "arg",
            "name": "schema_name",
            "type": []
        },
        {
            "category": "return",
            "name": "extra_table_metadata",
            "type": [
                "dict[typing.Text, ]"
            ]
        }
    ],
    "global@global": [],
    "mock_validate@global": [
        {
            "category": "arg",
            "name": "sqlalchemy_uri",
            "type": []
        },
        {
            "category": "return",
            "name": "mock_validate",
            "type": [
                "None"
            ]
        }
    ],
    "test_convert_inspector_columns@global": [
        {
            "category": "arg",
            "name": "cols",
            "type": [
                "str",
                "typing.Sequence[str]",
                "typing.Iterable[tuple[int]]"
            ]
        },
        {
            "category": "arg",
            "name": "expected_result",
            "type": [
                "str",
                "typing.Sequence[str]",
                "typing.Iterable[tuple[int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_convert_inspector_columns",
            "type": [
                "None"
            ]
        }
    ],
    "test_cte_query_parsing@global": [
        {
            "category": "arg",
            "name": "original",
            "type": [
                "bool",
                "list[str]",
                "list[int]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "int",
                "list[str]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "original",
            "type": [
                "bool",
                "list[str]",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_cte_query_parsing",
            "type": [
                "None"
            ]
        }
    ],
    "test_extra_table_metadata@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "dict[str, dict[str, typing.Any]]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "warnings",
            "type": [
                "str",
                "list[str]",
                "dict[typing.Any, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_extra_table_metadata",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_column_spec@global": [
        {
            "category": "arg",
            "name": "native_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "sqla_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "attrs",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "generic_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "arg",
            "name": "is_dttm",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "native_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "sqla_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "attrs",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "generic_type",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "local",
            "name": "is_dttm",
            "type": [
                "bool",
                "mypy.types.Type"
            ]
        },
        {
            "category": "return",
            "name": "test_get_column_spec",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_default_catalog@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "dict[typing.Any, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_default_catalog",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_text_clause_with_colon@global": [
        {
            "category": "return",
            "name": "test_get_text_clause_with_colon",
            "type": [
                "None"
            ]
        }
    ],
    "test_mask_encrypted_extra@global": [
        {
            "category": "return",
            "name": "test_mask_encrypted_extra",
            "type": [
                "None"
            ]
        }
    ],
    "test_parse_sql_multi_statement@global": [
        {
            "category": "return",
            "name": "test_parse_sql_multi_statement",
            "type": [
                "None"
            ]
        }
    ],
    "test_parse_sql_single_statement@global": [
        {
            "category": "return",
            "name": "test_parse_sql_single_statement",
            "type": [
                "None"
            ]
        }
    ],
    "test_quote_table@global": [
        {
            "category": "return",
            "name": "test_quote_table",
            "type": [
                "None"
            ]
        }
    ],
    "test_select_star@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "allow_limit_clause",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "cols",
            "type": [
                "list[dict[typing.Text, typing.Union[typing.Text,bool,None]]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.plugin.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "str",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "database_",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "engine",
            "type": [
                "kayak.core.Engine",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "sql",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_select_star",
            "type": [
                "None"
            ]
        }
    ],
    "test_unmask_encrypted_extra@global": [
        {
            "category": "return",
            "name": "test_unmask_encrypted_extra",
            "type": [
                "None"
            ]
        }
    ],
    "test_validate_db_uri@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pytest_mock.MockFixture"
            ]
        },
        {
            "category": "return",
            "name": "test_validate_db_uri",
            "type": [
                "None"
            ]
        }
    ]
}