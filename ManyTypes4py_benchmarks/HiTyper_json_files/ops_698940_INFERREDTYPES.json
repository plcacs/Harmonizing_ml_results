{
    "_cast_pointwise_result@BaseOpsUtil": [
        {
            "category": "arg",
            "name": "op_name",
            "type": [
                "str",
                "bool",
                "BaseException",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "obj",
            "type": [
                "str",
                "bool",
                "BaseException",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "other",
            "type": [
                "str",
                "bool",
                "BaseException",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "pointwise_result",
            "type": [
                "str",
                "bool",
                "BaseException",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "pointwise_result",
            "type": [
                "str",
                "bool",
                "BaseException",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "_cast_pointwise_result",
            "type": [
                "str",
                "bool",
                "BaseException",
                "None"
            ]
        }
    ],
    "_check_divmod_op@BaseOpsUtil": [
        {
            "category": "arg",
            "name": "ser",
            "type": []
        },
        {
            "category": "arg",
            "name": "op",
            "type": [
                "int",
                "str",
                "typing.Iterable[typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "other",
            "type": []
        },
        {
            "category": "local",
            "name": "op",
            "type": [
                "int",
                "str",
                "typing.Iterable[typing.Any]",
                "divmod"
            ]
        },
        {
            "category": "local",
            "name": "exc",
            "type": [
                "None",
                "Exception",
                "TypeError",
                "OSError"
            ]
        },
        {
            "category": "local",
            "name": "expected_div",
            "type": [
                "str",
                "list",
                "list[tuple[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "expected_mod",
            "type": [
                "list[dict[str, typing.Any]]",
                "list[None]",
                "list"
            ]
        },
        {
            "category": "return",
            "name": "_check_divmod_op",
            "type": [
                "None"
            ]
        }
    ],
    "_check_op@BaseOpsUtil": [
        {
            "category": "arg",
            "name": "ser",
            "type": [
                "Exception",
                "BaseException",
                "T"
            ]
        },
        {
            "category": "arg",
            "name": "op",
            "type": [
                "typing.Type",
                "BaseException",
                "None",
                "Exception"
            ]
        },
        {
            "category": "arg",
            "name": "other",
            "type": [
                "Exception",
                "None",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "op_name",
            "type": [
                "Exception",
                "str",
                "BaseException"
            ]
        },
        {
            "category": "arg",
            "name": "exc",
            "type": [
                "NotImplementedError"
            ]
        },
        {
            "category": "local",
            "name": "exc",
            "type": [
                "NotImplementedError",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "ser",
            "type": [
                "Exception",
                "BaseException",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "Exception",
                "None",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "dict",
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "op",
            "type": [
                "typing.Type",
                "BaseException",
                "None",
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "float",
                "list[float]",
                "tuple[typing.Literal]"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "Exception",
                "str",
                "BaseException"
            ]
        },
        {
            "category": "return",
            "name": "_check_op",
            "type": [
                "None"
            ]
        }
    ],
    "_combine@BaseOpsUtil": [
        {
            "category": "arg",
            "name": "obj",
            "type": [
                "typing.Type",
                "numpy.ndarray",
                "None",
                "static_frame.core.series.Series"
            ]
        },
        {
            "category": "arg",
            "name": "other",
            "type": [
                "float",
                "cirq.ops.Operation",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "arg",
            "name": "op",
            "type": [
                "float",
                "cirq.ops.Operation",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "local",
            "name": "obj",
            "type": [
                "typing.Type",
                "numpy.ndarray",
                "None",
                "static_frame.core.series.Series",
                "pd_@_DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "float",
                "list[str]",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "float",
                "cirq.ops.Operation",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "local",
            "name": "op",
            "type": [
                "float",
                "cirq.ops.Operation",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "return",
            "name": "_combine",
            "type": [
                "float",
                "list[str]",
                "int"
            ]
        }
    ],
    "_compare_other@BaseComparisonOpsTests": [
        {
            "category": "arg",
            "name": "ser",
            "type": [
                "numpy.ndarray",
                "list[T]",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "arg",
            "name": "data",
            "type": [
                "T",
                "int",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "op",
            "type": [
                "numpy.ndarray",
                "list[T]",
                "typing.Sequence[numpy.ndarray]"
            ]
        },
        {
            "category": "arg",
            "name": "other",
            "type": [
                "numpy.ndarray",
                "list[T]",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "local",
            "name": "op",
            "type": [
                "numpy.ndarray",
                "list[T]",
                "typing.Sequence[numpy.ndarray]"
            ]
        },
        {
            "category": "local",
            "name": "ser",
            "type": [
                "numpy.ndarray",
                "list[T]",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "numpy.ndarray",
                "list[T]",
                "dict[cirq.ops.raw_types.Qid, cirq.ops.raw_types.Qid]"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list[object]",
                "list",
                "typing.NoReturn"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "float",
                "list[int]",
                "tuple[float]"
            ]
        },
        {
            "category": "local",
            "name": "exc",
            "type": [
                "None",
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "err",
            "type": [
                "Exception"
            ]
        },
        {
            "category": "return",
            "name": "_compare_other",
            "type": [
                "None"
            ]
        }
    ],
    "_get_expected_exception@BaseOpsUtil": [
        {
            "category": "arg",
            "name": "op_name",
            "type": [
                "str",
                "bool",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "obj",
            "type": [
                "str",
                "None",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "other",
            "type": [
                "int",
                "list",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "str",
                "bool",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "obj",
            "type": [
                "str",
                "None",
                "list[str]",
                "pd_@_Series"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "int",
                "list",
                "str",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "_get_expected_exception",
            "type": []
        }
    ],
    "check_opname@BaseOpsUtil": [
        {
            "category": "arg",
            "name": "ser",
            "type": [
                "str",
                "typing.Callable",
                "typing.Mapping"
            ]
        },
        {
            "category": "arg",
            "name": "op_name",
            "type": [
                "str",
                "None",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "other",
            "type": [
                "str",
                "typing.Callable",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "str",
                "None",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "ser",
            "type": [
                "str",
                "typing.Callable",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "str",
                "typing.Callable",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "exc",
            "type": [
                "Exception",
                "TypeError",
                "OSError"
            ]
        },
        {
            "category": "local",
            "name": "op",
            "type": [
                "str",
                "typing.Callable[int, str]",
                "dict[int, str]"
            ]
        },
        {
            "category": "return",
            "name": "check_opname",
            "type": [
                "None"
            ]
        }
    ],
    "get_op_from_name@BaseOpsUtil": [
        {
            "category": "arg",
            "name": "op_name",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "get_op_from_name",
            "type": []
        }
    ],
    "global@global": [],
    "test_add_series_with_extension_array@BaseArithmeticOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "exc",
            "type": [
                "Exception",
                "TypeError",
                "OSError",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_add_series_with_extension_array",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "float",
                "slice",
                "int"
            ]
        }
    ],
    "test_arith_frame_with_scalar@BaseArithmeticOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.Series"
            ]
        },
        {
            "category": "arg",
            "name": "all_arithmetic_operators",
            "type": [
                "list[str]",
                "tuple",
                "typing.Callable[typing.Mapping, T]"
            ]
        },
        {
            "category": "local",
            "name": "all_arithmetic_operators",
            "type": [
                "list[str]",
                "tuple",
                "typing.Callable[typing.Mapping, T]"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.Series"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "list[str]",
                "tuple",
                "typing.Callable[typing.Mapping, T]"
            ]
        },
        {
            "category": "return",
            "name": "test_arith_frame_with_scalar",
            "type": [
                "None"
            ]
        }
    ],
    "test_arith_series_with_array@BaseArithmeticOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "list[str]",
                "numpy.ndarray"
            ]
        },
        {
            "category": "arg",
            "name": "all_arithmetic_operators",
            "type": [
                "set[str]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "all_arithmetic_operators",
            "type": [
                "set[str]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "set[str]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "list[str]",
                "numpy.ndarray"
            ]
        },
        {
            "category": "return",
            "name": "test_arith_series_with_array",
            "type": [
                "None"
            ]
        }
    ],
    "test_arith_series_with_scalar@BaseArithmeticOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "bool",
                "typing.Callable[..., bool]",
                "tuple"
            ]
        },
        {
            "category": "arg",
            "name": "all_arithmetic_operators",
            "type": [
                "list[str]",
                "list",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "all_arithmetic_operators",
            "type": [
                "list[str]",
                "list",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "bool",
                "typing.Callable[..., bool]",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "list[str]",
                "list",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_arith_series_with_scalar",
            "type": [
                "None"
            ]
        }
    ],
    "test_compare_array@BaseComparisonOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "comparison_op",
            "type": [
                "typing.Callable[str, bool]",
                "typing.Iterable[typing.Any]",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "comparison_op",
            "type": [
                "typing.Callable[str, bool]",
                "typing.Iterable[typing.Any]",
                "float"
            ]
        },
        {
            "category": "return",
            "name": "test_compare_array",
            "type": [
                "None"
            ]
        }
    ],
    "test_compare_scalar@BaseComparisonOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "typing.Iterable[typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "comparison_op",
            "type": [
                "typing.Callable",
                "typing.Iterable[typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "typing.Iterable[typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "comparison_op",
            "type": [
                "typing.Callable",
                "typing.Iterable[typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_compare_scalar",
            "type": [
                "None"
            ]
        }
    ],
    "test_direct_arith_with_ndframe_returns_not_implemented@BaseArithmeticOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "str",
                "None",
                "list[float]"
            ]
        },
        {
            "category": "arg",
            "name": "box",
            "type": [
                "str",
                "typing.Type",
                "numpy.ndarray"
            ]
        },
        {
            "category": "arg",
            "name": "op_name",
            "type": [
                "str",
                "static_frame.core.util.GetItemKeyType"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "str",
                "None",
                "list[float]"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "str",
                "dict[int, int]"
            ]
        },
        {
            "category": "local",
            "name": "op_name",
            "type": [
                "str",
                "static_frame.core.util.GetItemKeyType"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "None",
                "tuple[typing.Union[str,list[str]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_direct_arith_with_ndframe_returns_not_implemented",
            "type": [
                "None"
            ]
        }
    ],
    "test_divmod@BaseArithmeticOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "return",
            "name": "test_divmod",
            "type": [
                "None"
            ]
        }
    ],
    "test_divmod_series_array@BaseArithmeticOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "int",
                "numpy.ndarray"
            ]
        },
        {
            "category": "arg",
            "name": "data_for_twos",
            "type": [
                "pandas.DataFrame",
                "str",
                "typing.TextIO"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "int",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "data_for_twos",
            "type": [
                "pandas.DataFrame",
                "str",
                "typing.TextIO"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "pandas.DataFrame",
                "str",
                "typing.TextIO"
            ]
        },
        {
            "category": "return",
            "name": "test_divmod_series_array",
            "type": [
                "None"
            ]
        }
    ],
    "test_invert@BaseUnaryOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_invert",
            "type": [
                "None"
            ]
        }
    ],
    "test_unary_ufunc_dunder_equivalence@BaseUnaryOpsTests": [
        {
            "category": "arg",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "ufunc",
            "type": [
                "numpy.ndarray",
                "numpy.matrix",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "ufunc",
            "type": [
                "numpy.ndarray",
                "numpy.matrix",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "attr",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "exc",
            "type": [
                "None",
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "dict",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "err",
            "type": [
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "data",
            "type": [
                "pandas.DataFrame",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "alt",
            "type": [
                "list",
                "float",
                "list[tuple[typing.Union[int,typing.Any]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_unary_ufunc_dunder_equivalence",
            "type": [
                "None"
            ]
        }
    ]
}