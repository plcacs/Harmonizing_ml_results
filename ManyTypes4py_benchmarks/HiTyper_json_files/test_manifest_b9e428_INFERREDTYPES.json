{
    "_ambiguous_ref_parameter_sets@global": [
        {
            "category": "local",
            "name": "sets",
            "type": [
                "list[FindNodeSpec]"
            ]
        },
        {
            "category": "return",
            "name": "_ambiguous_ref_parameter_sets",
            "type": [
                "list[FindNodeSpec]"
            ]
        }
    ],
    "_docs_parameter_sets@global": [
        {
            "category": "local",
            "name": "sets",
            "type": [
                "list",
                "list[FindDocSpec]"
            ]
        },
        {
            "category": "local",
            "name": "project",
            "type": [
                "typing.Text",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "_docs_parameter_sets",
            "type": [
                "list[FindDocSpec]"
            ]
        }
    ],
    "_materialization_parameter_sets@global": [
        {
            "category": "local",
            "name": "FooPlugin",
            "type": [
                "AdapterPlugin"
            ]
        },
        {
            "category": "local",
            "name": "FooPlugin_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "BarPlugin",
            "type": [
                "AdapterPlugin"
            ]
        },
        {
            "category": "local",
            "name": "BarPlugin_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "sets",
            "type": [
                "list[FindMaterializationSpec]"
            ]
        },
        {
            "category": "local",
            "name": "project",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "_materialization_parameter_sets",
            "type": [
                "list[FindMaterializationSpec]"
            ]
        }
    ],
    "_materialization_parameter_sets_legacy@global": [
        {
            "category": "local",
            "name": "FooPlugin",
            "type": [
                "AdapterPlugin"
            ]
        },
        {
            "category": "local",
            "name": "FooPlugin_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "BarPlugin",
            "type": [
                "AdapterPlugin"
            ]
        },
        {
            "category": "local",
            "name": "BarPlugin_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "sets",
            "type": [
                "list[FindMaterializationSpec]"
            ]
        },
        {
            "category": "local",
            "name": "project",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "_materialization_parameter_sets_legacy",
            "type": [
                "list[FindMaterializationSpec]"
            ]
        }
    ],
    "_refable_parameter_sets@global": [
        {
            "category": "local",
            "name": "sets",
            "type": [
                "list[FindNodeSpec]"
            ]
        },
        {
            "category": "local",
            "name": "project",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "_refable_parameter_sets",
            "type": [
                "list[FindNodeSpec]"
            ]
        }
    ],
    "_source_parameter_sets@global": [
        {
            "category": "local",
            "name": "sets",
            "type": [
                "list[FindNodeSpec]"
            ]
        },
        {
            "category": "local",
            "name": "project",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "name",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "_source_parameter_sets",
            "type": [
                "list[FindNodeSpec]"
            ]
        }
    ],
    "docs@TestManifestSearch": [
        {
            "category": "return",
            "name": "docs",
            "type": []
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "REQUIRED_PARSED_NODE_KEYS",
            "type": [
                "set[typing.Text]",
                "frozenset"
            ]
        },
        {
            "category": "local",
            "name": "REQUIRED_COMPILED_NODE_KEYS",
            "type": [
                "set",
                "frozenset",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "ENV_KEY_NAME",
            "type": [
                "typing.Text",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "FindMacroSpec",
            "type": [
                "dict[str, typing.Any]",
                "dict[typing.Type, str]",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "macro_parameter_sets",
            "type": [
                "list[FindMacroSpec]"
            ]
        },
        {
            "category": "local",
            "name": "generate_name_parameter_sets",
            "type": [
                "list[FindMacroSpec]"
            ]
        },
        {
            "category": "local",
            "name": "FindMaterializationSpec",
            "type": [
                "list[str]",
                "dict",
                "tuple[typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "FindNodeSpec",
            "type": [
                "list",
                "typing.Optional",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "FindDocSpec",
            "type": [
                "list",
                "dict",
                "list[str]"
            ]
        }
    ],
    "id_macro@global": [
        {
            "category": "arg",
            "name": "arg",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "arg",
            "type": [
                "str",
                "list[str]",
                "list",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "macro_names",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "id_macro",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "arg_names",
            "type": [
                "str"
            ]
        }
    ],
    "id_mat@global": [
        {
            "category": "arg",
            "name": "arg",
            "type": [
                "int",
                "str",
                "slice"
            ]
        },
        {
            "category": "local",
            "name": "arg",
            "type": [
                "int",
                "str",
                "slice",
                "list",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "macro_names",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "id_mat",
            "type": [
                "typing.Text",
                "str"
            ]
        }
    ],
    "id_nodes@global": [
        {
            "category": "arg",
            "name": "arg",
            "type": [
                "str",
                "int",
                "slice"
            ]
        },
        {
            "category": "local",
            "name": "arg",
            "type": [
                "str",
                "int",
                "slice",
                "list",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "node_names",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "id_nodes",
            "type": [
                "typing.Text",
                "str"
            ]
        }
    ],
    "macros@TestManifestSearch": [
        {
            "category": "return",
            "name": "macros",
            "type": []
        }
    ],
    "manifest@TestDisabledLookup": [
        {
            "category": "return",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        }
    ],
    "mock_disabled_node@TestManifestFindNodeFromRefOrSource": [
        {
            "category": "return",
            "name": "mock_disabled_node",
            "type": [
                "MockNode"
            ]
        }
    ],
    "mock_disabled_source@TestManifestFindNodeFromRefOrSource": [
        {
            "category": "return",
            "name": "mock_disabled_source",
            "type": [
                "MockSource"
            ]
        }
    ],
    "mock_manifest@TestManifestFindNodeFromRefOrSource": [
        {
            "category": "arg",
            "name": "mock_node",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_source",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_disabled_node",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "mock_disabled_source",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_node",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_disabled_node",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_source",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_disabled_source",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "mock_manifest",
            "type": [
                "tuple[typing.Union[str,mock.Mock]]",
                "list[str]",
                "str"
            ]
        }
    ],
    "mock_model@TestDisabledLookup": [
        {
            "category": "return",
            "name": "mock_model",
            "type": [
                "MockNode"
            ]
        }
    ],
    "mock_model_with_version@TestDisabledLookup": [
        {
            "category": "return",
            "name": "mock_model_with_version",
            "type": [
                "MockNode"
            ]
        }
    ],
    "mock_node@TestManifestFindNodeFromRefOrSource": [
        {
            "category": "return",
            "name": "mock_node",
            "type": [
                "MockNode"
            ]
        }
    ],
    "mock_seed@TestDisabledLookup": [
        {
            "category": "return",
            "name": "mock_seed",
            "type": [
                "MockNode"
            ]
        }
    ],
    "mock_source@TestManifestFindNodeFromRefOrSource": [
        {
            "category": "return",
            "name": "mock_source",
            "type": [
                "MockSource"
            ]
        }
    ],
    "nodes@TestManifestSearch": [
        {
            "category": "return",
            "name": "nodes",
            "type": []
        }
    ],
    "setUp@ManifestTest": [
        {
            "category": "local",
            "name": "tracking_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "maxDiff",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "exposures",
            "type": [
                "dict[typing.Text, Exposure]"
            ]
        },
        {
            "category": "local",
            "name": "metrics",
            "type": [
                "dict[typing.Text, Metric]"
            ]
        },
        {
            "category": "local",
            "name": "groups",
            "type": [
                "dict[typing.Text, Group]"
            ]
        },
        {
            "category": "local",
            "name": "nested_nodes",
            "type": [
                "dict[typing.Text, ModelNode]"
            ]
        },
        {
            "category": "local",
            "name": "sources",
            "type": [
                "dict[typing.Text, SourceDefinition]"
            ]
        },
        {
            "category": "local",
            "name": "semantic_models",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "saved_queries",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "setUp",
            "type": [
                "None"
            ]
        }
    ],
    "setUp@MixedManifestTest": [
        {
            "category": "local",
            "name": "maxDiff",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "nested_nodes",
            "type": [
                "dict[typing.Text, ModelNode]"
            ]
        },
        {
            "category": "return",
            "name": "setUp",
            "type": [
                "None"
            ]
        }
    ],
    "setUp@TestManifestSearch": [
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "return",
            "name": "setUp",
            "type": [
                "None"
            ]
        }
    ],
    "tearDown@ManifestTest": [
        {
            "category": "return",
            "name": "tearDown",
            "type": [
                "None"
            ]
        }
    ],
    "tearDown@MixedManifestTest": [
        {
            "category": "return",
            "name": "tearDown",
            "type": [
                "None"
            ]
        }
    ],
    "test_build_flat_graph@ManifestTest": [
        {
            "category": "local",
            "name": "exposures",
            "type": [
                "datetime.date",
                "dict[str, tuple[typing.Union[typing.Any,str]]]",
                "frozenset"
            ]
        },
        {
            "category": "local",
            "name": "metrics",
            "type": [
                "dict",
                "dict[str, str]",
                "dict[str, typing.Union[dict,typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "groups",
            "type": [
                "list",
                "set[str]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "sources",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "REQUIRED_PARSED_NODE_KEYS",
            "type": [
                "frozenset"
            ]
        },
        {
            "category": "return",
            "name": "test_build_flat_graph",
            "type": [
                "None"
            ]
        }
    ],
    "test_build_flat_graph@MixedManifestTest": [
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "compiled_count",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "REQUIRED_COMPILED_NODE_KEYS",
            "type": [
                "frozenset",
                "set[str]"
            ]
        },
        {
            "category": "local",
            "name": "REQUIRED_PARSED_NODE_KEYS",
            "type": [
                "frozenset"
            ]
        },
        {
            "category": "return",
            "name": "test_build_flat_graph",
            "type": [
                "None"
            ]
        }
    ],
    "test_deepcopy_copies_flat_graph@ManifestTest": [
        {
            "category": "local",
            "name": "test_node",
            "type": [
                "ModelNode"
            ]
        },
        {
            "category": "local",
            "name": "original",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "copy",
            "type": [
                "dict[typing.Any, tuple[typing.Any]]",
                "dict",
                "set"
            ]
        },
        {
            "category": "return",
            "name": "test_deepcopy_copies_flat_graph",
            "type": [
                "None"
            ]
        }
    ],
    "test_find@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "typing.Callable",
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": [
                "dict[str, typing.Any]",
                "typing.Callable",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_model",
            "type": [
                "dict[str, typing.Any]",
                "typing.Callable",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[typing.Union[dict[str, typing.Any],typing.Callable,dict]]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "typing.Callable",
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_generate_macros_by_name@global": [
        {
            "category": "arg",
            "name": "macros",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "expectations",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "macros",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict",
                "str",
                "dict[str, typing.Union[typing.Any,str]]"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "argparse.Namespace"
            ]
        },
        {
            "category": "local",
            "name": "package",
            "type": [
                "tuple[typing.Union[str,typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "tuple[typing.Union[str,typing.Any]]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expectations",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_find_generate_macros_by_name",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_macro_by_name@global": [
        {
            "category": "arg",
            "name": "macros",
            "type": [
                "bool",
                "baseplate.lib.experiments.targeting.base.Targeting"
            ]
        },
        {
            "category": "arg",
            "name": "expectations",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "macros",
            "type": [
                "bool",
                "baseplate.lib.experiments.targeting.base.Targeting"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "list[str]",
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expectations",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_find_macro_by_name",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_materialization_by_name@global": [
        {
            "category": "arg",
            "name": "macros",
            "type": [
                "str",
                "docutils.nodes.Node",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "adapter_type",
            "type": [
                "str",
                "typing.Callable[..., collections.abc.Awaitable]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "typing.Type",
                "list[typing.Union[str,int]]",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "macros",
            "type": [
                "str",
                "docutils.nodes.Node",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "str",
                "list[str]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "adapter_type",
            "type": [
                "str",
                "typing.Callable[..., collections.abc.Awaitable]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "list",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "typing.Type",
                "list[typing.Union[str,int]]",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expected_package",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "expected_adapter_type",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_find_materialization_by_name",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_materialization_by_name_legacy@global": [
        {
            "category": "arg",
            "name": "macros",
            "type": [
                "str",
                "docutils.nodes.Node",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "adapter_type",
            "type": [
                "str",
                "typing.Callable[..., collections.abc.Awaitable]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "list[typing.Union[str,int]]",
                "typing.Mapping",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "macros",
            "type": [
                "str",
                "docutils.nodes.Node",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "str",
                "list[str]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "adapter_type",
            "type": [
                "str",
                "typing.Callable[..., collections.abc.Awaitable]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "list",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "list[typing.Union[str,int]]",
                "typing.Mapping",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expected_package",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "expected_adapter_type",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_find_materialization_by_name_legacy",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_multiple_nodes@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_seed",
            "type": []
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_multiple_nodes",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_multiple_nodes_with_resource_types@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "sqlalchemy.engine.base.Engine"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": [
                "sqlalchemy.engine.base.Engine"
            ]
        },
        {
            "category": "arg",
            "name": "mock_seed",
            "type": []
        },
        {
            "category": "local",
            "name": "mock_model",
            "type": [
                "sqlalchemy.engine.base.Engine"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[sqlalchemy.engine.base.Engine]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "sqlalchemy.engine.base.Engine"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_multiple_nodes_with_resource_types",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_multiple_nodes_with_resource_types_empty@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_seed",
            "type": []
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_multiple_nodes_with_resource_types_empty",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_multiple_nodes_with_wrong_resource_types@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "sqlalchemy.engine.base.Engine"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_seed",
            "type": []
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "sqlalchemy.engine.base.Engine"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_multiple_nodes_with_wrong_resource_types",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_no_package@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": []
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_no_package",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_node_from_ref_or_source@TestManifestFindNodeFromRefOrSource": [
        {
            "category": "arg",
            "name": "expression",
            "type": [
                "tests.basilisp.helpers.CompileFn",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "expected_node",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "collections.abc.Awaitable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_manifest",
            "type": [
                "tests.basilisp.helpers.CompileFn",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "request",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mock_manifest",
            "type": [
                "tests.basilisp.helpers.CompileFn",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "expression",
            "type": [
                "tests.basilisp.helpers.CompileFn",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "node",
            "type": [
                "jinja2.nodes.FromImport",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "expected_node",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "collections.abc.Awaitable",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_find_node_from_ref_or_source",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_node_from_ref_or_source_invalid_expression@TestManifestFindNodeFromRefOrSource": [
        {
            "category": "arg",
            "name": "invalid_expression",
            "type": [
                "str",
                "mypy.plugin.CheckerPluginInterface",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "mock_manifest",
            "type": [
                "str",
                "mypy.plugin.CheckerPluginInterface",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "mock_manifest",
            "type": [
                "str",
                "mypy.plugin.CheckerPluginInterface",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "invalid_expression",
            "type": [
                "str",
                "mypy.plugin.CheckerPluginInterface",
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "test_find_node_from_ref_or_source_invalid_expression",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_versioned_node@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_model_with_version",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_model_with_version",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[dict]]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_versioned_node",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_versioned_node_no_package@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_model_with_version",
            "type": []
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_versioned_node_no_package",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_versioned_node_no_version@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_model_with_version",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_model_with_version",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[dict]]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_versioned_node_no_version",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_versioned_node_wrong_name@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model_with_version",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mock_model_with_version",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[typing.Union[dict,dict[str, typing.Any]]]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_versioned_node_wrong_name",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_versioned_node_wrong_package@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": []
        },
        {
            "category": "arg",
            "name": "mock_model_with_version",
            "type": [
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "mock_model_with_version",
            "type": [
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[typing.Union[dict,str]]]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_versioned_node_wrong_package",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_versioned_node_wrong_version@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model_with_version",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_model_with_version",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[dict]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_versioned_node_wrong_version",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_wrong_name@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mock_model",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[typing.Union[dict,dict[str, typing.Any]]]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_wrong_name",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_wrong_package@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mock_model",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[typing.Union[dict,dict[str, typing.Any]]]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_wrong_package",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_wrong_resource_types@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dbcontracts.graph.manifesManifest",
                "dict[str, typing.Any]",
                "dict",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "mock_model",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[typing.Callable]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dbcontracts.graph.manifesManifest",
                "dict[str, typing.Any]",
                "dict",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_wrong_resource_types",
            "type": [
                "None"
            ]
        }
    ],
    "test_find_wrong_version@TestDisabledLookup": [
        {
            "category": "arg",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mock_model",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "mock_model",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "manifest_",
            "type": [
                "dict[typing.Text, list[typing.Union[dict,dict[str, typing.Any]]]]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "lookup",
            "type": [
                "DisabledLookup"
            ]
        },
        {
            "category": "return",
            "name": "test_find_wrong_version",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_resource_fqns@ManifestTest": [
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "expect",
            "type": [
                "dict[typing.Text, set[tuple[typing.Text]]]"
            ]
        },
        {
            "category": "local",
            "name": "resource_fqns",
            "type": [
                "str",
                "fxwebgen.resources.Resource"
            ]
        },
        {
            "category": "return",
            "name": "test_get_resource_fqns",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_resource_fqns_empty@ManifestTest": [
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "return",
            "name": "test_get_resource_fqns_empty",
            "type": [
                "None"
            ]
        }
    ],
    "test_merge_from_artifact@MixedManifestTest": [
        {
            "category": "local",
            "name": "nested2_",
            "type": [
                "typing.Text",
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "original_manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "other_manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "return",
            "name": "test_merge_from_artifact",
            "type": [
                "None"
            ]
        }
    ],
    "test_nested_nodes@ManifestTest": [
        {
            "category": "arg",
            "name": "mock_user",
            "type": []
        },
        {
            "category": "local",
            "name": "mock_user_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "serialized",
            "type": [
                "str",
                "bytes",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "parent_map",
            "type": [
                "str",
                "bytes"
            ]
        },
        {
            "category": "local",
            "name": "child_map",
            "type": [
                "str",
                "bytes"
            ]
        },
        {
            "category": "return",
            "name": "test_nested_nodes",
            "type": [
                "None"
            ]
        }
    ],
    "test_nested_nodes@MixedManifestTest": [
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "serialized",
            "type": [
                "dict[typing.Any, typing.Union[int,str]]",
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "parent_map",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "child_map",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_nested_nodes",
            "type": [
                "None"
            ]
        }
    ],
    "test_no_nodes@ManifestTest": [
        {
            "category": "arg",
            "name": "mock_user",
            "type": []
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "mock_user_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "ENV_KEY_NAME",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_no_nodes",
            "type": [
                "None"
            ]
        }
    ],
    "test_no_nodes@MixedManifestTest": [
        {
            "category": "arg",
            "name": "mock_user",
            "type": []
        },
        {
            "category": "local",
            "name": "mock_user_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "metadata",
            "type": [
                "ManifestMetadata"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "ENV_KEY_NAME",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_no_nodes",
            "type": [
                "None"
            ]
        }
    ],
    "test_no_nodes_with_metadata@ManifestTest": [
        {
            "category": "arg",
            "name": "mock_user",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mock_user_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "dbt_common_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "metadata",
            "type": [
                "ManifestMetadata"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "Manifest"
            ]
        },
        {
            "category": "local",
            "name": "ENV_KEY_NAME",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_no_nodes_with_metadata",
            "type": [
                "None"
            ]
        }
    ],
    "test_resolve_doc@global": [
        {
            "category": "arg",
            "name": "docs",
            "type": [
                "str",
                "bool",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "package",
            "type": [
                "str",
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "dict",
                "str",
                "dbcontracts.graph.manifesManifest",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "docs",
            "type": [
                "str",
                "bool",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict",
                "list[str]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "package",
            "type": [
                "str",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "typing.Generator[typing.Optional[typing.Any]]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "dict",
                "str",
                "dbcontracts.graph.manifesManifest",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expected_package",
            "type": [
                "dict[str, str]",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "expected_name",
            "type": [
                "str",
                "list[str]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_resolve_doc",
            "type": [
                "None"
            ]
        }
    ],
    "test_resolve_ref@global": [
        {
            "category": "arg",
            "name": "nodes",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "sources",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "package",
            "type": [
                "typing.Mapping",
                "dict[str, typing.Any]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "version",
            "type": [
                "typing.Mapping",
                "dict[str, typing.Any]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "tuple[int]",
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "nodes",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "sources",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict",
                "str",
                "tests.wpweb-platform-tests.tools.manifesmanifesManifest"
            ]
        },
        {
            "category": "local",
            "name": "package",
            "type": [
                "typing.Mapping",
                "dict[str, typing.Any]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "version",
            "type": [
                "typing.Mapping",
                "dict[str, typing.Any]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "dict",
                "str",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "tuple[int]",
                "str",
                "list[str]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expected_package",
            "type": [
                "int",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "expected_name",
            "type": [
                "int",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "expected_version",
            "type": [
                "int",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_resolve_ref",
            "type": [
                "None"
            ]
        }
    ],
    "test_resolve_ref_ambiguous_resource_name_across_packages@global": [
        {
            "category": "arg",
            "name": "nodes",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "sources",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "package",
            "type": [
                "str",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "version",
            "type": [
                "str",
                "dict",
                "cmk.utils.type_defs.EventRule"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "str",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "nodes",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "sources",
            "type": [
                "str",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict",
                "tests.wpweb-platform-tests.tools.manifesmanifesManifest",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "version",
            "type": [
                "str",
                "dict",
                "cmk.utils.type_defs.EventRule"
            ]
        },
        {
            "category": "return",
            "name": "test_resolve_ref_ambiguous_resource_name_across_packages",
            "type": [
                "None"
            ]
        }
    ],
    "test_resolve_source@global": [
        {
            "category": "arg",
            "name": "nodes",
            "type": [
                "int",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "sources",
            "type": [
                "int",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "package",
            "type": [
                "typing.Mapping",
                "dict[str, str]",
                "mypy.nodes.MypyFile"
            ]
        },
        {
            "category": "arg",
            "name": "version",
            "type": [
                "str",
                "list[str]",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "int",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "nodes",
            "type": [
                "int",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "sources",
            "type": [
                "int",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "manifest",
            "type": [
                "dict",
                "str",
                "tests.wpweb-platform-tests.tools.manifesmanifesManifest"
            ]
        },
        {
            "category": "local",
            "name": "package",
            "type": [
                "typing.Mapping",
                "dict[str, str]",
                "mypy.nodes.MypyFile"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "bytes",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "int",
                "dict[str, str]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "expected_package",
            "type": [
                "list[str]",
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "expected_source_name",
            "type": [
                "str",
                "set[str]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "expected_name",
            "type": [
                "str",
                "list[str]",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_resolve_source",
            "type": [
                "None"
            ]
        }
    ]
}