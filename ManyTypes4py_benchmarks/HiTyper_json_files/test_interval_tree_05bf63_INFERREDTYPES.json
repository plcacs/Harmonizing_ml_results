{
    "global@global": [],
    "leaf_size@global": [
        {
            "category": "arg",
            "name": "request",
            "type": []
        },
        {
            "category": "return",
            "name": "leaf_size",
            "type": []
        }
    ],
    "skipif_32bit@global": [
        {
            "category": "arg",
            "name": "param",
            "type": [
                "int",
                "str",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "marks",
            "type": [
                "int",
                "str",
                "tuple[typing.Literal]"
            ]
        },
        {
            "category": "local",
            "name": "param",
            "type": [
                "int",
                "str",
                "float"
            ]
        },
        {
            "category": "return",
            "name": "skipif_32bit",
            "type": []
        }
    ],
    "test_construction_overflow@TestIntervalTree": [
        {
            "category": "local",
            "name": "left",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "right",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_construction_overflow",
            "type": [
                "None"
            ]
        }
    ],
    "test_duplicates@TestIntervalTree": [
        {
            "category": "arg",
            "name": "dtype",
            "type": [
                "typing.Callable[numpy.ndarray,numpy.ndarray, numpy.ndarray]",
                "typing.Type",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "dtype",
            "type": [
                "typing.Callable[numpy.ndarray,numpy.ndarray, numpy.ndarray]",
                "typing.Type",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "return",
            "name": "test_duplicates",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer@TestIntervalTree": [
        {
            "category": "arg",
            "name": "tree",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_closed@TestIntervalTree": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "leaf_size",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "leaf_size",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_closed",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_non_unique@TestIntervalTree": [
        {
            "category": "arg",
            "name": "tree",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_non_unique",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_non_unique_overflow@TestIntervalTree": [
        {
            "category": "arg",
            "name": "dtype",
            "type": [
                "numpy.ndarray",
                "typing.Iterable[T]",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "target_value",
            "type": [
                "numpy.ndarray",
                "int",
                "tuple[int]"
            ]
        },
        {
            "category": "arg",
            "name": "target_dtype",
            "type": [
                "numpy.ndarray",
                "int",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "dtype",
            "type": [
                "numpy.ndarray",
                "typing.Iterable[T]",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "left",
            "type": [
                "int",
                "str",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "right",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "local",
            "name": "target_value",
            "type": [
                "numpy.ndarray",
                "int",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "target_dtype",
            "type": [
                "numpy.ndarray",
                "int",
                "tuple[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_non_unique_overflow",
            "type": [
                "None"
            ]
        }
    ],
    "test_get_indexer_overflow@TestIntervalTree": [
        {
            "category": "arg",
            "name": "dtype",
            "type": [
                "tuple",
                "numpy.ndarray"
            ]
        },
        {
            "category": "arg",
            "name": "target_value",
            "type": [
                "numpy.ndarray",
                "int",
                "typing.Sequence[int]"
            ]
        },
        {
            "category": "arg",
            "name": "target_dtype",
            "type": [
                "numpy.ndarray",
                "int",
                "typing.Sequence[int]"
            ]
        },
        {
            "category": "local",
            "name": "dtype",
            "type": [
                "tuple",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "left",
            "type": [
                "int",
                "str",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "right",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "local",
            "name": "target_value",
            "type": [
                "numpy.ndarray",
                "int",
                "typing.Sequence[int]"
            ]
        },
        {
            "category": "local",
            "name": "target_dtype",
            "type": [
                "numpy.ndarray",
                "int",
                "typing.Sequence[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_get_indexer_overflow",
            "type": [
                "None"
            ]
        }
    ],
    "test_inf_bound_infinite_recursion@TestIntervalTree": [
        {
            "category": "arg",
            "name": "left",
            "type": [
                "pandas._ArrayLike",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "right",
            "type": [
                "pandas._ArrayLike",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "int",
                "numpy.ndarray",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "left",
            "type": [
                "pandas._ArrayLike",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "right",
            "type": [
                "pandas._ArrayLike",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "return",
            "name": "test_inf_bound_infinite_recursion",
            "type": [
                "None"
            ]
        }
    ],
    "test_is_overlapping@TestIntervalTree": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "float",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "order",
            "type": [
                "float",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "left",
            "type": []
        },
        {
            "category": "arg",
            "name": "right",
            "type": []
        },
        {
            "category": "arg",
            "name": "expected",
            "type": [
                "int",
                "slice",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "order",
            "type": [
                "float",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "float",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "return",
            "name": "test_is_overlapping",
            "type": [
                "None"
            ]
        }
    ],
    "test_is_overlapping_endpoints@TestIntervalTree": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "collections.abc.Awaitable[None]"
            ]
        },
        {
            "category": "arg",
            "name": "order",
            "type": []
        },
        {
            "category": "local",
            "name": "left",
            "type": [
                "str",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "right",
            "type": [
                "str",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "collections.abc.Awaitable[None]"
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "local",
            "name": "expected",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_is_overlapping_endpoints",
            "type": [
                "None"
            ]
        }
    ],
    "test_is_overlapping_trivial@TestIntervalTree": [
        {
            "category": "arg",
            "name": "closed",
            "type": [
                "int",
                "list[str]",
                "\"NoopSpan\""
            ]
        },
        {
            "category": "arg",
            "name": "left",
            "type": [
                "int",
                "list[str]",
                "\"NoopSpan\""
            ]
        },
        {
            "category": "arg",
            "name": "right",
            "type": [
                "int",
                "list[str]",
                "\"NoopSpan\""
            ]
        },
        {
            "category": "local",
            "name": "left",
            "type": [
                "int",
                "list[str]",
                "\"NoopSpan\""
            ]
        },
        {
            "category": "local",
            "name": "right",
            "type": [
                "int",
                "list[str]",
                "\"NoopSpan\""
            ]
        },
        {
            "category": "local",
            "name": "closed",
            "type": [
                "int",
                "list[str]",
                "\"NoopSpan\""
            ]
        },
        {
            "category": "local",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        },
        {
            "category": "return",
            "name": "test_is_overlapping_trivial",
            "type": [
                "None"
            ]
        }
    ],
    "tree@global": [
        {
            "category": "arg",
            "name": "request",
            "type": [
                "int",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "leaf_size",
            "type": [
                "int",
                "'KspNativeControl'",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "request",
            "type": [
                "int",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "leaf_size",
            "type": [
                "int",
                "'KspNativeControl'",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "tree",
            "type": [
                "IntervalTree"
            ]
        }
    ]
}