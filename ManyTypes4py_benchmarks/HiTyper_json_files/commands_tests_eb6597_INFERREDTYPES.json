{
    "_screenshot_side_effect@global": [
        {
            "category": "arg",
            "name": "user",
            "type": []
        },
        {
            "category": "return",
            "name": "_screenshot_side_effect",
            "type": []
        }
    ],
    "assert_log@global": [
        {
            "category": "arg",
            "name": "state",
            "type": [
                "str",
                "dict",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "error_message",
            "type": [
                "None",
                "str",
                "typing.Callable",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "logs",
            "type": [
                "drel.core.models.ResponseLog"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "str",
                "dict",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "log_states",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "assert_log",
            "type": [
                "None"
            ]
        }
    ],
    "create_alert_email_chart@global": [
        {
            "category": "arg",
            "name": "request",
            "type": [
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "param_config",
            "type": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "example_database",
            "type": [
                "supersemodels.core.Database"
            ]
        },
        {
            "category": "local",
            "name": "request",
            "type": [
                "typing.Iterator"
            ]
        },
        {
            "category": "return",
            "name": "create_alert_email_chart",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_alert_slack_chart_grace@global": [
        {
            "category": "arg",
            "name": "request",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "param_config",
            "type": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "backend.readibooks.models.Book",
                "None",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "example_database",
            "type": [
                "circle_core.database.Database",
                "itsim.datastore.database.DatabaseSQLite"
            ]
        },
        {
            "category": "local",
            "name": "request",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "log",
            "type": [
                "ReportExecutionLog"
            ]
        },
        {
            "category": "return",
            "name": "create_alert_slack_chart_grace",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_alert_slack_chart_success@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "backend.readibooks.models.Book",
                "None",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "log",
            "type": [
                "ReportExecutionLog"
            ]
        },
        {
            "category": "return",
            "name": "create_alert_slack_chart_success",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_invalid_sql_alert_email_chart@global": [
        {
            "category": "arg",
            "name": "request",
            "type": [
                "typing.Iterator"
            ]
        },
        {
            "category": "arg",
            "name": "app_context",
            "type": []
        },
        {
            "category": "local",
            "name": "param_config",
            "type": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "example_database",
            "type": [
                "supersemodels.core.Database"
            ]
        },
        {
            "category": "local",
            "name": "request",
            "type": [
                "typing.Iterator"
            ]
        },
        {
            "category": "return",
            "name": "create_invalid_sql_alert_email_chart",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_mul_alert_email_chart@global": [
        {
            "category": "arg",
            "name": "request",
            "type": [
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "param_config",
            "type": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "example_database",
            "type": [
                "supersemodels.core.Database"
            ]
        },
        {
            "category": "local",
            "name": "request",
            "type": [
                "typing.Iterator"
            ]
        },
        {
            "category": "return",
            "name": "create_mul_alert_email_chart",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_no_alert_email_chart@global": [
        {
            "category": "arg",
            "name": "request",
            "type": []
        },
        {
            "category": "local",
            "name": "param_config",
            "type": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "example_database",
            "type": [
                "supersemodels.core.Database"
            ]
        },
        {
            "category": "return",
            "name": "create_no_alert_email_chart",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_report_email_chart@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "list",
                "list['Book']",
                "app.models.FileModel"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "dict[str, dict[str, typing.Any]]",
                "list",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_chart",
            "type": [
                "typing.Generator[typing.Union[dict[str, dict[str, typing.Any]],list,dict]]"
            ]
        }
    ],
    "create_report_email_chart_alpha_owner@global": [
        {
            "category": "arg",
            "name": "get_user",
            "type": [
                "models.Task",
                "dict",
                "database.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "owners",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "chart",
            "type": [
                "list",
                "list['Book']",
                "app.models.dto.CoordinateDTO"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "dict",
                "list",
                "tartare.core.models.Job"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_chart_alpha_owner",
            "type": [
                "typing.Generator[typing.Union[dict,list,tartare.core.models.Job]]"
            ]
        }
    ],
    "create_report_email_chart_force_screenshot@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "list['Book']",
                "lms.lmsdb.models.Solution",
                "supersemodels.slice.Slice"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "list",
                "dict",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_chart_force_screenshot",
            "type": [
                "typing.Generator[typing.Union[list,dict,dict[str, dict[str, typing.Any]]]]"
            ]
        }
    ],
    "create_report_email_chart_with_cc_and_bcc@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "list",
                "list['Book']",
                "app.models.FileModel"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "list",
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_chart_with_cc_and_bcc",
            "type": [
                "typing.Generator[typing.Union[list,dict,dict[str, typing.Any]]]"
            ]
        }
    ],
    "create_report_email_chart_with_csv@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "list['Book']",
                "iamdb.models.Movie"
            ]
        },
        {
            "category": "local",
            "name": "chart_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_chart_with_csv",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_report_email_chart_with_csv_no_query_context@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "supersemodels.slice.Slice",
                "iamdb.models.Movie"
            ]
        },
        {
            "category": "local",
            "name": "chart_",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_chart_with_csv_no_query_context",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_report_email_chart_with_text@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "list['Book']",
                "iamdb.models.Movie"
            ]
        },
        {
            "category": "local",
            "name": "chart_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_chart_with_text",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_report_email_dashboard@global": [
        {
            "category": "local",
            "name": "dashboard",
            "type": [
                "superseconnectors.sqla.models.SqlaTable",
                "tracim.models.applications.Application",
                "backend.api.models.rlc.Rlc"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "list[dict[str, typing.Any]]",
                "list",
                "dict[str, typing.Union[None,typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_dashboard",
            "type": [
                "typing.Generator[typing.Union[list[dict[str, typing.Any]],list,dict[str, typing.Union[None,typing.Any]]]]"
            ]
        }
    ],
    "create_report_email_dashboard_force_screenshot@global": [
        {
            "category": "local",
            "name": "dashboard",
            "type": [
                "core.arxiv.submission.domain.submission.Submission",
                "supersemodels.core.Database",
                "superseconnectors.sqla.models.SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "dict",
                "list",
                "dict[str, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "create_report_email_dashboard_force_screenshot",
            "type": [
                "typing.Generator[typing.Union[dict,list,dict[str, dict[str, typing.Any]]]]"
            ]
        }
    ],
    "create_report_slack_chart@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "list",
                "list['Book']",
                "list[tuple[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "dict[str, dict[str, typing.Any]]",
                "amundsen_application.models.data_issue.DataIssue",
                "dict[str, dict]"
            ]
        },
        {
            "category": "return",
            "name": "create_report_slack_chart",
            "type": [
                "typing.Generator[typing.Union[dict[str, dict[str, typing.Any]],amundsen_application.models.data_issue.DataIssue,dict[str, dict]]]"
            ]
        }
    ],
    "create_report_slack_chart_with_csv@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "backend.readibooks.models.Book",
                "None",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "chart_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "create_report_slack_chart_with_csv",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_report_slack_chart_with_text@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "src.scrape.models.Product",
                "backend.readibooks.models.Book",
                "None",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "chart_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "create_report_slack_chart_with_text",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "create_report_slack_chart_working@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "list",
                "list['Book']",
                "list[tuple[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "list",
                "dict[str, dict[str, typing.Any]]",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "log",
            "type": [
                "ReportExecutionLog"
            ]
        },
        {
            "category": "return",
            "name": "create_report_slack_chart_working",
            "type": [
                "typing.Generator[typing.Union[list,dict[str, dict[str, typing.Any]],list[dict[str, typing.Any]]]]"
            ]
        }
    ],
    "create_report_slack_chartv2@global": [
        {
            "category": "local",
            "name": "chart",
            "type": [
                "list",
                "app.models.dto.CoordinateDTO",
                "list['Book']"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "dict[str, dict[str, typing.Any]]",
                "amundsen_application.models.data_issue.DataIssue",
                "dict[str, dict]"
            ]
        },
        {
            "category": "return",
            "name": "create_report_slack_chartv2",
            "type": [
                "typing.Generator[typing.Union[dict[str, dict[str, typing.Any]],amundsen_application.models.data_issue.DataIssue,dict[str, dict]]]"
            ]
        }
    ],
    "create_test_table_context@global": [
        {
            "category": "arg",
            "name": "database",
            "type": [
                "pymongo.database.Database",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "database",
            "type": [
                "pymongo.database.Database",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "create_test_table_context",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "get_bcctarget_from_report_schedule@global": [
        {
            "category": "arg",
            "name": "report_schedule",
            "type": [
                "utils.clienClient",
                "dict",
                "database.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "utils.clienClient",
                "dict",
                "database.database.Database"
            ]
        },
        {
            "category": "return",
            "name": "get_bcctarget_from_report_schedule",
            "type": [
                "list"
            ]
        }
    ],
    "get_cctarget_from_report_schedule@global": [
        {
            "category": "arg",
            "name": "report_schedule",
            "type": [
                "utils.clienClient",
                "dict",
                "database.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "utils.clienClient",
                "dict",
                "database.database.Database"
            ]
        },
        {
            "category": "return",
            "name": "get_cctarget_from_report_schedule",
            "type": [
                "list"
            ]
        }
    ],
    "get_error_logs_query@global": [
        {
            "category": "arg",
            "name": "report_schedule",
            "type": [
                "models.Task",
                "sqlalchemy.orm.Session",
                "core_lib.core.processing_chain.DatabaseSink"
            ]
        },
        {
            "category": "return",
            "name": "get_error_logs_query",
            "type": [
                "bool",
                "str",
                "None"
            ]
        }
    ],
    "get_notification_error_sent_count@global": [
        {
            "category": "arg",
            "name": "report_schedule",
            "type": [
                "database.database.Database",
                "utils.clienClient",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "database.database.Database",
                "utils.clienClient",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "notification_sent_logs",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "get_notification_error_sent_count",
            "type": [
                "int"
            ]
        }
    ],
    "get_target_from_report_schedule@global": [
        {
            "category": "arg",
            "name": "report_schedule",
            "type": [
                "utils.clienClient",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "utils.clienClient",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "get_target_from_report_schedule",
            "type": [
                "list"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "pytestmark",
            "type": [
                "str",
                "bytes",
                "dict[str, str]"
            ]
        }
    ],
    "test__send_with_client_errors@global": [
        {
            "category": "arg",
            "name": "notification_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "logger_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "notification_content",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "recipients",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "notification_mock_",
            "type": [
                "NotificationParamException"
            ]
        },
        {
            "category": "return",
            "name": "test__send_with_client_errors",
            "type": [
                "None"
            ]
        }
    ],
    "test__send_with_multiple_errors@global": [
        {
            "category": "arg",
            "name": "notification_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "logger_mock",
            "type": [
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "notification_content",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "recipients",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "notification_mock_",
            "type": [
                "list[typing.Union[NotificationParamException,NotificationError]]"
            ]
        },
        {
            "category": "return",
            "name": "test__send_with_multiple_errors",
            "type": [
                "None"
            ]
        }
    ],
    "test__send_with_server_errors@global": [
        {
            "category": "arg",
            "name": "notification_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "logger_mock",
            "type": []
        },
        {
            "category": "local",
            "name": "notification_content",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "recipients",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "notification_mock_",
            "type": [
                "NotificationError"
            ]
        },
        {
            "category": "return",
            "name": "test__send_with_server_errors",
            "type": [
                "None"
            ]
        }
    ],
    "test_alert_limit_is_applied@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": []
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_email_chart",
            "type": []
        },
        {
            "category": "return",
            "name": "test_alert_limit_is_applied",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_alert_schedule@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "core.models.Recipe",
                "tests.clienMDMClient"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "dict[str, typing.Type]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "str",
                "core.models.Recipe",
                "tests.clienMDMClient"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_alert_schedule",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_no_alert@global": [
        {
            "category": "arg",
            "name": "create_no_alert_email_chart",
            "type": [
                "User",
                "accounts.models.Account",
                "projects.models.projects.Project"
            ]
        },
        {
            "category": "local",
            "name": "create_no_alert_email_chart",
            "type": [
                "User",
                "accounts.models.Account",
                "projects.models.projects.Project"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_no_alert",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_dry_run@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock",
                "mock_vws.database.VuforiaDatabase"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart",
            "type": [
                "str",
                "recidiviz.persistence.database.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart",
            "type": [
                "str",
                "recidiviz.persistence.database.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_dry_run",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_schedule@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": []
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "url_shortener.db.DB",
                "core_lib.core.models.Event"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart",
            "type": [
                "str",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart",
            "type": [
                "str",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "None",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "url_shortener.db.DB",
                "core_lib.core.models.Event"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_schedule",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_schedule_alpha_owner@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": []
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_alpha_owner",
            "type": [
                "str",
                "mock_vws.database.VuforiaDatabase"
            ]
        },
        {
            "category": "local",
            "name": "config_key",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "username",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart_alpha_owner",
            "type": [
                "str",
                "mock_vws.database.VuforiaDatabase"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "None",
                "typing.Callable[None,None,None,None, None]"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_schedule_alpha_owner",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_schedule_force_screenshot@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": []
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_force_screenshot",
            "type": []
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_schedule_force_screenshot",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_schedule_with_cc_bcc@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": []
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_with_cc_and_bcc",
            "type": []
        },
        {
            "category": "local",
            "name": "expected_cc_targets",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "expected_bcc_targets",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_schedule_with_cc_bcc",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_schedule_with_csv@global": [
        {
            "category": "arg",
            "name": "csv_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "tests.helpers.MockedFetcher",
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_with_csv",
            "type": []
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "tests.helpers.MockedFetcher",
                "mock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_schedule_with_csv",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_schedule_with_csv_no_query_context@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "csv_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_with_csv_no_query_context",
            "type": [
                "unittesmock.Mock",
                "meeshkan.core.api.Api"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart_with_csv_no_query_context",
            "type": [
                "unittesmock.Mock",
                "meeshkan.core.api.Api"
            ]
        },
        {
            "category": "local",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_schedule_with_csv_no_query_context",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_chart_report_schedule_with_text@global": [
        {
            "category": "arg",
            "name": "dataframe_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_with_text",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart_with_text",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "table_html",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "dt",
            "type": [
                "datetime.datetime",
                "datetime.date"
            ]
        },
        {
            "category": "return",
            "name": "test_email_chart_report_schedule_with_text",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_dashboard_report_fails@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_dashboard",
            "type": []
        },
        {
            "category": "local",
            "name": "email_mock_",
            "type": [
                "SMTPException"
            ]
        },
        {
            "category": "return",
            "name": "test_email_dashboard_report_fails",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_dashboard_report_fails_uncaught_exception@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "mock.MagicMock",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_dashboard",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_dashboard",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_email_dashboard_report_fails_uncaught_exception",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_dashboard_report_schedule@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_dashboard",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_dashboard",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "None",
                "typing.Callable[None,None,None,None, None]"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "str",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_email_dashboard_report_schedule",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_dashboard_report_schedule_disabled_tabs@global": [
        {
            "category": "arg",
            "name": "_email_mock",
            "type": [
                "mock.Mock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "_screenshot_mock",
            "type": [
                "mock.Mock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "dashboard",
            "type": [
                "core.arxiv.submission.domain.submission.Submission",
                "superseconnectors.sqla.models.SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "dict[str, typing.Union[int,str]]",
                "list",
                "dict[str, list[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "permalinks",
            "type": [
                "list",
                "int",
                "flask.blueprints.Blueprint"
            ]
        },
        {
            "category": "return",
            "name": "test_email_dashboard_report_schedule_disabled_tabs",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_dashboard_report_schedule_force_screenshot@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_dashboard_force_screenshot",
            "type": [
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_dashboard_force_screenshot",
            "type": [
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "flask.blueprints.Blueprint",
                "meeshkan.notifications.__types__.NotificationWithStatusTime"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_email_dashboard_report_schedule_force_screenshot",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_dashboard_report_schedule_with_tab_anchor@global": [
        {
            "category": "arg",
            "name": "_email_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "_screenshot_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "dashboard",
            "type": [
                "core.arxiv.submission.domain.submission.Submission",
                "superseconnectors.sqla.models.SqlaTable"
            ]
        },
        {
            "category": "local",
            "name": "report_schedule",
            "type": [
                "dict[str, typing.Union[int,str]]",
                "list",
                "dict[str, list[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "pl",
            "type": [
                "ajapaik.ajapaik.models.AlbumPhoto",
                "uuid.UUID",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_email_dashboard_report_schedule_with_tab_anchor",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_disable_screenshot@global": [
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "dict[str, typing.Type]",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_email_disable_screenshot",
            "type": [
                "None"
            ]
        }
    ],
    "test_email_mul_alert@global": [
        {
            "category": "arg",
            "name": "create_mul_alert_email_chart",
            "type": [
                "str",
                "sqlalchemy.orm.Session",
                "pymongo.database.Database"
            ]
        },
        {
            "category": "local",
            "name": "create_mul_alert_email_chart",
            "type": [
                "str",
                "sqlalchemy.orm.Session",
                "pymongo.database.Database"
            ]
        },
        {
            "category": "return",
            "name": "test_email_mul_alert",
            "type": [
                "None"
            ]
        }
    ],
    "test_fail_csv@global": [
        {
            "category": "arg",
            "name": "csv_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_with_csv",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart_with_csv",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_fail_csv",
            "type": [
                "None"
            ]
        }
    ],
    "test_fail_screenshot@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "bool",
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart",
            "type": [
                "sqlalchemy.orm.session.Session",
                "mock_vws.database.VuforiaDatabase",
                "deeplearning.deepsmith.db.session_t"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart",
            "type": [
                "sqlalchemy.orm.session.Session",
                "mock_vws.database.VuforiaDatabase",
                "deeplearning.deepsmith.db.session_t"
            ]
        },
        {
            "category": "return",
            "name": "test_fail_screenshot",
            "type": [
                "None"
            ]
        }
    ],
    "test_generate_no_csv@global": [
        {
            "category": "arg",
            "name": "csv_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_with_csv",
            "type": []
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "response_",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_generate_no_csv",
            "type": [
                "None"
            ]
        }
    ],
    "test_grace_period_error@global": [
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_invalid_sql_alert_email_chart",
            "type": [
                "models.user.User",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_invalid_sql_alert_email_chart",
            "type": [
                "models.user.User",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_grace_period_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_grace_period_error_flap@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "typing.Callable[..., None]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "typing.Callable[..., None]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "create_invalid_sql_alert_email_chart",
            "type": [
                "models.user.User",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "create_invalid_sql_alert_email_chart",
            "type": [
                "models.user.User",
                "sqlalchemy.orm.Session"
            ]
        },
        {
            "category": "local",
            "name": "create_invalid_sql_alert_email_chart_",
            "type": [
                "typing.Text",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_grace_period_error_flap",
            "type": [
                "None"
            ]
        }
    ],
    "test_invalid_sql_alert@global": [
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "mock.Mock",
                "tests.mock_vws.utils.Endpoint"
            ]
        },
        {
            "category": "arg",
            "name": "create_invalid_sql_alert_email_chart",
            "type": [
                "models.user.User",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_invalid_sql_alert_email_chart",
            "type": [
                "models.user.User",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_invalid_sql_alert",
            "type": [
                "None"
            ]
        }
    ],
    "test_prune_log_soft_time_out@global": [
        {
            "category": "arg",
            "name": "bulk_delete_logs",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_dashboard",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "bulk_delete_logs_",
            "type": [
                "SoftTimeLimitExceeded"
            ]
        },
        {
            "category": "return",
            "name": "test_prune_log_soft_time_out",
            "type": [
                "None"
            ]
        }
    ],
    "test_report_schedule_not_found@global": [
        {
            "category": "arg",
            "name": "create_report_slack_chart",
            "type": [
                "sqlalchemy.orm.Session",
                "bool",
                "mock_vws.database.VuforiaDatabase"
            ]
        },
        {
            "category": "local",
            "name": "max_id",
            "type": [
                "int",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_report_schedule_not_found",
            "type": [
                "None"
            ]
        }
    ],
    "test_report_schedule_success_grace@global": [
        {
            "category": "arg",
            "name": "create_alert_slack_chart_success",
            "type": [
                "sqlalchemy.orm.Session",
                "bool",
                "grouper.models.user.User"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_slack_chart_success",
            "type": [
                "sqlalchemy.orm.Session",
                "bool",
                "grouper.models.user.User"
            ]
        },
        {
            "category": "local",
            "name": "current_time",
            "type": [
                "int",
                "datetime.datetime",
                "datetime.timedelta"
            ]
        },
        {
            "category": "return",
            "name": "test_report_schedule_success_grace",
            "type": [
                "None"
            ]
        }
    ],
    "test_report_schedule_success_grace_end@global": [
        {
            "category": "arg",
            "name": "slack_client_mock_class",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "file_upload_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_slack_chart_grace",
            "type": [
                "str",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_slack_chart_grace",
            "type": [
                "str",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "channel_name",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "channel_id",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "slack_client_mock_class_",
            "type": [
                "dict[typing.Text, list[dict[typing.Text, typing.Text]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_report_schedule_success_grace_end",
            "type": [
                "None"
            ]
        }
    ],
    "test_report_schedule_working@global": [
        {
            "category": "arg",
            "name": "create_report_slack_chart_working",
            "type": [
                "sqlalchemy.orm.session.Session",
                "deeplearning.deepsmith.db.session_t",
                "deeplearning.ml4pl.ir.ir_database.Database"
            ]
        },
        {
            "category": "local",
            "name": "create_report_slack_chart_working",
            "type": [
                "sqlalchemy.orm.session.Session",
                "deeplearning.deepsmith.db.session_t",
                "deeplearning.ml4pl.ir.ir_database.Database"
            ]
        },
        {
            "category": "return",
            "name": "test_report_schedule_working",
            "type": [
                "None"
            ]
        }
    ],
    "test_report_schedule_working_timeout@global": [
        {
            "category": "arg",
            "name": "create_report_slack_chart_working",
            "type": [
                "bool",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "create_report_slack_chart_working",
            "type": [
                "bool",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "return",
            "name": "test_report_schedule_working_timeout",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_chart_alert@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "dict[str, typing.Type]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_chart_alert",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_chart_alert_no_attachment@global": [
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_email_chart",
            "type": [
                "flask.Flask",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_email_chart",
            "type": [
                "flask.Flask",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "dict[str, typing.Type]",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_chart_alert_no_attachment",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_chart_report_schedule_converts_to_v2@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": []
        },
        {
            "category": "arg",
            "name": "slack_client_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "slack_should_use_v2_api_mock",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "get_channels_with_search_mock",
            "type": [
                "mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_slack_chart",
            "type": []
        },
        {
            "category": "local",
            "name": "channel_id",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "get_channels_with_search_mock_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_chart_report_schedule_converts_to_v2",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_chart_report_schedule_v2@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "slack_client_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "slack_should_use_v2_api_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "get_channels_with_search_mock",
            "type": [
                "mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_slack_chart",
            "type": [
                "meeshkan.core.api.Api"
            ]
        },
        {
            "category": "local",
            "name": "channel_id",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "get_channels_with_search_mock_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "create_report_slack_chart",
            "type": [
                "meeshkan.core.api.Api"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_chart_report_schedule_v2",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_chart_report_schedule_with_csv@global": [
        {
            "category": "arg",
            "name": "csv_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock",
                "mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "slack_client_mock_class",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "slack_should_use_v2_api_mock",
            "type": [
                "mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_slack_chart_with_csv",
            "type": [
                "str",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "create_report_slack_chart_with_csv",
            "type": [
                "str",
                "app.utils.models.ModelManager"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "viewer.models.Archive"
            ]
        },
        {
            "category": "local",
            "name": "channel_name",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_chart_report_schedule_with_csv",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_chart_report_schedule_with_errors@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "web_client_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_slack_chart",
            "type": []
        },
        {
            "category": "local",
            "name": "slack_errors",
            "type": [
                "list[typing.Union[BotUserAccessError,SlackRequestError,SlackClientConfigurationError,SlackObjectFormationError,SlackTokenRotationError,SlackClientNotConnectedError,SlackClientError,SlackApiError]]"
            ]
        },
        {
            "category": "local",
            "name": "idx",
            "type": [
                "int",
                "BotUserAccessError",
                "SlackRequestError",
                "SlackClientConfigurationError",
                "SlackObjectFormationError",
                "SlackTokenRotationError",
                "SlackClientNotConnectedError",
                "SlackClientError",
                "SlackApiError"
            ]
        },
        {
            "category": "local",
            "name": "er",
            "type": [
                "int",
                "BotUserAccessError",
                "SlackRequestError",
                "SlackClientConfigurationError",
                "SlackObjectFormationError",
                "SlackTokenRotationError",
                "SlackClientNotConnectedError",
                "SlackClientError",
                "SlackApiError"
            ]
        },
        {
            "category": "local",
            "name": "web_client_mock_",
            "type": [
                "list[typing.Union[SlackApiError,int,BotUserAccessError,SlackRequestError,SlackClientConfigurationError,SlackObjectFormationError,SlackTokenRotationError,SlackClientNotConnectedError,SlackClientError]]"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_chart_report_schedule_with_errors",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_chart_report_schedule_with_text@global": [
        {
            "category": "arg",
            "name": "dataframe_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "slack_client_mock_class",
            "type": [
                "tests.helpers.MockedFetcher"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "slack_should_use_v2_api_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_slack_chart_with_text",
            "type": [
                "meeshkan.core.api.Api"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "create_report_slack_chart_with_text",
            "type": [
                "meeshkan.core.api.Api"
            ]
        },
        {
            "category": "local",
            "name": "table_markdown",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_chart_report_schedule_with_text",
            "type": [
                "None"
            ]
        }
    ],
    "test_slack_token_callable_chart_report@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": []
        },
        {
            "category": "arg",
            "name": "slack_client_mock_class",
            "type": [
                "bool",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_slack_chart",
            "type": [
                "str",
                "dict",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "create_report_slack_chart",
            "type": [
                "str",
                "dict",
                "sqlalchemy.orm.session.Session"
            ]
        },
        {
            "category": "local",
            "name": "notification_targets",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "channel_name",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "channel_id",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "slack_client_mock_class_",
            "type": [
                "Mock",
                "dict[typing.Text, list[dict[typing.Text, typing.Text]]]"
            ]
        },
        {
            "category": "return",
            "name": "test_slack_token_callable_chart_report",
            "type": [
                "None"
            ]
        }
    ],
    "test_soft_timeout_alert@global": [
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "str",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_email_chart",
            "type": [
                "grouper.models.user.User",
                "grouper.models.base.session.Session",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "execute_mock_",
            "type": [
                "SoftTimeLimitExceeded"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_email_chart",
            "type": [
                "grouper.models.user.User",
                "grouper.models.base.session.Session",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_soft_timeout_alert",
            "type": [
                "None"
            ]
        }
    ],
    "test_soft_timeout_csv@global": [
        {
            "category": "arg",
            "name": "csv_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_open",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "mock_urlopen",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_report_email_chart_with_csv",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "response",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_open_",
            "type": [
                "Mock"
            ]
        },
        {
            "category": "local",
            "name": "mock_urlopen_",
            "type": [
                "Mock",
                "SoftTimeLimitExceeded"
            ]
        },
        {
            "category": "local",
            "name": "create_report_email_chart_with_csv",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_soft_timeout_csv",
            "type": [
                "None"
            ]
        }
    ],
    "test_soft_timeout_screenshot@global": [
        {
            "category": "arg",
            "name": "screenshot_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "email_mock",
            "type": [
                "unittesmock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "screenshot_mock_",
            "type": [
                "SoftTimeLimitExceeded"
            ]
        },
        {
            "category": "local",
            "name": "create_alert_email_chart",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_soft_timeout_screenshot",
            "type": [
                "None"
            ]
        }
    ]
}