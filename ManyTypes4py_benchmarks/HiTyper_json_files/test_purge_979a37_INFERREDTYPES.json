{
    "_add_db_entries@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": []
        },
        {
            "category": "arg",
            "name": "timestamp",
            "type": []
        },
        {
            "category": "return",
            "name": "_add_db_entries",
            "type": [
                "None"
            ]
        }
    ],
    "_add_keep_records@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": []
        },
        {
            "category": "return",
            "name": "_add_keep_records",
            "type": [
                "None"
            ]
        }
    ],
    "_add_purge_records@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": []
        },
        {
            "category": "return",
            "name": "_add_purge_records",
            "type": [
                "None"
            ]
        }
    ],
    "_add_state_with_state_attributes@global": [
        {
            "category": "arg",
            "name": "session",
            "type": []
        },
        {
            "category": "arg",
            "name": "entity_id",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "state",
            "type": [
                "str",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "timestamp",
            "type": [
                "str",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "event_id",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "event_id",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "entity_id",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "state_attrs",
            "type": [
                "StateAttributes"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "str",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "str",
                "list"
            ]
        },
        {
            "category": "return",
            "name": "_add_state_with_state_attributes",
            "type": [
                "None"
            ]
        }
    ],
    "_add_state_without_event_linkage@global": [
        {
            "category": "arg",
            "name": "session",
            "type": []
        },
        {
            "category": "arg",
            "name": "entity_id",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "state",
            "type": [
                "str",
                "datetime.datetime",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "timestamp",
            "type": [
                "str",
                "datetime.datetime",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "entity_id",
            "type": [
                "str",
                "dict",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "state_attrs",
            "type": [
                "StateAttributes"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "str",
                "datetime.datetime",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "str",
                "datetime.datetime",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "_add_state_without_event_linkage",
            "type": [
                "None"
            ]
        }
    ],
    "_add_test_events@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "bool",
                "str",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "iterations",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "five_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "eleven_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "event_data",
            "type": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "bool",
                "str",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "iterations",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "event_type",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "_add_test_events",
            "type": [
                "None"
            ]
        }
    ],
    "_add_test_recorder_runs@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "five_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "eleven_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "return",
            "name": "_add_test_recorder_runs",
            "type": [
                "None"
            ]
        }
    ],
    "_add_test_states@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "wait_recording_done",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "five_days_ago",
            "type": [
                "datetime.timedelta",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "eleven_days_ago",
            "type": [
                "int",
                "timedelta"
            ]
        },
        {
            "category": "local",
            "name": "base_attributes",
            "type": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "int",
                "timedelta",
                "datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "attributes",
            "type": [
                "dict[typing.Text, typing.Union[bool,dict[typing.Text, typing.Union[int,typing.Text]]]]"
            ]
        },
        {
            "category": "return",
            "name": "_add_test_states",
            "type": [
                "None"
            ]
        }
    ],
    "_add_test_statistics@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.common.MockConfigEntry"
            ]
        },
        {
            "category": "local",
            "name": "five_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "eleven_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.common.MockConfigEntry"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "state",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "_add_test_statistics",
            "type": [
                "None"
            ]
        }
    ],
    "_add_test_statistics_runs@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "five_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "eleven_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "return",
            "name": "_add_test_statistics_runs",
            "type": [
                "None"
            ]
        }
    ],
    "_insert_events@global": [
        {
            "category": "local",
            "name": "event_type_test_auto_purge",
            "type": [
                "EventTypes"
            ]
        },
        {
            "category": "local",
            "name": "event_type_test_purge",
            "type": [
                "EventTypes"
            ]
        },
        {
            "category": "local",
            "name": "event_type_test",
            "type": [
                "EventTypes"
            ]
        },
        {
            "category": "local",
            "name": "event_type_unused",
            "type": [
                "EventTypes"
            ]
        },
        {
            "category": "local",
            "name": "event_type",
            "type": [
                "EventTypes"
            ]
        },
        {
            "category": "return",
            "name": "_insert_events",
            "type": []
        }
    ],
    "_insert_states@global": [
        {
            "category": "local",
            "name": "states_meta_sensor_one",
            "type": [
                "StatesMeta"
            ]
        },
        {
            "category": "local",
            "name": "states_meta_sensor_two",
            "type": [
                "StatesMeta"
            ]
        },
        {
            "category": "local",
            "name": "states_meta_sensor_three",
            "type": [
                "StatesMeta"
            ]
        },
        {
            "category": "local",
            "name": "states_meta_sensor_unused",
            "type": [
                "StatesMeta"
            ]
        },
        {
            "category": "return",
            "name": "_insert_states",
            "type": []
        }
    ],
    "_purge_entities@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": []
        },
        {
            "category": "arg",
            "name": "entity_ids",
            "type": []
        },
        {
            "category": "arg",
            "name": "domains",
            "type": []
        },
        {
            "category": "arg",
            "name": "entity_globs",
            "type": []
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, ]"
            ]
        },
        {
            "category": "return",
            "name": "_purge_entities",
            "type": [
                "None"
            ]
        }
    ],
    "assert_recorder_runs_equal@global": [
        {
            "category": "arg",
            "name": "run1",
            "type": []
        },
        {
            "category": "arg",
            "name": "run2",
            "type": []
        },
        {
            "category": "return",
            "name": "assert_recorder_runs_equal",
            "type": [
                "None"
            ]
        }
    ],
    "assert_statistic_runs_equal@global": [
        {
            "category": "arg",
            "name": "run1",
            "type": []
        },
        {
            "category": "arg",
            "name": "run2",
            "type": []
        },
        {
            "category": "return",
            "name": "assert_statistic_runs_equal",
            "type": [
                "None"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "TEST_EVENT_TYPES",
            "type": [
                "tuple[typing.Text]",
                "set",
                "str",
                "typing.Iterator"
            ]
        }
    ],
    "mock_recorder_before_hass@global": [
        {
            "category": "arg",
            "name": "async_test_recorder",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "mock_recorder_before_hass",
            "type": [
                "None"
            ]
        }
    ],
    "mock_use_sqlite@global": [
        {
            "category": "arg",
            "name": "request",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "request",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "mock_use_sqlite",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "set_state@global": [
        {
            "category": "arg",
            "name": "entity_id",
            "type": []
        },
        {
            "category": "arg",
            "name": "state",
            "type": []
        },
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "return",
            "name": "set_state",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_big_database@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "purge_before",
            "type": [
                "datetime.timedelta",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "finished",
            "type": [
                "int",
                "str",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_big_database",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_cutoff_date@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "rows",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "cutoff",
            "type": [
                "datetime.timedelta",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_cutoff_date",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_edge_case@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "use_sqlite",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "timestamp",
            "type": [
                "datetime.timedelta",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "TEST_EVENT_TYPES",
            "type": [
                "set",
                "str",
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "events",
            "type": [
                "dict[typing.Type, typing.Any]",
                "list",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_edge_case",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_entities@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "states_sensor_kept",
            "type": [
                "str",
                "bytes",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "states_meta_remain",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_entities",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_entities_keep_days@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "homeassistancore.HomeAssistant",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "homeassistancore.HomeAssistant",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "two_days_ago",
            "type": [
                "datetime.datetime",
                "datetime.datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "one_week_ago",
            "type": [
                "datetime.timedelta",
                "datetime.datetime",
                "datetime.date"
            ]
        },
        {
            "category": "local",
            "name": "one_month_ago",
            "type": [
                "datetime.date",
                "datetime.datetime",
                "datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_entities_keep_days",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_filtered_events@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.components.withings.common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "events_purge",
            "type": [
                "str",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_filtered_events",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_filtered_events_state_changed@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "events_keep",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "events_purge",
            "type": [
                "str",
                "list",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_filtered_events_state_changed",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_filtered_states@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "typing.Callable",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "use_sqlite",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "typing.Callable",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "events_keep",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "states_sensor_excluded",
            "type": [
                "list[str]",
                "list[tuple[typing.Union[str,bool]]]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "final_keep_state",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "remaining",
            "type": [
                "list"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_filtered_states",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_filtered_states_multiple_rounds@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "tests.setup.SetupTest",
                "homeassistancore.HomeAssistant",
                "backup.util.GlobalInfo"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "events_keep",
            "type": [
                "str",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "caplog",
            "type": [
                "tests.setup.SetupTest",
                "homeassistancore.HomeAssistant",
                "backup.util.GlobalInfo"
            ]
        },
        {
            "category": "local",
            "name": "states_sensor_excluded",
            "type": [
                "list[str]",
                "list[tuple[typing.Union[str,bool]]]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "final_keep_state",
            "type": [
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_filtered_states_multiple_rounds",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_filtered_states_to_empty@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "use_sqlite",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_filtered_states_to_empty",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_many_old_events@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "old_events_count",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "TEST_EVENT_TYPES",
            "type": [
                "set",
                "str",
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "events",
            "type": [
                "dict[typing.Type, typing.Any]",
                "list[dict[str, typing.Any]]",
                "dict[str, typing.Union[typing.Any,str]]"
            ]
        },
        {
            "category": "local",
            "name": "purge_before",
            "type": [
                "datetime.datetime.timedelta",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "finished",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_many_old_events",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_method@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "homeassistancore.HomeAssistant",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "use_sqlite",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "TEST_EVENT_TYPES",
            "type": [
                "set",
                "str",
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "events",
            "type": [
                "dict[typing.Type, typing.Any]",
                "list",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "statistics_runs",
            "type": [
                "str",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "statistic_runs_before_purge",
            "type": [
                "list[panda3d.core.NodePath]"
            ]
        },
        {
            "category": "local",
            "name": "itm",
            "type": [
                "panda3d.core.NodePath"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_method",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_events@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "TEST_EVENT_TYPES",
            "type": [
                "set",
                "str",
                "typing.Iterator"
            ]
        },
        {
            "category": "local",
            "name": "events",
            "type": [
                "dict[typing.Type, typing.Any]",
                "list",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "purge_before",
            "type": [
                "datetime.timedelta",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "finished",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "all_events",
            "type": [
                "list",
                "dict[str, typing.Any]",
                "Events"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_events",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_events_purges_the_event_type_ids@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "five_days_ago",
            "type": [
                "int",
                "datetime.datetime",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "eleven_days_ago",
            "type": [
                "int",
                "datetime.datetime",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "far_past",
            "type": [
                "int",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "events",
            "type": [
                "list[dict[str, typing.Any]]",
                "str",
                "dict[str, typing.Union[typing.Any,str]]"
            ]
        },
        {
            "category": "local",
            "name": "event_types",
            "type": [
                "str",
                "None",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "finished",
            "type": [
                "bool",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_events_purges_the_event_type_ids",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_recorder_runs@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_recorder_runs",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_states@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "events",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "purge_before",
            "type": [
                "datetime.timedelta",
                "datetime.datetime",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "finished",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "states_after_purge",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "state_map_by_state",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "dontpurgeme_5",
            "type": [
                "str",
                "dict",
                "tuple[typing.Optional[typing.Literal]]"
            ]
        },
        {
            "category": "local",
            "name": "dontpurgeme_4",
            "type": [
                "str",
                "tuple[typing.Optional[typing.Literal]]",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_states",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_states_encounters_operational_error@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": []
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "exception",
            "type": [
                "OperationalError"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_states_encounters_operational_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_states_encounters_temporary_mysql_error@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "local",
            "name": "mysql_exception",
            "type": [
                "OperationalError"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_states_encounters_temporary_mysql_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_states_encouters_database_corruption@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "sqlite3_exception",
            "type": [
                "DatabaseError"
            ]
        },
        {
            "category": "local",
            "name": "sqlite3_exception_",
            "type": [
                "DatabaseError"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_states_encouters_database_corruption",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_states_purges_the_state_metadata_ids@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "five_days_ago",
            "type": [
                "int",
                "datetime.datetime",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "eleven_days_ago",
            "type": [
                "int",
                "datetime.datetime",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "far_past",
            "type": [
                "int",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock",
                "homeassistancore.HomeAssistant"
            ]
        },
        {
            "category": "local",
            "name": "states",
            "type": [
                "str",
                "dict[str, typing.Any]",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "states_meta",
            "type": [
                "dict",
                "int",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "finished",
            "type": [
                "bool",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_states_purges_the_state_metadata_ids",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_old_statistics_runs@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "recorder_mock",
            "type": [
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_old_statistics_runs",
            "type": [
                "None"
            ]
        }
    ],
    "test_purge_without_state_attributes_filtered_states_to_empty@global": [
        {
            "category": "arg",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "arg",
            "name": "recorder_mock",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]",
                "typing.Callable[List,bool, None]"
            ]
        },
        {
            "category": "arg",
            "name": "use_sqlite",
            "type": [
                "tests.setup.SetupTest",
                "typing.Generator[typing.Optional[typing.Any]]",
                "typing.Callable[List,bool, None]"
            ]
        },
        {
            "category": "local",
            "name": "service_data",
            "type": [
                "dict[typing.Text, int]"
            ]
        },
        {
            "category": "local",
            "name": "hass",
            "type": [
                "homeassistancore.HomeAssistant",
                "common.ComponentFactory"
            ]
        },
        {
            "category": "return",
            "name": "test_purge_without_state_attributes_filtered_states_to_empty",
            "type": [
                "None"
            ]
        }
    ]
}