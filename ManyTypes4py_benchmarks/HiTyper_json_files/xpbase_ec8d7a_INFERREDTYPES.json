{
    "__eq__@Experiment": [
        {
            "category": "arg",
            "name": "other",
            "type": [
                "float",
                "tuple[int]"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "float",
                "tuple[int]"
            ]
        },
        {
            "category": "return",
            "name": "__eq__",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "seed",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "same_seed",
            "type": [
                "bool"
            ]
        }
    ],
    "__eq__@OptimizerSettings": [
        {
            "category": "arg",
            "name": "other",
            "type": [
                "nevergrad.common.Any",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "other",
            "type": [
                "nevergrad.common.Any",
                "T",
                "self_@___class__"
            ]
        },
        {
            "category": "local",
            "name": "settings",
            "type": [
                "OptimizerSettings",
                "self_@___class__"
            ]
        },
        {
            "category": "local",
            "name": "x",
            "type": [
                "list[int]",
                "numpy.ndarray",
                "dict[int, int]"
            ]
        },
        {
            "category": "local",
            "name": "y",
            "type": [
                "dict[int, int]",
                "list[int]",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "__eq__",
            "type": [
                "bool"
            ]
        }
    ],
    "__init__@Experiment": [
        {
            "category": "arg",
            "name": "function",
            "type": [
                "bool",
                "dict[str, numpy.ndarray]",
                "None",
                "numpy.ndarray"
            ]
        },
        {
            "category": "arg",
            "name": "optimizer",
            "type": [
                "int",
                "typing.Callable",
                "float"
            ]
        },
        {
            "category": "arg",
            "name": "budget",
            "type": [
                "int",
                "typing.Callable",
                "float"
            ]
        },
        {
            "category": "arg",
            "name": "num_workers",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "batch_mode",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "seed",
            "type": [
                "None",
                "bytes",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "constraint_violation",
            "type": [
                "None",
                "list[str]",
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "arg",
            "name": "penalize_violation_at_test",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "suggestions",
            "type": [
                "None",
                "bool",
                "typing.Type",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "penalize_violation_at_test",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "suggestions",
            "type": [
                "None",
                "bool",
                "typing.Type",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "function",
            "type": [
                "bool",
                "dict[str, numpy.ndarray]",
                "None",
                "numpy.ndarray"
            ]
        },
        {
            "category": "local",
            "name": "constraint_violation",
            "type": [
                "None",
                "list[str]",
                "dict[str, typing.Any]",
                "dict[str, int]"
            ]
        },
        {
            "category": "local",
            "name": "seed",
            "type": [
                "None",
                "bytes",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "optimizer",
            "type": [
                "int",
                "typing.Callable",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "num_workers",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "budget",
            "type": [
                "int",
                "typing.Callable",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "batch_mode",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "optimsettings",
            "type": [
                "OptimizerSettings"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "dict[typing.Text, typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "_optimizer",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "__init__",
            "type": [
                "None"
            ]
        }
    ],
    "__init__@OptimizerSettings": [
        {
            "category": "arg",
            "name": "optimizer",
            "type": [
                "int",
                "torch.optim.Optimizer"
            ]
        },
        {
            "category": "arg",
            "name": "budget",
            "type": [
                "int",
                "base.ConfiguredOptimizer",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "num_workers",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "batch_mode",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "_setting_names",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "optimizer",
            "type": [
                "int",
                "torch.optim.Optimizer",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "budget",
            "type": [
                "int",
                "base.ConfiguredOptimizer",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "num_workers",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "batch_mode",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "__init__",
            "type": [
                "None"
            ]
        }
    ],
    "__repr__@Experiment": [
        {
            "category": "return",
            "name": "__repr__",
            "type": [
                "typing.Text"
            ]
        }
    ],
    "__repr__@OptimizerSettings": [
        {
            "category": "return",
            "name": "__repr__",
            "type": [
                "typing.Text"
            ]
        }
    ],
    "_assert_singleobjective_callback@global": [
        {
            "category": "arg",
            "name": "optimizer",
            "type": [
                "float",
                "dict[str, typing.Any]",
                "rl_algorithms.common.networks.brain.Brain"
            ]
        },
        {
            "category": "arg",
            "name": "candidate",
            "type": [
                "nevergrad.parametrization.parameter.Parameter"
            ]
        },
        {
            "category": "arg",
            "name": "loss",
            "type": [
                "float",
                "tuple[torch.Tensor]",
                "rl_algorithms.common.networks.brain.Brain"
            ]
        },
        {
            "category": "local",
            "name": "optimizer",
            "type": [
                "float",
                "dict[str, typing.Any]",
                "rl_algorithms.common.networks.brain.Brain"
            ]
        },
        {
            "category": "local",
            "name": "loss",
            "type": [
                "float",
                "tuple[torch.Tensor]",
                "rl_algorithms.common.networks.brain.Brain"
            ]
        },
        {
            "category": "return",
            "name": "_assert_singleobjective_callback",
            "type": [
                "None"
            ]
        }
    ],
    "_get_factory@OptimizerSettings": [
        {
            "category": "local",
            "name": "optimizer",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "_get_factory",
            "type": []
        }
    ],
    "_log_results@Experiment": [
        {
            "category": "arg",
            "name": "pfunc",
            "type": [
                "numpy.ndarray",
                "collections.abc.Awaitable[T]",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "t0",
            "type": [
                "float",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "num_calls",
            "type": [
                "int",
                "typing.Callable[int, int]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "t0",
            "type": [
                "float",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "pfunc",
            "type": [
                "numpy.ndarray",
                "collections.abc.Awaitable[T]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "num_calls",
            "type": [
                "int",
                "typing.Callable[int, int]",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "_log_results",
            "type": [
                "None"
            ]
        }
    ],
    "_run_with_error@Experiment": [
        {
            "category": "arg",
            "name": "callbacks",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "_optimizer",
            "type": [
                "tuple[tuple[typing.Literal]]",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "pfunc",
            "type": [
                "list",
                "int",
                "tuple[typing.Literal]"
            ]
        },
        {
            "category": "local",
            "name": "pfunc_",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "callbacks",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "suggestions",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "e",
            "type": [
                "Exception"
            ]
        },
        {
            "category": "return",
            "name": "_run_with_error",
            "type": [
                "None"
            ]
        }
    ],
    "batch_mode@OptimizerSettings": [
        {
            "category": "return",
            "name": "batch_mode",
            "type": []
        }
    ],
    "create_seed_generator@global": [
        {
            "category": "arg",
            "name": "seed",
            "type": [
                "int",
                "None",
                "collections.abc.AsyncGenerator"
            ]
        },
        {
            "category": "local",
            "name": "seed",
            "type": [
                "int",
                "None",
                "collections.abc.AsyncGenerator"
            ]
        },
        {
            "category": "local",
            "name": "generator",
            "type": [
                "None",
                "typing.Iterator"
            ]
        },
        {
            "category": "return",
            "name": "create_seed_generator",
            "type": [
                "typing.Generator[None]"
            ]
        }
    ],
    "get_description@Experiment": [
        {
            "category": "local",
            "name": "seed",
            "type": [
                "None"
            ]
        },
        {
            "category": "local",
            "name": "summary",
            "type": [
                "set",
                "dict[str, str]",
                "typing.Type"
            ]
        },
        {
            "category": "return",
            "name": "get_description",
            "type": [
                "set",
                "dict[str, str]",
                "typing.Type"
            ]
        }
    ],
    "get_description@OptimizerSettings": [
        {
            "category": "local",
            "name": "descr",
            "type": [
                "dict",
                "dict[typing.Text, ]"
            ]
        },
        {
            "category": "return",
            "name": "get_description",
            "type": [
                "dict[typing.Text, ]"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "registry",
            "type": [
                "dict[str, typing.Type]",
                "entity_framework.storages.sqlalchemy.registry.SaRegistry",
                "registry.Registry"
            ]
        }
    ],
    "instantiate@OptimizerSettings": [
        {
            "category": "arg",
            "name": "parametrization",
            "type": [
                "nevergrad.parametrization.parameter.Parameter",
                "int",
                "float"
            ]
        },
        {
            "category": "return",
            "name": "instantiate",
            "type": [
                "int",
                "str",
                "numpy.ndarray"
            ]
        }
    ],
    "is_incoherent@Experiment": [
        {
            "category": "return",
            "name": "is_incoherent",
            "type": []
        }
    ],
    "is_incoherent@OptimizerSettings": [
        {
            "category": "return",
            "name": "is_incoherent",
            "type": [
                "bool"
            ]
        }
    ],
    "name@OptimizerSettings": [
        {
            "category": "return",
            "name": "name",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "optimizer",
            "type": [
                "str"
            ]
        }
    ],
    "run@Experiment": [
        {
            "category": "local",
            "name": "ex",
            "type": [
                "Exception"
            ]
        },
        {
            "category": "local",
            "name": "e",
            "type": [
                "Exception"
            ]
        },
        {
            "category": "return",
            "name": "run",
            "type": [
                "str"
            ]
        }
    ]
}