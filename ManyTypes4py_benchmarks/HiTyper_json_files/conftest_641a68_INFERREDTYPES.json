{
    "_split_scope@FixtureScheduler": [
        {
            "category": "arg",
            "name": "nodeid",
            "type": [
                "str",
                "\"Node\""
            ]
        },
        {
            "category": "local",
            "name": "nodeid",
            "type": [
                "str",
                "\"Node\""
            ]
        },
        {
            "category": "local",
            "name": "exchange_id",
            "type": [
                "str"
            ]
        },
        {
            "category": "return",
            "name": "_split_scope",
            "type": [
                "str",
                "\"Node\""
            ]
        },
        {
            "category": "local",
            "name": "e",
            "type": [
                "Exception"
            ]
        }
    ],
    "add_trade@global": [
        {
            "category": "arg",
            "name": "trade",
            "type": []
        },
        {
            "category": "return",
            "name": "add_trade",
            "type": [
                "None"
            ]
        }
    ],
    "buy_order_fee@global": [
        {
            "category": "return",
            "name": "buy_order_fee",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float,None]]"
            ]
        }
    ],
    "create_mock_trades@global": [
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "typing.Iterable['Event']"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "use_db",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "is_short1",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "is_short2",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "typing.Iterable['Event']"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade"
            ]
        },
        {
            "category": "local",
            "name": "use_db",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "create_mock_trades",
            "type": [
                "None"
            ]
        }
    ],
    "create_mock_trades_usdt@global": [
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "\"Cash\"",
                "typing.Iterable['Event']"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "use_db",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "is_short1",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "is_short2",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "\"Cash\"",
                "typing.Iterable['Event']"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[dict[str, int]]"
            ]
        },
        {
            "category": "local",
            "name": "use_db",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "create_mock_trades_usdt",
            "type": [
                "None"
            ]
        }
    ],
    "create_mock_trades_with_leverage@global": [
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "\"Cash\"",
                "freqtrade.persistence.Trade",
                "recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "use_db",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "use_db",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "\"Cash\"",
                "freqtrade.persistence.Trade",
                "recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade"
            ]
        },
        {
            "category": "return",
            "name": "create_mock_trades_with_leverage",
            "type": [
                "None"
            ]
        }
    ],
    "dataframe_1m@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": [
                "pathlib.Path"
            ]
        },
        {
            "category": "local",
            "name": "testdatadir",
            "type": [
                "pathlib.Path"
            ]
        },
        {
            "category": "return",
            "name": "dataframe_1m",
            "type": []
        }
    ],
    "default_conf@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "testdatadir",
            "type": [
                "str",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "default_conf",
            "type": [
                "str",
                "dict",
                "types.Config"
            ]
        }
    ],
    "default_conf_usdt@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "testdatadir",
            "type": [
                "str",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "default_conf_usdt",
            "type": [
                "str",
                "dict",
                "types.Config"
            ]
        }
    ],
    "edge_conf@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "typing.OrderedDict"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "typing.OrderedDict"
            ]
        },
        {
            "category": "local",
            "name": "conf",
            "type": [
                "str",
                "dict",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "edge_conf",
            "type": []
        }
    ],
    "fee@global": [
        {
            "category": "return",
            "name": "fee",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "fetch_trades_result@global": [
        {
            "category": "return",
            "name": "fetch_trades_result",
            "type": [
                "list[dict[typing.Text, typing.Union[list[typing.Union[typing.Text,int]],int,typing.Text,None,float]]]"
            ]
        }
    ],
    "funding_rate_history_hourly@global": [
        {
            "category": "return",
            "name": "funding_rate_history_hourly",
            "type": [
                "list[dict[typing.Text, typing.Union[typing.Text,float,int]]]"
            ]
        }
    ],
    "funding_rate_history_octohourly@global": [
        {
            "category": "return",
            "name": "funding_rate_history_octohourly",
            "type": [
                "list[dict[typing.Text, typing.Union[typing.Text,float,int]]]"
            ]
        }
    ],
    "generate_test_data@global": [
        {
            "category": "arg",
            "name": "timeframe",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "size",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "start",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "arg",
            "name": "random_seed",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "random_seed",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "size",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "base",
            "type": [
                "list",
                "list[float]",
                "typing.Callable[, str]"
            ]
        },
        {
            "category": "local",
            "name": "timeframe",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "start",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "tf_mins",
            "type": [
                "datetime.timedelta",
                "datetime.datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "tf_secs",
            "type": [
                "dict",
                "float",
                "list[tuple[typing.Union[str,bytes]]]"
            ]
        },
        {
            "category": "return",
            "name": "generate_test_data",
            "type": []
        }
    ],
    "generate_test_data_raw@global": [
        {
            "category": "arg",
            "name": "timeframe",
            "type": [
                "float",
                "datetime.timedelta"
            ]
        },
        {
            "category": "arg",
            "name": "size",
            "type": [
                "float",
                "datetime.timedelta"
            ]
        },
        {
            "category": "arg",
            "name": "start",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "arg",
            "name": "random_seed",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "timeframe",
            "type": [
                "float",
                "datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "size",
            "type": [
                "float",
                "datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "start",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "random_seed",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "df",
            "type": [
                "pandas.DataFrame"
            ]
        },
        {
            "category": "return",
            "name": "generate_test_data_raw",
            "type": [
                "list[list]"
            ]
        }
    ],
    "generate_trades_history@global": [
        {
            "category": "arg",
            "name": "n_rows",
            "type": [
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "start_date",
            "type": [
                "None",
                "int",
                "datetime.datetime.datetime",
                "datetime.timedelta"
            ]
        },
        {
            "category": "arg",
            "name": "days",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "start_date",
            "type": [
                "None",
                "int",
                "datetime.datetime.datetime",
                "datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "days",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "end_date",
            "type": [
                "datetime.datetime.timedelta",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "_start_timestamp",
            "type": [
                "float",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "_end_timestamp",
            "type": [
                "datetime.datetime",
                "datetime.time"
            ]
        },
        {
            "category": "local",
            "name": "n_rows",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "random_timestamps_in_seconds",
            "type": [
                "int",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "trade_id",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "side",
            "type": [
                "list",
                "list[int]",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "initial_price",
            "type": [
                "float"
            ]
        },
        {
            "category": "local",
            "name": "price_changes",
            "type": [
                "int",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "amount",
            "type": [
                "int",
                "float",
                "list[int]"
            ]
        },
        {
            "category": "local",
            "name": "cost",
            "type": [
                "float"
            ]
        },
        {
            "category": "local",
            "name": "df",
            "type": [
                "pandas.DataFrame",
                "list[tuple[typing.Union[int,float]]]",
                "dict[datetime.date, dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "generate_trades_history",
            "type": [
                "pandas.DataFrame",
                "list[tuple[typing.Union[int,float]]]",
                "dict[datetime.date, dict[str, typing.Any]]"
            ]
        }
    ],
    "get_args@global": [
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "get_args",
            "type": [
                "str",
                "None",
                "typing.Callable[mypy.plugin.FunctionContext, mypy.types.Type]",
                "typing.Sequence[str]"
            ]
        }
    ],
    "get_default_conf@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": [
                "str",
                "pathlib.Path",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "testdatadir",
            "type": [
                "str",
                "pathlib.Path",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "CURRENT_TEST_STRATEGY",
            "type": [
                "pathlib.Path",
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "configuration",
            "type": [
                "dict[typing.Text, typing.Union[int,typing.Text,float,dict[typing.Text, typing.Union[float,bool,dict[typing.Text, bool]]],dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]],list[dict[typing.Text, typing.Text]],dict[typing.Text, typing.Union[bool,typing.Text,dict]],Path]]"
            ]
        },
        {
            "category": "return",
            "name": "get_default_conf",
            "type": [
                "dict[typing.Text, typing.Union[int,typing.Text,float,dict[typing.Text, typing.Union[float,bool,dict[typing.Text, bool]]],dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]],list[dict[typing.Text, typing.Text]],dict[typing.Text, typing.Union[bool,typing.Text,dict]],Path]]"
            ]
        }
    ],
    "get_default_conf_usdt@global": [
        {
            "category": "arg",
            "name": "testdatadir",
            "type": [
                "str",
                "None",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "testdatadir",
            "type": [
                "str",
                "None",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "configuration",
            "type": [
                "dict",
                "dict[str, typing.Union[int,str,typing.Any]]",
                "dict[str, typing.Union[int,str,typing.Any,float,dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]]]]"
            ]
        },
        {
            "category": "return",
            "name": "get_default_conf_usdt",
            "type": [
                "dict[str, typing.Union[int,str,typing.Any,float,dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]]]]"
            ]
        }
    ],
    "get_markets@global": [
        {
            "category": "return",
            "name": "get_markets",
            "type": [
                "str",
                "dict",
                "dict[str, dict]"
            ]
        }
    ],
    "get_mock_coro@global": [
        {
            "category": "arg",
            "name": "return_value",
            "type": [
                "None",
                "bool",
                "str",
                "typing.Callable[typing.Any, bool]"
            ]
        },
        {
            "category": "arg",
            "name": "side_effect",
            "type": [
                "None",
                "bool",
                "str",
                "typing.Callable[typing.Any, bool]"
            ]
        },
        {
            "category": "return",
            "name": "get_mock_coro",
            "type": [
                "Mock"
            ]
        }
    ],
    "get_patched_exchange@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.common.MockConfigEntry",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "config",
            "type": []
        },
        {
            "category": "arg",
            "name": "api_mock",
            "type": [
                "None",
                "unittesmock.MagicMock",
                "tests.common.MockConfigEntry",
                "list"
            ]
        },
        {
            "category": "arg",
            "name": "exchange",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "arg",
            "name": "mock_markets",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "mock_supported_modes",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.common.MockConfigEntry",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "api_mock",
            "type": [
                "None",
                "unittesmock.MagicMock",
                "tests.common.MockConfigEntry",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "exchange",
            "type": [
                "typing.Text",
                "Exchange"
            ]
        },
        {
            "category": "local",
            "name": "mock_markets",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mock_supported_modes",
            "type": [
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "get_patched_exchange",
            "type": [
                "Exchange"
            ]
        }
    ],
    "get_patched_freqtradebot@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "dict[str, str]",
                "pathlib.Path",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "config",
            "type": [
                "list[str]",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "dict[str, str]",
                "pathlib.Path",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "list[str]",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "get_patched_freqtradebot",
            "type": [
                "FreqtradeBot"
            ]
        }
    ],
    "get_patched_worker@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "pathlib.Path",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "config",
            "type": [
                "tests.utils.CliObjectRunner",
                "list[str]",
                "None",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "pathlib.Path",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "tests.utils.CliObjectRunner",
                "list[str]",
                "None",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "get_patched_worker",
            "type": [
                "Worker"
            ]
        }
    ],
    "global@global": [
        {
            "category": "local",
            "name": "CURRENT_TEST_STRATEGY",
            "type": [
                "typing.Text",
                "pathlib.Path",
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "TRADE_SIDES",
            "type": [
                "tuple[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "EXMS",
            "type": [
                "typing.Text",
                "str",
                "typing.Callable[None, typing.Any]",
                "dict[str, typing.Union[int,str]]"
            ]
        }
    ],
    "import_fails@global": [
        {
            "category": "return",
            "name": "import_fails",
            "type": [
                "typing.Generator"
            ]
        }
    ],
    "init_persistence@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "dict",
                "str",
                "pathlib.Path"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "dict",
                "str",
                "pathlib.Path"
            ]
        },
        {
            "category": "return",
            "name": "init_persistence",
            "type": [
                "None"
            ]
        }
    ],
    "is_arm@global": [
        {
            "category": "return",
            "name": "is_arm",
            "type": [
                "bool"
            ]
        }
    ],
    "is_mac@global": [
        {
            "category": "return",
            "name": "is_mac",
            "type": [
                "bool"
            ]
        }
    ],
    "leverage_tiers@global": [
        {
            "category": "return",
            "name": "leverage_tiers",
            "type": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[int,float]]]]"
            ]
        }
    ],
    "limit_buy_order_canceled_empty@global": [
        {
            "category": "arg",
            "name": "request",
            "type": []
        },
        {
            "category": "return",
            "name": "limit_buy_order_canceled_empty",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,None,float,dict[typing.Text, typing.Union[float,None,typing.Text]],list]]",
                "dict[typing.Text, typing.Union[dict,typing.Text,None,float]]"
            ]
        }
    ],
    "limit_buy_order_old@global": [
        {
            "category": "return",
            "name": "limit_buy_order_old",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "limit_buy_order_old_partial@global": [
        {
            "category": "return",
            "name": "limit_buy_order_old_partial",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "limit_buy_order_old_partial_canceled@global": [
        {
            "category": "arg",
            "name": "limit_buy_order_old_partial",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "limit_buy_order_old_partial",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "limit_buy_order_old_partial_canceled",
            "type": []
        }
    ],
    "limit_buy_order_open@global": [
        {
            "category": "return",
            "name": "limit_buy_order_open",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "limit_buy_order_usdt@global": [
        {
            "category": "arg",
            "name": "limit_buy_order_usdt_open",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "limit_buy_order_usdt_open",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "order",
            "type": [
                "Order"
            ]
        },
        {
            "category": "return",
            "name": "limit_buy_order_usdt",
            "type": [
                "Order"
            ]
        }
    ],
    "limit_buy_order_usdt_open@global": [
        {
            "category": "return",
            "name": "limit_buy_order_usdt_open",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "limit_order@global": [
        {
            "category": "arg",
            "name": "limit_buy_order_usdt",
            "type": [
                "int",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "arg",
            "name": "limit_sell_order_usdt",
            "type": [
                "int",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "limit_buy_order_usdt",
            "type": [
                "int",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "local",
            "name": "limit_sell_order_usdt",
            "type": [
                "int",
                "None",
                "datetime.datetime"
            ]
        },
        {
            "category": "return",
            "name": "limit_order",
            "type": [
                "dict[typing.Text, typing.Union[int,None,datetime.datetime]]"
            ]
        }
    ],
    "limit_order_open@global": [
        {
            "category": "arg",
            "name": "limit_buy_order_usdt_open",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "limit_sell_order_usdt_open",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "limit_buy_order_usdt_open",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "limit_sell_order_usdt_open",
            "type": [
                "int",
                "str",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "limit_order_open",
            "type": [
                "dict[typing.Text, typing.Union[int,str,None]]"
            ]
        }
    ],
    "limit_sell_order@global": [
        {
            "category": "arg",
            "name": "limit_sell_order_open",
            "type": [
                "int",
                "None",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "limit_sell_order_open",
            "type": [
                "int",
                "None",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "order",
            "type": [
                "Order"
            ]
        },
        {
            "category": "return",
            "name": "limit_sell_order",
            "type": [
                "Order"
            ]
        }
    ],
    "limit_sell_order_old@global": [
        {
            "category": "return",
            "name": "limit_sell_order_old",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "limit_sell_order_open@global": [
        {
            "category": "return",
            "name": "limit_sell_order_open",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "limit_sell_order_usdt@global": [
        {
            "category": "arg",
            "name": "limit_sell_order_usdt_open",
            "type": [
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "limit_sell_order_usdt_open",
            "type": [
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "order",
            "type": [
                "Order"
            ]
        },
        {
            "category": "return",
            "name": "limit_sell_order_usdt",
            "type": [
                "Order"
            ]
        }
    ],
    "limit_sell_order_usdt_open@global": [
        {
            "category": "return",
            "name": "limit_sell_order_usdt_open",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "log_has@global": [
        {
            "category": "arg",
            "name": "line",
            "type": [
                "str",
                "typing.Iterable[bytes]"
            ]
        },
        {
            "category": "arg",
            "name": "logs",
            "type": [
                "str",
                "typing.Iterable[bytes]"
            ]
        },
        {
            "category": "local",
            "name": "logs",
            "type": [
                "str",
                "typing.Iterable[bytes]"
            ]
        },
        {
            "category": "local",
            "name": "line",
            "type": [
                "str",
                "typing.Iterable[bytes]"
            ]
        },
        {
            "category": "return",
            "name": "log_has",
            "type": [
                "bool"
            ]
        }
    ],
    "log_has_re@global": [
        {
            "category": "arg",
            "name": "line",
            "type": [
                "str",
                "dict[str, int]",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "logs",
            "type": [
                "str",
                "dict[str, int]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "logs",
            "type": [
                "str",
                "dict[str, int]",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "line",
            "type": [
                "str",
                "dict[str, int]",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "log_has_re",
            "type": [
                "bool"
            ]
        }
    ],
    "log_has_when@global": [
        {
            "category": "arg",
            "name": "line",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "logs",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "when",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "logs",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "when",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "line",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "log_has_when",
            "type": [
                "bool"
            ]
        }
    ],
    "mark_ohlcv@global": [
        {
            "category": "return",
            "name": "mark_ohlcv",
            "type": [
                "list[list[typing.Union[int,float]]]"
            ]
        }
    ],
    "market_buy_order_usdt@global": [
        {
            "category": "return",
            "name": "market_buy_order_usdt",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "market_buy_order_usdt_doublefee@global": [
        {
            "category": "arg",
            "name": "market_buy_order_usdt",
            "type": [
                "freqtrade.persistence.Trade",
                "str",
                "None",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "market_buy_order_usdt",
            "type": [
                "freqtrade.persistence.Trade",
                "str",
                "None",
                "float"
            ]
        },
        {
            "category": "return",
            "name": "market_buy_order_usdt_doublefee",
            "type": []
        }
    ],
    "market_sell_order_usdt@global": [
        {
            "category": "return",
            "name": "market_sell_order_usdt",
            "type": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ]
        }
    ],
    "markets@global": [
        {
            "category": "return",
            "name": "markets",
            "type": [
                "str"
            ]
        }
    ],
    "markets_empty@global": [
        {
            "category": "return",
            "name": "markets_empty",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "markets_static@global": [
        {
            "category": "local",
            "name": "static_markets",
            "type": [
                "list[typing.Text]"
            ]
        },
        {
            "category": "local",
            "name": "all_markets",
            "type": [
                "dict",
                "str",
                "dict[str, dict[str, str]]"
            ]
        },
        {
            "category": "local",
            "name": "m",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "markets_static",
            "type": [
                "dict[typing.Text, typing.Union[str,dict[str, str]]]"
            ]
        }
    ],
    "mock_coro@global": [
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "local",
            "name": "side_effect",
            "type": [
                "list"
            ]
        },
        {
            "category": "local",
            "name": "effect",
            "type": [
                "list",
                "Exception"
            ]
        },
        {
            "category": "return",
            "name": "mock_coro",
            "type": [
                "list",
                "Exception"
            ]
        }
    ],
    "mockedimport@global": [
        {
            "category": "arg",
            "name": "name",
            "type": []
        },
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "return",
            "name": "mockedimport",
            "type": []
        }
    ],
    "num_log_has@global": [
        {
            "category": "arg",
            "name": "line",
            "type": [
                "str",
                "typing.TextIO",
                "list[str]"
            ]
        },
        {
            "category": "arg",
            "name": "logs",
            "type": [
                "str",
                "typing.TextIO",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "logs",
            "type": [
                "str",
                "typing.TextIO",
                "list[str]"
            ]
        },
        {
            "category": "local",
            "name": "line",
            "type": [
                "str",
                "typing.TextIO",
                "list[str]"
            ]
        },
        {
            "category": "return",
            "name": "num_log_has",
            "type": [
                "bool"
            ]
        }
    ],
    "num_log_has_re@global": [
        {
            "category": "arg",
            "name": "line",
            "type": [
                "str",
                "typing.Iterable[bytes]",
                "T"
            ]
        },
        {
            "category": "arg",
            "name": "logs",
            "type": [
                "str",
                "typing.Iterable[bytes]",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "logs",
            "type": [
                "str",
                "typing.Iterable[bytes]",
                "T"
            ]
        },
        {
            "category": "local",
            "name": "line",
            "type": [
                "str",
                "typing.Iterable[bytes]",
                "T"
            ]
        },
        {
            "category": "return",
            "name": "num_log_has_re",
            "type": [
                "bool"
            ]
        }
    ],
    "ohlcv_history@global": [
        {
            "category": "arg",
            "name": "ohlcv_history_list",
            "type": [
                "str",
                "list[str]",
                "dict[str, object]"
            ]
        },
        {
            "category": "local",
            "name": "ohlcv_history_list",
            "type": [
                "str",
                "list[str]",
                "dict[str, object]"
            ]
        },
        {
            "category": "return",
            "name": "ohlcv_history",
            "type": [
                "numpy.ndarray",
                "typing.Iterable[str]"
            ]
        }
    ],
    "ohlcv_history_list@global": [
        {
            "category": "return",
            "name": "ohlcv_history_list",
            "type": [
                "list[list[typing.Union[int,float]]]"
            ]
        }
    ],
    "open_trade@global": [
        {
            "category": "local",
            "name": "trade",
            "type": [
                "Trade"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "list[Order]"
            ]
        },
        {
            "category": "return",
            "name": "open_trade",
            "type": [
                "Trade"
            ]
        }
    ],
    "open_trade_usdt@global": [
        {
            "category": "local",
            "name": "trade",
            "type": [
                "Trade"
            ]
        },
        {
            "category": "local",
            "name": "trade_",
            "type": [
                "list[Order]"
            ]
        },
        {
            "category": "return",
            "name": "open_trade_usdt",
            "type": [
                "Trade"
            ]
        }
    ],
    "order_book_l2@global": [
        {
            "category": "return",
            "name": "order_book_l2",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "order_book_l2_usd@global": [
        {
            "category": "return",
            "name": "order_book_l2_usd",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "patch_coingecko@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "experimental.util.alice.alice_pb2.RunRequest",
                "experimental.util.alice.alice_pb2_grpc.LedgerStub"
            ]
        },
        {
            "category": "local",
            "name": "tickermock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "listmock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "patch_coingecko",
            "type": [
                "None"
            ]
        }
    ],
    "patch_edge@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "patch_edge",
            "type": [
                "None"
            ]
        }
    ],
    "patch_exchange@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "api_mock",
            "type": [
                "None",
                "kata.data.io.network.GithubApi",
                "int",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "exchange",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "arg",
            "name": "mock_markets",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "mock_supported_modes",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "EXMS",
            "type": [
                "str",
                "typing.Callable[None, typing.Any]",
                "dict[str, typing.Union[int,str]]",
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "exchange",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "mock_markets",
            "type": [
                "bool",
                "dict[str, tuple[typing.Union[str,typing.Any]]]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mock_supported_modes",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "api_mock",
            "type": [
                "None",
                "kata.data.io.network.GithubApi",
                "int",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "patch_exchange",
            "type": [
                "None"
            ]
        }
    ],
    "patch_freqtradebot@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "config",
            "type": [
                "tests.utils.CliObjectRunner",
                "pathlib.Path",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "unittesmock.Mock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "tests.utils.CliObjectRunner",
                "pathlib.Path",
                "unittesmock.Mock"
            ]
        },
        {
            "category": "return",
            "name": "patch_freqtradebot",
            "type": [
                "None"
            ]
        }
    ],
    "patch_gc@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "patch_gc",
            "type": [
                "None"
            ]
        }
    ],
    "patch_get_signal@global": [
        {
            "category": "arg",
            "name": "freqtrade",
            "type": [
                "bool",
                "dict[tuple[str], Exception]",
                "list[tuple[str]]"
            ]
        },
        {
            "category": "arg",
            "name": "enter_long",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "exit_long",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "enter_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "exit_short",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "enter_tag",
            "type": [
                "None",
                "bool",
                "tuple"
            ]
        },
        {
            "category": "arg",
            "name": "exit_tag",
            "type": [
                "None",
                "bool",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "freqtrade_",
            "type": [
                "typing.Callable"
            ]
        },
        {
            "category": "return",
            "name": "patch_get_signal",
            "type": [
                "None"
            ]
        }
    ],
    "patch_torch_initlogs@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "module_name",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "dict",
                "str"
            ]
        },
        {
            "category": "return",
            "name": "patch_torch_initlogs",
            "type": [
                "None"
            ]
        }
    ],
    "patch_wallet@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.Mock",
                "datetime.datetime",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "free",
            "type": [
                "float"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.Mock",
                "datetime.datetime",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "free",
            "type": [
                "float"
            ]
        },
        {
            "category": "return",
            "name": "patch_wallet",
            "type": [
                "None"
            ]
        }
    ],
    "patch_whitelist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "conf",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "conf",
            "type": [
                "unittesmock.Mock",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "return",
            "name": "patch_whitelist",
            "type": [
                "None"
            ]
        }
    ],
    "patched_configuration_load_config_file@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "config",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "patched_configuration_load_config_file",
            "type": [
                "None"
            ]
        }
    ],
    "patched_get_entry_signal@global": [
        {
            "category": "arg",
            "name": "kwargs",
            "type": []
        },
        {
            "category": "arg",
            "name": "args",
            "type": []
        },
        {
            "category": "local",
            "name": "direction",
            "type": [
                "None"
            ]
        },
        {
            "category": "return",
            "name": "patched_get_entry_signal",
            "type": [
                "tuple[None]"
            ]
        }
    ],
    "patched_get_exit_signal@global": [
        {
            "category": "arg",
            "name": "pair",
            "type": []
        },
        {
            "category": "arg",
            "name": "timeframe",
            "type": []
        },
        {
            "category": "arg",
            "name": "dataframe",
            "type": []
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": []
        },
        {
            "category": "return",
            "name": "patched_get_exit_signal",
            "type": [
                "tuple"
            ]
        }
    ],
    "pytest_addoption@global": [
        {
            "category": "arg",
            "name": "parser",
            "type": []
        },
        {
            "category": "return",
            "name": "pytest_addoption",
            "type": [
                "None"
            ]
        }
    ],
    "pytest_configure@global": [
        {
            "category": "arg",
            "name": "config",
            "type": [
                "dict[str, typing.Any]",
                "dothebackup.types.CONFIGTYPE",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "dict[str, typing.Any]",
                "dothebackup.types.CONFIGTYPE",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "config_",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "pytest_configure",
            "type": [
                "None"
            ]
        }
    ],
    "pytest_xdist_make_scheduler@global": [
        {
            "category": "arg",
            "name": "config",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "log",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "config",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "log",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "pytest_xdist_make_scheduler",
            "type": [
                "FixtureScheduler"
            ]
        }
    ],
    "rpc_balance@global": [
        {
            "category": "return",
            "name": "rpc_balance",
            "type": [
                "dict[typing.Text, dict[typing.Text, float]]"
            ]
        }
    ],
    "shitcoinmarkets@global": [
        {
            "category": "arg",
            "name": "markets_static",
            "type": [
                "dict[str, typing.Any]",
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "markets_static",
            "type": [
                "dict[str, typing.Any]",
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "shitmarkets",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "dict[str, typing.Union[typing.Any,dict[typing.Text, typing.Union[typing.Text,bool,dict[typing.Text, int],dict[typing.Text, dict[typing.Text, typing.Union[float,None]]]]],dict[typing.Text, typing.Union[bool,float,dict[typing.Text, int],dict[typing.Text, dict[typing.Text, None]],typing.Text]]]]"
            ]
        },
        {
            "category": "return",
            "name": "shitcoinmarkets",
            "type": [
                "dict[str, typing.Union[typing.Any,dict[typing.Text, typing.Union[typing.Text,bool,dict[typing.Text, int],dict[typing.Text, dict[typing.Text, typing.Union[float,None]]]]],dict[typing.Text, typing.Union[bool,float,dict[typing.Text, int],dict[typing.Text, dict[typing.Text, None]],typing.Text]]]]"
            ]
        }
    ],
    "testdatadir@global": [
        {
            "category": "return",
            "name": "testdatadir",
            "type": []
        }
    ],
    "ticker@global": [
        {
            "category": "return",
            "name": "ticker",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "ticker_sell_down@global": [
        {
            "category": "return",
            "name": "ticker_sell_down",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "ticker_sell_up@global": [
        {
            "category": "return",
            "name": "ticker_sell_up",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "ticker_usdt@global": [
        {
            "category": "return",
            "name": "ticker_usdt",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "ticker_usdt_sell_down@global": [
        {
            "category": "return",
            "name": "ticker_usdt_sell_down",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "ticker_usdt_sell_up@global": [
        {
            "category": "return",
            "name": "ticker_usdt_sell_up",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "tickers@global": [
        {
            "category": "return",
            "name": "tickers",
            "type": [
                "MagicMock"
            ]
        }
    ],
    "trades_for_order2@global": [
        {
            "category": "return",
            "name": "trades_for_order2",
            "type": [
                "list[dict[typing.Text, typing.Union[int,typing.Text,None,float,dict[typing.Text, typing.Union[float,typing.Text]]]]]"
            ]
        }
    ],
    "trades_for_order@global": [
        {
            "category": "return",
            "name": "trades_for_order",
            "type": [
                "list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text]],int,typing.Text,None,float,dict[typing.Text, typing.Union[float,typing.Text]]]]]"
            ]
        }
    ],
    "trades_history@global": [
        {
            "category": "return",
            "name": "trades_history",
            "type": [
                "list[list[typing.Union[int,typing.Text,None,float]]]"
            ]
        }
    ],
    "trades_history_df@global": [
        {
            "category": "arg",
            "name": "trades_history",
            "type": [
                "dict[str, str]",
                "dict[datetime.date, dict[str, typing.Any]]",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "trades_history",
            "type": [
                "dict[str, str]",
                "dict[datetime.date, dict[str, typing.Any]]",
                "tuple"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "rotkehlchen.exchanges.data_structures.Trade"
            ]
        },
        {
            "category": "return",
            "name": "trades_history_df",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade"
            ]
        }
    ],
    "user_dir@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "path.Path",
                "str",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "tmp_path",
            "type": [
                "pathlib.Path"
            ]
        },
        {
            "category": "local",
            "name": "tmp_path",
            "type": [
                "pathlib.Path"
            ]
        },
        {
            "category": "local",
            "name": "user_dir",
            "type": [
                "str",
                "pathlib.Path"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "path.Path",
                "str",
                "None"
            ]
        },
        {
            "category": "return",
            "name": "user_dir",
            "type": [
                "str",
                "pathlib.Path"
            ]
        }
    ]
}