{
    "global@global": [],
    "test__rpc_timeunit_profit@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "dict",
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "dict",
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "dict",
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "time_machine",
            "type": [
                "dict",
                "typing.Callable",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "time_machine",
            "type": [
                "dict",
                "typing.Callable",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "dict",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "dict",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "dict",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "dict[str, typing.Any]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, typing.Union[int,str]]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "fiat_display_currency",
            "type": [
                "str",
                "dict[str, str]",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "rpc_",
            "type": [
                "CryptoToFiatConverter"
            ]
        },
        {
            "category": "return",
            "name": "test__rpc_timeunit_profit",
            "type": [
                "None"
            ]
        }
    ],
    "test_enter_tag_performance_handle@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "dict",
                "bool",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool",
                "None",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool",
                "None",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "dict",
                "bool",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "bool",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "str",
                "list",
                "list[tuple[typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test_enter_tag_performance_handle",
            "type": [
                "None"
            ]
        }
    ],
    "test_enter_tag_performance_handle_2@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "str",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "str",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "list[complex]",
                "float",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_enter_tag_performance_handle_2",
            "type": [
                "None"
            ]
        }
    ],
    "test_exit_reason_performance_handle@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "typing.Callable[list, None]",
                "bool",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "list[dict[str, typing.Any]]",
                "dict",
                "list[dict]"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "typing.Iterable[homeassistancore.State]"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "list[dict[str, typing.Any]]",
                "unittesmock.MagicMock",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "list[dict[str, typing.Any]]",
                "unittesmock.MagicMock",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "list[dict[str, typing.Any]]",
                "dict",
                "list[dict]"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "typing.Iterable[homeassistancore.State]"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "typing.Callable[list, None]",
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "list[int]",
                "int",
                "tuple[str]"
            ]
        },
        {
            "category": "return",
            "name": "test_exit_reason_performance_handle",
            "type": [
                "None"
            ]
        }
    ],
    "test_exit_reason_performance_handle_2@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock",
                "tests.async_mock.Mock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "float",
                "int",
                "list"
            ]
        },
        {
            "category": "return",
            "name": "test_exit_reason_performance_handle_2",
            "type": [
                "None"
            ]
        }
    ],
    "test_mix_tag_performance_handle@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "dict[str, typing.Any]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "dict[str, typing.Any]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "dict[str, typing.Any]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "dict[str, typing.Any]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "list",
                "str",
                "list[str]",
                "int"
            ]
        },
        {
            "category": "return",
            "name": "test_mix_tag_performance_handle",
            "type": [
                "None"
            ]
        }
    ],
    "test_mix_tag_performance_handle_2@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "str",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "int",
                "float",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_mix_tag_performance_handle_2",
            "type": [
                "None"
            ]
        }
    ],
    "test_performance_handle@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "dict[str, typing.Any]",
                "typing.Callable[list, None]"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "typing.Iterable[homeassistancore.State]"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "typing.Iterable[homeassistancore.State]"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "typing.Iterable[homeassistancore.State]"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "typing.Iterable[homeassistancore.State]"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "dict[str, typing.Any]",
                "typing.Callable[list, None]"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "dict",
                "list",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_performance_handle",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_add_and_delete_lock@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "pair",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "locks2",
            "type": [
                "str",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_add_and_delete_lock",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_balance_handle@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "datetime.timedelta"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "tickers",
            "type": [
                "bool",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "proxy_coin",
            "type": [
                "int",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "margin_mode",
            "type": [
                "bool",
                "tuple[set[str]]",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "mock_balance",
            "type": [
                "dict[typing.Text, dict[typing.Text, float]]",
                "dict[typing.Union[typing.Text,int], dict[typing.Text, float]]"
            ]
        },
        {
            "category": "local",
            "name": "proxy_coin",
            "type": [
                "int",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "datetime.timedelta"
            ]
        },
        {
            "category": "local",
            "name": "mock_pos",
            "type": [
                "list[dict[typing.Text, typing.Union[typing.Text,None,float,int]]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "tickers",
            "type": [
                "bool",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "margin_mode",
            "type": [
                "bool",
                "tuple[set[str]]",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "str",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "rpc_",
            "type": [
                "CryptoToFiatConverter"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list",
                "str",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "expected_curr",
            "type": [
                "list[dict[typing.Text, typing.Union[typing.Text,float,int]]]",
                "list[typing.Union[dict[typing.Text, typing.Union[typing.Text,float,int]],int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_balance_handle",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_balance_handle_error@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mock_balance",
            "type": [
                "dict[typing.Text, dict[typing.Text, float]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "rpc_",
            "type": [
                "CryptoToFiatConverter"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_balance_handle_error",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_blacklist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.utils.CliObjectRunner"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.utils.CliObjectRunner"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "ret",
            "type": [
                "dict",
                "list",
                "list[typing.Optional[bool]]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_blacklist",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_count@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "int"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "int",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict",
                "int"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "int",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "bool",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "counts",
            "type": [
                "int",
                "list[int]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_count",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_delete_trade@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "Exception",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "caplog",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "stoploss_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "cancel_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "Exception",
                "None",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "str",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "list[rotkehlchen.exchanges.data_structures.Trade]",
                "rotkehlchen.exchanges.data_structures.Trade",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "dict[str, typing.Union[int,str]]",
                "dict"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_delete_trade",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_edge_disabled@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_edge_disabled",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_edge_enabled@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "edge_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "edge_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "ret",
            "type": [
                "typing.Generator[typing.Optional[typing.Any]]",
                "list[dict[str, typing.Any]]",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_edge_enabled",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_force_entry@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "bool",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool",
                "Exception",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "limit_buy_order_open",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "limit_buy_order_open",
            "type": [
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "buy_mm",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "bool",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool",
                "Exception",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "pair",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot_",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[dict[str, int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_force_entry",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_force_entry_disabled@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "pair",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_force_entry_disabled",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_force_entry_stopped@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": []
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "pair",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_force_entry_stopped",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_force_entry_wrong_mode@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "unittesmock.MagicMock",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "dict",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "pair",
            "type": [
                "typing.Text"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_force_entry_wrong_mode",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_force_exit@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "dict",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "dict",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "cancel_order_mock",
            "type": [
                "MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "dict",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "dict",
                "bool",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "typing.Callable",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "typing.Callable[Any,None, str]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "msg",
            "type": [
                "str",
                "list"
            ]
        },
        {
            "category": "local",
            "name": "trade",
            "type": [
                "monkq.assets.trade.Trade",
                "list[rotkehlchen.exchanges.data_structures.Trade]"
            ]
        },
        {
            "category": "local",
            "name": "filled_amount",
            "type": [
                "int"
            ]
        },
        {
            "category": "local",
            "name": "cancel_order_3",
            "type": [
                "int",
                "list",
                "typing.Type"
            ]
        },
        {
            "category": "local",
            "name": "cancel_order_4",
            "type": [
                "int",
                "list",
                "typing.Type"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_force_exit",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_health@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list[tuple[typing.Union[int,float]]]",
                "typing.Generator[typing.Optional[typing.Any]]",
                "bool"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_health",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_start@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "typing.Callable[Any,None, str]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "list[dict[str, typing.Any]]",
                "dict",
                "typing.Callable[None,None,None,None, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_start",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_status_table@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "dict",
                "dict[str, object]",
                "typing.IO",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "dict",
                "dict[str, object]",
                "typing.IO",
                "None"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "dict[str, typing.Any]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "dict[str, typing.Any]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "dict",
                "dict[str, object]",
                "typing.IO",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "dict",
                "dict[str, object]",
                "typing.IO",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "str",
                "dict",
                "typing.Mapping"
            ]
        },
        {
            "category": "local",
            "name": "headers",
            "type": [
                "dict[str, str]",
                "bytes"
            ]
        },
        {
            "category": "local",
            "name": "fiat_profit_sum",
            "type": [
                "int",
                "str",
                "float"
            ]
        },
        {
            "category": "local",
            "name": "total_sum",
            "type": [
                "int",
                "float",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "rpc_",
            "type": [
                "CryptoToFiatConverter"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_status_table",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_stop@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.async_mock.MagicMock",
                "tests.setup.SetupTest"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict",
                "dict[str, typing.Any]",
                "typing.Callable[None,None,None, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "int",
                "typing.Callable[None,None,None,None, typing.Any]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_stop",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_stopentry@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.setup.SetupTest",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "result",
            "type": [
                "unittesmock.MagicMock",
                "list",
                "list[dict[str, typing.Any]]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_stopentry",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_trade_history@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "arg",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "is_short",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "markets",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "Exception",
                "None",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "bool",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "is_short",
            "type": [
                "bool",
                "str",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "rpc_",
            "type": [
                "CryptoToFiatConverter"
            ]
        },
        {
            "category": "local",
            "name": "trades",
            "type": [
                "rotkehlchen.exchanges.data_structures.Trade",
                "list[list[typing.Any]]",
                "list[dict[str, int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_trade_history",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_trade_statistics@global": [
        {
            "category": "arg",
            "name": "default_conf_usdt",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "list[dict[str, typing.Any]]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "list[dict[str, typing.Any]]",
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "default_conf_usdt",
            "type": [
                "dict",
                "dict[str, typing.Any]"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "dict[str, typing.Union[int,str]]",
                "str"
            ]
        },
        {
            "category": "local",
            "name": "stake_currency",
            "type": [
                "list",
                "dict[str, int]",
                "dict"
            ]
        },
        {
            "category": "local",
            "name": "fiat_display_currency",
            "type": [
                "str",
                "list[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                "dict[str, str]"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "rpc_",
            "type": [
                "CryptoToFiatConverter"
            ]
        },
        {
            "category": "local",
            "name": "res",
            "type": [
                "str",
                "tests.mypy.modules.success.Model",
                "tuple[typing.Union[tuple[float],tuple[bool]]]"
            ]
        },
        {
            "category": "local",
            "name": "stats",
            "type": [
                "dict[str, float]",
                "list",
                "dict[str, list[int]]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_trade_statistics",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_trade_status@global": [
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "arg",
            "name": "ticker",
            "type": [
                "dict",
                "\"prefecengine.state.State\"",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "fee",
            "type": [
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "gen_response",
            "type": [
                "dict[typing.Text, typing.Union[int,typing.Text,float,None,list[dict[typing.Text, typing.Union[float,typing.Text,bool,None]]]]]"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "bool"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "str",
                "typing.Callable"
            ]
        },
        {
            "category": "local",
            "name": "ticker",
            "type": [
                "dict",
                "\"prefecengine.state.State\"",
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "results",
            "type": [
                "dict",
                "list[dict[str, typing.Any]]",
                "typing.Generator[typing.Optional[typing.Any]]"
            ]
        },
        {
            "category": "local",
            "name": "response_unfilled",
            "type": [
                "dict[str, dict]",
                "dict[str, typing.Union[dict,float,typing.Text,bool]]"
            ]
        },
        {
            "category": "local",
            "name": "response_norate",
            "type": [
                "dict[str, str]",
                "dict[str, typing.Union[str,float]]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_trade_status",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_whitelist@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker",
                "tests.async_mock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "bool",
                "None"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "ret",
            "type": [
                "dict",
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_whitelist",
            "type": [
                "None"
            ]
        }
    ],
    "test_rpc_whitelist_dynamic@global": [
        {
            "category": "arg",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "arg",
            "name": "default_conf",
            "type": [
                "tests.utils.CliObjectRunner"
            ]
        },
        {
            "category": "local",
            "name": "default_conf",
            "type": [
                "tests.utils.CliObjectRunner"
            ]
        },
        {
            "category": "local",
            "name": "mocker",
            "type": [
                "tests.test_util.aiohttp.AiohttpClientMocker"
            ]
        },
        {
            "category": "local",
            "name": "freqtradebot",
            "type": [
                "dict[str, typing.Any]",
                "unittesmock.MagicMock"
            ]
        },
        {
            "category": "local",
            "name": "rpc",
            "type": [
                "RPC"
            ]
        },
        {
            "category": "local",
            "name": "ret",
            "type": [
                "dict",
                "str",
                "dict[str, str]"
            ]
        },
        {
            "category": "return",
            "name": "test_rpc_whitelist_dynamic",
            "type": [
                "None"
            ]
        }
    ]
}