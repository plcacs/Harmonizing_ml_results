SEMANTIC TYPE COMPARISON ANALYSIS - DEEPSEEK
Generated from: type_comparison_semantic_deepseek.json
================================================================================

============================================================
LLM PERFORMANCE ASSESSMENT - DEEPSEEK
============================================================
Total type comparisons: 15353
String matches: 11709 (76.27%)
Semantic matches: 14275 (92.98%)
Semantic-only matches: 2566 (16.71%)
Improvement with semantic matching: 2566 (16.71%)

============================================================
FILE-LEVEL ANALYSIS (Top 20 files by improvement)
============================================================
Filename                                           Total  String%  Semantic%  Improvement%
-------------------------------------------------- ------ -------- ---------- ------------
alarm_control_panel_4aa134.py                      8      0.00     100.00     100.00      
test_get_accessories_34824a.py                     1      0.00     100.00     100.00      
fixtures_82d048.py                                 1      0.00     100.00     100.00      
__init___c7b03c.py                                 4      0.00     100.00     100.00      
masked_reductions_91c9b6.py                        20     0.00     100.00     100.00      
token_class_8d102b.py                              24     16.67    100.00     83.33       
test_template_parser_7279f4.py                     8      25.00    100.00     75.00       
strings_8fc975.py                                  122    0.00     70.49      70.49       
alarm_control_panel_397cee.py                      10     30.00    100.00     70.00       
camera_b201a1.py                                   10     30.00    100.00     70.00       
switch_fa31bd.py                                   29     24.14    93.10      68.97       
log_api_tests_2cbd8d.py                            12     33.33    100.00     66.67       
callback_14d3b1.py                                 23     34.78    100.00     65.22       
cover_860401.py                                    17     35.29    100.00     64.71       
conftest_cc5a31.py                                 14     21.43    85.71      64.29       
query_cache_manager_f69be4.py                      72     33.33    97.22      63.89       
__init___4c124d.py                                 13     38.46    100.00     61.54       
climate_5f3cc6.py                                  72     38.89    100.00     61.11       
cover_1e7e0c.py                                    28     39.29    100.00     60.71       
metamodel_f9ba03.py                                7      42.86    100.00     57.14       

============================================================
FILE-LEVEL ANALYSIS (Bottom 20 files by improvement)
============================================================
Filename                                           Total  String%  Semantic%  Improvement%
-------------------------------------------------- ------ -------- ---------- ------------
test_spark_0e0bdf.py                               24     50.00    50.00      0.00        
sensor_e4b539.py                                   10     100.00   100.00     0.00        
send_custom_email_c1af50.py                        8      62.50    62.50      0.00        
gymexperiments_f3782d.py                           51     100.00   100.00     0.00        
test_dependencies_3dbf6b.py                        11     100.00   100.00     0.00        
test_sample_mode_75a9c6.py                         46     100.00   100.00     0.00        
__init___38b704.py                                 19     89.47    89.47      0.00        
utils_3f6c97.py                                    26     100.00   100.00     0.00        
superset_factory_util_7e174c.py                    53     100.00   100.00     0.00        
update_coordinator_155ec7.py                       22     100.00   100.00     0.00        
conftest_0f5d02.py                                 14     85.71    85.71      0.00        
update_3b91e3.py                                   10     100.00   100.00     0.00        
switch_a354e7.py                                   14     100.00   100.00     0.00        
tracing_fe42d6.py                                  54     85.19    85.19      0.00        
lock_0a8494.py                                     6      66.67    66.67      0.00        
test_parallel_runner_4ae0f2.py                     2      100.00   100.00     0.00        
test_imports_3305a5.py                             29     100.00   100.00     0.00        
client_ws_7f7caf.py                                36     88.89    88.89      0.00        
core_6a4e49.py                                     22     77.27    77.27      0.00        
light_d31785.py                                    16     100.00   100.00     0.00        

============================================================
CATEGORY-WISE ANALYSIS
============================================================
ARG            : 10822 total | String:  77.49% | Semantic:  94.62% | Improvement:  17.13%
RETURN         :  4531 total | String:  73.34% | Semantic:  89.05% | Improvement:  15.71%

============================================================
TYPE COMPLEXITY ANALYSIS
============================================================
SIMPLE         : 11200 total | String:  88.32% | Semantic:  95.92% | Improvement:   7.60%
UNION          :  1645 total | String:  11.06% | Semantic:  89.54% | Improvement:  78.48%
SUBSCRIPT      :  1276 total | String:  64.11% | Semantic:  77.98% | Improvement:  13.87%
GENERIC        :   582 total | String:  58.25% | Semantic:  84.71% | Improvement:  26.46%
OPTIONAL       :   650 total | String:  73.54% | Semantic:  87.85% | Improvement:  14.31%

============================================================
TOP 10 STRING MATCH ERRORS
============================================================
 287: String mismatch: str | None vs Optional[str]
 123: String mismatch: int | None vs Optional[int]
 113: String mismatch: dict vs Dict[str, Any]
 101: String mismatch: str vs Optional[str]
  88: String mismatch: 'ks.Series' vs 'Series'
  62: String mismatch: int vs Optional[int]
  59: String mismatch: dict[str, Any] | None vs Optional[Dict[str, Any]]
  53: String mismatch: str | None vs str
  52: String mismatch: float | None vs Optional[float]
  48: String mismatch: datetime | None vs Optional[datetime]

============================================================
TOP 10 SEMANTIC MATCH ERRORS
============================================================
  19: Semantic mismatch: MagicMock vs Mock
  18: Semantic mismatch: 'ks.Series[str]' vs 'Series'
  16: Semantic mismatch: Dict vs StateT
  11: Semantic mismatch: CollectionT vs TableT
  11: Semantic mismatch: ColumnElement vs BinaryExpression
  11: Semantic mismatch: 'ks.Series[bool]' vs 'Series'
  10: Semantic mismatch: 'ApiKey' vs T
  10: Semantic mismatch: Iterable[str] | None vs Optional[List[str]]
  10: Semantic mismatch: BuySell vs str
  10: Semantic mismatch: CcxtOrder vs Dict[str, Any]
