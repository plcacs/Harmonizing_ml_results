{
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\Analysis_detailed_python_files.py": {
    "num_lines": 60,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "analyze_python_file",
        "parameter_hints": {
          "file_path": "str"
        },
        "return_hint": "Dict[str, Union[int, str, List[Dict[str, Any]]]]"
      },
      {
        "function": "analyze_all_py_files",
        "parameter_hints": {
          "directory": "str"
        },
        "return_hint": "Dict[str, Dict[str, Union[int, str]]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\Analysis_python_files.py.py": {
    "num_lines": 43,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "analyze_python_file",
        "parameter_hints": {
          "file_path": "str"
        },
        "return_hint": "Dict[str, Any]"
      },
      {
        "function": "analyze_all_py_files",
        "parameter_hints": {
          "directory": "str"
        },
        "return_hint": "Dict[str, Dict[str, Any]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\bm_regex_effbot_a245e0361625bbc6129c2b1ec112e9db.py.py": {
    "num_lines": 117,
    "num_functions": 7,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "re_compile",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "re.Pattern"
      },
      {
        "function": "gen_regex_table",
        "parameter_hints": {},
        "return_hint": "List[re.Pattern]"
      },
      {
        "function": "gen_string_table",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "init_benchmarks",
        "parameter_hints": {
          "n_values": "Optional[List[int]]"
        },
        "return_hint": "List[Tuple[re.Pattern, str]]"
      },
      {
        "function": "bench_regex_effbot",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": null
        },
        "return_hint": "None"
      },
      {
        "function": "append",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\bm_regex_v8_a19cb9eda8ce2526c19c5eb844d76145.py.py": {
    "num_lines": 1338,
    "num_functions": 13,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "block0",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block1",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block2",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block3",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block4",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block5",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block6",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block7",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block8",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block9",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block10",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block11",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "bench_regex_v8",
        "parameter_hints": {
          "loops": null
        },
        "return_hint": null
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\btm_matcher_4f0ccfe480ecd407cea1b164e491bdab.py.py": {
    "num_lines": 113,
    "num_functions": 8,
    "num_parameters": 12,
    "type_hints": [
      {
        "function": "type_repr",
        "parameter_hints": {
          "type_num": "int"
        },
        "return_hint": "Union[str, int]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "add_fixer",
        "parameter_hints": {
          "self": null,
          "fixer": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "add",
        "parameter_hints": {
          "self": null,
          "pattern": "List[Any]",
          "start": "BMNode"
        },
        "return_hint": "List[BMNode]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "leaves": "List[pytree.Leaf]"
        },
        "return_hint": "Dict[Any, List[pytree.Leaf]]"
      },
      {
        "function": "print_ac",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "print_node",
        "parameter_hints": {
          "node": "BMNode"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\btm_utils_89de4e6b444fd08def9b8ce6daebb6ce.py.py": {
    "num_lines": 199,
    "num_functions": 8,
    "num_parameters": 12,
    "type_hints": [
      {
        "function": "reduce_tree",
        "parameter_hints": {
          "node": "Any",
          "parent": "Optional[MinNode]"
        },
        "return_hint": "Optional[MinNode]"
      },
      {
        "function": "get_characteristic_subpattern",
        "parameter_hints": {
          "subpatterns": "List[List[Union[int, str]]]"
        },
        "return_hint": "List[Union[int, str]]"
      },
      {
        "function": "rec_test",
        "parameter_hints": {
          "sequence": "List[Union[int, str]]",
          "test_func": "Any"
        },
        "return_hint": "Generator[bool, None, None]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "type": "Optional[int]",
          "name": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "leaf_to_root",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional[List[Union[int, str]]]"
      },
      {
        "function": "get_linear_subpattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional[List[Union[int, str]]]"
      },
      {
        "function": "leaves",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['MinNode', None, None]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\conf_da9965b984331586a98ccf31b5479f12.py.py": {
    "error": "invalid syntax (<unknown>, line 10)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\conv_1bc4e8a8f8f49e5d7327949ef65b3e34.py.py": {
    "num_lines": 172,
    "num_functions": 4,
    "num_parameters": 8,
    "type_hints": [
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "graminit_h": "str",
          "graminit_c": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "parse_graminit_h",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "bool"
      },
      {
        "function": "parse_graminit_c",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "bool"
      },
      {
        "function": "finish_off",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\driver_3aabcaf38ec34819d53840a6d8011e52.py.py": {
    "num_lines": 136,
    "num_functions": 11,
    "num_parameters": 31,
    "type_hints": [
      {
        "function": "_generate_pickle_name",
        "parameter_hints": {
          "gt": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "load_grammar",
        "parameter_hints": {
          "gt": "str",
          "gp": "Optional[str]",
          "save": "bool",
          "force": "bool",
          "logger": "Optional[logging.Logger]"
        },
        "return_hint": "grammar.Grammar"
      },
      {
        "function": "_newer",
        "parameter_hints": {
          "a": "str",
          "b": "str"
        },
        "return_hint": "bool"
      },
      {
        "function": "load_packaged_grammar",
        "parameter_hints": {
          "package": "str",
          "grammar_source": "str"
        },
        "return_hint": "grammar.Grammar"
      },
      {
        "function": "main",
        "parameter_hints": {
          "args": "str"
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "grammar": "grammar.Grammar",
          "convert": "Optional[Any]",
          "logger": "Optional[logging.Logger]"
        },
        "return_hint": "None"
      },
      {
        "function": "parse_tokens",
        "parameter_hints": {
          "self": null,
          "tokens": "List[Tuple[int, str, Tuple[int, int], Tuple[int, int], str]]",
          "debug": "bool"
        },
        "return_hint": "parse.Node"
      },
      {
        "function": "parse_stream_raw",
        "parameter_hints": {
          "self": null,
          "stream": "io.TextIOBase",
          "debug": "bool"
        },
        "return_hint": "parse.Node"
      },
      {
        "function": "parse_stream",
        "parameter_hints": {
          "self": null,
          "stream": "io.TextIOBase",
          "debug": "bool"
        },
        "return_hint": "parse.Node"
      },
      {
        "function": "parse_file",
        "parameter_hints": {
          "self": null,
          "filename": "str",
          "encoding": "Optional[str]",
          "debug": "bool"
        },
        "return_hint": "parse.Node"
      },
      {
        "function": "parse_string",
        "parameter_hints": {
          "self": null,
          "text": "str",
          "debug": "bool"
        },
        "return_hint": "parse.Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fixer_base_85dc36bb56186b3c5d4a5ff7bd806974.py.py": {
    "num_lines": 105,
    "num_functions": 13,
    "num_parameters": 31,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "options": "Dict[str, Any]",
          "log": "list"
        },
        "return_hint": "None"
      },
      {
        "function": "compile_pattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "set_filename",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "Union[bool, Dict[str, Any]]"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      },
      {
        "function": "new_name",
        "parameter_hints": {
          "self": null,
          "template": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "log_message",
        "parameter_hints": {
          "self": null,
          "message": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "cannot_convert",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "reason": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "warning",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "reason": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Any",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "finish_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Any",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "should_skip",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fixer_util_3abd089b71f391b9fbcc1279a5103b06.py.py": {
    "num_lines": 296,
    "num_functions": 34,
    "num_parameters": 54,
    "type_hints": [
      {
        "function": "KeywordArg",
        "parameter_hints": {
          "keyword": "Leaf",
          "value": "Leaf"
        },
        "return_hint": "Node"
      },
      {
        "function": "LParen",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "RParen",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "Assign",
        "parameter_hints": {
          "target": "Union[Leaf, List[Leaf]]",
          "source": "Union[Leaf, List[Leaf]]"
        },
        "return_hint": "Node"
      },
      {
        "function": "Name",
        "parameter_hints": {
          "name": "str",
          "prefix": "Optional[str]"
        },
        "return_hint": "Leaf"
      },
      {
        "function": "Attr",
        "parameter_hints": {
          "obj": "Leaf",
          "attr": "Leaf"
        },
        "return_hint": "List[Union[Leaf, Node]]"
      },
      {
        "function": "Comma",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "Dot",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "ArgList",
        "parameter_hints": {
          "args": "Optional[List[Leaf]]",
          "lparen": "Leaf",
          "rparen": "Leaf"
        },
        "return_hint": "Node"
      },
      {
        "function": "Call",
        "parameter_hints": {
          "func_name": "Leaf",
          "args": "Optional[List[Leaf]]",
          "prefix": "Optional[str]"
        },
        "return_hint": "Node"
      },
      {
        "function": "Newline",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "BlankLine",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "Number",
        "parameter_hints": {
          "n": "str",
          "prefix": "Optional[str]"
        },
        "return_hint": "Leaf"
      },
      {
        "function": "Subscript",
        "parameter_hints": {
          "index_node": "Leaf"
        },
        "return_hint": "Node"
      },
      {
        "function": "String",
        "parameter_hints": {
          "string": "str",
          "prefix": "Optional[str]"
        },
        "return_hint": "Leaf"
      },
      {
        "function": "ListComp",
        "parameter_hints": {
          "xp": "Leaf",
          "fp": "Leaf",
          "it": "Leaf",
          "test": "Optional[Leaf]"
        },
        "return_hint": "Node"
      },
      {
        "function": "FromImport",
        "parameter_hints": {
          "package_name": "str",
          "name_leafs": "List[Leaf]"
        },
        "return_hint": "Node"
      },
      {
        "function": "ImportAndCall",
        "parameter_hints": {
          "node": "Node",
          "results": "dict",
          "names": "List[str]"
        },
        "return_hint": "Node"
      },
      {
        "function": "is_tuple",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "is_list",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "parenthesize",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "attr_chain",
        "parameter_hints": {
          "obj": "Any",
          "attr": "str"
        },
        "return_hint": "Generator[Any, None, None]"
      },
      {
        "function": "in_special_context",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "is_probably_builtin",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "find_indentation",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "str"
      },
      {
        "function": "make_suite",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "find_root",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "does_tree_import",
        "parameter_hints": {
          "package": "Optional[str]",
          "name": "str",
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "is_import",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "touch_import",
        "parameter_hints": {
          "package": "Optional[str]",
          "name": "str",
          "node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "find_binding",
        "parameter_hints": {
          "name": "str",
          "node": "Node",
          "package": "Optional[str]"
        },
        "return_hint": "Optional[Node]"
      },
      {
        "function": "_find",
        "parameter_hints": {
          "name": "str",
          "node": "Node"
        },
        "return_hint": "Optional[Leaf]"
      },
      {
        "function": "_is_import_binding",
        "parameter_hints": {
          "node": "Node",
          "name": "str",
          "package": "Optional[str]"
        },
        "return_hint": "Optional[Node]"
      },
      {
        "function": "is_import_stmt",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_apply_b16e3ffb9d7076892b1bf5bf775adbe3.py.py": {
    "num_lines": 48,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_asserts_4f68a58c5bfe9899342f37ae6be10efb.py.py": {
    "num_lines": 31,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_basestring_84e7b7d66f65f34af7dad68be8649969.py.py": {
    "num_lines": 12,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_buffer_0297747e2fb863eb527f0296b4e04c1d.py.py": {
    "num_lines": 14,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_dict_26321b67f43cc9e91f518d3409058c17.py.py": {
    "num_lines": 62,
    "num_functions": 2,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "dict"
        },
        "return_hint": "Optional[pytree.Node]"
      },
      {
        "function": "in_special_context",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "isiter": "bool"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_except_dc2a3518b6572d9df36c7c6a9e7d185c.py.py": {
    "num_lines": 45,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "find_excepts",
        "parameter_hints": {
          "nodes": "List[pytree.Node]"
        },
        "return_hint": "Generator[Tuple[pytree.Node, pytree.Node], None, None]"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "dict"
        },
        "return_hint": "pytree.Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_execfile_23c0aea8521d5905ef574849a1199c42.py.py": {
    "num_lines": 30,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_exec_c2495e4b98c855ef8e4bb6b499835916.py.py": {
    "num_lines": 22,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_exitfunc_4c0e023d6233f367f6bbb22f72abff19.py.py": {
    "num_lines": 45,
    "num_functions": 3,
    "num_parameters": 8,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Node",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_filter_0d6c2a2f1d6dc89e448a17d7d1859c3a.py.py": {
    "num_lines": 65,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_funcattrs_b0872da875aad669f1282398989d9c89.py.py": {
    "num_lines": 13,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_future_23a687d0e9b1a05680b4c5ab0decab24.py.py": {
    "num_lines": 15,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Any"
        },
        "return_hint": "Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_getcwdu_4c7a9a4fe905d6e1ec1a1f745fc07e92.py.py": {
    "num_lines": 13,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_has_key_3d19bb5809047e970a7a7694f342c22f.py.py": {
    "num_lines": 69,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_idioms_f2fc0fac4f3e5f15360819a753c8ce8d.py.py": {
    "num_lines": 73,
    "num_functions": 5,
    "num_parameters": 14,
    "type_hints": [
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Node"
        },
        "return_hint": "Optional[Dict[str, Any]]"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Union[Node, None]"
      },
      {
        "function": "transform_isinstance",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "transform_while",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "transform_sort",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_imports2_990f0acae87e29ae9492418a41754ee9.py.py": {
    "num_lines": 7,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_imports_c928b33522d728da5c7972ba72bd5d6b.py.py": {
    "num_lines": 83,
    "num_functions": 7,
    "num_parameters": 12,
    "type_hints": [
      {
        "function": "alternates",
        "parameter_hints": {
          "members": "list[str]"
        },
        "return_hint": "str"
      },
      {
        "function": "build_pattern",
        "parameter_hints": {
          "mapping": "dict[str, str]"
        },
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "build_pattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "compile_pattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": null
        },
        "return_hint": "bool | dict"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": null,
          "results": "dict"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_import_f23058f61e15a73e76de69f135bf5f6f.py.py": {
    "num_lines": 68,
    "num_functions": 4,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "traverse_imports",
        "parameter_hints": {
          "names": null
        },
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": null,
          "name": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": null,
          "results": null
        },
        "return_hint": "Union[None, FromImport]"
      },
      {
        "function": "probably_a_local_import",
        "parameter_hints": {
          "self": null,
          "imp_name": "str"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_input_dfe10ba83564ecc0d92ce3fe3f7469f6.py.py": {
    "num_lines": 19,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_intern_293f735a6b785b784192f0be1636168a.py.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_isinstance_ddf41b92f0feef3fdda51bb5aa571b20.py.py": {
    "num_lines": 34,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_itertools_4f695aa383ccd1d83a24563d5dfb7466.py.py": {
    "num_lines": 24,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_itertools_imports_1ff0945ccfa029ee1e633d3b0c38dca8.py.py": {
    "num_lines": 47,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "Optional[Union[Node, None]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_long_c9fe2d241de1cc017034e4f7bc2217cb.py.py": {
    "num_lines": 12,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_map_923c607ffa53d4554c8b2f301b449ede.py.py": {
    "num_lines": 74,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_metaclass_c0624dc69dbc6726b21bb4af3b427e71.py.py": {
    "num_lines": 141,
    "num_functions": 7,
    "num_parameters": 11,
    "type_hints": [
      {
        "function": "has_metaclass",
        "parameter_hints": {
          "parent": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "fixup_parse_tree",
        "parameter_hints": {
          "cls_node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "fixup_simple_stmt",
        "parameter_hints": {
          "parent": "Node",
          "i": "int",
          "stmt_node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "remove_trailing_newline",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "find_metas",
        "parameter_hints": {
          "cls_node": "Node"
        },
        "return_hint": "Generator[Tuple[Node, int, Node], None, None]"
      },
      {
        "function": "fixup_indent",
        "parameter_hints": {
          "suite": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_methodattrs_6a42825e2099caece0bd5f7c288ff26d.py.py": {
    "num_lines": 15,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_next_804cb524bc47688ff19276d35ba9a378.py.py": {
    "num_lines": 73,
    "num_functions": 5,
    "num_parameters": 10,
    "type_hints": [
      {
        "function": "is_assign_target",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "find_assign",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "Optional[Node]"
      },
      {
        "function": "is_subtree",
        "parameter_hints": {
          "root": "Node",
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Node",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_ne_99cb992e21ba5c9cdd4ed2465485a813.py.py": {
    "num_lines": 16,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "Optional[pytree.Leaf]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_nonzero_1692b34cd0de1184d67c1e62cc8d6ec7.py.py": {
    "num_lines": 14,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_numliterals_98271bbcfbd011fb007cd3a1ad98359d.py.py": {
    "num_lines": 19,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_operator_41eec7e7f93f16bad1cfd1a8ce899fbd.py.py": {
    "num_lines": 74,
    "num_functions": 13,
    "num_parameters": 38,
    "type_hints": [
      {
        "function": "invocation",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "Callable"
      },
      {
        "function": "dec",
        "parameter_hints": {
          "f": "Callable"
        },
        "return_hint": "Callable"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      },
      {
        "function": "_sequenceIncludes",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      },
      {
        "function": "_isCallable",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      },
      {
        "function": "_repeat",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      },
      {
        "function": "_irepeat",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      },
      {
        "function": "_isSequenceType",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      },
      {
        "function": "_isMappingType",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      },
      {
        "function": "_isNumberType",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Any"
      },
      {
        "function": "_handle_rename",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]",
          "name": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "_handle_type2abc",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]",
          "module": "str",
          "abc": "str"
        },
        "return_hint": "Any"
      },
      {
        "function": "_check_method",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Callable]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_paren_353b6cf540d829d4cb86fcdf6b1c3685.py.py": {
    "num_lines": 17,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_print_aca65419859f1ac0135d2ad32457f8e8.py.py": {
    "num_lines": 54,
    "num_functions": 2,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "dict"
        },
        "return_hint": "Optional[pytree.Node]"
      },
      {
        "function": "add_kwarg",
        "parameter_hints": {
          "self": null,
          "l_nodes": "List[pytree.Node]",
          "s_kwd": "str",
          "n_expr": "pytree.Node"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_raise_495345fa6dfbfe2a576ace6d7c035c51.py.py": {
    "num_lines": 43,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, pytree.Node]"
        },
        "return_hint": "Optional[pytree.Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_raw_input_b30be6e6f6b371c5d0cc4238916aaac7.py.py": {
    "num_lines": 12,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_reduce_4024a50c8ce9def06d8aabec27d605d4.py.py": {
    "num_lines": 13,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_reload_c7113cf30125ff3fd4e963b1761da463.py.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_renames_1eb568db217ff15c2b4004ccd75dd169.py.py": {
    "num_lines": 38,
    "num_functions": 4,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "alternates",
        "parameter_hints": {
          "members": "list"
        },
        "return_hint": "str"
      },
      {
        "function": "build_pattern",
        "parameter_hints": {},
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "Any"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_repr_4c23954f65d7efb15afeef1f4931d3d3.py.py": {
    "num_lines": 14,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_set_literal_4c0da782a04c8b621da519425739911b.py.py": {
    "num_lines": 38,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_standarderror_6354be6de21e5d0ae8243cc615985cae.py.py": {
    "num_lines": 11,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Any"
        },
        "return_hint": "Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_sys_exc_38efdf62222966e271d0328ae81e4b2f.py.py": {
    "num_lines": 21,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "PytreeNode",
          "results": "Dict[str, Any]"
        },
        "return_hint": "PytreeNode"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_throw_9223bab1596f455827d0ca24d2cb4b8a.py.py": {
    "num_lines": 44,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_tuple_params_08235f2c848bdeb79dabf448ca7b343e.py.py": {
    "num_lines": 118,
    "num_functions": 8,
    "num_parameters": 15,
    "type_hints": [
      {
        "function": "is_docstring",
        "parameter_hints": {
          "stmt": "pytree.Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "simplify_args",
        "parameter_hints": {
          "node": "pytree.Node"
        },
        "return_hint": "pytree.Node"
      },
      {
        "function": "find_params",
        "parameter_hints": {
          "node": "pytree.Node"
        },
        "return_hint": "Union[str, List[Any]]"
      },
      {
        "function": "map_to_index",
        "parameter_hints": {
          "param_list": "List[Any]",
          "prefix": "List[Subscript]",
          "d": "Optional[Dict[str, List[Subscript]]]"
        },
        "return_hint": "Dict[str, List[Subscript]]"
      },
      {
        "function": "tuple_name",
        "parameter_hints": {
          "param_list": "List[Any]"
        },
        "return_hint": "str"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Node]"
      },
      {
        "function": "transform_lambda",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "handle_tuple",
        "parameter_hints": {
          "tuple_arg": "pytree.Node",
          "add_prefix": "bool"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_types_6de0a2197b78900ec88ac8b7b3545921.py.py": {
    "num_lines": 41,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": null,
          "results": null
        },
        "return_hint": "Optional[Name]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_unicode_ea7cfd666cad0427f50e6bb2fe1a479d.py.py": {
    "num_lines": 30,
    "num_functions": 2,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Any",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Any"
        },
        "return_hint": "Any"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_urllib_e4836c50388897297cf89c61693daed3.py.py": {
    "num_lines": 131,
    "num_functions": 7,
    "num_parameters": 15,
    "type_hints": [
      {
        "function": "build_pattern",
        "parameter_hints": {},
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "build_pattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "transform_import",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "None"
      },
      {
        "function": "transform_member",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "None"
      },
      {
        "function": "transform_dot",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "dict"
        },
        "return_hint": "None"
      },
      {
        "function": "handle_name",
        "parameter_hints": {
          "name": "Node",
          "prefix": "str"
        },
        "return_hint": "List[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_ws_comma_3c3b2f49eeb26b8d75079583accc8d3c.py.py": {
    "num_lines": 28,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Any"
        },
        "return_hint": "pytree.Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_xrange_b7597d1a2dcf484c9def32299bab0389.py.py": {
    "num_lines": 52,
    "num_functions": 6,
    "num_parameters": 17,
    "type_hints": [
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "finish_tree",
        "parameter_hints": {
          "self": null,
          "tree": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": null,
          "results": "dict"
        },
        "return_hint": "Optional[Call]"
      },
      {
        "function": "transform_xrange",
        "parameter_hints": {
          "self": null,
          "node": null,
          "results": "dict"
        },
        "return_hint": "None"
      },
      {
        "function": "transform_range",
        "parameter_hints": {
          "self": null,
          "node": null,
          "results": "dict"
        },
        "return_hint": "Optional[Call]"
      },
      {
        "function": "in_special_context",
        "parameter_hints": {
          "self": null,
          "node": null
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_xreadlines_336d1f82c56a878207062958ce346079.py.py": {
    "num_lines": 15,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\fix_zip_8deafd1b0091d77b3a4b65e272fcdb39.py.py": {
    "num_lines": 28,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\generate_data_7422c52c22b8c15ab496c22f64433879.py.py": {
    "num_lines": 21,
    "num_functions": 1,
    "num_parameters": 0,
    "type_hints": [
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\Generate_no_type_version_147101a8e98a675af12167080b175470.py.py": {
    "num_lines": 56,
    "num_functions": 5,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "hash_content",
        "parameter_hints": {
          "content": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "process_py_file",
        "parameter_hints": {
          "file_path": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "traverse_and_process",
        "parameter_hints": {
          "root_dir": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "visit_FunctionDef",
        "parameter_hints": {
          "self": null,
          "node": "ast.FunctionDef"
        },
        "return_hint": "ast.FunctionDef"
      },
      {
        "function": "visit_AnnAssign",
        "parameter_hints": {
          "self": null,
          "node": "ast.AnnAssign"
        },
        "return_hint": "ast.Assign"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\grammar_0ee226e126c4ae4d1f4233f1a436b1ad.py.py": {
    "num_lines": 63,
    "num_functions": 6,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "dump",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "load",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "loads",
        "parameter_hints": {
          "self": null,
          "pkl": "bytes"
        },
        "return_hint": "None"
      },
      {
        "function": "copy",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Grammar'"
      },
      {
        "function": "report",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\literals_51e85ba6bc607dc435c2756415e18998.py.py": {
    "num_lines": 48,
    "num_functions": 3,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "escape",
        "parameter_hints": {
          "m": "Match[str]"
        },
        "return_hint": "str"
      },
      {
        "function": "evalString",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "test",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\main_18e06710863c6ff46857d6e5f5e3193a.py.py": {
    "num_lines": 173,
    "num_functions": 7,
    "num_parameters": 29,
    "type_hints": [
      {
        "function": "diff_texts",
        "parameter_hints": {
          "a": "str",
          "b": "str",
          "filename": "str"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "warn",
        "parameter_hints": {
          "msg": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "main",
        "parameter_hints": {
          "fixer_pkg": "str",
          "args": "Optional[List[str]]"
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "fixers": "List[str]",
          "options": "Dict",
          "explicit": "List[str]",
          "nobackups": "bool",
          "show_diffs": "bool",
          "input_base_dir": "str",
          "output_dir": "str",
          "append_suffix": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "log_error",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "args": "Tuple",
          "kwargs": "Dict"
        },
        "return_hint": "None"
      },
      {
        "function": "write_file",
        "parameter_hints": {
          "self": null,
          "new_text": "str",
          "filename": "str",
          "old_text": "str",
          "encoding": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "print_output",
        "parameter_hints": {
          "self": null,
          "old": "str",
          "new": "str",
          "filename": "str",
          "equal": "bool"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\parse_16d2dea206b527e5e6f274f72e54d079.py.py": {
    "num_lines": 98,
    "num_functions": 9,
    "num_parameters": 30,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "type": "int",
          "value": "str",
          "context": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "__reduce__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[type, Tuple[str, int, str, Any]]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "grammar": "Any",
          "convert": "Optional[Callable[[Any, Tuple[int, Optional[str], Any, Optional[List[Any]]]], Any]]"
        },
        "return_hint": "None"
      },
      {
        "function": "setup",
        "parameter_hints": {
          "self": null,
          "start": "Optional[int]"
        },
        "return_hint": "None"
      },
      {
        "function": "addtoken",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "str",
          "context": "Any"
        },
        "return_hint": "bool"
      },
      {
        "function": "classify",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "str",
          "context": "Any"
        },
        "return_hint": "int"
      },
      {
        "function": "shift",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "str",
          "newstate": "int",
          "context": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "push",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "newdfa": "Tuple[List[List[Tuple[int, int]]], Set[int]]",
          "newstate": "int",
          "context": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "pop",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\patcomp_39f9f5e83f63a35080e3487619196bab.py.py": {
    "num_lines": 160,
    "num_functions": 9,
    "num_parameters": 18,
    "type_hints": [
      {
        "function": "tokenize_wrapper",
        "parameter_hints": {
          "input": "str"
        },
        "return_hint": "Generator[Tuple[int, str, Tuple[int, int], Tuple[int, int], str], None, None]"
      },
      {
        "function": "_type_of_literal",
        "parameter_hints": {
          "value": "str"
        },
        "return_hint": "Optional[int]"
      },
      {
        "function": "pattern_convert",
        "parameter_hints": {
          "grammar": "grammar.Grammar",
          "raw_node_info": "Tuple[int, str, Optional[object], list]"
        },
        "return_hint": "Union[pytree.Node, pytree.Leaf]"
      },
      {
        "function": "compile_pattern",
        "parameter_hints": {
          "pattern": "str"
        },
        "return_hint": "pytree.Pattern"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "grammar_file": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "compile_pattern",
        "parameter_hints": {
          "self": null,
          "input": "str",
          "debug": "bool",
          "with_tree": "bool"
        },
        "return_hint": "Union[pytree.Pattern, Tuple[pytree.Pattern, pytree.Node]]"
      },
      {
        "function": "compile_node",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node"
        },
        "return_hint": "pytree.Pattern"
      },
      {
        "function": "compile_basic",
        "parameter_hints": {
          "self": null,
          "nodes": "list",
          "repeat": "Optional[pytree.Node]"
        },
        "return_hint": "pytree.Pattern"
      },
      {
        "function": "get_int",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node"
        },
        "return_hint": "int"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\pgen_eba48e8b0455077a205d1dda049755b8.py.py": {
    "num_lines": 348,
    "num_functions": 27,
    "num_parameters": 56,
    "type_hints": [
      {
        "function": "generate_grammar",
        "parameter_hints": {
          "filename": "str"
        },
        "return_hint": "PgenGrammar"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "filename": "str",
          "stream": "Optional[object]"
        },
        "return_hint": "None"
      },
      {
        "function": "make_grammar",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "PgenGrammar"
      },
      {
        "function": "make_first",
        "parameter_hints": {
          "self": null,
          "c": "PgenGrammar",
          "name": "str"
        },
        "return_hint": "Dict[int, int]"
      },
      {
        "function": "make_label",
        "parameter_hints": {
          "self": null,
          "c": "PgenGrammar",
          "label": "str"
        },
        "return_hint": "int"
      },
      {
        "function": "addfirstsets",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "calcfirst",
        "parameter_hints": {
          "self": null,
          "name": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "parse",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[Dict[str, List['DFAState']], str]"
      },
      {
        "function": "make_dfa",
        "parameter_hints": {
          "self": null,
          "start": "'NFAState'",
          "finish": "'NFAState'"
        },
        "return_hint": "List['DFAState']"
      },
      {
        "function": "dump_nfa",
        "parameter_hints": {
          "self": null,
          "name": "str",
          "start": "'NFAState'",
          "finish": "'NFAState'"
        },
        "return_hint": "None"
      },
      {
        "function": "dump_dfa",
        "parameter_hints": {
          "self": null,
          "name": "str",
          "dfa": "List['DFAState']"
        },
        "return_hint": "None"
      },
      {
        "function": "simplify_dfa",
        "parameter_hints": {
          "self": null,
          "dfa": "List['DFAState']"
        },
        "return_hint": "None"
      },
      {
        "function": "parse_rhs",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple['NFAState', 'NFAState']"
      },
      {
        "function": "parse_alt",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple['NFAState', 'NFAState']"
      },
      {
        "function": "parse_item",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple['NFAState', 'NFAState']"
      },
      {
        "function": "parse_atom",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple['NFAState', 'NFAState']"
      },
      {
        "function": "expect",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "Optional[str]"
        },
        "return_hint": "str"
      },
      {
        "function": "gettoken",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "raise_error",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "args": "Union[str, int]"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "addarc",
        "parameter_hints": {
          "self": null,
          "next": "'NFAState'",
          "label": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "nfaset": "Dict['NFAState', int]",
          "final": "'NFAState'"
        },
        "return_hint": "None"
      },
      {
        "function": "addarc",
        "parameter_hints": {
          "self": null,
          "next": "'DFAState'",
          "label": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "unifystate",
        "parameter_hints": {
          "self": null,
          "old": "'DFAState'",
          "new": "'DFAState'"
        },
        "return_hint": "None"
      },
      {
        "function": "__eq__",
        "parameter_hints": {
          "self": null,
          "other": "object"
        },
        "return_hint": "bool"
      },
      {
        "function": "closure",
        "parameter_hints": {
          "state": "'NFAState'"
        },
        "return_hint": "Dict['NFAState', int]"
      },
      {
        "function": "addclosure",
        "parameter_hints": {
          "state": "'NFAState'",
          "base": "Dict['NFAState', int]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\pygram_a5391fb5dc3ff905dab45ee155e42ff9.py.py": {
    "num_lines": 25,
    "num_functions": 1,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "grammar": "driver.Grammar"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\pyspecific_5869ad860916164ee81485b5281bc3c9.py.py": {
    "num_lines": 168,
    "num_functions": 17,
    "num_parameters": 37,
    "type_hints": [
      {
        "function": "issue_role",
        "parameter_hints": {
          "typ": "str",
          "rawtext": "str",
          "text": "str",
          "lineno": "int",
          "inliner": "Inliner",
          "options": "Dict",
          "content": "List"
        },
        "return_hint": "Tuple[List[Node], List[Node]]"
      },
      {
        "function": "gh_issue_role",
        "parameter_hints": {
          "typ": "str",
          "rawtext": "str",
          "text": "str",
          "lineno": "int",
          "inliner": "Inliner",
          "options": "Dict",
          "content": "List"
        },
        "return_hint": "Tuple[List[Node], List[Node]]"
      },
      {
        "function": "setup",
        "parameter_hints": {
          "app": "Any"
        },
        "return_hint": "Dict[str, Any]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "needs_arglist",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\pytree_b5c9498d48307fc20f4016a12676f355.py.py": {
    "num_lines": 504,
    "num_functions": 64,
    "num_parameters": 126,
    "type_hints": [
      {
        "function": "type_repr",
        "parameter_hints": {
          "type_num": "int"
        },
        "return_hint": "Union[str, int]"
      },
      {
        "function": "convert",
        "parameter_hints": {
          "gr": "Any",
          "raw_node": "Tuple[int, str, Optional[Any], List[Base]]"
        },
        "return_hint": "Base"
      },
      {
        "function": "generate_matches",
        "parameter_hints": {
          "patterns": "List[BasePattern]",
          "nodes": "List[Base]"
        },
        "return_hint": "Generator[Tuple[int, Dict[str, Base]], None, None]"
      },
      {
        "function": "__new__",
        "parameter_hints": {
          "cls": null,
          "args": "Any",
          "kwds": "Any"
        },
        "return_hint": "'Base'"
      },
      {
        "function": "__eq__",
        "parameter_hints": {
          "self": null,
          "other": "Any"
        },
        "return_hint": "bool"
      },
      {
        "function": "_eq",
        "parameter_hints": {
          "self": null,
          "other": "'Base'"
        },
        "return_hint": "bool"
      },
      {
        "function": "clone",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Base'"
      },
      {
        "function": "post_order",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Base', None, None]"
      },
      {
        "function": "pre_order",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Base', None, None]"
      },
      {
        "function": "replace",
        "parameter_hints": {
          "self": null,
          "new": "Union['Base', List['Base']]"
        },
        "return_hint": "None"
      },
      {
        "function": "get_lineno",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional[int]"
      },
      {
        "function": "changed",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "remove",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional[int]"
      },
      {
        "function": "next_sibling",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Base']"
      },
      {
        "function": "prev_sibling",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Base']"
      },
      {
        "function": "leaves",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Leaf', None, None]"
      },
      {
        "function": "depth",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "get_suffix",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "children": "List[Base]",
          "context": "Optional[Any]",
          "prefix": "Optional[str]",
          "fixers_applied": "Optional[List[Any]]"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__unicode__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "_eq",
        "parameter_hints": {
          "self": null,
          "other": "'Node'"
        },
        "return_hint": "bool"
      },
      {
        "function": "clone",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Node'"
      },
      {
        "function": "post_order",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Base', None, None]"
      },
      {
        "function": "pre_order",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Base', None, None]"
      },
      {
        "function": "prefix",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "prefix",
        "parameter_hints": {
          "self": null,
          "prefix": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "set_child",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "child": "'Base'"
        },
        "return_hint": "None"
      },
      {
        "function": "insert_child",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "child": "'Base'"
        },
        "return_hint": "None"
      },
      {
        "function": "append_child",
        "parameter_hints": {
          "self": null,
          "child": "'Base'"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "str",
          "context": "Optional[Tuple[str, Tuple[int, int]]]",
          "prefix": "Optional[str]",
          "fixers_applied": "List[Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__unicode__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "_eq",
        "parameter_hints": {
          "self": null,
          "other": "'Leaf'"
        },
        "return_hint": "bool"
      },
      {
        "function": "clone",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Leaf'"
      },
      {
        "function": "leaves",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Leaf', None, None]"
      },
      {
        "function": "post_order",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Base', None, None]"
      },
      {
        "function": "pre_order",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['Base', None, None]"
      },
      {
        "function": "prefix",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "prefix",
        "parameter_hints": {
          "self": null,
          "prefix": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "__new__",
        "parameter_hints": {
          "cls": null,
          "args": "Any",
          "kwds": "Any"
        },
        "return_hint": "'BasePattern'"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "optimize",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'BasePattern'"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Base",
          "results": "Optional[Dict[str, Base]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "match_seq",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]",
          "results": "Optional[Dict[str, Base]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "generate_matches",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]"
        },
        "return_hint": "Generator[Tuple[int, Dict[str, Base]], None, None]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "type": "Optional[int]",
          "content": "Optional[str]",
          "name": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Base",
          "results": "Optional[Dict[str, Base]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "_submatch",
        "parameter_hints": {
          "self": null,
          "node": "Base",
          "results": "Optional[Dict[str, Base]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "type": "Optional[int]",
          "content": "Optional[List[BasePattern]]",
          "name": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "_submatch",
        "parameter_hints": {
          "self": null,
          "node": "Base",
          "results": "Optional[Dict[str, Base]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "content": "Optional[List[List[BasePattern]]]",
          "min": "int",
          "max": "int",
          "name": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "optimize",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "BasePattern"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Base",
          "results": "Optional[Dict[str, Base]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "match_seq",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]",
          "results": "Optional[Dict[str, Base]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "generate_matches",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]"
        },
        "return_hint": "Generator[Tuple[int, Dict[str, Base]], None, None]"
      },
      {
        "function": "_iterative_matches",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]"
        },
        "return_hint": "Generator[Tuple[int, Dict[str, Base]], None, None]"
      },
      {
        "function": "_bare_name_matches",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]"
        },
        "return_hint": "Tuple[int, Dict[str, Base]]"
      },
      {
        "function": "_recursive_matches",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]",
          "count": "int"
        },
        "return_hint": "Generator[Tuple[int, Dict[str, Base]], None, None]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "content": "Optional[BasePattern]"
        },
        "return_hint": "None"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Base"
        },
        "return_hint": "bool"
      },
      {
        "function": "match_seq",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]"
        },
        "return_hint": "bool"
      },
      {
        "function": "generate_matches",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Base]"
        },
        "return_hint": "Generator[Tuple[int, Dict[str, Base]], None, None]"
      },
      {
        "function": "__str__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\refactor_ba19b34abce9dfcf909394be809bc04a.py.py": {
    "num_lines": 535,
    "num_functions": 33,
    "num_parameters": 95,
    "type_hints": [
      {
        "function": "get_all_fix_names",
        "parameter_hints": {
          "fixer_pkg": "str",
          "remove_prefix": "bool"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "_get_head_types",
        "parameter_hints": {
          "pat": "pytree.BasePattern"
        },
        "return_hint": "Set[int]"
      },
      {
        "function": "_get_headnode_dict",
        "parameter_hints": {
          "fixer_list": "List[Any]"
        },
        "return_hint": "Dict[int, List[Any]]"
      },
      {
        "function": "get_fixers_from_package",
        "parameter_hints": {
          "pkg_name": "str"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "_identity",
        "parameter_hints": {
          "obj": "Any"
        },
        "return_hint": "Any"
      },
      {
        "function": "_detect_future_features",
        "parameter_hints": {
          "source": "str"
        },
        "return_hint": "Set[str]"
      },
      {
        "function": "advance",
        "parameter_hints": {},
        "return_hint": "Tuple[int, str]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "fixer_names": "List[str]",
          "options": "Optional[Dict[str, bool]]",
          "explicit": "Optional[List[str]]"
        },
        "return_hint": null
      },
      {
        "function": "get_fixers",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[List[Any], List[Any]]"
      },
      {
        "function": "log_error",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "args": "Any",
          "kwds": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "log_message",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "log_debug",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "print_output",
        "parameter_hints": {
          "self": null,
          "old_text": "str",
          "new_text": "str",
          "filename": "str",
          "equal": "bool"
        },
        "return_hint": "None"
      },
      {
        "function": "refactor",
        "parameter_hints": {
          "self": null,
          "items": "List[str]",
          "write": "bool",
          "doctests_only": "bool"
        },
        "return_hint": "None"
      },
      {
        "function": "refactor_dir",
        "parameter_hints": {
          "self": null,
          "dir_name": "str",
          "write": "bool",
          "doctests_only": "bool"
        },
        "return_hint": "None"
      },
      {
        "function": "_read_python_source",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "Tuple[Optional[str], Optional[str]]"
      },
      {
        "function": "refactor_file",
        "parameter_hints": {
          "self": null,
          "filename": "str",
          "write": "bool",
          "doctests_only": "bool"
        },
        "return_hint": "None"
      },
      {
        "function": "refactor_string",
        "parameter_hints": {
          "self": null,
          "data": "str",
          "name": "str"
        },
        "return_hint": "Optional[pytree.Node]"
      },
      {
        "function": "refactor_stdin",
        "parameter_hints": {
          "self": null,
          "doctests_only": "bool"
        },
        "return_hint": "None"
      },
      {
        "function": "refactor_tree",
        "parameter_hints": {
          "self": null,
          "tree": "pytree.Node",
          "name": "str"
        },
        "return_hint": "bool"
      },
      {
        "function": "traverse_by",
        "parameter_hints": {
          "self": null,
          "fixers": "Dict[int, List[Any]]",
          "traversal": "Generator[pytree.Node, None, None]"
        },
        "return_hint": "None"
      },
      {
        "function": "processed_file",
        "parameter_hints": {
          "self": null,
          "new_text": "str",
          "filename": "str",
          "old_text": "Optional[str]",
          "write": "bool",
          "encoding": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "write_file",
        "parameter_hints": {
          "self": null,
          "new_text": "str",
          "filename": "str",
          "old_text": "str",
          "encoding": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "refactor_docstring",
        "parameter_hints": {
          "self": null,
          "input": "str",
          "filename": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "refactor_doctest",
        "parameter_hints": {
          "self": null,
          "block": "List[str]",
          "lineno": "int",
          "indent": "str",
          "filename": "str"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "summarize",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "parse_block",
        "parameter_hints": {
          "self": null,
          "block": "List[str]",
          "lineno": "int",
          "indent": "str"
        },
        "return_hint": "pytree.Node"
      },
      {
        "function": "wrap_toks",
        "parameter_hints": {
          "self": null,
          "block": "List[str]",
          "lineno": "int",
          "indent": "str"
        },
        "return_hint": "Generator[Tuple[int, str, Tuple[int, int], Tuple[int, int], str], None, None]"
      },
      {
        "function": "gen_lines",
        "parameter_hints": {
          "self": null,
          "block": "List[str]",
          "indent": "str"
        },
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "args": "Any",
          "kwargs": "Any"
        },
        "return_hint": null
      },
      {
        "function": "refactor",
        "parameter_hints": {
          "self": null,
          "items": "List[str]",
          "write": "bool",
          "doctests_only": "bool",
          "num_processes": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "_child",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "refactor_file",
        "parameter_hints": {
          "self": null,
          "args": "Any",
          "kwargs": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_05192c0c8d5a8999a8c094b2ecf40473.py.py": {
    "num_lines": 404,
    "num_functions": 38,
    "num_parameters": 63,
    "type_hints": [
      {
        "function": "to_pos",
        "parameter_hints": {
          "x": "int",
          "y": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "to_xy",
        "parameter_hints": {
          "pos": "int"
        },
        "return_hint": "Tuple[int, int]"
      },
      {
        "function": "computer_move",
        "parameter_hints": {
          "board": "Board"
        },
        "return_hint": "int"
      },
      {
        "function": "versus_cpu",
        "parameter_hints": {},
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "board": "'Board'",
          "pos": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "set_neighbours",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "move",
        "parameter_hints": {
          "self": null,
          "color": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "remove",
        "parameter_hints": {
          "self": null,
          "reference": "'Square'",
          "update": "bool"
        },
        "return_hint": "None"
      },
      {
        "function": "find",
        "parameter_hints": {
          "self": null,
          "update": "bool"
        },
        "return_hint": "'Square'"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "board": "'Board'"
        },
        "return_hint": "None"
      },
      {
        "function": "random_choice",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "add",
        "parameter_hints": {
          "self": null,
          "pos": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "remove",
        "parameter_hints": {
          "self": null,
          "pos": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "set",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "pos": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "board": "'Board'"
        },
        "return_hint": "None"
      },
      {
        "function": "update",
        "parameter_hints": {
          "self": null,
          "square": "Square",
          "color": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "add",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "dupe",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "reset",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "move",
        "parameter_hints": {
          "self": null,
          "pos": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "random_move",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "useful_fast",
        "parameter_hints": {
          "self": null,
          "square": "Square"
        },
        "return_hint": "bool"
      },
      {
        "function": "useful",
        "parameter_hints": {
          "self": null,
          "pos": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "useful_moves",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[int]"
      },
      {
        "function": "replay",
        "parameter_hints": {
          "self": null,
          "history": "List[int]"
        },
        "return_hint": "None"
      },
      {
        "function": "score",
        "parameter_hints": {
          "self": null,
          "color": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "check",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "play",
        "parameter_hints": {
          "self": null,
          "board": "Board"
        },
        "return_hint": "None"
      },
      {
        "function": "select",
        "parameter_hints": {
          "self": null,
          "board": "Board"
        },
        "return_hint": "int"
      },
      {
        "function": "random_playout",
        "parameter_hints": {
          "self": null,
          "board": "Board"
        },
        "return_hint": "None"
      },
      {
        "function": "update_path",
        "parameter_hints": {
          "self": null,
          "board": "Board",
          "color": "int",
          "path": "List['UCTNode']"
        },
        "return_hint": "None"
      },
      {
        "function": "score",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      },
      {
        "function": "best_child",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['UCTNode']"
      },
      {
        "function": "best_visited",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['UCTNode']"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_079afee64b38f3e4ec499d6009906612.py.py": {
    "num_lines": 55,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "rel_path",
        "parameter_hints": {
          "path": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "bench_telco",
        "parameter_hints": {
          "loops": "int",
          "filename": "str"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_083fc82df7d9596c7ee0e92cd5ab86ea.py.py": {
    "num_lines": 19,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "iter_all_commits",
        "parameter_hints": {
          "repo": "dulwich.repo.Repo"
        },
        "return_hint": "Iterator[Commit]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_0ae4d57c5b86320985ca055ab916dace.py.py": {
    "num_lines": 40,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "bench_genshi",
        "parameter_hints": {
          "loops": "int",
          "tmpl_cls": "Callable[[str], object]",
          "tmpl_str": "str"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list",
          "args": "object"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_101bb04648591f38cbb42eaf6aba3288.py.py": {
    "num_lines": 477,
    "num_functions": 37,
    "num_parameters": 83,
    "type_hints": [
      {
        "function": "constraint_pass",
        "parameter_hints": {
          "pos": "Pos",
          "last_move": "Optional[int]"
        },
        "return_hint": "bool"
      },
      {
        "function": "find_moves",
        "parameter_hints": {
          "pos": "Pos",
          "strategy": "int",
          "order": "int"
        },
        "return_hint": "List[Tuple[int, int]]"
      },
      {
        "function": "play_move",
        "parameter_hints": {
          "pos": "Pos",
          "move": "Tuple[int, int]"
        },
        "return_hint": "None"
      },
      {
        "function": "print_pos",
        "parameter_hints": {
          "pos": "Pos",
          "output": "io.StringIO"
        },
        "return_hint": "None"
      },
      {
        "function": "solved",
        "parameter_hints": {
          "pos": "Pos",
          "output": "io.StringIO",
          "verbose": "bool"
        },
        "return_hint": "int"
      },
      {
        "function": "solve_step",
        "parameter_hints": {
          "prev": "Pos",
          "strategy": "int",
          "order": "int",
          "output": "io.StringIO",
          "first": "bool"
        },
        "return_hint": "int"
      },
      {
        "function": "check_valid",
        "parameter_hints": {
          "pos": "Pos"
        },
        "return_hint": "None"
      },
      {
        "function": "solve",
        "parameter_hints": {
          "pos": "Pos",
          "strategy": "int",
          "order": "int",
          "output": "io.StringIO"
        },
        "return_hint": "int"
      },
      {
        "function": "read_file",
        "parameter_hints": {
          "file": "str"
        },
        "return_hint": "Pos"
      },
      {
        "function": "solve_file",
        "parameter_hints": {
          "file": "str",
          "strategy": "int",
          "order": "int",
          "output": "io.StringIO"
        },
        "return_hint": "None"
      },
      {
        "function": "main",
        "parameter_hints": {
          "loops": "int",
          "level": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "pyperf.Runner"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "x": "int",
          "y": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "count": "int",
          "empty": "bool"
        },
        "return_hint": "None"
      },
      {
        "function": "clone",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Done'"
      },
      {
        "function": "__getitem__",
        "parameter_hints": {
          "self": null,
          "i": "int"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "set_done",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "v": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "already_done",
        "parameter_hints": {
          "self": null,
          "i": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "remove",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "v": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "remove_all",
        "parameter_hints": {
          "self": null,
          "v": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "remove_unfixed",
        "parameter_hints": {
          "self": null,
          "v": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "filter_tiles",
        "parameter_hints": {
          "self": null,
          "tiles": "List[int]"
        },
        "return_hint": "None"
      },
      {
        "function": "next_cell_min_choice",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "next_cell_max_choice",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "next_cell_highest_value",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "next_cell_first",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "next_cell_max_neighbors",
        "parameter_hints": {
          "self": null,
          "pos": "'Pos'"
        },
        "return_hint": "int"
      },
      {
        "function": "next_cell_min_neighbors",
        "parameter_hints": {
          "self": null,
          "pos": "'Pos'"
        },
        "return_hint": "int"
      },
      {
        "function": "next_cell",
        "parameter_hints": {
          "self": null,
          "pos": "'Pos'",
          "strategy": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "pos": "Tuple[int, int]",
          "id": "int",
          "links": "List[int]"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "size": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "link_nodes",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "contains_pos",
        "parameter_hints": {
          "self": null,
          "pos": "Tuple[int, int]"
        },
        "return_hint": "bool"
      },
      {
        "function": "get_by_pos",
        "parameter_hints": {
          "self": null,
          "pos": "Tuple[int, int]"
        },
        "return_hint": "Node"
      },
      {
        "function": "get_by_id",
        "parameter_hints": {
          "self": null,
          "id": "int"
        },
        "return_hint": "Node"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "hex": "Hex",
          "tiles": "List[int]",
          "done": "Optional[Done]"
        },
        "return_hint": "None"
      },
      {
        "function": "clone",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Pos'"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_14b1aad8ef40880d34ce019b57e1dd81.py.py": {
    "error": "invalid syntax (<unknown>, line 37)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_17dc7effd52ebd41c89a16fb84ba976e.py.py": {
    "num_lines": 107,
    "num_functions": 9,
    "num_parameters": 19,
    "type_hints": [
      {
        "function": "bpe_encode",
        "parameter_hints": {
          "mergeable_ranks": "Dict[bytes, int]",
          "input": "bytes"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "bpe_train",
        "parameter_hints": {
          "data": "str",
          "vocab_size": "int",
          "pat_str": "str"
        },
        "return_hint": "Dict[bytes, int]"
      },
      {
        "function": "train",
        "parameter_hints": {
          "data": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_bpe_tokeniser",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "pat_str": "str",
          "mergeable_ranks": "Dict[bytes, int]"
        },
        "return_hint": "None"
      },
      {
        "function": "encode",
        "parameter_hints": {
          "self": null,
          "text": "str"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "decode_bytes",
        "parameter_hints": {
          "self": null,
          "tokens": "List[int]"
        },
        "return_hint": "bytes"
      },
      {
        "function": "decode",
        "parameter_hints": {
          "self": null,
          "tokens": "List[int]"
        },
        "return_hint": "str"
      },
      {
        "function": "train",
        "parameter_hints": {
          "training_data": "str",
          "vocab_size": "int",
          "pat_str": "str"
        },
        "return_hint": "SimpleBytePairEncoding"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_1be7503fa8723e91833eb80f31228737.py.py": {
    "num_lines": 23,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "fibonacci",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "bench_coverage",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_1efa63cfa255cc633c18f7dce4818351.py.py": {
    "num_lines": 30,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "create_recursive_containers",
        "parameter_hints": {
          "n_levels": "int"
        },
        "return_hint": "List"
      },
      {
        "function": "benchamark_collection",
        "parameter_hints": {
          "loops": "int",
          "n_levels": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_21026ff8f81b122e6c9cfbf8c29a27cb.py.py": {
    "num_lines": 36,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "tree",
        "parameter_hints": {
          "input": "List[int]"
        },
        "return_hint": "Optional[Tree]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "left": "Optional[Tree]",
          "value": "int",
          "right": "Optional[Tree]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_26727fba89826eeafa7ccc4e1e90c284.py.py": {
    "num_lines": 46,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_sqlalchemy",
        "parameter_hints": {
          "loops": "int",
          "npeople": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list[str]",
          "args": "Namespace"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_268e2f631afb81a04deab49d7cf3fb46.py.py": {
    "num_lines": 53,
    "num_functions": 6,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_expand",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_integrate",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_sum",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_str",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_sympy",
        "parameter_hints": {
          "loops": "int",
          "func": "Callable[[], None]"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_293989a6d5e7f93e90fe279a3c2f7db9.py.py": {
    "num_lines": 53,
    "num_functions": 3,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "generate_filenames",
        "parameter_hints": {
          "tmp_path": "str",
          "num_files": "int"
        },
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "setup",
        "parameter_hints": {
          "num_files": "int"
        },
        "return_hint": "str"
      },
      {
        "function": "bench_pathlib",
        "parameter_hints": {
          "loops": "int",
          "tmp_path": "str"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_2d2b8b8374ccfc0f944485cd5da03ebc.py.py": {
    "num_lines": 25,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_pyaes",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_34494d3bb60355e7d1a04faddcfffc1d.py.py": {
    "num_lines": 50,
    "num_functions": 5,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "capture_regexes",
        "parameter_hints": {},
        "return_hint": "List[Tuple[str, int]]"
      },
      {
        "function": "bench_regex_compile",
        "parameter_hints": {
          "loops": "int",
          "regexes": "List[Tuple[str, int]]"
        },
        "return_hint": "float"
      },
      {
        "function": "capture_compile",
        "parameter_hints": {
          "regex": "str",
          "flags": "int"
        },
        "return_hint": "re.Pattern"
      },
      {
        "function": "capture_search",
        "parameter_hints": {
          "regex": "str",
          "target": "str",
          "flags": "int"
        },
        "return_hint": "re.Match"
      },
      {
        "function": "capture_sub",
        "parameter_hints": {
          "regex": "str",
          "args": null
        },
        "return_hint": "str"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_35477730ea622662cb6c95ff69a68e99.py.py": {
    "num_lines": 206,
    "num_functions": 9,
    "num_parameters": 25,
    "type_hints": [
      {
        "function": "build_xml_tree",
        "parameter_hints": {
          "etree": null
        },
        "return_hint": "'etree.Element'"
      },
      {
        "function": "process",
        "parameter_hints": {
          "etree": null,
          "xml_root": "Optional['etree.Element']"
        },
        "return_hint": "bytes"
      },
      {
        "function": "bench_iterparse",
        "parameter_hints": {
          "etree": null,
          "xml_file": "str",
          "xml_data": "bytes",
          "xml_root": "'etree.Element'"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_parse",
        "parameter_hints": {
          "etree": null,
          "xml_file": "str",
          "xml_data": "bytes",
          "xml_root": "'etree.Element'"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_process",
        "parameter_hints": {
          "etree": null,
          "xml_file": "str",
          "xml_data": "bytes",
          "xml_root": "'etree.Element'"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_generate",
        "parameter_hints": {
          "etree": null,
          "xml_file": "str",
          "xml_data": "bytes",
          "xml_root": "'etree.Element'"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_etree",
        "parameter_hints": {
          "iterations": "int",
          "etree": null,
          "bench_func": "Callable"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list",
          "args": null
        },
        "return_hint": "None"
      },
      {
        "function": "import_module",
        "parameter_hints": {
          "module_name": "str"
        },
        "return_hint": null
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_41759fdf0401f89c962cc7b114aa3e42.py.py": {
    "num_lines": 42,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "fannkuch",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "int"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_432ac9707ee16dffc2f2fe3f1c6bf76c.py.py": {
    "num_lines": 221,
    "num_functions": 8,
    "num_parameters": 20,
    "type_hints": [
      {
        "function": "mutate_dict",
        "parameter_hints": {
          "orig_dict": "Dict[str, Any]",
          "random_source": "random.Random"
        },
        "return_hint": "Dict[str, Any]"
      },
      {
        "function": "bench_pickle",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_unpickle",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_pickle_list",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_unpickle_list",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_pickle_dict",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "is_accelerated_module",
        "parameter_hints": {
          "module": "Any"
        },
        "return_hint": "bool"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_4dc0acdd1240a804f34da8d966a065e1.py.py": {
    "error": "'(' was never closed (<unknown>, line 636)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_54d6e19c1743b019edc613e74d8321ba.py.py": {
    "num_lines": 480,
    "num_functions": 66,
    "num_parameters": 115,
    "type_hints": [
      {
        "function": "chain_test",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "projection_test",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "change",
        "parameter_hints": {
          "v": "'Variable'",
          "new_value": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "delta_blue",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "strength": "int",
          "name": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "stronger",
        "parameter_hints": {
          "cls": null,
          "s1": "'Strength'",
          "s2": "'Strength'"
        },
        "return_hint": "bool"
      },
      {
        "function": "weaker",
        "parameter_hints": {
          "cls": null,
          "s1": "'Strength'",
          "s2": "'Strength'"
        },
        "return_hint": "bool"
      },
      {
        "function": "weakest_of",
        "parameter_hints": {
          "cls": null,
          "s1": "'Strength'",
          "s2": "'Strength'"
        },
        "return_hint": "'Strength'"
      },
      {
        "function": "strongest",
        "parameter_hints": {
          "cls": null,
          "s1": "'Strength'",
          "s2": "'Strength'"
        },
        "return_hint": "'Strength'"
      },
      {
        "function": "next_weaker",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Strength']"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "strength": "Strength"
        },
        "return_hint": "None"
      },
      {
        "function": "add_constraint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "satisfy",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "Optional['Constraint']"
      },
      {
        "function": "destroy_constraint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "is_input",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "v": "'Variable'",
          "strength": "Strength"
        },
        "return_hint": "None"
      },
      {
        "function": "add_to_graph",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "choose_method",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "is_satisfied",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "mark_inputs",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "output",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Variable'"
      },
      {
        "function": "recalculate",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "mark_unsatisfied",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "inputs_known",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "remove_from_graph",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "v": "'Variable'",
          "string": "Strength"
        },
        "return_hint": "None"
      },
      {
        "function": "execute",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "v": "'Variable'",
          "string": "Strength"
        },
        "return_hint": "None"
      },
      {
        "function": "is_input",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "execute",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "v1": "'Variable'",
          "v2": "'Variable'",
          "strength": "Strength"
        },
        "return_hint": "None"
      },
      {
        "function": "choose_method",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "add_to_graph",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "is_satisfied",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "mark_inputs",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "input",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Variable'"
      },
      {
        "function": "output",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Variable'"
      },
      {
        "function": "recalculate",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "mark_unsatisfied",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "inputs_known",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "remove_from_graph",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "src": "'Variable'",
          "scale": "'Variable'",
          "offset": "'Variable'",
          "dest": "'Variable'",
          "strength": "Strength"
        },
        "return_hint": "None"
      },
      {
        "function": "add_to_graph",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "remove_from_graph",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "mark_inputs",
        "parameter_hints": {
          "self": null,
          "mark": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "execute",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "recalculate",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "execute",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "name": "str",
          "initial_value": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "add_constraint",
        "parameter_hints": {
          "self": null,
          "constraint": "Constraint"
        },
        "return_hint": "None"
      },
      {
        "function": "remove_constraint",
        "parameter_hints": {
          "self": null,
          "constraint": "Constraint"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "incremental_add",
        "parameter_hints": {
          "self": null,
          "constraint": "Constraint"
        },
        "return_hint": "None"
      },
      {
        "function": "incremental_remove",
        "parameter_hints": {
          "self": null,
          "constraint": "Constraint"
        },
        "return_hint": "None"
      },
      {
        "function": "new_mark",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "make_plan",
        "parameter_hints": {
          "self": null,
          "sources": "List[Constraint]"
        },
        "return_hint": "'Plan'"
      },
      {
        "function": "extract_plan_from_constraints",
        "parameter_hints": {
          "self": null,
          "constraints": "List[Constraint]"
        },
        "return_hint": "'Plan'"
      },
      {
        "function": "add_propagate",
        "parameter_hints": {
          "self": null,
          "c": "Constraint",
          "mark": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "remove_propagate_from",
        "parameter_hints": {
          "self": null,
          "out": "'Variable'"
        },
        "return_hint": "OrderedCollection"
      },
      {
        "function": "add_constraints_consuming_to",
        "parameter_hints": {
          "self": null,
          "v": "'Variable'",
          "coll": "List[Constraint]"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "add_constraint",
        "parameter_hints": {
          "self": null,
          "c": "Constraint"
        },
        "return_hint": "None"
      },
      {
        "function": "__len__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__getitem__",
        "parameter_hints": {
          "self": null,
          "index": "int"
        },
        "return_hint": "Constraint"
      },
      {
        "function": "execute",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_5f738045810f54167c085e1c7e0b35b8.py.py": {
    "num_lines": 87,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "mutate_dict",
        "parameter_hints": {
          "orig_dict": "Dict[str, Any]",
          "random_source": "random.Random"
        },
        "return_hint": "Dict[str, Any]"
      },
      {
        "function": "bench_json_loads",
        "parameter_hints": {
          "objs": "Tuple[str, str, str]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_6021b120af897a98b208540880d31fa1.py.py": {
    "num_lines": 71,
    "num_functions": 6,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "bench_parse",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_transpile",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_optimize",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_normalize",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list",
          "args": null
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_64e361fd1586e053709bd8ec787fefaf.py.py": {
    "num_lines": 44,
    "num_functions": 3,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "permutations",
        "parameter_hints": {
          "iterable": "Iterable[int]",
          "r": "Optional[int]"
        },
        "return_hint": "Generator[Tuple[int, ...], None, None]"
      },
      {
        "function": "n_queens",
        "parameter_hints": {
          "queen_count": "int"
        },
        "return_hint": "Generator[Tuple[int, ...], None, None]"
      },
      {
        "function": "bench_n_queens",
        "parameter_hints": {
          "queen_count": "int"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_64f067051f53db8fe8e69329b3e087ed.py.py": {
    "num_lines": 19,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_tomli_loads",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_6c16d199d98991cfd04b86f116962777.py.py": {
    "num_lines": 30,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "get_hg_version",
        "parameter_hints": {
          "hg_bin": "str"
        },
        "return_hint": "str"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_735d8e18ff99fd95e3e85b3a045a96ff.py.py": {
    "num_lines": 534,
    "num_functions": 44,
    "num_parameters": 73,
    "type_hints": [
      {
        "function": "printbits",
        "parameter_hints": {
          "v": "int",
          "n": "int"
        },
        "return_hint": "str"
      },
      {
        "function": "reverse_bits",
        "parameter_hints": {
          "v": "int",
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "reverse_bytes",
        "parameter_hints": {
          "v": "int",
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "code_length_orders",
        "parameter_hints": {
          "i": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "distance_base",
        "parameter_hints": {
          "i": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "length_base",
        "parameter_hints": {
          "i": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "extra_distance_bits",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "extra_length_bits",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "move_to_front",
        "parameter_hints": {
          "l": "List[int]",
          "c": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "bwt_transform",
        "parameter_hints": {
          "L": "bytes"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "bwt_reverse",
        "parameter_hints": {
          "L": "bytes",
          "end": "int"
        },
        "return_hint": "bytes"
      },
      {
        "function": "compute_used",
        "parameter_hints": {
          "b": "BitfieldBase"
        },
        "return_hint": "List[bool]"
      },
      {
        "function": "compute_selectors_list",
        "parameter_hints": {
          "b": "BitfieldBase",
          "huffman_groups": "int"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "compute_tables",
        "parameter_hints": {
          "b": "BitfieldBase",
          "huffman_groups": "int",
          "symbols_in_use": "int"
        },
        "return_hint": "List[OrderedHuffmanTable]"
      },
      {
        "function": "decode_huffman_block",
        "parameter_hints": {
          "b": "BitfieldBase",
          "out": "List[bytes]"
        },
        "return_hint": "None"
      },
      {
        "function": "bzip2_main",
        "parameter_hints": {
          "input": "BinaryIO"
        },
        "return_hint": "bytes"
      },
      {
        "function": "gzip_main",
        "parameter_hints": {
          "field": "BinaryIO"
        },
        "return_hint": "str"
      },
      {
        "function": "bench_pyflake",
        "parameter_hints": {
          "loops": "int",
          "filename": "str"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "x": "Union['BitfieldBase', BinaryIO]"
        },
        "return_hint": "None"
      },
      {
        "function": "_read",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "bytes"
      },
      {
        "function": "needbits",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "_mask",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "toskip",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "align",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "dropbits",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "dropbytes",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "tell",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[int, int]"
      },
      {
        "function": "tellbits",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "_more",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "snoopbits",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "readbits",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "_more",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "snoopbits",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "readbits",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "code": "int",
          "bits": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "_sort_func",
        "parameter_hints": {
          "obj": "'HuffmanLength'"
        },
        "return_hint": "Tuple[int, int]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "bootstrap": "List[Tuple[int, int]]"
        },
        "return_hint": "None"
      },
      {
        "function": "populate_huffman_symbols",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "tables_by_bits",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "min_max_bits",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "_find_symbol",
        "parameter_hints": {
          "self": null,
          "bits": "int",
          "symbol": "int",
          "table": "List[HuffmanLength]"
        },
        "return_hint": "int"
      },
      {
        "function": "find_next_symbol",
        "parameter_hints": {
          "self": null,
          "field": "BitfieldBase",
          "reversed": "bool"
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "lengths": "List[int]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_7465a3358d6be0a308ff0dba1c019896.py.py": {
    "num_lines": 26,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "factorial",
        "parameter_hints": {
          "n": "decimal.Decimal",
          "m": "decimal.Decimal"
        },
        "return_hint": "decimal.Decimal"
      },
      {
        "function": "bench_decimal_factorial",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_74e46dc7e24ad277a3ffd520c33499c2.py.py": {
    "num_lines": 56,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_sqlalchemy",
        "parameter_hints": {
          "loops": "int",
          "npeople": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_79b0563155ae7c19376dd17a256bd4c9.py.py": {
    "num_lines": 70,
    "num_functions": 6,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "make_application",
        "parameter_hints": {},
        "return_hint": "Application"
      },
      {
        "function": "make_http_server",
        "parameter_hints": {
          "request_handler": "Application"
        },
        "return_hint": "Tuple[HTTPServer, socket.socket]"
      },
      {
        "function": "bench_tornado",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "get",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "compute_etag",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "run_client",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_7e52e6cf6b6ac0c8c20602f1713d3f9e.py.py": {
    "num_lines": 14,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_9196e0e1a8569bc4d538f9e91f44380b.py.py": {
    "num_lines": 39,
    "num_functions": 4,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "tree",
        "parameter_hints": {
          "input": "list[int]"
        },
        "return_hint": "Tree | None"
      },
      {
        "function": "bench_generators",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "left": "Tree | None",
          "value": "int",
          "right": "Tree | None"
        },
        "return_hint": "None"
      },
      {
        "function": "__iter__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Iterator[int]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_9473d82c1ad213cf726be7d21540b9f3.py.py": {
    "num_lines": 132,
    "num_functions": 4,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "add_metadata",
        "parameter_hints": {
          "runner": "pyperf.Runner"
        },
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list",
          "args": "pyperf.Runner"
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": "pyperf.Runner"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "use_task_groups": "bool"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_958ac12d9a928de9aad6c1b814c51ef7.py.py": {
    "num_lines": 240,
    "num_functions": 23,
    "num_parameters": 51,
    "type_hints": [
      {
        "function": "write_ppm",
        "parameter_hints": {
          "im": "List[List[int]]",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "main",
        "parameter_hints": {
          "runner": "pyperf.Runner",
          "args": null
        },
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": null,
          "args": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "x": "float",
          "y": "float",
          "z": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "Mag",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      },
      {
        "function": "dist",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'"
        },
        "return_hint": "float"
      },
      {
        "function": "__add__",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "__sub__",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "__mul__",
        "parameter_hints": {
          "self": null,
          "other": "float"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "linear_combination",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'",
          "l1": "float",
          "l2": "Optional[float]"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "__str__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "points": "List[GVector]",
          "degree": "int",
          "knots": "List[float]"
        },
        "return_hint": "None"
      },
      {
        "function": "GetDomain",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[float, float]"
      },
      {
        "function": "__call__",
        "parameter_hints": {
          "self": null,
          "u": "float"
        },
        "return_hint": "GVector"
      },
      {
        "function": "GetIndex",
        "parameter_hints": {
          "self": null,
          "u": "float"
        },
        "return_hint": "int"
      },
      {
        "function": "__len__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "splines": "List[Spline]",
          "thickness": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "get_random_trafo",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[int, int]"
      },
      {
        "function": "transform_point",
        "parameter_hints": {
          "self": null,
          "point": "GVector",
          "trafo": "Optional[Tuple[int, int]]"
        },
        "return_hint": "GVector"
      },
      {
        "function": "truncate",
        "parameter_hints": {
          "self": null,
          "point": "GVector"
        },
        "return_hint": "None"
      },
      {
        "function": "create_image_chaos",
        "parameter_hints": {
          "self": null,
          "w": "int",
          "h": "int",
          "iterations": "int",
          "filename": "Optional[str]",
          "rng_seed": "int"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_95edf135ddae7bd47dbd5e98374098f5.py.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_html5lib",
        "parameter_hints": {
          "html_file": "BinaryIO"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_97b7db16323aeacce0598574c19d7dc4.py.py": {
    "num_lines": 60,
    "num_functions": 5,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "generate_arguments",
        "parameter_hints": {
          "i": "int"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "bm_many_optionals",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bm_subparsers",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "argparse.Namespace"
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": "argparse.ArgumentParser"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_a245e0361625bbc6129c2b1ec112e9db.py.py": {
    "num_lines": 116,
    "num_functions": 7,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "re_compile",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "re.Pattern"
      },
      {
        "function": "gen_regex_table",
        "parameter_hints": {},
        "return_hint": "List[re.Pattern]"
      },
      {
        "function": "gen_string_table",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "init_benchmarks",
        "parameter_hints": {
          "n_values": "Optional[List[int]]"
        },
        "return_hint": "List[Tuple[re.Pattern, str]]"
      },
      {
        "function": "bench_regex_effbot",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": null
        },
        "return_hint": "None"
      },
      {
        "function": "append",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_a28c6e02f54a08e0b801c4930e06d67b.py.py": {
    "num_lines": 37,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_a33097bd5241761d2d3d046b36d9afd4.py.py": {
    "num_lines": 66,
    "num_functions": 6,
    "num_parameters": 10,
    "type_hints": [
      {
        "function": "make_some_widgets",
        "parameter_hints": {},
        "return_hint": "List[Widget]"
      },
      {
        "function": "bench_comprehensions",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "owner_id": "int",
          "widgets": "List[Widget]"
        },
        "return_hint": "None"
      },
      {
        "function": "_any_knobby",
        "parameter_hints": {
          "self": null,
          "widgets": "List[Optional[Widget]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "_is_big_spinny",
        "parameter_hints": {
          "self": null,
          "widget": "Widget"
        },
        "return_hint": "bool"
      },
      {
        "function": "_add_widgets",
        "parameter_hints": {
          "self": null,
          "widgets": "List[Widget]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_a55d3dd13b512cfe214145c5e92afdc6.py.py": {
    "num_lines": 46,
    "num_functions": 3,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "bench_json_dumps",
        "parameter_hints": {
          "data": "List[Tuple[Any, range]]"
        },
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_a98f596fc7b09c623910e5db7e8f8ffc.py.py": {
    "num_lines": 20,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_ad565b18eba62edc0cc5a53f755fbc29.py.py": {
    "num_lines": 25,
    "num_functions": 3,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "f",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "bench_mp_pool",
        "parameter_hints": {
          "p": "int",
          "n": "int",
          "chunk": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_thread_pool",
        "parameter_hints": {
          "c": "int",
          "n": "int",
          "chunk": "int"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_b26b9b306d7c5987b898c17b5ef45275.py.py": {
    "num_lines": 39,
    "num_functions": 4,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "bench_sqlite",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "step",
        "parameter_hints": {
          "self": null,
          "x": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "finalize",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_b89518a404d01c8afa20b38d197e3f9a.py.py": {
    "num_lines": 355,
    "num_functions": 58,
    "num_parameters": 116,
    "type_hints": [
      {
        "function": "firstIntersection",
        "parameter_hints": {
          "intersections": "List[Tuple[object, Optional[float], object]]"
        },
        "return_hint": "Optional[Tuple[object, float, object]]"
      },
      {
        "function": "addColours",
        "parameter_hints": {
          "a": "Tuple[float, float, float]",
          "scale": "float",
          "b": "Tuple[float, float, float]"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "bench_raytrace",
        "parameter_hints": {
          "loops": "int",
          "width": "int",
          "height": "int",
          "filename": "Optional[str]"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "object"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "initx": "float",
          "inity": "float",
          "initz": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "__str__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "magnitude",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      },
      {
        "function": "__add__",
        "parameter_hints": {
          "self": null,
          "other": "Union['Vector', 'Point']"
        },
        "return_hint": "Union['Vector', 'Point']"
      },
      {
        "function": "__sub__",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "scale",
        "parameter_hints": {
          "self": null,
          "factor": "float"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "dot",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "float"
      },
      {
        "function": "cross",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "normalized",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "negated",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "__eq__",
        "parameter_hints": {
          "self": null,
          "other": "object"
        },
        "return_hint": "bool"
      },
      {
        "function": "isVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isPoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "mustBeVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "mustBePoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "reflectThrough",
        "parameter_hints": {
          "self": null,
          "normal": "'Vector'"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "initx": "float",
          "inity": "float",
          "initz": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "__str__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__add__",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "'Point'"
      },
      {
        "function": "__sub__",
        "parameter_hints": {
          "self": null,
          "other": "Union['Point', 'Vector']"
        },
        "return_hint": "Union['Vector', 'Point']"
      },
      {
        "function": "isVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isPoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "mustBeVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "mustBePoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Point'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "centre": "Point",
          "radius": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "intersectionTime",
        "parameter_hints": {
          "self": null,
          "ray": "'Ray'"
        },
        "return_hint": "Optional[float]"
      },
      {
        "function": "normalAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Vector"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "point": "Point",
          "normal": "Vector"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "intersectionTime",
        "parameter_hints": {
          "self": null,
          "ray": "'Ray'"
        },
        "return_hint": "Optional[float]"
      },
      {
        "function": "normalAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Vector"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "point": "Point",
          "vector": "Vector"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "pointAtTime",
        "parameter_hints": {
          "self": null,
          "t": "float"
        },
        "return_hint": "Point"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "width": "int",
          "height": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "plot",
        "parameter_hints": {
          "self": null,
          "x": "int",
          "y": "int",
          "r": "float",
          "g": "float",
          "b": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "write_ppm",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "moveTo",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "None"
      },
      {
        "function": "lookAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "None"
      },
      {
        "function": "addObject",
        "parameter_hints": {
          "self": null,
          "object": "object",
          "surface": "object"
        },
        "return_hint": "None"
      },
      {
        "function": "addLight",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "None"
      },
      {
        "function": "render",
        "parameter_hints": {
          "self": null,
          "canvas": "Canvas"
        },
        "return_hint": "None"
      },
      {
        "function": "rayColour",
        "parameter_hints": {
          "self": null,
          "ray": "Ray"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "_lightIsVisible",
        "parameter_hints": {
          "self": null,
          "l": "Point",
          "p": "Point"
        },
        "return_hint": "bool"
      },
      {
        "function": "visibleLights",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "List[Point]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "kwargs": null
        },
        "return_hint": "None"
      },
      {
        "function": "baseColourAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "colourAt",
        "parameter_hints": {
          "self": null,
          "scene": "Scene",
          "ray": "Ray",
          "p": "Point",
          "normal": "Vector"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "kwargs": null
        },
        "return_hint": "None"
      },
      {
        "function": "baseColourAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Tuple[float, float, float]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_ba302be588b03433d3833330ef334694.py.py": {
    "num_lines": 25,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_coroutines",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_bbaface73b5271d284816da26ab45a2e.py.py": {
    "num_lines": 47,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "build_html",
        "parameter_hints": {
          "doc_root": "Path"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_docutils",
        "parameter_hints": {
          "loops": "int",
          "doc_root": "Path"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_c193048bf6974d42edd1a8e1d38d51fa.py.py": {
    "num_lines": 126,
    "num_functions": 7,
    "num_parameters": 16,
    "type_hints": [
      {
        "function": "make_cumulative",
        "parameter_hints": {
          "table": "List[Tuple[str, float]]"
        },
        "return_hint": "Tuple[List[float], List[int]]"
      },
      {
        "function": "repeat_fasta",
        "parameter_hints": {
          "src": "str",
          "n": "int",
          "nprint": "Callable[[bytes], None]"
        },
        "return_hint": "None"
      },
      {
        "function": "random_fasta",
        "parameter_hints": {
          "table": "List[Tuple[str, float]]",
          "n": "int",
          "seed": "float",
          "nprint": "Callable[[bytes], None]"
        },
        "return_hint": "float"
      },
      {
        "function": "init_benchmarks",
        "parameter_hints": {
          "n": "int",
          "rng_seed": "int"
        },
        "return_hint": "bytes"
      },
      {
        "function": "run_benchmarks",
        "parameter_hints": {
          "seq": "bytes"
        },
        "return_hint": "Tuple[List[int], int, int, int]"
      },
      {
        "function": "bench_regex_dna",
        "parameter_hints": {
          "loops": "int",
          "seq": "bytes",
          "expected_res": "Optional[Tuple[List[int], int, int, int]]"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "pyperf.Runner",
          "args": "pyperf.Runner"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_ca073e899d60ce995a3685d97078e2ed.py.py": {
    "num_lines": 57,
    "num_functions": 1,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_cca3b64b92d026f4feb24fcec90fe159.py.py": {
    "error": "invalid syntax (<unknown>, line 12)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_ce0e39f2be42224684270a194a2fe3b4.py.py": {
    "num_lines": 108,
    "num_functions": 6,
    "num_parameters": 18,
    "type_hints": [
      {
        "function": "combinations",
        "parameter_hints": {
          "l": "List"
        },
        "return_hint": "List[Tuple]"
      },
      {
        "function": "advance",
        "parameter_hints": {
          "dt": "float",
          "n": "int",
          "bodies": "List[Tuple[List[float], List[float], float]]",
          "pairs": "List[Tuple[Tuple[List[float], List[float], float], Tuple[List[float], List[float], float]]]"
        },
        "return_hint": "None"
      },
      {
        "function": "report_energy",
        "parameter_hints": {
          "bodies": "List[Tuple[List[float], List[float], float]]",
          "pairs": "List[Tuple[Tuple[List[float], List[float], float], Tuple[List[float], List[float], float]]]",
          "e": "float"
        },
        "return_hint": "float"
      },
      {
        "function": "offset_momentum",
        "parameter_hints": {
          "ref": "Tuple[List[float], List[float], float]",
          "bodies": "List[Tuple[List[float], List[float], float]]",
          "px": "float",
          "py": "float",
          "pz": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_nbody",
        "parameter_hints": {
          "loops": "int",
          "reference": "str",
          "iterations": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_d0531dbcb196b002efdeaa7a81b1fd9c.py.py": {
    "num_lines": 18,
    "num_functions": 1,
    "num_parameters": 0,
    "type_hints": [
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_d55e5927075139a1ac0cc6dbe7fee59b.py.py": {
    "num_lines": 39,
    "num_functions": 5,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "bench_shortest_path",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_connected_components",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_k_core",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list",
          "args": "argparse.Namespace"
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": "argparse.ArgumentParser"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_d5780ee905aac0d8545a6b5d3e1c3af6.py.py": {
    "num_lines": 62,
    "num_functions": 5,
    "num_parameters": 13,
    "type_hints": [
      {
        "function": "read_all_files",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "open",
        "parameter_hints": {
          "file": "Union[str, Path]",
          "mode": "str",
          "buffering": "int",
          "encoding": "str",
          "errors": "str",
          "newline": "str",
          "closefd": "bool",
          "opener": null
        },
        "return_hint": "Union[io.BytesIO, io.StringIO, io.TextIOWrapper]"
      },
      {
        "function": "replace",
        "parameter_hints": {
          "src": "str",
          "dst": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "build_doc",
        "parameter_hints": {
          "doc_root": "Path"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_sphinx",
        "parameter_hints": {
          "loops": "int",
          "doc_root": "Path"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_d7485f1540815ff9846e47c93bb7b997.py.py": {
    "num_lines": 347,
    "num_functions": 39,
    "num_parameters": 85,
    "type_hints": [
      {
        "function": "trace",
        "parameter_hints": {
          "a": "Union[str, int]"
        },
        "return_hint": "None"
      },
      {
        "function": "schedule",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "l": "Optional['Packet']",
          "i": "int",
          "k": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "append_to",
        "parameter_hints": {
          "self": null,
          "lst": "Optional['Packet']"
        },
        "return_hint": "'Packet'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "workInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "deviceInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "packetPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "running",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "isPacketPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHolding",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHoldingOrWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isWaitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "initialState": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "addPacket",
        "parameter_hints": {
          "self": null,
          "p": "Packet",
          "old": "'Task'"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "runTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "waitTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Task'"
      },
      {
        "function": "hold",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "release",
        "parameter_hints": {
          "self": null,
          "i": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "qpkt",
        "parameter_hints": {
          "self": null,
          "pkt": "Packet"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "findtcb",
        "parameter_hints": {
          "self": null,
          "id": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "DeviceTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "HandlerTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "IdleTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "WorkerTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "iterations": "int"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_db768e7124854f442d014d84437038ed.py.py": {
    "num_lines": 339,
    "num_functions": 39,
    "num_parameters": 85,
    "type_hints": [
      {
        "function": "trace",
        "parameter_hints": {
          "a": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "schedule",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "l": "Optional['Packet']",
          "i": "int",
          "k": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "append_to",
        "parameter_hints": {
          "self": null,
          "lst": "Optional['Packet']"
        },
        "return_hint": "'Packet'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "workInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "deviceInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "packetPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "running",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "isPacketPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHolding",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHoldingOrWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isWaitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "initialState": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "addPacket",
        "parameter_hints": {
          "self": null,
          "p": "Packet",
          "old": "'Task'"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "runTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "waitTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Task'"
      },
      {
        "function": "hold",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "release",
        "parameter_hints": {
          "self": null,
          "i": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "qpkt",
        "parameter_hints": {
          "self": null,
          "pkt": "Packet"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "findtcb",
        "parameter_hints": {
          "self": null,
          "id": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "DeviceTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "HandlerTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "IdleTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "WorkerTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "iterations": "int"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_dc3dd40536a1de9023f8266cf6fdbfe8.py.py": {
    "num_lines": 213,
    "num_functions": 17,
    "num_parameters": 49,
    "type_hints": [
      {
        "function": "topoSort",
        "parameter_hints": {
          "roots": "List",
          "getParents": "Callable"
        },
        "return_hint": "List"
      },
      {
        "function": "getDamages",
        "parameter_hints": {
          "L": "int",
          "A": "int",
          "D": "int",
          "B": "int",
          "stab": "bool",
          "te": "float"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "getCritDist",
        "parameter_hints": {
          "L": "int",
          "p": "Fraction",
          "A1": "int",
          "A2": "int",
          "D1": "int",
          "D2": "int",
          "B": "int",
          "stab": "bool",
          "te": "float"
        },
        "return_hint": "Dict[int, Fraction]"
      },
      {
        "function": "plus12",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "applyHPChange",
        "parameter_hints": {
          "hstate": "halfstate_t",
          "change": "int"
        },
        "return_hint": "halfstate_t"
      },
      {
        "function": "applyBadgeBoosts",
        "parameter_hints": {
          "badges": "Tuple[int, int, int, int]",
          "stats": "stats_t"
        },
        "return_hint": "stats_t"
      },
      {
        "function": "_applyActionSide1",
        "parameter_hints": {
          "state": "Tuple[halfstate_t, halfstate_t, int]",
          "act": "str"
        },
        "return_hint": "Dict[Tuple[halfstate_t, halfstate_t, int], Fraction]"
      },
      {
        "function": "_applyAction",
        "parameter_hints": {
          "state": "Tuple[halfstate_t, halfstate_t, int]",
          "side": "int",
          "act": "str"
        },
        "return_hint": "Dict[Tuple[halfstate_t, halfstate_t, int], Fraction]"
      },
      {
        "function": "bench_mdp",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "_getSuccessorsA",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple[int, Tuple[halfstate_t, halfstate_t, int]]"
        },
        "return_hint": "List[Tuple[int, Tuple[halfstate_t, halfstate_t, int], str]]"
      },
      {
        "function": "_applyActionPair",
        "parameter_hints": {
          "self": null,
          "state": "Tuple[halfstate_t, halfstate_t, int]",
          "side1": "int",
          "act1": "str",
          "side2": "int",
          "act2": "str",
          "dist": "Dict",
          "pmult": "Fraction"
        },
        "return_hint": "None"
      },
      {
        "function": "_getSuccessorsB",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple[int, Tuple[halfstate_t, halfstate_t, int], str]"
        },
        "return_hint": "Dict[Tuple, float]"
      },
      {
        "function": "_getSuccessorsC",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple[int, Tuple[halfstate_t, halfstate_t, int], int, str]"
        },
        "return_hint": "Dict[Tuple, float]"
      },
      {
        "function": "getSuccessors",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple"
        },
        "return_hint": "Union[List, Dict]"
      },
      {
        "function": "getSuccessorsList",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple"
        },
        "return_hint": "List"
      },
      {
        "function": "evaluate",
        "parameter_hints": {
          "self": null,
          "tolerance": "float"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_dff26d535b0e89b50097c808066750ec.py.py": {
    "num_lines": 113,
    "num_functions": 10,
    "num_parameters": 31,
    "type_hints": [
      {
        "function": "rotate",
        "parameter_hints": {
          "ido": "List[int]",
          "rd": "Dict[int, int]"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "flip",
        "parameter_hints": {
          "ido": "List[int]",
          "fd": "Dict[int, int]"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "permute",
        "parameter_hints": {
          "ido": "List[int]",
          "r_ido": "List[int]",
          "rotate": null,
          "flip": null
        },
        "return_hint": "List[List[int]]"
      },
      {
        "function": "convert",
        "parameter_hints": {
          "ido": "List[int]"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "get_footprints",
        "parameter_hints": {
          "board": "List[int]",
          "cti": "Dict[int, int]",
          "pieces": "List[List[List[int]]]"
        },
        "return_hint": "List[List[List[FrozenSet[int]]]]"
      },
      {
        "function": "get_senh",
        "parameter_hints": {
          "board": "List[int]",
          "cti": "Dict[int, int]"
        },
        "return_hint": "List[FrozenSet[int]]"
      },
      {
        "function": "get_puzzle",
        "parameter_hints": {
          "width": "int",
          "height": "int"
        },
        "return_hint": "Tuple[List[int], Dict[int, int], List[List[List[int]]]]"
      },
      {
        "function": "solve",
        "parameter_hints": {
          "n": "int",
          "i_min": "int",
          "free": "FrozenSet[int]",
          "curr_board": "List[int]",
          "pieces_left": "List[int]",
          "solutions": "List[str]",
          "fps": "List[List[List[FrozenSet[int]]]]",
          "se_nh": "List[FrozenSet[int]]",
          "bisect": null
        },
        "return_hint": "None"
      },
      {
        "function": "bench_meteor_contest",
        "parameter_hints": {
          "loops": "int",
          "board": "List[int]",
          "pieces": "List[List[List[int]]]",
          "solve_arg": "int",
          "fps": "List[List[List[FrozenSet[int]]]]",
          "se_nh": "List[FrozenSet[int]]"
        },
        "return_hint": "float"
      },
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_e13886742d29f7347d4ce5fd3df9e7ac.py.py": {
    "num_lines": 22,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "inc",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "int"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_e36e06e08b165fd948b9fec76a0d5acf.py.py": {
    "num_lines": 108,
    "num_functions": 5,
    "num_parameters": 12,
    "type_hints": [
      {
        "function": "truncate_stream",
        "parameter_hints": {
          "stream": "io.StringIO"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_silent",
        "parameter_hints": {
          "loops": "int",
          "logger": "logging.Logger",
          "stream": "io.StringIO"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_simple_output",
        "parameter_hints": {
          "loops": "int",
          "logger": "logging.Logger",
          "stream": "io.StringIO"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_formatted_output",
        "parameter_hints": {
          "loops": "int",
          "logger": "logging.Logger",
          "stream": "io.StringIO"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list",
          "args": "argparse.Namespace"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_e40666714496fa08885bd7c6883de76b.py.py": {
    "num_lines": 161,
    "num_functions": 25,
    "num_parameters": 25,
    "type_hints": [
      {
        "function": "bench_protocols",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "one",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "two",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "three",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytes"
      },
      {
        "function": "four",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "memoryview"
      },
      {
        "function": "five",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytearray"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "x",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "one",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "two",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "three",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytes"
      },
      {
        "function": "four",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "memoryview"
      },
      {
        "function": "five",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytearray"
      },
      {
        "function": "x",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_e77a04005a6abbca76058ef014ab41a6.py.py": {
    "num_lines": 38,
    "num_functions": 1,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_mako",
        "parameter_hints": {
          "runner": "pyperf.Runner",
          "table_size": "int",
          "nparagraph": "int",
          "img_count": "int"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_e7f5416c8fddb15d9ca4fdd9c195a6ee.py.py": {
    "num_lines": 1338,
    "num_functions": 13,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "block0",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block1",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block2",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block3",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block4",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block5",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block6",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block7",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block8",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block9",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block10",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "block11",
        "parameter_hints": {},
        "return_hint": null
      },
      {
        "function": "bench_regex_v8",
        "parameter_hints": {
          "loops": null
        },
        "return_hint": null
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_e93163c78613c4410d2fe21b2a81f7a2.py.py": {
    "num_lines": 52,
    "num_functions": 5,
    "num_parameters": 10,
    "type_hints": [
      {
        "function": "create_cycle",
        "parameter_hints": {
          "node": "Node",
          "n_links": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "create_gc_cycles",
        "parameter_hints": {
          "n_cycles": "int",
          "n_links": "int"
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "benchamark_collection",
        "parameter_hints": {
          "loops": "int",
          "cycles": "int",
          "links": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "link_next",
        "parameter_hints": {
          "self": null,
          "next": "'Node'"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_ed36b868873c9ca9cb835088629996b5.py.py": {
    "num_lines": 69,
    "num_functions": 6,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "benchmark_reduce",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "benchmark_memo",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "benchmark",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__reduce__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "tuple"
      },
      {
        "function": "__setstate__",
        "parameter_hints": {
          "self": null,
          "state": "dict"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_ef50c0004e4c63b45751afdedd20f922.py.py": {
    "num_lines": 46,
    "num_functions": 6,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "gen_x",
        "parameter_hints": {},
        "return_hint": "Iterator[Tuple[int, int, int, int]]"
      },
      {
        "function": "compose",
        "parameter_hints": {
          "a": "Tuple[int, int, int, int]",
          "b": "Tuple[int, int, int, int]"
        },
        "return_hint": "Tuple[int, int, int, int]"
      },
      {
        "function": "extract",
        "parameter_hints": {
          "z": "Tuple[int, int, int, int]",
          "j": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "gen_pi_digits",
        "parameter_hints": {},
        "return_hint": "Iterator[int]"
      },
      {
        "function": "calc_ndigits",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "pyperf.Runner",
          "args": "pyperf.Runner"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_f4779276baee1e691111c58f163c03a0.py.py": {
    "num_lines": 27,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_django_template",
        "parameter_hints": {
          "runner": "pyperf.Runner",
          "size": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "prepare_cmd",
        "parameter_hints": {
          "runner": "pyperf.Runner",
          "cmd": "List[str]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_f4909fc93f2b77fbaa7a1a62f396ad97.py.py": {
    "num_lines": 360,
    "num_functions": 34,
    "num_parameters": 82,
    "type_hints": [
      {
        "function": "copy_vector",
        "parameter_hints": {
          "vec": "array"
        },
        "return_hint": "array"
      },
      {
        "function": "SOR_execute",
        "parameter_hints": {
          "omega": "float",
          "G": "Array2D",
          "cycles": "int",
          "Array": "type"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_SOR",
        "parameter_hints": {
          "loops": "int",
          "n": "int",
          "cycles": "int",
          "Array": "type"
        },
        "return_hint": "float"
      },
      {
        "function": "SparseCompRow_matmult",
        "parameter_hints": {
          "M": "int",
          "y": "array",
          "val": "array",
          "row": "array",
          "col": "array",
          "x": "array",
          "num_iterations": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_SparseMatMult",
        "parameter_hints": {
          "cycles": "int",
          "N": "int",
          "nz": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "MonteCarlo",
        "parameter_hints": {
          "Num_samples": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_MonteCarlo",
        "parameter_hints": {
          "loops": "int",
          "Num_samples": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "LU_factor",
        "parameter_hints": {
          "A": "ArrayList",
          "pivot": "array"
        },
        "return_hint": "None"
      },
      {
        "function": "LU",
        "parameter_hints": {
          "lu": "ArrayList",
          "A": "ArrayList",
          "pivot": "array"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_LU",
        "parameter_hints": {
          "cycles": "int",
          "N": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "int_log2",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "FFT_num_flops",
        "parameter_hints": {
          "N": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "FFT_transform_internal",
        "parameter_hints": {
          "N": "int",
          "data": "array",
          "direction": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "FFT_bitreverse",
        "parameter_hints": {
          "N": "int",
          "data": "array"
        },
        "return_hint": "None"
      },
      {
        "function": "FFT_transform",
        "parameter_hints": {
          "N": "int",
          "data": "array"
        },
        "return_hint": "None"
      },
      {
        "function": "FFT_inverse",
        "parameter_hints": {
          "N": "int",
          "data": "array"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_FFT",
        "parameter_hints": {
          "loops": "int",
          "N": "int",
          "cycles": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "pyperf.Runner"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "w": "int",
          "h": "int",
          "data": "Optional[List[List[float]]]"
        },
        "return_hint": "None"
      },
      {
        "function": "_idx",
        "parameter_hints": {
          "self": null,
          "x": "int",
          "y": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "__getitem__",
        "parameter_hints": {
          "self": null,
          "x_y": "Tuple[int, int]"
        },
        "return_hint": "float"
      },
      {
        "function": "__setitem__",
        "parameter_hints": {
          "self": null,
          "x_y": "Tuple[int, int]",
          "val": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "setup",
        "parameter_hints": {
          "self": null,
          "data": "List[List[float]]"
        },
        "return_hint": "'Array2D'"
      },
      {
        "function": "indexes",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator[Tuple[int, int], None, None]"
      },
      {
        "function": "copy_data_from",
        "parameter_hints": {
          "self": null,
          "other": "'Array2D'"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "seed": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "initialize",
        "parameter_hints": {
          "self": null,
          "seed": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "nextDouble",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      },
      {
        "function": "RandomMatrix",
        "parameter_hints": {
          "self": null,
          "a": "Array2D"
        },
        "return_hint": "Array2D"
      },
      {
        "function": "RandomVector",
        "parameter_hints": {
          "self": null,
          "n": "int"
        },
        "return_hint": "array"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "w": "int",
          "h": "int",
          "data": "Optional[List[List[float]]]"
        },
        "return_hint": "None"
      },
      {
        "function": "__getitem__",
        "parameter_hints": {
          "self": null,
          "idx": "Tuple[int, int]"
        },
        "return_hint": "float"
      },
      {
        "function": "__setitem__",
        "parameter_hints": {
          "self": null,
          "idx": "Tuple[int, int]",
          "val": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "copy_data_from",
        "parameter_hints": {
          "self": null,
          "other": "'ArrayList'"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_fe7e80f88187eee851b45d280f1d907a.py.py": {
    "num_lines": 26,
    "num_functions": 2,
    "num_parameters": 0,
    "type_hints": [
      {
        "function": "pi_decimal",
        "parameter_hints": {},
        "return_hint": "decimal.Decimal"
      },
      {
        "function": "bench_decimal_pi",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\run_benchmark_ff55a410a7f31c4a3ea3646528a81cb1.py.py": {
    "num_lines": 30,
    "num_functions": 1,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "pyperf._argparse.Namespace"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\tokenize_b7662d3f564d80fcd8b53af809f8752a.py.py": {
    "num_lines": 383,
    "num_functions": 17,
    "num_parameters": 26,
    "type_hints": [
      {
        "function": "group",
        "parameter_hints": {
          "choices": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "any",
        "parameter_hints": {
          "choices": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "maybe",
        "parameter_hints": {
          "choices": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "_combinations",
        "parameter_hints": {
          "l": "str"
        },
        "return_hint": "set"
      },
      {
        "function": "printtoken",
        "parameter_hints": {
          "type": "int",
          "token": "str",
          "xxx_todo_changeme": "Tuple[int, int]",
          "xxx_todo_changeme1": "Tuple[int, int]",
          "line": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "tokenize",
        "parameter_hints": {
          "readline": "Callable[[], str]",
          "tokeneater": "Callable[..., None]"
        },
        "return_hint": "None"
      },
      {
        "function": "tokenize_loop",
        "parameter_hints": {
          "readline": "Callable[[], str]",
          "tokeneater": "Callable[..., None]"
        },
        "return_hint": "None"
      },
      {
        "function": "_get_normal_name",
        "parameter_hints": {
          "orig_enc": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "detect_encoding",
        "parameter_hints": {
          "readline": "Callable[[], bytes]"
        },
        "return_hint": "Tuple[str, List[bytes]]"
      },
      {
        "function": "untokenize",
        "parameter_hints": {
          "iterable": "Generator[Tuple[int, str, Tuple[int, int], Tuple[int, int], str], None, None]"
        },
        "return_hint": "str"
      },
      {
        "function": "generate_tokens",
        "parameter_hints": {
          "readline": "Callable[[], str]"
        },
        "return_hint": "Generator[Tuple[int, str, Tuple[int, int], Tuple[int, int], str], None, None]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "add_whitespace",
        "parameter_hints": {
          "self": null,
          "start": "Tuple[int, int]"
        },
        "return_hint": "None"
      },
      {
        "function": "untokenize",
        "parameter_hints": {
          "self": null,
          "iterable": "Generator[Tuple[int, str, Tuple[int, int], Tuple[int, int], str], None, None]"
        },
        "return_hint": "str"
      },
      {
        "function": "compat",
        "parameter_hints": {
          "self": null,
          "token": "Tuple[int, str]",
          "iterable": "Generator[Tuple[int, str], None, None]"
        },
        "return_hint": "None"
      },
      {
        "function": "read_or_stop",
        "parameter_hints": {},
        "return_hint": "bytes"
      },
      {
        "function": "find_cookie",
        "parameter_hints": {
          "line": "bytes"
        },
        "return_hint": "Optional[str]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\token_5adf5a279650e10ecd71aed939a26b65.py.py": {
    "num_lines": 76,
    "num_functions": 3,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "ISTERMINAL",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "ISNONTERMINAL",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "ISEOF",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\__init___5f53cb190f7f70b5109965ef06d59e91.py.py": {
    "num_lines": 28,
    "num_functions": 4,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "parse_file",
        "parameter_hints": {
          "filename": "str"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "tokenize_line",
        "parameter_hints": {
          "line": "str"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "process_tokens",
        "parameter_hints": {
          "tokens": "List[str]"
        },
        "return_hint": "List[Tuple[str, int]]"
      },
      {
        "function": "main",
        "parameter_hints": {
          "filename": "str"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\__init___68b329da9893e34099c7d8ad5cb9c940.py.py": {
    "error": "invalid syntax (<unknown>, line 1)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\GPT4o\\__main___ec49d82b59fd16b0aa7ad9e9096a35e2.py.py": {
    "num_lines": 7,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "annotated_main",
        "parameter_hints": {
          "module_name": "str"
        },
        "return_hint": "int"
      }
    ]
  }
}