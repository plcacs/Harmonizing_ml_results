{
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\Analysis_detailed_python_files.py": {
    "num_lines": 60,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "analyze_python_file",
        "parameter_hints": {
          "file_path": "str"
        },
        "return_hint": "Dict[str, Union[int, str, List[Dict[str, Any]]]]"
      },
      {
        "function": "analyze_all_py_files",
        "parameter_hints": {
          "directory": "str"
        },
        "return_hint": "Dict[str, Dict[str, Union[int, str]]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\Analysis_python_files.py": {
    "num_lines": 43,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "analyze_python_file",
        "parameter_hints": {
          "file_path": "str"
        },
        "return_hint": "Dict[str, Union[int, str]]"
      },
      {
        "function": "analyze_all_py_files",
        "parameter_hints": {
          "directory": "str"
        },
        "return_hint": "Dict[str, Dict[str, Union[int, str]]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\bm_regex_effbot_a245e0361625bbc6129c2b1ec112e9db.py": {
    "num_lines": 95,
    "num_functions": 7,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "re_compile",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "Pattern[Union[str, bytes]]"
      },
      {
        "function": "gen_regex_table",
        "parameter_hints": {},
        "return_hint": "List[Pattern[Union[str, bytes]]]"
      },
      {
        "function": "gen_string_table",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "List[Union[str, bytes]]"
      },
      {
        "function": "init_benchmarks",
        "parameter_hints": {
          "n_values": "Optional[List[int]]"
        },
        "return_hint": "List[Tuple[Pattern[Union[str, bytes]], Union[str, bytes]]]"
      },
      {
        "function": "bench_regex_effbot",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "append",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\bm_regex_v8_a19cb9eda8ce2526c19c5eb844d76145.py": {
    "error": "unterminated string literal (detected at line 17) (<unknown>, line 17)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\btm_matcher_4f0ccfe480ecd407cea1b164e491bdab.py": {
    "num_lines": 121,
    "num_functions": 8,
    "num_parameters": 12,
    "type_hints": [
      {
        "function": "type_repr",
        "parameter_hints": {
          "type_num": "int"
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "add_fixer",
        "parameter_hints": {
          "self": null,
          "fixer": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "add",
        "parameter_hints": {
          "self": null,
          "pattern": "List[Any]",
          "start": "BMNode"
        },
        "return_hint": "List[BMNode]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "leaves": "List[Any]"
        },
        "return_hint": "DefaultDict[Any, List[Any]]"
      },
      {
        "function": "print_ac",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "print_node",
        "parameter_hints": {
          "node": "BMNode"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\btm_utils_89de4e6b444fd08def9b8ce6daebb6ce.py": {
    "num_lines": 190,
    "num_functions": 8,
    "num_parameters": 12,
    "type_hints": [
      {
        "function": "reduce_tree",
        "parameter_hints": {
          "node": "Any",
          "parent": "Optional[MinNode]"
        },
        "return_hint": "Optional[MinNode]"
      },
      {
        "function": "get_characteristic_subpattern",
        "parameter_hints": {
          "subpatterns": "Union[List[List[Union[int, str]]], List[Union[int, str]]]"
        },
        "return_hint": "Union[List[Union[int, str]], Tuple]"
      },
      {
        "function": "rec_test",
        "parameter_hints": {
          "sequence": "Union[List[Any], Tuple[Any, ...]]",
          "test_func": "Callable[[Any], bool]"
        },
        "return_hint": "Generator[bool, None, None]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "type": "Optional[int]",
          "name": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "leaf_to_root",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional[List[Union[int, str]]]"
      },
      {
        "function": "get_linear_subpattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional[List[Union[int, str]]]"
      },
      {
        "function": "leaves",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator['MinNode', None, None]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\clean_suffix.py": {
    "num_lines": 12,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\conf_da9965b984331586a98ccf31b5479f12.py": {
    "error": "invalid syntax (<unknown>, line 10)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\conv_1bc4e8a8f8f49e5d7327949ef65b3e34.py": {
    "num_lines": 185,
    "num_functions": 5,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "graminit_h": "str",
          "graminit_c": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "parse_graminit_h",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "bool"
      },
      {
        "function": "parse_graminit_c",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "bool"
      },
      {
        "function": "finish_off",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\driver_3aabcaf38ec34819d53840a6d8011e52.py": {
    "error": "closing parenthesis ')' does not match opening parenthesis '[' on line 32 (<unknown>, line 34)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fixer_base_85dc36bb56186b3c5d4a5ff7bd806974.py": {
    "num_lines": 173,
    "num_functions": 13,
    "num_parameters": 31,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "options": "Dict[str, Any]",
          "log": "List[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "compile_pattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "set_filename",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "Union[bool, Dict[str, Any]]"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      },
      {
        "function": "new_name",
        "parameter_hints": {
          "self": null,
          "template": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "log_message",
        "parameter_hints": {
          "self": null,
          "message": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "cannot_convert",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "reason": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "warning",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "reason": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Any",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "finish_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Any",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "should_skip",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fixer_util_3abd089b71f391b9fbcc1279a5103b06.py": {
    "num_lines": 295,
    "num_functions": 34,
    "num_parameters": 54,
    "type_hints": [
      {
        "function": "KeywordArg",
        "parameter_hints": {
          "keyword": "Node",
          "value": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "LParen",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "RParen",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "Assign",
        "parameter_hints": {
          "target": "Union[Node, List[Node]]",
          "source": "Union[Node, List[Node]]"
        },
        "return_hint": "Node"
      },
      {
        "function": "Name",
        "parameter_hints": {
          "name": "str",
          "prefix": "Optional[str]"
        },
        "return_hint": "Leaf"
      },
      {
        "function": "Attr",
        "parameter_hints": {
          "obj": "Node",
          "attr": "Node"
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "Comma",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "Dot",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "ArgList",
        "parameter_hints": {
          "args": "Optional[List[Node]]",
          "lparen": "Leaf",
          "rparen": "Leaf"
        },
        "return_hint": "Node"
      },
      {
        "function": "Call",
        "parameter_hints": {
          "func_name": "Node",
          "args": "Optional[List[Node]]",
          "prefix": "Optional[str]"
        },
        "return_hint": "Node"
      },
      {
        "function": "Newline",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "BlankLine",
        "parameter_hints": {},
        "return_hint": "Leaf"
      },
      {
        "function": "Number",
        "parameter_hints": {
          "n": "str",
          "prefix": "Optional[str]"
        },
        "return_hint": "Leaf"
      },
      {
        "function": "Subscript",
        "parameter_hints": {
          "index_node": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "String",
        "parameter_hints": {
          "string": "str",
          "prefix": "Optional[str]"
        },
        "return_hint": "Leaf"
      },
      {
        "function": "ListComp",
        "parameter_hints": {
          "xp": "Node",
          "fp": "Node",
          "it": "Node",
          "test": "Optional[Node]"
        },
        "return_hint": "Node"
      },
      {
        "function": "FromImport",
        "parameter_hints": {
          "package_name": "str",
          "name_leafs": "List[Leaf]"
        },
        "return_hint": "Node"
      },
      {
        "function": "ImportAndCall",
        "parameter_hints": {
          "node": "Node",
          "results": "Dict[str, Node]",
          "names": "List[str]"
        },
        "return_hint": "Node"
      },
      {
        "function": "is_tuple",
        "parameter_hints": {
          "node": "Union[Node, Leaf]"
        },
        "return_hint": "bool"
      },
      {
        "function": "is_list",
        "parameter_hints": {
          "node": "Union[Node, Leaf]"
        },
        "return_hint": "bool"
      },
      {
        "function": "parenthesize",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "attr_chain",
        "parameter_hints": {
          "obj": "Any",
          "attr": "str"
        },
        "return_hint": "Iterator[Any]"
      },
      {
        "function": "in_special_context",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "is_probably_builtin",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "find_indentation",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "str"
      },
      {
        "function": "make_suite",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "find_root",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "Node"
      },
      {
        "function": "does_tree_import",
        "parameter_hints": {
          "package": "Optional[str]",
          "name": "str",
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "is_import",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      },
      {
        "function": "touch_import",
        "parameter_hints": {
          "package": "Optional[str]",
          "name": "str",
          "node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "find_binding",
        "parameter_hints": {
          "name": "str",
          "node": "Node",
          "package": "Optional[str]"
        },
        "return_hint": "Optional[Node]"
      },
      {
        "function": "_find",
        "parameter_hints": {
          "name": "str",
          "node": "Node"
        },
        "return_hint": "Optional[Node]"
      },
      {
        "function": "_is_import_binding",
        "parameter_hints": {
          "node": "Node",
          "name": "str",
          "package": "Optional[str]"
        },
        "return_hint": "Optional[Node]"
      },
      {
        "function": "is_import_stmt",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_apply_b16e3ffb9d7076892b1bf5bf775adbe3.py": {
    "num_lines": 37,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Base]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_asserts_4f68a58c5bfe9899342f37ae6be10efb.py": {
    "num_lines": 12,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_basestring_84e7b7d66f65f34af7dad68be8649969.py": {
    "num_lines": 10,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Name"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_buffer_0297747e2fb863eb527f0296b4e04c1d.py": {
    "num_lines": 13,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_dict_26321b67f43cc9e91f518d3409058c17.py": {
    "num_lines": 54,
    "num_functions": 2,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Base]"
      },
      {
        "function": "in_special_context",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "isiter": "bool"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_except_dc2a3518b6572d9df36c7c6a9e7d185c.py": {
    "num_lines": 45,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "find_excepts",
        "parameter_hints": {
          "nodes": "List[pytree.Leaf]"
        },
        "return_hint": "Generator[Tuple[pytree.Leaf, pytree.Leaf], None, None]"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "pytree.Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_execfile_23c0aea8521d5905ef574849a1199c42.py": {
    "num_lines": 30,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Call]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_exec_c2495e4b98c855ef8e4bb6b499835916.py": {
    "num_lines": 23,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Optional[Node]]"
        },
        "return_hint": "Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_exitfunc_4c0e023d6233f367f6bbb22f72abff19.py": {
    "num_lines": 47,
    "num_functions": 3,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "args": "Any",
          "kwargs": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Node",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_filter_0d6c2a2f1d6dc89e448a17d7d1859c3a.py": {
    "num_lines": 37,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_funcattrs_b0872da875aad669f1282398989d9c89.py": {
    "num_lines": 12,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_future_23a687d0e9b1a05680b4c5ab0decab24.py": {
    "num_lines": 13,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "BlankLine"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_getcwdu_4c7a9a4fe905d6e1ec1a1f745fc07e92.py": {
    "num_lines": 11,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_has_key_3d19bb5809047e970a7a7694f342c22f.py": {
    "num_lines": 42,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Base]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_idioms_f2fc0fac4f3e5f15360819a753c8ce8d.py": {
    "num_lines": 71,
    "num_functions": 5,
    "num_parameters": 14,
    "type_hints": [
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Node"
        },
        "return_hint": "Optional[Dict[str, Any]]"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Union[Node, None]"
      },
      {
        "function": "transform_isinstance",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "transform_while",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "transform_sort",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_imports2_990f0acae87e29ae9492418a41754ee9.py": {
    "num_lines": 8,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_imports_c928b33522d728da5c7972ba72bd5d6b.py": {
    "error": "invalid syntax (<unknown>, line 57)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_import_f23058f61e15a73e76de69f135bf5f6f.py": {
    "num_lines": 74,
    "num_functions": 4,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "traverse_imports",
        "parameter_hints": {
          "names": "Any"
        },
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Any",
          "name": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[FromImport]"
      },
      {
        "function": "probably_a_local_import",
        "parameter_hints": {
          "self": null,
          "imp_name": "str"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_input_dfe10ba83564ecc0d92ce3fe3f7469f6.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_intern_293f735a6b785b784192f0be1636168a.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_isinstance_ddf41b92f0feef3fdda51bb5aa571b20.py": {
    "num_lines": 33,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_itertools_4f695aa383ccd1d83a24563d5dfb7466.py": {
    "num_lines": 22,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_itertools_imports_1ff0945ccfa029ee1e633d3b0c38dca8.py": {
    "num_lines": 51,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Union[Node, Leaf]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_long_c9fe2d241de1cc017034e4f7bc2217cb.py": {
    "num_lines": 15,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_map_923c607ffa53d4554c8b2f301b449ede.py": {
    "num_lines": 75,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_metaclass_c0624dc69dbc6726b21bb4af3b427e71.py": {
    "num_lines": 143,
    "num_functions": 7,
    "num_parameters": 11,
    "type_hints": [
      {
        "function": "has_metaclass",
        "parameter_hints": {
          "parent": "Union[Node, Leaf]"
        },
        "return_hint": "bool"
      },
      {
        "function": "fixup_parse_tree",
        "parameter_hints": {
          "cls_node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "fixup_simple_stmt",
        "parameter_hints": {
          "parent": "Node",
          "i": "int",
          "stmt_node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "remove_trailing_newline",
        "parameter_hints": {
          "node": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "find_metas",
        "parameter_hints": {
          "cls_node": "Node"
        },
        "return_hint": "Iterator[Tuple[Node, int, Node]]"
      },
      {
        "function": "fixup_indent",
        "parameter_hints": {
          "suite": "Node"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Any"
        },
        "return_hint": "Optional[bool]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_methodattrs_6a42825e2099caece0bd5f7c288ff26d.py": {
    "num_lines": 15,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_next_804cb524bc47688ff19276d35ba9a378.py": {
    "error": "'(' was never closed (<unknown>, line 85)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_ne_99cb992e21ba5c9cdd4ed2465485a813.py": {
    "num_lines": 14,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base"
        },
        "return_hint": "bool"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Leaf]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_nonzero_1692b34cd0de1184d67c1e62cc8d6ec7.py": {
    "num_lines": 13,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_numliterals_98271bbcfbd011fb007cd3a1ad98359d.py": {
    "num_lines": 19,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "bool"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Any"
        },
        "return_hint": "Number"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_operator_41eec7e7f93f16bad1cfd1a8ce899fbd.py": {
    "num_lines": 90,
    "num_functions": 13,
    "num_parameters": 38,
    "type_hints": [
      {
        "function": "invocation",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "CallableT[[T], T]"
      },
      {
        "function": "dec",
        "parameter_hints": {
          "f": "T"
        },
        "return_hint": "T"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      },
      {
        "function": "_sequenceIncludes",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "_isCallable",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "_repeat",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "_irepeat",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "_isSequenceType",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "_isMappingType",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "_isNumberType",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      },
      {
        "function": "_handle_rename",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]",
          "name": "str"
        },
        "return_hint": "Node"
      },
      {
        "function": "_handle_type2abc",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]",
          "module": "str",
          "abc": "str"
        },
        "return_hint": "Node"
      },
      {
        "function": "_check_method",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[CallableT[[Node, Dict[str, Any]], Node]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_paren_353b6cf540d829d4cb86fcdf6b1c3685.py": {
    "num_lines": 16,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_print_aca65419859f1ac0135d2ad32457f8e8.py": {
    "num_lines": 54,
    "num_functions": 2,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Node]"
      },
      {
        "function": "add_kwarg",
        "parameter_hints": {
          "self": null,
          "l_nodes": "List[Union[pytree.Node, pytree.Leaf]]",
          "s_kwd": "str",
          "n_expr": "pytree.Leaf"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_raise_495345fa6dfbfe2a576ace6d7c035c51.py": {
    "num_lines": 44,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_raw_input_b30be6e6f6b371c5d0cc4238916aaac7.py": {
    "num_lines": 12,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_reduce_4024a50c8ce9def06d8aabec27d605d4.py": {
    "num_lines": 14,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_reload_c7113cf30125ff3fd4e963b1761da463.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_renames_1eb568db217ff15c2b4004ccd75dd169.py": {
    "num_lines": 38,
    "num_functions": 4,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "alternates",
        "parameter_hints": {
          "members": "Any"
        },
        "return_hint": "str"
      },
      {
        "function": "build_pattern",
        "parameter_hints": {},
        "return_hint": "Iterator[str]"
      },
      {
        "function": "match",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "Union[bool, Any]"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_repr_4c23954f65d7efb15afeef1f4931d3d3.py": {
    "num_lines": 14,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Call"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_set_literal_4c0da782a04c8b621da519425739911b.py": {
    "num_lines": 33,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_standarderror_6354be6de21e5d0ae8243cc615985cae.py": {
    "num_lines": 11,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Name"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_sys_exc_38efdf62222966e271d0328ae81e4b2f.py": {
    "num_lines": 18,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Node"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_throw_9223bab1596f455827d0ca24d2cb4b8a.py": {
    "num_lines": 34,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[None]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_tuple_params_08235f2c848bdeb79dabf448ca7b343e.py": {
    "num_lines": 135,
    "num_functions": 8,
    "num_parameters": 15,
    "type_hints": [
      {
        "function": "is_docstring",
        "parameter_hints": {
          "stmt": "pytree.Base"
        },
        "return_hint": "bool"
      },
      {
        "function": "simplify_args",
        "parameter_hints": {
          "node": "pytree.Base"
        },
        "return_hint": "pytree.Base"
      },
      {
        "function": "find_params",
        "parameter_hints": {
          "node": "pytree.Base"
        },
        "return_hint": "Union[str, List[Any]]"
      },
      {
        "function": "map_to_index",
        "parameter_hints": {
          "param_list": "Union[str, List[Any]]",
          "prefix": "Optional[List[pytree.Base]]",
          "d": "Optional[Dict[str, List[pytree.Base]]]"
        },
        "return_hint": "Dict[str, List[pytree.Base]]"
      },
      {
        "function": "tuple_name",
        "parameter_hints": {
          "param_list": "Union[str, List[Any]]"
        },
        "return_hint": "str"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[pytree.Base]"
      },
      {
        "function": "transform_lambda",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "results": "Dict[str, Any]"
        },
        "return_hint": "pytree.Base"
      },
      {
        "function": "handle_tuple",
        "parameter_hints": {
          "tuple_arg": "pytree.Base",
          "add_prefix": "bool"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_types_6de0a2197b78900ec88ac8b7b3545921.py": {
    "num_lines": 54,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Name]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_unicode_ea7cfd666cad0427f50e6bb2fe1a479d.py": {
    "num_lines": 34,
    "num_functions": 2,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "start_tree",
        "parameter_hints": {
          "self": null,
          "tree": "Node",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Union[Leaf, Node]",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Union[Leaf, Node]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_urllib_e4836c50388897297cf89c61693daed3.py": {
    "num_lines": 145,
    "num_functions": 7,
    "num_parameters": 15,
    "type_hints": [
      {
        "function": "build_pattern",
        "parameter_hints": {},
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "build_pattern",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "transform_import",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "transform_member",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "transform_dot",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "handle_name",
        "parameter_hints": {
          "name": "Node",
          "prefix": "str"
        },
        "return_hint": "List[Union[Node, Name]]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_ws_comma_3c3b2f49eeb26b8d75079583accc8d3c.py": {
    "num_lines": 28,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "pytree.Base",
          "results": "Any"
        },
        "return_hint": "pytree.Base"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_xrange_b7597d1a2dcf484c9def32299bab0389.py": {
    "error": "'(' was never closed (<unknown>, line 55)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_xreadlines_336d1f82c56a878207062958ce346079.py": {
    "num_lines": 15,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Any",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Any]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\fix_zip_8deafd1b0091d77b3a4b65e272fcdb39.py": {
    "num_lines": 27,
    "num_functions": 1,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "transform",
        "parameter_hints": {
          "self": null,
          "node": "Node",
          "results": "Dict[str, Any]"
        },
        "return_hint": "Optional[Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\generate_data_7422c52c22b8c15ab496c22f64433879.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 0,
    "type_hints": [
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\Generate_no_type_version_147101a8e98a675af12167080b175470.py": {
    "num_lines": 61,
    "num_functions": 5,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "hash_content",
        "parameter_hints": {
          "content": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "process_py_file",
        "parameter_hints": {
          "file_path": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "traverse_and_process",
        "parameter_hints": {
          "root_dir": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "visit_FunctionDef",
        "parameter_hints": {
          "self": null,
          "node": "ast.FunctionDef"
        },
        "return_hint": "ast.FunctionDef"
      },
      {
        "function": "visit_AnnAssign",
        "parameter_hints": {
          "self": null,
          "node": "ast.AnnAssign"
        },
        "return_hint": "ast.Assign"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\grammar_0ee226e126c4ae4d1f4233f1a436b1ad.py": {
    "num_lines": 174,
    "num_functions": 6,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "dump",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "load",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "loads",
        "parameter_hints": {
          "self": null,
          "pkl": "bytes"
        },
        "return_hint": "None"
      },
      {
        "function": "copy",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Grammar'"
      },
      {
        "function": "report",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\literals_51e85ba6bc607dc435c2756415e18998.py": {
    "num_lines": 60,
    "num_functions": 3,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "escape",
        "parameter_hints": {
          "m": "Match[str]"
        },
        "return_hint": "str"
      },
      {
        "function": "evalString",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "test",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\main_18e06710863c6ff46857d6e5f5e3193a.py": {
    "num_lines": 222,
    "num_functions": 7,
    "num_parameters": 29,
    "type_hints": [
      {
        "function": "diff_texts",
        "parameter_hints": {
          "a": "str",
          "b": "str",
          "filename": "str"
        },
        "return_hint": "Iterable[str]"
      },
      {
        "function": "warn",
        "parameter_hints": {
          "msg": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "main",
        "parameter_hints": {
          "fixer_pkg": "str",
          "args": "Optional[List[str]]"
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "fixers": "List[str]",
          "options": "Dict[str, Any]",
          "explicit": "Set[str]",
          "nobackups": "bool",
          "show_diffs": "bool",
          "input_base_dir": "str",
          "output_dir": "str",
          "append_suffix": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "log_error",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "args": "Any",
          "kwargs": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "write_file",
        "parameter_hints": {
          "self": null,
          "new_text": "str",
          "filename": "str",
          "old_text": "str",
          "encoding": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "print_output",
        "parameter_hints": {
          "self": null,
          "old": "str",
          "new": "str",
          "filename": "str",
          "equal": "bool"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\parse_16d2dea206b527e5e6f274f72e54d079.py": {
    "num_lines": 104,
    "num_functions": 9,
    "num_parameters": 30,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "msg": "str",
          "type": "int",
          "value": "Optional[str]",
          "context": "Optional[Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "__reduce__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[Type['ParseError'], Tuple[str, int, Optional[str], Optional[Any]]]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "grammar": "Any",
          "convert": "Optional[Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "setup",
        "parameter_hints": {
          "self": null,
          "start": "Optional[int]"
        },
        "return_hint": "None"
      },
      {
        "function": "addtoken",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "Optional[str]",
          "context": "Optional[Any]"
        },
        "return_hint": "bool"
      },
      {
        "function": "classify",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "Optional[str]",
          "context": "Optional[Any]"
        },
        "return_hint": "int"
      },
      {
        "function": "shift",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "value": "Optional[str]",
          "newstate": "int",
          "context": "Optional[Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "push",
        "parameter_hints": {
          "self": null,
          "type": "int",
          "newdfa": "Any",
          "newstate": "int",
          "context": "Optional[Any]"
        },
        "return_hint": "None"
      },
      {
        "function": "pop",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\patcomp_39f9f5e83f63a35080e3487619196bab.py": {
    "num_lines": 170,
    "num_functions": 9,
    "num_parameters": 18,
    "type_hints": [
      {
        "function": "tokenize_wrapper",
        "parameter_hints": {
          "input": "str"
        },
        "return_hint": "Iterator[Tuple[int, str, Tuple[int, int], Tuple[int, int], str]]"
      },
      {
        "function": "_type_of_literal",
        "parameter_hints": {
          "value": "str"
        },
        "return_hint": "Optional[int]"
      },
      {
        "function": "pattern_convert",
        "parameter_hints": {
          "grammar": "Any",
          "raw_node_info": "Tuple[int, str, Any, List[Any]]"
        },
        "return_hint": "Union[pytree.Node, pytree.Leaf]"
      },
      {
        "function": "compile_pattern",
        "parameter_hints": {
          "pattern": "str"
        },
        "return_hint": "pytree.Pattern"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "grammar_file": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "compile_pattern",
        "parameter_hints": {
          "self": null,
          "input": "str",
          "debug": "bool",
          "with_tree": "bool"
        },
        "return_hint": "Union[pytree.Pattern, Tuple[pytree.Pattern, Any]]"
      },
      {
        "function": "compile_node",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "pytree.Pattern"
      },
      {
        "function": "compile_basic",
        "parameter_hints": {
          "self": null,
          "nodes": "List[Any]",
          "repeat": "Optional[Any]"
        },
        "return_hint": "pytree.Pattern"
      },
      {
        "function": "get_int",
        "parameter_hints": {
          "self": null,
          "node": "Any"
        },
        "return_hint": "int"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\pgen_eba48e8b0455077a205d1dda049755b8.py": {
    "error": "'[' was never closed (<unknown>, line 21)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\pygram_a5391fb5dc3ff905dab45ee155e42ff9.py": {
    "num_lines": 24,
    "num_functions": 1,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "grammar": "driver.Grammar"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\pyspecific_5869ad860916164ee81485b5281bc3c9.py": {
    "num_lines": 168,
    "num_functions": 17,
    "num_parameters": 37,
    "type_hints": [
      {
        "function": "issue_role",
        "parameter_hints": {
          "typ": "str",
          "rawtext": "str",
          "text": "str",
          "lineno": "int",
          "inliner": "Any",
          "options": "Dict[str, Any]",
          "content": "List[str]"
        },
        "return_hint": "Tuple[List[nodes.Node], List[nodes.Node]]"
      },
      {
        "function": "gh_issue_role",
        "parameter_hints": {
          "typ": "str",
          "rawtext": "str",
          "text": "str",
          "lineno": "int",
          "inliner": "Any",
          "options": "Dict[str, Any]",
          "content": "List[str]"
        },
        "return_hint": "Tuple[List[nodes.Node], List[nodes.Node]]"
      },
      {
        "function": "setup",
        "parameter_hints": {
          "app": "Sphinx"
        },
        "return_hint": "Dict[str, Any]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "needs_arglist",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "handle_signature",
        "parameter_hints": {
          "self": null,
          "sig": "str",
          "signode": "addnodes.desc_signature"
        },
        "return_hint": "Any"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "List[nodes.Node]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\pytree_b5c9498d48307fc20f4016a12676f355.py": {
    "error": "'(' was never closed (<unknown>, line 538)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\refactor_ba19b34abce9dfcf909394be809bc04a.py": {
    "error": "invalid syntax (<unknown>, line 422)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_05192c0c8d5a8999a8c094b2ecf40473.py": {
    "error": "unmatched ')' (<unknown>, line 103)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_079afee64b38f3e4ec499d6009906612.py": {
    "num_lines": 55,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "rel_path",
        "parameter_hints": {
          "path": "str"
        },
        "return_hint": "str"
      },
      {
        "function": "bench_telco",
        "parameter_hints": {
          "loops": "int",
          "filename": "str"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_083fc82df7d9596c7ee0e92cd5ab86ea.py": {
    "num_lines": 20,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "iter_all_commits",
        "parameter_hints": {
          "repo": "dulwich.repo.Repo"
        },
        "return_hint": "Iterator[Any]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_0ae4d57c5b86320985ca055ab916dace.py": {
    "num_lines": 40,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "bench_genshi",
        "parameter_hints": {
          "loops": "int",
          "tmpl_cls": "Any",
          "tmpl_str": "str"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_101bb04648591f38cbb42eaf6aba3288.py": {
    "error": "'(' was never closed (<unknown>, line 234)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_14b1aad8ef40880d34ce019b57e1dd81.py": {
    "error": "closing parenthesis ')' does not match opening parenthesis '[' (<unknown>, line 22)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_17dc7effd52ebd41c89a16fb84ba976e.py": {
    "num_lines": 114,
    "num_functions": 9,
    "num_parameters": 19,
    "type_hints": [
      {
        "function": "bpe_encode",
        "parameter_hints": {
          "mergeable_ranks": "Dict[bytes, int]",
          "input": "bytes"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "bpe_train",
        "parameter_hints": {
          "data": "str",
          "vocab_size": "int",
          "pat_str": "str"
        },
        "return_hint": "Dict[bytes, int]"
      },
      {
        "function": "train",
        "parameter_hints": {
          "data": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_bpe_tokeniser",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "pat_str": "str",
          "mergeable_ranks": "Dict[bytes, int]"
        },
        "return_hint": "None"
      },
      {
        "function": "encode",
        "parameter_hints": {
          "self": null,
          "text": "str"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "decode_bytes",
        "parameter_hints": {
          "self": null,
          "tokens": "List[int]"
        },
        "return_hint": "bytes"
      },
      {
        "function": "decode",
        "parameter_hints": {
          "self": null,
          "tokens": "List[int]"
        },
        "return_hint": "str"
      },
      {
        "function": "train",
        "parameter_hints": {
          "training_data": "str",
          "vocab_size": "int",
          "pat_str": "str"
        },
        "return_hint": "SimpleBytePairEncoding"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_1be7503fa8723e91833eb80f31228737.py": {
    "num_lines": 26,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "fibonacci",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "bench_coverage",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_1efa63cfa255cc633c18f7dce4818351.py": {
    "num_lines": 30,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "create_recursive_containers",
        "parameter_hints": {
          "n_levels": "int"
        },
        "return_hint": "List[Any]"
      },
      {
        "function": "benchamark_collection",
        "parameter_hints": {
          "loops": "int",
          "n_levels": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_21026ff8f81b122e6c9cfbf8c29a27cb.py": {
    "num_lines": 41,
    "num_functions": 2,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "tree",
        "parameter_hints": {
          "input": "List[int]"
        },
        "return_hint": "Optional[Tree]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "left": "Optional[Tree]",
          "value": "int",
          "right": "Optional[Tree]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_26727fba89826eeafa7ccc4e1e90c284.py": {
    "num_lines": 44,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_sqlalchemy",
        "parameter_hints": {
          "loops": "int",
          "npeople": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "argparse.Namespace"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_268e2f631afb81a04deab49d7cf3fb46.py": {
    "num_lines": 53,
    "num_functions": 6,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_expand",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_integrate",
        "parameter_hints": {},
        "return_hint": "Any"
      },
      {
        "function": "bench_sum",
        "parameter_hints": {},
        "return_hint": "Any"
      },
      {
        "function": "bench_str",
        "parameter_hints": {},
        "return_hint": "str"
      },
      {
        "function": "bench_sympy",
        "parameter_hints": {
          "loops": "int",
          "func": "Callable[[], Any]"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_293989a6d5e7f93e90fe279a3c2f7db9.py": {
    "num_lines": 59,
    "num_functions": 3,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "generate_filenames",
        "parameter_hints": {
          "tmp_path": "str",
          "num_files": "int"
        },
        "return_hint": "Generator[str, None, None]"
      },
      {
        "function": "setup",
        "parameter_hints": {
          "num_files": "int"
        },
        "return_hint": "str"
      },
      {
        "function": "bench_pathlib",
        "parameter_hints": {
          "loops": "int",
          "tmp_path": "str"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_2d2b8b8374ccfc0f944485cd5da03ebc.py": {
    "num_lines": 30,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_pyaes",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_34494d3bb60355e7d1a04faddcfffc1d.py": {
    "num_lines": 50,
    "num_functions": 5,
    "num_parameters": 9,
    "type_hints": [
      {
        "function": "capture_regexes",
        "parameter_hints": {},
        "return_hint": "List[Tuple[str, int]]"
      },
      {
        "function": "bench_regex_compile",
        "parameter_hints": {
          "loops": "int",
          "regexes": "List[Tuple[str, int]]"
        },
        "return_hint": "float"
      },
      {
        "function": "capture_compile",
        "parameter_hints": {
          "regex": "str",
          "flags": "int"
        },
        "return_hint": "Any"
      },
      {
        "function": "capture_search",
        "parameter_hints": {
          "regex": "str",
          "target": "str",
          "flags": "int"
        },
        "return_hint": "Any"
      },
      {
        "function": "capture_sub",
        "parameter_hints": {
          "regex": "str",
          "args": "Any"
        },
        "return_hint": "Any"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_35477730ea622662cb6c95ff69a68e99.py": {
    "error": "invalid syntax (<unknown>, line 32)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_41759fdf0401f89c962cc7b114aa3e42.py": {
    "num_lines": 47,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "fannkuch",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "int"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_432ac9707ee16dffc2f2fe3f1c6bf76c.py": {
    "num_lines": 203,
    "num_functions": 8,
    "num_parameters": 20,
    "type_hints": [
      {
        "function": "mutate_dict",
        "parameter_hints": {
          "orig_dict": "Dict[Any, Any]",
          "random_source": "random.Random"
        },
        "return_hint": "Dict[Any, Any]"
      },
      {
        "function": "bench_pickle",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_unpickle",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_pickle_list",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_unpickle_list",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_pickle_dict",
        "parameter_hints": {
          "loops": "int",
          "pickle": "Any",
          "options": "Any"
        },
        "return_hint": "float"
      },
      {
        "function": "is_accelerated_module",
        "parameter_hints": {
          "module": "Any"
        },
        "return_hint": "bool"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_4dc0acdd1240a804f34da8d966a065e1.py": {
    "error": "'(' was never closed (<unknown>, line 157)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_54d6e19c1743b019edc613e74d8321ba.py": {
    "error": "'(' was never closed (<unknown>, line 477)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_5f738045810f54167c085e1c7e0b35b8.py": {
    "num_lines": 99,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "mutate_dict",
        "parameter_hints": {
          "orig_dict": "Dict[Any, Any]",
          "random_source": "random.Random"
        },
        "return_hint": "Dict[Any, Any]"
      },
      {
        "function": "bench_json_loads",
        "parameter_hints": {
          "objs": "Tuple[str, ...]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_6021b120af897a98b208540880d31fa1.py": {
    "num_lines": 102,
    "num_functions": 6,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "bench_parse",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_transpile",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_optimize",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_normalize",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": "ArgumentParser"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_64e361fd1586e053709bd8ec787fefaf.py": {
    "num_lines": 46,
    "num_functions": 3,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "permutations",
        "parameter_hints": {
          "iterable": "Iterable[T]",
          "r": "Optional[int]"
        },
        "return_hint": "Generator[Tuple[T, ...], None, None]"
      },
      {
        "function": "n_queens",
        "parameter_hints": {
          "queen_count": "int"
        },
        "return_hint": "Generator[Tuple[int, ...], None, None]"
      },
      {
        "function": "bench_n_queens",
        "parameter_hints": {
          "queen_count": "int"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_64f067051f53db8fe8e69329b3e087ed.py": {
    "num_lines": 29,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_tomli_loads",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_6c16d199d98991cfd04b86f116962777.py": {
    "num_lines": 32,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "get_hg_version",
        "parameter_hints": {
          "hg_bin": "str"
        },
        "return_hint": "str"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_735d8e18ff99fd95e3e85b3a045a96ff.py": {
    "error": "'(' was never closed (<unknown>, line 425)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_7465a3358d6be0a308ff0dba1c019896.py": {
    "num_lines": 34,
    "num_functions": 2,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "factorial",
        "parameter_hints": {
          "n": "decimal.Decimal",
          "m": "decimal.Decimal"
        },
        "return_hint": "decimal.Decimal"
      },
      {
        "function": "bench_decimal_factorial",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_74e46dc7e24ad277a3ffd520c33499c2.py": {
    "num_lines": 57,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_sqlalchemy",
        "parameter_hints": {
          "loops": "int",
          "npeople": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "argparse.Namespace"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_79b0563155ae7c19376dd17a256bd4c9.py": {
    "num_lines": 70,
    "num_functions": 6,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "make_application",
        "parameter_hints": {},
        "return_hint": "Application"
      },
      {
        "function": "make_http_server",
        "parameter_hints": {
          "request_handler": "Application"
        },
        "return_hint": "Tuple[HTTPServer, socket.socket]"
      },
      {
        "function": "bench_tornado",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "get",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Generator[None, None, None]"
      },
      {
        "function": "compute_etag",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "run_client",
        "parameter_hints": {},
        "return_hint": "Generator[None, None, None]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_7e52e6cf6b6ac0c8c20602f1713d3f9e.py": {
    "num_lines": 21,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_9196e0e1a8569bc4d538f9e91f44380b.py": {
    "error": "unmatched ')' (<unknown>, line 34)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_9473d82c1ad213cf726be7d21540b9f3.py": {
    "num_lines": 149,
    "num_functions": 4,
    "num_parameters": 6,
    "type_hints": [
      {
        "function": "add_metadata",
        "parameter_hints": {
          "runner": "pyperf.Runner"
        },
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "use_task_groups": "bool"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_958ac12d9a928de9aad6c1b814c51ef7.py": {
    "num_lines": 239,
    "num_functions": 23,
    "num_parameters": 51,
    "type_hints": [
      {
        "function": "write_ppm",
        "parameter_hints": {
          "im": "List[List[float]]",
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "main",
        "parameter_hints": {
          "runner": "Any",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "x": "float",
          "y": "float",
          "z": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "Mag",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      },
      {
        "function": "dist",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'"
        },
        "return_hint": "float"
      },
      {
        "function": "__add__",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "__sub__",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "__mul__",
        "parameter_hints": {
          "self": null,
          "other": "float"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "linear_combination",
        "parameter_hints": {
          "self": null,
          "other": "'GVector'",
          "l1": "float",
          "l2": "Optional[float]"
        },
        "return_hint": "'GVector'"
      },
      {
        "function": "__str__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "points": "List[GVector]",
          "degree": "int",
          "knots": "List[float]"
        },
        "return_hint": "None"
      },
      {
        "function": "GetDomain",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[float, float]"
      },
      {
        "function": "__call__",
        "parameter_hints": {
          "self": null,
          "u": "float"
        },
        "return_hint": "GVector"
      },
      {
        "function": "GetIndex",
        "parameter_hints": {
          "self": null,
          "u": "float"
        },
        "return_hint": "int"
      },
      {
        "function": "__len__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "splines": "List[Spline]",
          "thickness": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "get_random_trafo",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[int, int]"
      },
      {
        "function": "transform_point",
        "parameter_hints": {
          "self": null,
          "point": "GVector",
          "trafo": "Optional[Tuple[int, int]]"
        },
        "return_hint": "GVector"
      },
      {
        "function": "truncate",
        "parameter_hints": {
          "self": null,
          "point": "GVector"
        },
        "return_hint": "None"
      },
      {
        "function": "create_image_chaos",
        "parameter_hints": {
          "self": null,
          "w": "int",
          "h": "int",
          "iterations": "int",
          "filename": "Optional[str]",
          "rng_seed": "int"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_95edf135ddae7bd47dbd5e98374098f5.py": {
    "num_lines": 25,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_html5lib",
        "parameter_hints": {
          "html_file": "IO[bytes]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_97b7db16323aeacce0598574c19d7dc4.py": {
    "num_lines": 67,
    "num_functions": 5,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "generate_arguments",
        "parameter_hints": {
          "i": "int"
        },
        "return_hint": "List[str]"
      },
      {
        "function": "bm_many_optionals",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bm_subparsers",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "argparse.Namespace"
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": "argparse.ArgumentParser"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_a245e0361625bbc6129c2b1ec112e9db.py": {
    "num_lines": 95,
    "num_functions": 7,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "re_compile",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "Pattern[Union[str, bytes]]"
      },
      {
        "function": "gen_regex_table",
        "parameter_hints": {},
        "return_hint": "List[Pattern[Union[str, bytes]]]"
      },
      {
        "function": "gen_string_table",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "List[Union[str, bytes]]"
      },
      {
        "function": "init_benchmarks",
        "parameter_hints": {
          "n_values": "Optional[Tuple[int, ...]]"
        },
        "return_hint": "List[Tuple[Pattern[Union[str, bytes]], Union[str, bytes]]]"
      },
      {
        "function": "bench_regex_effbot",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "append",
        "parameter_hints": {
          "s": "str"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_a28c6e02f54a08e0b801c4930e06d67b.py": {
    "num_lines": 42,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_a33097bd5241761d2d3d046b36d9afd4.py": {
    "num_lines": 80,
    "num_functions": 6,
    "num_parameters": 10,
    "type_hints": [
      {
        "function": "make_some_widgets",
        "parameter_hints": {},
        "return_hint": "List[Widget]"
      },
      {
        "function": "bench_comprehensions",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "owner_id": "int",
          "widgets": "List[Widget]"
        },
        "return_hint": "None"
      },
      {
        "function": "_any_knobby",
        "parameter_hints": {
          "self": null,
          "widgets": "Iterable[Optional[Widget]]"
        },
        "return_hint": "bool"
      },
      {
        "function": "_is_big_spinny",
        "parameter_hints": {
          "self": null,
          "widget": "Widget"
        },
        "return_hint": "bool"
      },
      {
        "function": "_add_widgets",
        "parameter_hints": {
          "self": null,
          "widgets": "List[Widget]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_a55d3dd13b512cfe214145c5e92afdc6.py": {
    "num_lines": 46,
    "num_functions": 3,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "bench_json_dumps",
        "parameter_hints": {
          "data": "List[Tuple[Any, Iterable[int]]]"
        },
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_a98f596fc7b09c623910e5db7e8f8ffc.py": {
    "num_lines": 20,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_ad565b18eba62edc0cc5a53f755fbc29.py": {
    "error": "invalid syntax (<unknown>, line 13)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_b26b9b306d7c5987b898c17b5ef45275.py": {
    "num_lines": 40,
    "num_functions": 4,
    "num_parameters": 5,
    "type_hints": [
      {
        "function": "bench_sqlite",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "step",
        "parameter_hints": {
          "self": null,
          "x": "Optional[str]"
        },
        "return_hint": "None"
      },
      {
        "function": "finalize",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_b89518a404d01c8afa20b38d197e3f9a.py": {
    "num_lines": 371,
    "num_functions": 58,
    "num_parameters": 116,
    "type_hints": [
      {
        "function": "firstIntersection",
        "parameter_hints": {
          "intersections": "List[Tuple[Any, Optional[float], Any]]"
        },
        "return_hint": "Optional[Tuple[Any, float, Any]]"
      },
      {
        "function": "addColours",
        "parameter_hints": {
          "a": "Tuple[float, float, float]",
          "scale": "float",
          "b": "Tuple[float, float, float]"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "bench_raytrace",
        "parameter_hints": {
          "loops": "int",
          "width": "int",
          "height": "int",
          "filename": "Optional[str]"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "initx": "float",
          "inity": "float",
          "initz": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "__str__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "magnitude",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "float"
      },
      {
        "function": "__add__",
        "parameter_hints": {
          "self": null,
          "other": "Union['Vector', 'Point']"
        },
        "return_hint": "Union['Vector', 'Point']"
      },
      {
        "function": "__sub__",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "scale",
        "parameter_hints": {
          "self": null,
          "factor": "float"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "dot",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "float"
      },
      {
        "function": "cross",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "normalized",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "negated",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "__eq__",
        "parameter_hints": {
          "self": null,
          "other": "object"
        },
        "return_hint": "bool"
      },
      {
        "function": "isVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isPoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "mustBeVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "mustBePoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "reflectThrough",
        "parameter_hints": {
          "self": null,
          "normal": "'Vector'"
        },
        "return_hint": "'Vector'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "initx": "float",
          "inity": "float",
          "initz": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "__str__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "__add__",
        "parameter_hints": {
          "self": null,
          "other": "'Vector'"
        },
        "return_hint": "'Point'"
      },
      {
        "function": "__sub__",
        "parameter_hints": {
          "self": null,
          "other": "Union['Point', 'Vector']"
        },
        "return_hint": "Union['Vector', 'Point']"
      },
      {
        "function": "isVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isPoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "mustBeVector",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "mustBePoint",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Point'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "centre": "Point",
          "radius": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "intersectionTime",
        "parameter_hints": {
          "self": null,
          "ray": "'Ray'"
        },
        "return_hint": "Optional[float]"
      },
      {
        "function": "normalAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Vector"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "point": "Point",
          "normal": "Vector"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "intersectionTime",
        "parameter_hints": {
          "self": null,
          "ray": "'Ray'"
        },
        "return_hint": "Optional[float]"
      },
      {
        "function": "normalAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Vector"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "point": "Point",
          "vector": "Vector"
        },
        "return_hint": "None"
      },
      {
        "function": "__repr__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "pointAtTime",
        "parameter_hints": {
          "self": null,
          "t": "float"
        },
        "return_hint": "Point"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "width": "int",
          "height": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "plot",
        "parameter_hints": {
          "self": null,
          "x": "int",
          "y": "int",
          "r": "float",
          "g": "float",
          "b": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "write_ppm",
        "parameter_hints": {
          "self": null,
          "filename": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "moveTo",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "None"
      },
      {
        "function": "lookAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "None"
      },
      {
        "function": "addObject",
        "parameter_hints": {
          "self": null,
          "object": "Union[Sphere, Halfspace]",
          "surface": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "addLight",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "None"
      },
      {
        "function": "render",
        "parameter_hints": {
          "self": null,
          "canvas": "Canvas"
        },
        "return_hint": "None"
      },
      {
        "function": "rayColour",
        "parameter_hints": {
          "self": null,
          "ray": "Ray"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "_lightIsVisible",
        "parameter_hints": {
          "self": null,
          "l": "Point",
          "p": "Point"
        },
        "return_hint": "bool"
      },
      {
        "function": "visibleLights",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "List[Point]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "kwargs": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "baseColourAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "colourAt",
        "parameter_hints": {
          "self": null,
          "scene": "Scene",
          "ray": "Ray",
          "p": "Point",
          "normal": "Vector"
        },
        "return_hint": "Tuple[float, float, float]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "kwargs": "Any"
        },
        "return_hint": "None"
      },
      {
        "function": "baseColourAt",
        "parameter_hints": {
          "self": null,
          "p": "Point"
        },
        "return_hint": "Tuple[float, float, float]"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_ba302be588b03433d3833330ef334694.py": {
    "num_lines": 29,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "bench_coroutines",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_bbaface73b5271d284816da26ab45a2e.py": {
    "num_lines": 48,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "build_html",
        "parameter_hints": {
          "doc_root": "Path"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_docutils",
        "parameter_hints": {
          "loops": "int",
          "doc_root": "Path"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_c193048bf6974d42edd1a8e1d38d51fa.py": {
    "error": "'(' was never closed (<unknown>, line 48)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_ca073e899d60ce995a3685d97078e2ed.py": {
    "num_lines": 68,
    "num_functions": 1,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_cca3b64b92d026f4feb24fcec90fe159.py": {
    "error": "invalid syntax (<unknown>, line 14)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_ce0e39f2be42224684270a194a2fe3b4.py": {
    "num_lines": 123,
    "num_functions": 6,
    "num_parameters": 18,
    "type_hints": [
      {
        "function": "combinations",
        "parameter_hints": {
          "l": "List[Any]"
        },
        "return_hint": "BodyPairs"
      },
      {
        "function": "advance",
        "parameter_hints": {
          "dt": "float",
          "n": "int",
          "bodies": "List[Body]",
          "pairs": "BodyPairs"
        },
        "return_hint": "None"
      },
      {
        "function": "report_energy",
        "parameter_hints": {
          "bodies": "List[Body]",
          "pairs": "BodyPairs",
          "e": "float"
        },
        "return_hint": "float"
      },
      {
        "function": "offset_momentum",
        "parameter_hints": {
          "ref": "Body",
          "bodies": "List[Body]",
          "px": "float",
          "py": "float",
          "pz": "float"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_nbody",
        "parameter_hints": {
          "loops": "int",
          "reference": "str",
          "iterations": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_d0531dbcb196b002efdeaa7a81b1fd9c.py": {
    "num_lines": 18,
    "num_functions": 1,
    "num_parameters": 0,
    "type_hints": [
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_d55e5927075139a1ac0cc6dbe7fee59b.py": {
    "num_lines": 49,
    "num_functions": 5,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "bench_shortest_path",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_connected_components",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "bench_k_core",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "list[str]",
          "args": "argparse.Namespace"
        },
        "return_hint": "None"
      },
      {
        "function": "add_parser_args",
        "parameter_hints": {
          "parser": "argparse.ArgumentParser"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_d5780ee905aac0d8545a6b5d3e1c3af6.py": {
    "num_lines": 66,
    "num_functions": 5,
    "num_parameters": 13,
    "type_hints": [
      {
        "function": "read_all_files",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "open",
        "parameter_hints": {
          "file": "Union[str, Path]",
          "mode": "str",
          "buffering": "int",
          "encoding": "Optional[str]",
          "errors": "Optional[str]",
          "newline": "Optional[str]",
          "closefd": "bool",
          "opener": "Optional[Any]"
        },
        "return_hint": "IO[Any]"
      },
      {
        "function": "replace",
        "parameter_hints": {
          "src": "str",
          "dst": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "build_doc",
        "parameter_hints": {
          "doc_root": "Path"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_sphinx",
        "parameter_hints": {
          "loops": "int",
          "doc_root": "Path"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_d7485f1540815ff9846e47c93bb7b997.py": {
    "num_lines": 338,
    "num_functions": 39,
    "num_parameters": 85,
    "type_hints": [
      {
        "function": "trace",
        "parameter_hints": {
          "a": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "schedule",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "l": "Optional['Packet']",
          "i": "int",
          "k": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "append_to",
        "parameter_hints": {
          "self": null,
          "lst": "Optional['Packet']"
        },
        "return_hint": "'Packet'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "workInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "deviceInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "packetPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "running",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "isPacketPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHolding",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHoldingOrWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isWaitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "initialState": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "addPacket",
        "parameter_hints": {
          "self": null,
          "p": "Packet",
          "old": "'Task'"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "runTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "waitTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Task'"
      },
      {
        "function": "hold",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "release",
        "parameter_hints": {
          "self": null,
          "i": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "qpkt",
        "parameter_hints": {
          "self": null,
          "pkt": "Packet"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "findtcb",
        "parameter_hints": {
          "self": null,
          "id": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "DeviceTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "HandlerTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "IdleTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "WorkerTaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "iterations": "int"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_db768e7124854f442d014d84437038ed.py": {
    "num_lines": 347,
    "num_functions": 39,
    "num_parameters": 85,
    "type_hints": [
      {
        "function": "trace",
        "parameter_hints": {
          "a": "str"
        },
        "return_hint": "None"
      },
      {
        "function": "schedule",
        "parameter_hints": {},
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "l": "Optional['Packet']",
          "i": "int",
          "k": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "append_to",
        "parameter_hints": {
          "self": null,
          "lst": "Optional['Packet']"
        },
        "return_hint": "'Packet'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "workInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "deviceInAdd",
        "parameter_hints": {
          "self": null,
          "p": "Packet"
        },
        "return_hint": "Optional[Packet]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "packetPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "running",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "waitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'TaskState'"
      },
      {
        "function": "isPacketPending",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHolding",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isTaskHoldingOrWaiting",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "isWaitingWithPacket",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bool"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "initialState": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "addPacket",
        "parameter_hints": {
          "self": null,
          "p": "Packet",
          "old": "'Task'"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "runTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "waitTask",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "'Task'"
      },
      {
        "function": "hold",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Optional['Task']"
      },
      {
        "function": "release",
        "parameter_hints": {
          "self": null,
          "i": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "qpkt",
        "parameter_hints": {
          "self": null,
          "pkt": "Packet"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "findtcb",
        "parameter_hints": {
          "self": null,
          "id": "int"
        },
        "return_hint": "'Task'"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null,
          "i": "int",
          "p": "int",
          "w": "Optional[Packet]",
          "s": "TaskState",
          "r": "TaskRec"
        },
        "return_hint": "None"
      },
      {
        "function": "fn",
        "parameter_hints": {
          "self": null,
          "pkt": "Optional[Packet]",
          "r": "TaskRec"
        },
        "return_hint": "Optional[Task]"
      },
      {
        "function": "run",
        "parameter_hints": {
          "self": null,
          "iterations": "int"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_dc3dd40536a1de9023f8266cf6fdbfe8.py": {
    "num_lines": 245,
    "num_functions": 17,
    "num_parameters": 49,
    "type_hints": [
      {
        "function": "topoSort",
        "parameter_hints": {
          "roots": "List[T]",
          "getParents": "Callable[[T], List[T]]"
        },
        "return_hint": "List[T]"
      },
      {
        "function": "getDamages",
        "parameter_hints": {
          "L": "int",
          "A": "int",
          "D": "int",
          "B": "int",
          "stab": "bool",
          "te": "float"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "getCritDist",
        "parameter_hints": {
          "L": "int",
          "p": "Fraction",
          "A1": "int",
          "A2": "int",
          "D1": "int",
          "D2": "int",
          "B": "int",
          "stab": "bool",
          "te": "float"
        },
        "return_hint": "DefaultDict[int, Fraction]"
      },
      {
        "function": "plus12",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "applyHPChange",
        "parameter_hints": {
          "hstate": "halfstate_t",
          "change": "int"
        },
        "return_hint": "halfstate_t"
      },
      {
        "function": "applyBadgeBoosts",
        "parameter_hints": {
          "badges": "Tuple[int, int, int, int]",
          "stats": "stats_t"
        },
        "return_hint": "stats_t"
      },
      {
        "function": "_applyActionSide1",
        "parameter_hints": {
          "state": "Tuple[halfstate_t, halfstate_t, int]",
          "act": "str"
        },
        "return_hint": "Dict[Tuple[halfstate_t, halfstate_t, int], Fraction]"
      },
      {
        "function": "_applyAction",
        "parameter_hints": {
          "state": "Tuple[halfstate_t, halfstate_t, int]",
          "side": "int",
          "act": "str"
        },
        "return_hint": "Dict[Tuple[halfstate_t, halfstate_t, int], Fraction]"
      },
      {
        "function": "bench_mdp",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "_getSuccessorsA",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple[int, Tuple[halfstate_t, halfstate_t, int]]"
        },
        "return_hint": "Iterator[Tuple[int, Tuple[halfstate_t, halfstate_t, int], str]]"
      },
      {
        "function": "_applyActionPair",
        "parameter_hints": {
          "self": null,
          "state": "Tuple[halfstate_t, halfstate_t, int]",
          "side1": "int",
          "act1": "str",
          "side2": "int",
          "act2": "str",
          "dist": "DefaultDict[StateP, Fraction]",
          "pmult": "Fraction"
        },
        "return_hint": "None"
      },
      {
        "function": "_getSuccessorsB",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple[int, Tuple[halfstate_t, halfstate_t, int], str]"
        },
        "return_hint": "Dict[StateP, float]"
      },
      {
        "function": "_getSuccessorsC",
        "parameter_hints": {
          "self": null,
          "statep": "Tuple[int, Tuple[halfstate_t, halfstate_t, int], int, str]"
        },
        "return_hint": "Dict[StateP, float]"
      },
      {
        "function": "getSuccessors",
        "parameter_hints": {
          "self": null,
          "statep": "StateP"
        },
        "return_hint": "List[Tuple[StateP, float]]"
      },
      {
        "function": "getSuccessorsList",
        "parameter_hints": {
          "self": null,
          "statep": "StateP"
        },
        "return_hint": "List[StateP]"
      },
      {
        "function": "evaluate",
        "parameter_hints": {
          "self": null,
          "tolerance": "float"
        },
        "return_hint": "float"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_dff26d535b0e89b50097c808066750ec.py": {
    "error": "only single target (not tuple) can be annotated (<unknown>, line 6)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_e13886742d29f7347d4ce5fd3df9e7ac.py": {
    "num_lines": 26,
    "num_functions": 1,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "inc",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "int"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_e36e06e08b165fd948b9fec76a0d5acf.py": {
    "num_lines": 123,
    "num_functions": 5,
    "num_parameters": 12,
    "type_hints": [
      {
        "function": "truncate_stream",
        "parameter_hints": {
          "stream": "TextIO"
        },
        "return_hint": "None"
      },
      {
        "function": "bench_silent",
        "parameter_hints": {
          "loops": "int",
          "logger": "logging.Logger",
          "stream": "TextIO"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_simple_output",
        "parameter_hints": {
          "loops": "int",
          "logger": "logging.Logger",
          "stream": "TextIO"
        },
        "return_hint": "float"
      },
      {
        "function": "bench_formatted_output",
        "parameter_hints": {
          "loops": "int",
          "logger": "logging.Logger",
          "stream": "TextIO"
        },
        "return_hint": "float"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_e40666714496fa08885bd7c6883de76b.py": {
    "num_lines": 186,
    "num_functions": 25,
    "num_parameters": 25,
    "type_hints": [
      {
        "function": "bench_protocols",
        "parameter_hints": {
          "loops": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "one",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "two",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "three",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytes"
      },
      {
        "function": "four",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "memoryview"
      },
      {
        "function": "five",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytearray"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "x",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "one",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "two",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "str"
      },
      {
        "function": "three",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytes"
      },
      {
        "function": "four",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "memoryview"
      },
      {
        "function": "five",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "bytearray"
      },
      {
        "function": "x",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__int__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "int"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_e77a04005a6abbca76058ef014ab41a6.py": {
    "num_lines": 41,
    "num_functions": 1,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_mako",
        "parameter_hints": {
          "runner": "pyperf.Runner",
          "table_size": "int",
          "nparagraph": "int",
          "img_count": "int"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_e7f5416c8fddb15d9ca4fdd9c195a6ee.py": {
    "error": "unterminated string literal (detected at line 17) (<unknown>, line 17)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_e93163c78613c4410d2fe21b2a81f7a2.py": {
    "num_lines": 52,
    "num_functions": 5,
    "num_parameters": 10,
    "type_hints": [
      {
        "function": "create_cycle",
        "parameter_hints": {
          "node": "Node",
          "n_links": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "create_gc_cycles",
        "parameter_hints": {
          "n_cycles": "int",
          "n_links": "int"
        },
        "return_hint": "List[Node]"
      },
      {
        "function": "benchamark_collection",
        "parameter_hints": {
          "loops": "int",
          "cycles": "int",
          "links": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "link_next",
        "parameter_hints": {
          "self": null,
          "next": "'Node'"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_ed36b868873c9ca9cb835088629996b5.py": {
    "num_lines": 80,
    "num_functions": 6,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "benchmark_reduce",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "benchmark_memo",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "benchmark",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "float"
      },
      {
        "function": "__init__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "None"
      },
      {
        "function": "__reduce__",
        "parameter_hints": {
          "self": null
        },
        "return_hint": "Tuple[Any, Tuple[Any, ...], Dict[str, Any]]"
      },
      {
        "function": "__setstate__",
        "parameter_hints": {
          "self": null,
          "state": "Dict[str, Any]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_ef50c0004e4c63b45751afdedd20f922.py": {
    "num_lines": 53,
    "num_functions": 6,
    "num_parameters": 7,
    "type_hints": [
      {
        "function": "gen_x",
        "parameter_hints": {},
        "return_hint": "Iterator[Tuple[int, int, int, int]]"
      },
      {
        "function": "compose",
        "parameter_hints": {
          "a": "Tuple[int, int, int, int]",
          "b": "Tuple[int, int, int, int]"
        },
        "return_hint": "Tuple[int, int, int, int]"
      },
      {
        "function": "extract",
        "parameter_hints": {
          "z": "Tuple[int, int, int, int]",
          "j": "int"
        },
        "return_hint": "int"
      },
      {
        "function": "gen_pi_digits",
        "parameter_hints": {},
        "return_hint": "Generator[int, None, None]"
      },
      {
        "function": "calc_ndigits",
        "parameter_hints": {
          "n": "int"
        },
        "return_hint": "List[int]"
      },
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_f4779276baee1e691111c58f163c03a0.py": {
    "num_lines": 27,
    "num_functions": 2,
    "num_parameters": 4,
    "type_hints": [
      {
        "function": "bench_django_template",
        "parameter_hints": {
          "runner": "pyperf.Runner",
          "size": "int"
        },
        "return_hint": "None"
      },
      {
        "function": "prepare_cmd",
        "parameter_hints": {
          "runner": "pyperf.Runner",
          "cmd": "List[str]"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_f4909fc93f2b77fbaa7a1a62f396ad97.py": {
    "error": "'(' was never closed (<unknown>, line 45)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_fe7e80f88187eee851b45d280f1d907a.py": {
    "num_lines": 43,
    "num_functions": 2,
    "num_parameters": 0,
    "type_hints": [
      {
        "function": "pi_decimal",
        "parameter_hints": {},
        "return_hint": "decimal.Decimal"
      },
      {
        "function": "bench_decimal_pi",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\run_benchmark_ff55a410a7f31c4a3ea3646528a81cb1.py": {
    "num_lines": 32,
    "num_functions": 1,
    "num_parameters": 2,
    "type_hints": [
      {
        "function": "add_cmdline_args",
        "parameter_hints": {
          "cmd": "List[str]",
          "args": "Any"
        },
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\Run_raw_mypy.py": {
    "num_lines": 80,
    "num_functions": 2,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "count_parameters",
        "parameter_hints": {
          "filename": null
        },
        "return_hint": null
      },
      {
        "function": "run_mypy_and_save_results",
        "parameter_hints": {
          "directory": null,
          "output_file": null
        },
        "return_hint": null
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\tokenize_b7662d3f564d80fcd8b53af809f8752a.py": {
    "error": "'(' was never closed (<unknown>, line 59)"
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\token_5adf5a279650e10ecd71aed939a26b65.py": {
    "num_lines": 78,
    "num_functions": 3,
    "num_parameters": 3,
    "type_hints": [
      {
        "function": "ISTERMINAL",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "ISNONTERMINAL",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "bool"
      },
      {
        "function": "ISEOF",
        "parameter_hints": {
          "x": "int"
        },
        "return_hint": "bool"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\__init___5f53cb190f7f70b5109965ef06d59e91.py": {
    "num_lines": 8,
    "num_functions": 0,
    "num_parameters": 0,
    "type_hints": []
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\__init___68b329da9893e34099c7d8ad5cb9c940.py": {
    "num_lines": 30,
    "num_functions": 2,
    "num_parameters": 1,
    "type_hints": [
      {
        "function": "process_data",
        "parameter_hints": {
          "data": "List[Dict[str, int]]"
        },
        "return_hint": "Tuple[Optional[int], Optional[float]]"
      },
      {
        "function": "main",
        "parameter_hints": {},
        "return_hint": "None"
      }
    ]
  },
  "D:\\Projects\\Datasets\\many-types-4-py-dataset\\pyperformance\\pyperformance\\data-files\\benchmarks\\deep_seek\\__main___ec49d82b59fd16b0aa7ad9e9096a35e2.py": {
    "num_lines": 9,
    "num_functions": 1,
    "num_parameters": 0,
    "type_hints": [
      {
        "function": "entry_point",
        "parameter_hints": {},
        "return_hint": "NoReturn"
      }
    ]
  }
}