from typing import List, Tuple

class BitfieldBase:
    def __init__(self, x: 'BitfieldBase') -> None:
        ...

    def _read(self, n: int) -> bytes:
        ...

    def needbits(self, n: int) -> None:
        ...

    def _mask(self, n: int) -> int:
        ...

    def toskip(self) -> int:
        ...

    def align(self) -> None:
        ...

    def dropbits(self, n: int = 8) -> None:
        ...

    def dropbytes(self, n: int = 1) -> None:
        ...

    def tell(self) -> Tuple[int, int]:
        ...

    def tellbits(self) -> int:
        ...

class Bitfield(BitfieldBase):
    def _more(self) -> None:
        ...

    def snoopbits(self, n: int = 8) -> int:
        ...

    def readbits(self, n: int = 8) -> int:
        ...

class RBitfield(BitfieldBase):
    def _more(self) -> None:
        ...

    def snoopbits(self, n: int = 8) -> int:
        ...

    def readbits(self, n: int = 8) -> int:
        ...

def printbits(v: int, n: int) -> str:
    ...

class HuffmanLength:
    def __init__(self, code: int, bits: int = 0) -> None:
        ...

    @staticmethod
    def _sort_func(obj: 'HuffmanLength') -> Tuple[int, int]:
        ...

def reverse_bits(v: int, n: int) -> int:
    ...

def reverse_bytes(v: int, n: int) -> int:
    ...

class HuffmanTable:
    def __init__(self, bootstrap: List[Tuple[int, int]]) -> None:
        ...

    def populate_huffman_symbols(self) -> None:
        ...

    def tables_by_bits(self) -> None:
        ...

    def min_max_bits(self) -> None:
        ...

    def _find_symbol(self, bits: int, symbol: int, table: List[HuffmanLength]) -> int:
        ...

    def find_next_symbol(self, field: Bitfield, reversed: bool = True) -> int:
        ...

class OrderedHuffmanTable(HuffmanTable):
    def __init__(self, lengths: List[int]) -> None:
        ...

def code_length_orders(i: int) -> int:
    ...

def distance_base(i: int) -> int:
    ...

def length_base(i: int) -> int:
    ...

def extra_distance_bits(n: int) -> int:
    ...

def extra_length_bits(n: int) -> int:
    ...

def move_to_front(l: List[int], c: int) -> None:
    ...

def bwt_transform(L: bytes) -> List[int]:
    ...

def bwt_reverse(L: bytes, end: int) -> bytes:
    ...

def compute_used(b: Bitfield) -> List[bool]:
    ...

def compute_selectors_list(b: Bitfield, huffman_groups: int) -> List[int]:
    ...

def compute_tables(b: Bitfield, huffman_groups: int, symbols_in_use: int) -> List[HuffmanTable]:
    ...

def decode_huffman_block(b: Bitfield, out: List[bytes]) -> None:
    ...

def bzip2_main(input: bytes) -> bytes:
    ...

def gzip_main(field: Bitfield) -> str:
    ...

def bench_pyflake(loops: int, filename: str) -> float:
    ...

if (__name__ == '__main__'):
    ...
