{
    "testclient.py_deepseek_b53c0624.py": {
        "__enter__": {
            "return": "TestClient"
        }
    },
    "generic_test_builders.py_deepseek_dbe9f303.py": {
        "extract_test_args": {
            "data_test": "Dict[str, Any]"
        }
    },
    "test_conversion.py_deepseek_43da3ab9.py": {
        "test_iterable_map": {
            "rdtype": "type"
        }
    },
    "regions.py_deepseek_08792844.py": {
        "_endpoint_for_partition": {
            "region_name": "Optional[str]"
        },
        "construct_endpoint": {
            "return": "Optional[Dict[str, Any]]"
        }
    },
    "cache.py_deepseek_397aeb92.py": {
        "_remove_cache_and_update_lock": {
            "return": "None"
        },
        "load_module": {
            "return": "Optional[Any]"
        },
        "_set_cache_item": {
            "path": "str"
        },
        "_load_from_file_system": {
            "cache_path": "Optional[Path]"
        },
        "_get_hashed_path": {
            "return": "Path"
        }
    },
    "tools.py_deepseek_d6227bc0.py": {
        "create_subplots": {
            "ax": "Optional[Union[Axes, Sequence[Axes]]]"
        }
    },
    "transformer_layer.py_deepseek_238a1cf9.py": {
        "forward": {
            "attention_mask": "torch.Tensor"
        }
    },
    "featureflags.py_deepseek_7d9b2b1c.py": {
        "__init__": {
            "at_least_one_of": "Tuple[str, ...]"
        },
        "__repr__": {
            "return": "str"
        }
    },
    "misc.py_deepseek_3b346c4e.py": {
        "unpack_single_str_list": {
            "keys": "Union[List[str], str]"
        }
    },
    "sensor.py_deepseek_9cbe391f.py": {
        "update": {
            "return": "None"
        }
    },
    "melt.py_deepseek_713be946.py": {
        "wide_to_long": {
            "i": "Union[str, List[str]]",
            "stubnames": "Union[str, List[str]]"
        },
        "melt": {
            "var_name": "Optional[Union[Hashable, List[Hashable]]]"
        },
        "ensure_list_vars": {
            "arg_vars": "Optional[Union[Hashable, List[Hashable], Tuple[Hashable, ...], np.ndarray]]"
        }
    },
    "test_api.py_deepseek_9fa83db7.py": {
        "test_remove_unused_categories": {
            "return": "None"
        }
    },
    "categorical.py_deepseek_f99b3282.py": {
        "set_categories": {
            "ordered": "bool"
        },
        "reorder_categories": {
            "ordered": "bool"
        }
    },
    "conftest.py_deepseek_c0d9dac1.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "monitor.py_deepseek_121c517b.py": {
        "on_stream_event_out": {
            "state": "Dict"
        }
    },
    "test_info.py_deepseek_0c6b742d.py": {
        "test_info_memory_usage": {
            "return": "None"
        },
        "test_info_smoke_test": {
            "request": "pytest.FixtureRequest"
        }
    },
    "entropy_test.py_deepseek_6f9156a1.py": {
        "test_distributed_entropy": {
            "return": "None"
        },
        "test_multiple_distributed_runs": {
            "return": "None"
        }
    },
    "common.py_deepseek_94644383.py": {
        "test_scoring": {
            "train_params": "str"
        }
    },
    "withdrawals.py_deepseek_68b4d798.py": {
        "run_withdrawals_processing": {
            "return": "Generator[Tuple[str, Any], None, List[Any]]"
        },
        "verify_post_state": {
            "fully_withdrawable_indices": "List[int]",
            "partial_withdrawals_indices": "List[int]"
        }
    },
    "message_cache.py_deepseek_ef44c5a4.py": {
        "save_message_rendered_content": {
            "return": "str"
        }
    },
    "fork_transition.py_deepseek_de86aa91.py": {
        "transition_to_next_epoch_and_append_blocks": {
            "ignoring_proposers": "Optional[Set[int]]"
        },
        "_transition_until_active": {
            "validator_index": "int"
        }
    },
    "test_incremental_unique_id.py_deepseek_5edd8e87.py": {
        "models": {
            "return": "Dict[str, str]"
        },
        "clean_up": {
            "return": "None"
        }
    },
    "storage.py_deepseek_a492ec7a.py": {
        "load": {
            "return": "None"
        }
    },
    "test_case.py_deepseek_7c281e68.py": {
        "frozen_monotonic": {
            "return": "AsyncGenerator[Mock, None]"
        },
        "on_is_leader": {
            "return": "bool"
        }
    },
    "test_dtypes.py_deepseek_4f82283d.py": {
        "dtypes": {
            "request": "pytest.FixtureRequest"
        }
    },
    "sensor.py_deepseek_dab7cb1b.py": {
        "update": {
            "return": "None"
        }
    },
    "applications.py_deepseek_9a81b2aa.py": {
        "decorator": {
            "func": "typing.Callable"
        }
    },
    "raiden_network.py_deepseek_34be1bfe.py": {
        "pfs_mock": {
            "monkeypatch": "pytest.MonkeyPatch"
        }
    },
    "conftest.py_deepseek_48227454.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "test_encoding.py_deepseek_de4987e5.py": {
        "test_log_failure_and_continue": {
            "caplog": "pytest.LogCaptureFixture"
        }
    },
    "base.py_deepseek_c7a7f089.py": {
        "_install": {
            "renderer": "'Renderer'",
            "return": "None",
            "project": "'Project'"
        },
        "get_installation_path": {
            "project": "'Project'",
            "renderer": "'Renderer'"
        },
        "_fetch_metadata": {
            "renderer": "'Renderer'",
            "project": "'Project'"
        },
        "fetch_metadata": {
            "project": "'Project'",
            "renderer": "'Renderer'"
        },
        "get_project_name": {
            "renderer": "'Renderer'",
            "project": "'Project'"
        },
        "get_downloads_path": {
            "return": "Optional[str]"
        },
        "install": {
            "renderer": "'Renderer'",
            "project": "'Project'"
        }
    },
    "test_hist_method.py_deepseek_c8b56cbb.py": {
        "test_hist_with_legend": {
            "column": "Optional[str]"
        }
    },
    "alarm_control_panel.py_deepseek_e816d2fa.py": {
        "__init__": {
            "code_template": "Optional[str]"
        },
        "_pending_time": {
            "return": "datetime.timedelta"
        }
    },
    "converter.py_deepseek_93b9a29a.py": {
        "convert_styles": {
            "pinyin_list": "List[str]"
        },
        "pre_handle_nopinyin": {
            "return": "Optional[Union[str, List[str]]]"
        },
        "_convert_nopinyin_chars": {
            "errors": "str",
            "return": "Optional[str]"
        },
        "handle_nopinyin": {
            "return": "List[List[str]]"
        }
    },
    "handlers.py_deepseek_9ad132ce.py": {
        "__init__": {
            "level": "Union[int, str]"
        }
    },
    "integrations.py_deepseek_b64115f4.py": {
        "get_all_event_types_for_integration": {
            "return": "Optional[List[str]]",
            "integration": "Integration"
        }
    },
    "test_assert_frame_equal.py_deepseek_ab19c425.py": {
        "by_blocks_fixture": {
            "request": "pytest.FixtureRequest"
        }
    },
    "classes.py_deepseek_5a5bb443.py": {
        "goto": {
            "return": "List['Name']"
        },
        "description": {
            "return": "str"
        },
        "infer": {
            "return": "List['Name']"
        }
    },
    "execution_context.py_deepseek_71a45ddd.py": {
        "chain_id": {
            "return": "int"
        },
        "prev_hashes": {
            "return": "Iterable[Hash32]"
        },
        "difficulty": {
            "return": "int"
        },
        "timestamp": {
            "return": "int"
        },
        "gas_limit": {
            "return": "int"
        }
    },
    "conftest.py_deepseek_06d842d1.py": {
        "mock_job_api_idle": {
            "return": "Generator[Dict[str, Any], None, None]"
        }
    },
    "boxplot.py_deepseek_8e4f22bc.py": {
        "_grouped_plot_by_column": {
            "by": "Optional[Union[str, List[str]]]"
        }
    },
    "test_mediation_fee.py_deepseek_bcbdb4de.py": {
        "running_sum": {
            "return": "List[int]"
        }
    },
    "beam_search_test.py_deepseek_e8e5dc23.py": {
        "test_diff_shape_state": {
            "return": "None"
        }
    },
    "test_indexing.py_deepseek_fa642a88.py": {
        "test_get_loc_tuple_monotonic_above_size_cutoff": {
            "monkeypatch": "pytest.MonkeyPatch"
        }
    },
    "document.py_deepseek_99eb2cc1.py": {
        "get_body_field": {
            "return": "Optional['Field']"
        }
    },
    "matplotlib.py_deepseek_714edf47.py": {
        "plot_frame": {
            "subplots": "Optional[bool]"
        },
        "_args_adjust": {
            "return": "None"
        },
        "_compute_plot_data": {
            "return": "None"
        }
    },
    "test_drop_duplicates.py_deepseek_eba4cfd2.py": {
        "freq": {
            "request": "pytest.FixtureRequest"
        }
    },
    "test_backup_restore.py_deepseek_873b7064.py": {
        "_patched_path_is_file": {
            "return": "bool"
        }
    },
    "learning_rate_scheduler.py_deepseek_290a2bf8.py": {},
    "bases.py_deepseek_770850d1.py": {
        "__get__": {
            "__owner": "Optional[type[Any]]"
        },
        "get_class_fields_only": {
            "model": "type[BaseModel]"
        }
    },
    "dataprovider.py_deepseek_db0d12a8.py": {
        "historic_ohlcv": {
            "timeframe": "str"
        }
    },
    "funcdef_return_type_trailing_comma.py_deepseek_9d900532.py": {
        "SimplePyFn": {
            "float_arg": "Scalar[Float32]",
            "buffer_input": "Buffer[UInt8, 2]",
            "context": "hl.GeneratorContext",
            "func_input": "Buffer[Int32, 2]",
            "return": "tuple[Buffer[UInt8, 2], Buffer[UInt8, 2]]"
        },
        "foo": {
            "b": "int",
            "a": "int",
            "return": "list[a, b]"
        },
        "a": {
            "return": "tuple[a, b]"
        },
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa": {
            "return": "cccccccccccccccccccccccccccccc"
        },
        "thiiiiiiiiiiiiiiiiiis_iiiiiiiiiiiiiiiiiiiiiiiiiiiiiis_veeeeeeeeeeeeeeeeeeeeeeery_looooooong": {
            "return": "None"
        },
        "aaaaaaaaaaaaaaaaa": {
            "return": "list[Ccccccccccccccccccccccccccccccccccccccccccccccccccc, Dddddd]"
        }
    },
    "conftest.py_deepseek_0958eae7.py": {
        "get_multizone_status_mock": {
            "return": "MagicMock"
        }
    },
    "shard_block.py_deepseek_19f36678.py": {
        "sign_shard_block": {
            "spec": "object"
        },
        "get_committee_index_of_shard": {
            "spec": "object"
        },
        "build_shard_block": {
            "spec": "object"
        },
        "get_shard_transitions": {
            "spec": "object"
        },
        "get_sample_shard_block_body": {
            "spec": "object"
        }
    },
    "model_card.py_deepseek_55460c7b.py": {
        "get_description": {
            "model_class": "Type[Model]"
        },
        "__init__": {
            "model_class": "Optional[Callable[..., Model]]"
        }
    },
    "sas7bdat.py_deepseek_217b7b95.py": {
        "_get_properties": {
            "return": "None"
        },
        "_read_next_page": {
            "return": "bool"
        },
        "_read_bytes": {
            "return": "bytes"
        },
        "_parse_metadata": {
            "return": "None"
        }
    },
    "device.py_deepseek_7e5392fe.py": {
        "is_color_flow_enabled": {
            "return": "bool"
        }
    },
    "openapi.py_deepseek_03accd2a.py": {
        "get_link": {
            "base_url": "Optional[str]"
        }
    },
    "base.py_deepseek_195feea3.py": {
        "delete_message_attachments": {
            "path_ids": "list[str]"
        },
        "get_avatar_contents": {
            "return": "tuple[bytes, str]"
        },
        "all_message_attachments": {
            "return": "Iterator[tuple[str, datetime]]"
        }
    },
    "test_base_indexer.py_deepseek_5e5d0ea5.py": {
        "test_rolling_forward_cov_corr": {
            "expected": "List[float]"
        }
    },
    "topic.py_deepseek_5018cdae.py": {
        "get_topic_resolution_and_bare_name": {
            "stored_name": "str"
        }
    },
    "transport.py_deepseek_5fa62350.py": {
        "local_matrix_servers_with_executor": {
            "request": "pytest.FixtureRequest"
        }
    },
    "textual_entailment_suite.py_deepseek_657c92f3.py": {
        "preds_and_confs_fn": {
            "data": "List[Tuple[str, str]]"
        },
        "_wrap_apply_to_each": {
            "perturb_fn": "Callable[[str, Any], Union[str, List[str]]]"
        },
        "_setup_editor": {
            "return": "None"
        }
    },
    "api.py_deepseek_18d40e57.py": {
        "data": {
            "return": "Response"
        }
    },
    "strings.py_deepseek_d183b9cb.py": {
        "_get_string_prefix_and_quote": {
            "return": "Tuple[Optional[str], Optional[str]]"
        }
    },
    "test_counts.py_deepseek_91638839.py": {
        "setUp": {
            "return": "None"
        }
    },
    "conftest.py_deepseek_ef4e97b9.py": {
        "mock_controller": {
            "mock_button": "AsyncMock"
        }
    },
    "region_detector.py_deepseek_6c3cb449.py": {
        "_seeded_random_tensor": {
            "return": "torch.FloatTensor"
        }
    },
    "transactions.py_deepseek_5c5a8715.py": {
        "chain_id": {
            "return": "Optional[int]"
        }
    },
    "_misc.py_deepseek_e437bff3.py": {
        "__contains__": {
            "key": "str"
        },
        "reset": {
            "return": "None"
        }
    },
    "test_utils.py_deepseek_5ad1280a.py": {
        "QueryValueEx": {
            "return": "List[Any]"
        }
    },
    "test_converter.py_deepseek_e9c33d06.py": {
        "post_pinyin": {
            "return": "Dict[str, List[List[str]]]"
        }
    },
    "media_browser.py_deepseek_7f9ba9bb.py": {
        "browse_media": {
            "media_content_id": "Optional[str]"
        },
        "get_proxy_image_url": {
            "server_id": "str"
        }
    },
    "conftest.py_deepseek_3e1f3d3a.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "test_get_accessories.py_deepseek_6909180e.py": {
        "test_not_supported": {
            "caplog": "pytest.LogCaptureFixture"
        }
    },
    "sensor.py_deepseek_731836cd.py": {
        "native_value": {
            "return": "Optional[int]"
        }
    },
    "attestations.py_deepseek_7db2ae98.py": {
        "get_valid_attestations_at_slot": {
            "return": "Generator[Attestation, None, None]"
        }
    }
}