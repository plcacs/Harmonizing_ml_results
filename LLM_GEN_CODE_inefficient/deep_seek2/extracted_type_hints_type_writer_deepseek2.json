{
    "alert_tests.py_deepseek_d23b3a38.py": {},
    "test_usecols_basic.py_deepseek_c777d637.py": {},
    "sensor.py_deepseek_38c42a0d.py": {},
    "validator.py_deepseek_af420d1c.py": {},
    "testclient.py_deepseek_b53c0624.py": {
        "__enter__": {
            "return": "TestClient"
        }
    },
    "test_string.py_deepseek_7c5cc6f9.py": {
        "test_combine_add": {
            "data_repeated": "Callable[[int], List[Union[ArrowStringArray, pd.Series]]]",
            "request": "pytest.FixtureRequest"
        },
        "chunked": {
            "request": "pytest.FixtureRequest"
        }
    },
    "generic_test_builders.py_deepseek_dbe9f303.py": {
        "extract_test_args": {
            "data_test": "Dict[str, Any]"
        }
    },
    "sensor.py_deepseek_ec1ed581.py": {},
    "test_conversion.py_deepseek_43da3ab9.py": {
        "test_iterable_map": {
            "rdtype": "type"
        }
    },
    "instrumentations_examples.py_deepseek_4572d1a8.py": {},
    "worker.py_deepseek_223fa64d.py": {},
    "pretrained_transformer_embedder.py_deepseek_193bb568.py": {
        "_unfold_long_sequences": {
            "embeddings": "torch.FloatTensor"
        }
    },
    "conditional_random_field.py_deepseek_b0709573.py": {
        "forward": {
            "mask": "Optional[torch.BoolTensor]"
        }
    },
    "regions.py_deepseek_08792844.py": {
        "_endpoint_for_partition": {
            "region_name": "Optional[str]"
        },
        "construct_endpoint": {
            "return": "Optional[Dict[str, Any]]"
        }
    },
    "_models.py_deepseek_5798ddfd.py": {},
    "decoder.py_deepseek_b90fbe5f.py": {},
    "cache.py_deepseek_397aeb92.py": {
        "_remove_cache_and_update_lock": {
            "return": "None"
        },
        "load_module": {
            "return": "Optional[Any]"
        },
        "_set_cache_item": {
            "path": "str"
        },
        "_load_from_file_system": {
            "cache_path": "Optional[Path]"
        },
        "_get_hashed_path": {
            "return": "Path"
        }
    },
    "training.py_deepseek_79729440.py": {},
    "tools.py_deepseek_d6227bc0.py": {
        "create_subplots": {
            "ax": "Optional[Union[Axes, Sequence[Axes]]]"
        }
    },
    "blocks.py_deepseek_5859508d.py": {
        "__init__": {
            "timestamp": "int"
        }
    },
    "utils.py_deepseek_04b66f49.py": {
        "assert_produces_warning": {
            "filter_level": "str",
            "expected_warning": "Union[Type[Warning], bool, None]"
        },
        "setUpClass": {
            "return": "None"
        }
    },
    "transformer_layer.py_deepseek_238a1cf9.py": {
        "forward": {
            "attention_mask": "torch.Tensor"
        }
    },
    "featureflags.py_deepseek_7d9b2b1c.py": {
        "__init__": {
            "at_least_one_of": "Tuple[str, ...]"
        },
        "__repr__": {
            "return": "str"
        }
    },
    "misc.py_deepseek_3b346c4e.py": {
        "unpack_single_str_list": {
            "keys": "Union[List[str], str]"
        }
    },
    "sensor.py_deepseek_9cbe391f.py": {
        "update": {
            "return": "None"
        }
    },
    "cover.py_deepseek_b6c0275f.py": {},
    "melt.py_deepseek_713be946.py": {
        "wide_to_long": {
            "i": "Union[str, List[str]]",
            "stubnames": "Union[str, List[str]]"
        },
        "melt": {
            "var_name": "Optional[Union[Hashable, List[Hashable]]]"
        },
        "ensure_list_vars": {
            "arg_vars": "Optional[Union[Hashable, List[Hashable], Tuple[Hashable, ...], np.ndarray]]"
        }
    },
    "test_arithmetics.py_deepseek_1d2db0a9.py": {
        "test_binary_operators": {
            "op": "str"
        },
        "kind": {
            "request": "pytest.FixtureRequest"
        }
    },
    "test_api.py_deepseek_9fa83db7.py": {
        "test_remove_unused_categories": {
            "return": "None"
        }
    },
    "git.py_deepseek_08af83e3.py": {
        "clone": {
            "dirname": "Optional[str]",
            "revision": "Optional[str]",
            "return": "Tuple[bytes, bytes]"
        }
    },
    "categorical.py_deepseek_f99b3282.py": {
        "set_categories": {
            "ordered": "bool"
        },
        "reorder_categories": {
            "ordered": "bool"
        }
    },
    "conftest.py_deepseek_c0d9dac1.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "monitor.py_deepseek_121c517b.py": {
        "on_stream_event_out": {
            "state": "Dict"
        }
    },
    "test_info.py_deepseek_0c6b742d.py": {
        "test_info_memory_usage": {
            "return": "None"
        },
        "test_info_smoke_test": {
            "request": "pytest.FixtureRequest"
        }
    },
    "multi.py_deepseek_ac01e7fb.py": {
        "drop": {
            "level": "Optional[Union[int, str]]"
        },
        "to_frame": {
            "name": "Optional[Union[str, List[str]]]"
        }
    },
    "expr.py_deepseek_e4a118ef.py": {},
    "show.py_deepseek_19112c41.py": {
        "get_runner_type": {
            "return": "Union[type[SeedRunner], type[ShowRunner]]"
        }
    },
    "main.py_deepseek_3f8c7064.py": {},
    "entropy_test.py_deepseek_6f9156a1.py": {
        "test_distributed_entropy": {
            "return": "None"
        },
        "test_multiple_distributed_runs": {
            "return": "None"
        }
    },
    "test_btanalysis.py_deepseek_5d81f97b.py": {
        "test_calculate_max_drawdown2": {
            "return": "None"
        }
    },
    "switch.py_deepseek_6d2bb2c2.py": {},
    "datetimes.py_deepseek_289303b4.py": {},
    "event_schema.py_deepseek_05532cab.py": {
        "validate_with_model": {
            "model": "Type[BaseModel]"
        },
        "make_checker": {
            "return": "Callable[[str, Dict[str, object]], None]",
            "base_model": "Type[BaseEvent]"
        }
    },
    "common.py_deepseek_94644383.py": {
        "test_scoring": {
            "train_params": "str"
        }
    },
    "embedding.py_deepseek_64e6a5c5.py": {},
    "test_strategy_state.py_deepseek_f335305e.py": {
        "float_range": {
            "right": "float",
            "left": "float"
        },
        "flatmapped_strategy": {
            "p": "float"
        }
    },
    "withdrawals.py_deepseek_68b4d798.py": {
        "run_withdrawals_processing": {
            "return": "Generator[Tuple[str, Any], None, List[Any]]"
        },
        "verify_post_state": {
            "fully_withdrawable_indices": "List[int]",
            "partial_withdrawals_indices": "List[int]"
        }
    },
    "test_dtypes_basic.py_deepseek_3cac3357.py": {},
    "value.py_deepseek_6a3b30ed.py": {
        "get_kind": {
            "return": "Parameter"
        },
        "get_param_names": {
            "return": "List[Any]"
        },
        "_get": {
            "allowed_getattr_callback": "Callable[[str, bool], Tuple[bool, bool]]"
        }
    },
    "helpers.py_deepseek_d76a9f4a.py": {},
    "manifest.py_deepseek_c8979c4a.py": {},
    "message_cache.py_deepseek_ef44c5a4.py": {
        "save_message_rendered_content": {
            "return": "str"
        }
    },
    "fork_transition.py_deepseek_de86aa91.py": {
        "transition_to_next_epoch_and_append_blocks": {
            "ignoring_proposers": "Optional[Set[int]]"
        },
        "_transition_until_active": {
            "validator_index": "int"
        }
    },
    "test_filter_rewriting.py_deepseek_5e8e5461.py": {
        "test_rewrite_filter_chains_with_some_unhandled": {
            "predicates": "list[Callable[[Union[int, float]], bool]]"
        },
        "test_filter_rewriting_text_lambda_len": {
            "predicate": "Callable[[Union[str, list[int], bytes, set[int], frozenset[int], dict[int, None], tuple[int, ...]]], bool]"
        }
    },
    "test_incremental_unique_id.py_deepseek_5edd8e87.py": {
        "models": {
            "return": "Dict[str, str]"
        },
        "clean_up": {
            "return": "None"
        }
    },
    "variables.py_deepseek_a4df8a65.py": {
        "privatekey_seed": {
            "request": "pytest.FixtureRequest"
        },
        "blockchain_key_seed": {
            "request": "pytest.FixtureRequest"
        },
        "logs_storage": {
            "request": "pytest.FixtureRequest"
        },
        "blockchain_type": {
            "request": "pytest.FixtureRequest"
        }
    },
    "storage.py_deepseek_a492ec7a.py": {
        "load": {
            "return": "None"
        }
    },
    "conf.py_deepseek_26eda4d5.py": {},
    "cookiejar.py_deepseek_3ace996d.py": {},
    "test_case.py_deepseek_7c281e68.py": {
        "frozen_monotonic": {
            "return": "AsyncGenerator[Mock, None]"
        },
        "on_is_leader": {
            "return": "bool"
        }
    },
    "test_thread_runner.py_deepseek_d2ca7599.py": {
        "test_release_at_earliest_opportunity": {
            "return": "None"
        },
        "test_node_returning_none": {
            "return": "None"
        },
        "test_count_multiple_loads": {
            "return": "None"
        },
        "test_dont_release_inputs_and_outputs": {
            "return": "None"
        }
    },
    "test_dtypes.py_deepseek_4f82283d.py": {
        "dtypes": {
            "request": "pytest.FixtureRequest"
        }
    },
    "vocab.py_deepseek_aa60a35d.py": {},
    "conftest.py_deepseek_63dfd35f.py": {
        "smartthings_mock_fixture": {
            "return": "Mock"
        },
        "subscription_factory_fixture": {
            "return": "Mock"
        },
        "device_factory_fixture": {
            "return": "Mock"
        },
        "scene_factory_fixture": {
            "return": "Mock"
        }
    },
    "sensor.py_deepseek_dab7cb1b.py": {
        "update": {
            "return": "None"
        }
    },
    "applications.py_deepseek_9a81b2aa.py": {
        "decorator": {
            "func": "typing.Callable"
        }
    },
    "raiden_network.py_deepseek_34be1bfe.py": {
        "pfs_mock": {
            "monkeypatch": "pytest.MonkeyPatch"
        }
    },
    "choice.py_deepseek_7210e35e.py": {},
    "test_package.py_deepseek_ecc92182.py": {
        "mock_sys": {
            "return": "Generator[MagicMock]"
        },
        "mock_venv": {
            "return": "Generator[MagicMock]"
        },
        "mock_env_copy": {
            "return": "Generator[Mock]"
        },
        "mock_popen": {
            "return": "Generator[MagicMock]"
        }
    },
    "refactor.py_deepseek_d1039c8d.py": {},
    "core.py_deepseek_35e36449.py": {
        "_validate_versions": {
            "datasets": "Optional[Dict[str, AbstractDataset]]"
        }
    },
    "gated_cnn_encoder.py_deepseek_3d4edbef.py": {
        "forward": {
            "return": "Tensor"
        }
    },
    "exposed_entities.py_deepseek_94c60445.py": {},
    "inference.py_deepseek_11291039.py": {
        "make_input_from_dict": {
            "input_dict": "Dict"
        }
    },
    "test_utils.py_deepseek_f3910096.py": {},
    "experiments.py_deepseek_56dbe657.py": {},
    "cyclist.py_deepseek_a9eea13e.py": {},
    "conftest.py_deepseek_48227454.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "test_encoding.py_deepseek_de4987e5.py": {
        "test_log_failure_and_continue": {
            "caplog": "pytest.LogCaptureFixture"
        }
    },
    "test_masked.py_deepseek_f680e59c.py": {
        "dtype": {
            "request": "pytest.FixtureRequest"
        },
        "test_divmod_series_array": {
            "request": "pytest.FixtureRequest"
        }
    },
    "base_tests.py_deepseek_525dc3b2.py": {
        "get_json_resp": {
            "json_": "Optional[str]"
        }
    },
    "kill_if_no_output.py_deepseek_82698073.py": {
        "monitor": {
            "return": "int"
        }
    },
    "base.py_deepseek_c7a7f089.py": {
        "_install": {
            "renderer": "'Renderer'",
            "return": "None",
            "project": "'Project'"
        },
        "get_installation_path": {
            "project": "'Project'",
            "renderer": "'Renderer'"
        },
        "_fetch_metadata": {
            "renderer": "'Renderer'",
            "project": "'Project'"
        },
        "fetch_metadata": {
            "project": "'Project'",
            "renderer": "'Renderer'"
        },
        "get_project_name": {
            "renderer": "'Renderer'",
            "project": "'Project'"
        },
        "get_downloads_path": {
            "return": "Optional[str]"
        },
        "install": {
            "renderer": "'Renderer'",
            "project": "'Project'"
        }
    },
    "test_hist_method.py_deepseek_c8b56cbb.py": {
        "test_hist_with_legend": {
            "column": "Optional[str]"
        }
    },
    "text_classification_json.py_deepseek_45388262.py": {
        "_read": {
            "return": "Iterable[Instance]"
        }
    },
    "alarm_control_panel.py_deepseek_e816d2fa.py": {
        "__init__": {
            "code_template": "Optional[str]"
        },
        "_pending_time": {
            "return": "datetime.timedelta"
        }
    },
    "converter.py_deepseek_93b9a29a.py": {
        "convert_styles": {
            "pinyin_list": "List[str]"
        },
        "pre_handle_nopinyin": {
            "return": "Optional[Union[str, List[str]]]"
        },
        "_convert_nopinyin_chars": {
            "errors": "str",
            "return": "Optional[str]"
        },
        "handle_nopinyin": {
            "return": "List[List[str]]"
        }
    },
    "gen.py_deepseek_1e5c7057.py": {
        "get_provider": {
            "all_mods": "Dict[str, Dict[str, Union[List[str], str]]]",
            "create_provider_fn": "Callable[[SpecForkName, PresetBaseName, str, str], TestProvider]"
        },
        "combine_mods": {
            "dict_1": "Dict[str, Dict[str, Union[List[str], str]]]"
        }
    },
    "stripe.py_deepseek_68c08fad.py": {
        "customer_plan_exists": {
            "return": "bool"
        }
    },
    "test_stack.py_deepseek_249558e0.py": {},
    "handlers.py_deepseek_9ad132ce.py": {
        "__init__": {
            "level": "Union[int, str]"
        }
    },
    "parse.py_deepseek_20a9738b.py": {},
    "test_process_justification_and_finalization.py_deepseek_5ded0881.py": {
        "finalize_on_234": {
            "state": "State"
        },
        "add_mock_attestations": {
            "spec": "Spec",
            "state": "State"
        },
        "finalize_on_123": {
            "state": "State"
        },
        "test_balance_threshold_with_exited_validators": {
            "spec": "Spec"
        }
    },
    "integrations.py_deepseek_b64115f4.py": {
        "get_all_event_types_for_integration": {
            "return": "Optional[List[str]]",
            "integration": "Integration"
        }
    },
    "test_assert_frame_equal.py_deepseek_ab19c425.py": {
        "by_blocks_fixture": {
            "request": "pytest.FixtureRequest"
        }
    },
    "handlers.py_deepseek_21ef1750.py": {
        "emit": {
            "record": "logging.LogRecord"
        }
    },
    "test_generic.py_deepseek_f4c8dffd.py": {},
    "classes.py_deepseek_5a5bb443.py": {
        "goto": {
            "return": "List['Name']"
        },
        "description": {
            "return": "str"
        },
        "infer": {
            "return": "List['Name']"
        }
    },
    "xq_follower.py_deepseek_cbbc76a8.py": {
        "project_transactions": {
            "assets": "Number"
        },
        "calculate_assets": {
            "initial_assets": "Optional[Number]"
        },
        "follow": {
            "initial_assets": "Optional[Union[Number, List[Number]]]",
            "total_assets": "Union[Number, List[Number]]"
        },
        "none_to_zero": {
            "return": "Number"
        }
    },
    "binary_sensor.py_deepseek_0433b0a2.py": {},
    "api.py_deepseek_a31f2df4.py": {},
    "execution_context.py_deepseek_71a45ddd.py": {
        "chain_id": {
            "return": "int"
        },
        "prev_hashes": {
            "return": "Iterable[Hash32]"
        },
        "difficulty": {
            "return": "int"
        },
        "timestamp": {
            "return": "int"
        },
        "gas_limit": {
            "return": "int"
        }
    },
    "functions.py_deepseek_02c2585e.py": {
        "_iter_module_names": {
            "paths": "List[str]"
        },
        "get_builtin_module_names": {
            "return": "Tuple[str, ...]"
        },
        "_zip_list_subdirectory": {
            "zip_subdir_path": "str"
        },
        "_find_module": {
            "full_name": "Optional[str]"
        }
    },
    "test_validator_unittest.py_deepseek_d0ddfc83.py": {},
    "optimizers.py_deepseek_9ab847a5.py": {
        "step": {
            "return": "Optional[float]"
        }
    },
    "base.py_deepseek_432e748f.py": {
        "py__name__": {
            "return": "str"
        },
        "py__bases__": {
            "return": "List['_LazyGenericBaseClass']"
        },
        "iter_": {
            "return": "Iterator[Value]"
        }
    },
    "conftest.py_deepseek_06d842d1.py": {
        "mock_job_api_idle": {
            "return": "Generator[Dict[str, Any], None, None]"
        }
    },
    "blockchain.py_deepseek_8dc4e30c.py": {},
    "boxplot.py_deepseek_8e4f22bc.py": {
        "_grouped_plot_by_column": {
            "by": "Optional[Union[str, List[str]]]"
        }
    },
    "test_mediation_fee.py_deepseek_bcbdb4de.py": {
        "running_sum": {
            "return": "List[int]"
        }
    },
    "transformer_embeddings_test.py_deepseek_7e8d35e5.py": {},
    "player.py_deepseek_504483b4.py": {},
    "beam_search_test.py_deepseek_e8e5dc23.py": {
        "test_diff_shape_state": {
            "return": "None"
        }
    },
    "test_indexing.py_deepseek_fa642a88.py": {
        "test_get_loc_tuple_monotonic_above_size_cutoff": {
            "monkeypatch": "pytest.MonkeyPatch"
        }
    },
    "media_player.py_deepseek_6a1193c9.py": {
        "update": {
            "return": "bool"
        }
    },
    "python.py_deepseek_6ca98bab.py": {},
    "test_transition.py_deepseek_5b8686d2.py": {
        "test_simple_transition": {
            "post_tag": "str"
        },
        "_run_transition_test_with_attestations": {
            "post_tag": "str",
            "pre_tag": "str"
        },
        "test_transition_with_no_attestations_until_after_fork": {
            "post_tag": "str"
        }
    },
    "document.py_deepseek_99eb2cc1.py": {
        "get_body_field": {
            "return": "Optional['Field']"
        }
    },
    "matplotlib.py_deepseek_714edf47.py": {
        "plot_frame": {
            "subplots": "Optional[bool]"
        },
        "_args_adjust": {
            "return": "None"
        },
        "_compute_plot_data": {
            "return": "None"
        }
    },
    "test_drop_duplicates.py_deepseek_eba4cfd2.py": {
        "freq": {
            "request": "pytest.FixtureRequest"
        }
    },
    "network.py_deepseek_8d1b1d1c.py": {
        "create_network_channels": {
            "return": "AppChannels"
        },
        "create_all_channels_for_network": {
            "app_channels": "AppChannels"
        },
        "wait_for_channels": {
            "app_channels": "AppChannels"
        },
        "create_sequential_channels": {
            "return": "AppChannels"
        }
    },
    "test_backup_restore.py_deepseek_873b7064.py": {
        "_patched_path_is_file": {
            "return": "bool"
        }
    },
    "light.py_deepseek_d56e7802.py": {},
    "learning_rate_scheduler.py_deepseek_290a2bf8.py": {},
    "bases.py_deepseek_770850d1.py": {
        "__get__": {
            "__owner": "Optional[type[Any]]"
        },
        "get_class_fields_only": {
            "model": "type[BaseModel]"
        }
    },
    "dataprovider.py_deepseek_db0d12a8.py": {
        "historic_ohlcv": {
            "timeframe": "str"
        }
    },
    "funcdef_return_type_trailing_comma.py_deepseek_9d900532.py": {
        "SimplePyFn": {
            "float_arg": "Scalar[Float32]",
            "buffer_input": "Buffer[UInt8, 2]",
            "context": "hl.GeneratorContext",
            "func_input": "Buffer[Int32, 2]",
            "return": "tuple[Buffer[UInt8, 2], Buffer[UInt8, 2]]"
        },
        "foo": {
            "b": "int",
            "a": "int",
            "return": "list[a, b]"
        },
        "a": {
            "return": "tuple[a, b]"
        },
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa": {
            "return": "cccccccccccccccccccccccccccccc"
        },
        "thiiiiiiiiiiiiiiiiiis_iiiiiiiiiiiiiiiiiiiiiiiiiiiiiis_veeeeeeeeeeeeeeeeeeeeeeery_looooooong": {
            "return": "None"
        },
        "aaaaaaaaaaaaaaaaa": {
            "return": "list[Ccccccccccccccccccccccccccccccccccccccccccccccccccc, Dddddd]"
        }
    },
    "context.py_deepseek_a835034c.py": {
        "with_all_phases_from": {
            "all_phases": "Set[str]"
        },
        "with_phases": {
            "phases": "Set[str]"
        }
    },
    "conftest.py_deepseek_0958eae7.py": {
        "get_multizone_status_mock": {
            "return": "MagicMock"
        }
    },
    "conftest.py_deepseek_a2345090.py": {},
    "shard_block.py_deepseek_19f36678.py": {
        "sign_shard_block": {
            "spec": "object"
        },
        "get_committee_index_of_shard": {
            "spec": "object"
        },
        "build_shard_block": {
            "spec": "object"
        },
        "get_shard_transitions": {
            "spec": "object"
        },
        "get_sample_shard_block_body": {
            "spec": "object"
        }
    },
    "import_export_tests.py_deepseek_faca9124.py": {
        "get_slice": {
            "return": "Optional[Slice]"
        },
        "get_dash": {
            "return": "Optional[Dashboard]"
        }
    },
    "model_card.py_deepseek_55460c7b.py": {
        "get_description": {
            "model_class": "Type[Model]"
        },
        "__init__": {
            "model_class": "Optional[Callable[..., Model]]"
        }
    },
    "sas7bdat.py_deepseek_217b7b95.py": {
        "_get_properties": {
            "return": "None"
        },
        "_read_next_page": {
            "return": "bool"
        },
        "_read_bytes": {
            "return": "bytes"
        },
        "_parse_metadata": {
            "return": "None"
        }
    },
    "device.py_deepseek_7e5392fe.py": {
        "is_color_flow_enabled": {
            "return": "bool"
        }
    },
    "calibration.py_deepseek_70684408.py": {},
    "openapi.py_deepseek_03accd2a.py": {
        "get_link": {
            "base_url": "Optional[str]"
        }
    },
    "driver.py_deepseek_a019dddb.py": {},
    "conftest.py_deepseek_d36a556c.py": {
        "mock_legacy_pydrawise": {
            "zones": "list[Zone]"
        },
        "zones": {
            "return": "list[Zone]"
        },
        "sensors": {
            "return": "list[Sensor]"
        },
        "mock_pydrawise": {
            "user": "User"
        }
    },
    "avatar.py_deepseek_01403713.py": {},
    "conftest.py_deepseek_8f499602.py": {},
    "messages.py_deepseek_30e9304b.py": {},
    "template_parser.py_deepseek_d1d92522.py": {},
    "base.py_deepseek_195feea3.py": {
        "delete_message_attachments": {
            "path_ids": "list[str]"
        },
        "get_avatar_contents": {
            "return": "tuple[bytes, str]"
        },
        "all_message_attachments": {
            "return": "Iterator[tuple[str, datetime]]"
        }
    },
    "alarm_control_panel.py_deepseek_8577ea27.py": {},
    "test_discovery_ability.py_deepseek_36830e91.py": {
        "distorted_value": {
            "x": "List[T]"
        },
        "define_test": {
            "predicate": "Callable[[T], bool]",
            "condition": "Optional[Callable[[T], bool]]",
            "suppress_health_check": "Tuple[HealthCheck, ...]"
        }
    },
    "blocks.py_deepseek_e29f01b9.py": {
        "convert": {
            "return": "List[Block]"
        },
        "external_values": {
            "return": "ArrayLike"
        }
    },
    "span_based_f1_measure.py_deepseek_e66cb97e.py": {
        "__call__": {
            "mask": "Optional[torch.BoolTensor]"
        }
    },
    "server.py_deepseek_04969163.py": {},
    "test_base_indexer.py_deepseek_5e5d0ea5.py": {
        "test_rolling_forward_cov_corr": {
            "expected": "List[float]"
        }
    },
    "test_compression.py_deepseek_8c14f213.py": {
        "test_compression": {
            "request": "pytest.FixtureRequest"
        },
        "buffer": {
            "request": "pytest.FixtureRequest"
        }
    },
    "select.py_deepseek_1d2f97a4.py": {},
    "topic.py_deepseek_5018cdae.py": {
        "get_topic_resolution_and_bare_name": {
            "stored_name": "str"
        }
    },
    "logger_utils.py_deepseek_240f4189.py": {},
    "transport.py_deepseek_5fa62350.py": {
        "local_matrix_servers_with_executor": {
            "request": "pytest.FixtureRequest"
        }
    },
    "raiden_service.py_deepseek_abb03416.py": {},
    "file_name.py_deepseek_3fa33654.py": {
        "complete_file_name": {
            "inference_state": "'InferenceState'",
            "start_leaf": "'Leaf'",
            "signatures_callback": "'Callable'"
        },
        "iterate_nodes": {
            "return": "Generator['Leaf', None, None]"
        },
        "_add_strings": {
            "nodes": "List['Leaf']"
        },
        "_add_os_path_join": {
            "return": "Optional[str]",
            "start_leaf": "'Leaf'"
        },
        "_get_string_additions": {
            "start_leaf": "'Leaf'"
        }
    },
    "elmo.py_deepseek_d981c2e3.py": {},
    "textual_entailment_suite.py_deepseek_657c92f3.py": {
        "preds_and_confs_fn": {
            "data": "List[Tuple[str, str]]"
        },
        "_wrap_apply_to_each": {
            "perturb_fn": "Callable[[str, Any], Union[str, List[str]]]"
        },
        "_setup_editor": {
            "return": "None"
        }
    },
    "api.py_deepseek_18d40e57.py": {
        "data": {
            "return": "Response"
        }
    },
    "strings.py_deepseek_d183b9cb.py": {
        "_get_string_prefix_and_quote": {
            "return": "Tuple[Optional[str], Optional[str]]"
        }
    },
    "utils.py_deepseek_8b360116.py": {},
    "test_counts.py_deepseek_91638839.py": {
        "setUp": {
            "return": "None"
        }
    },
    "scheduler_tests.py_deepseek_704e35bc.py": {
        "test_scheduler_celery_timeout_ny": {
            "execute_mock": "patch"
        },
        "test_scheduler_feature_flag_off": {
            "execute_mock": "patch",
            "is_feature_enabled": "patch"
        },
        "test_scheduler_celery_timeout_utc": {
            "execute_mock": "patch"
        },
        "test_scheduler_celery_no_timeout_ny": {
            "execute_mock": "patch"
        },
        "owners": {
            "get_user": "callable"
        },
        "test_scheduler_celery_no_timeout_utc": {
            "execute_mock": "patch"
        }
    },
    "conftest.py_deepseek_ef4e97b9.py": {
        "mock_controller": {
            "mock_button": "AsyncMock"
        }
    },
    "notify.py_deepseek_79a4d062.py": {
        "_build_text_msg": {
            "return": "MIMEText"
        },
        "connect": {
            "return": "smtplib.SMTP"
        },
        "connection_is_valid": {
            "return": "bool"
        }
    },
    "region_detector.py_deepseek_6c3cb449.py": {
        "_seeded_random_tensor": {
            "return": "torch.FloatTensor"
        }
    },
    "transactions.py_deepseek_5c5a8715.py": {
        "chain_id": {
            "return": "Optional[int]"
        }
    },
    "_misc.py_deepseek_e437bff3.py": {
        "__contains__": {
            "key": "str"
        },
        "reset": {
            "return": "None"
        }
    },
    "test_utils.py_deepseek_5ad1280a.py": {
        "QueryValueEx": {
            "return": "List[Any]"
        }
    },
    "test_converter.py_deepseek_e9c33d06.py": {
        "post_pinyin": {
            "return": "Dict[str, List[List[str]]]"
        }
    },
    "media_browser.py_deepseek_7f9ba9bb.py": {
        "browse_media": {
            "media_content_id": "Optional[str]"
        },
        "get_proxy_image_url": {
            "server_id": "str"
        }
    },
    "conftest.py_deepseek_3e1f3d3a.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "test_value_counts.py_deepseek_32e737e2.py": {},
    "test_procedure.py_deepseek_32a863d6.py": {
        "_get_val": {
            "key": "str"
        },
        "_should_fail_test": {
            "return": "bool"
        },
        "_failure_test": {
            "return": "bool"
        }
    },
    "test_kraken.py_deepseek_9d701995.py": {},
    "hive.py_deepseek_5136cf5e.py": {},
    "test_get_accessories.py_deepseek_6909180e.py": {
        "test_not_supported": {
            "caplog": "pytest.LogCaptureFixture"
        }
    },
    "sensor.py_deepseek_731836cd.py": {
        "native_value": {
            "return": "Optional[int]"
        }
    },
    "attention_module.py_deepseek_e99ef20b.py": {},
    "attestations.py_deepseek_7db2ae98.py": {
        "get_valid_attestations_at_slot": {
            "return": "Generator[Attestation, None, None]"
        }
    }
}