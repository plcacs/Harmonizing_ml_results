{
  "AddType.py": [
    "class:TypeRestorer",
    "func:assign_types",
    "func:collect_type_hints",
    "func:main",
    "func:process_type_analysis_results",
    "func:typecheck",
    "func:visit_FunctionDef"
  ],
  "AddType_Typewriter.py": [
    "class:TypeRestorer",
    "func:apply_config",
    "func:assign_types",
    "func:collect_type_hints",
    "func:log_initial_errors",
    "func:main",
    "func:process_type_analysis_results",
    "func:typecheck",
    "func:visit_FunctionDef"
  ],
  "AddType_Typewriter_no_time_cap.py": [
    "class:TypeRestorer",
    "func:apply_config",
    "func:assign_types",
    "func:collect_type_hints",
    "func:log_initial_errors",
    "func:main",
    "func:process_type_analysis_results",
    "func:typecheck",
    "func:visit_FunctionDef"
  ],
  "BaseEnvironment.py_gpt4_5f8d69fa.py": [
    "class:BaseActions",
    "class:BaseEnvironment",
    "class:Positions",
    "func:__init__",
    "func:_get_observation",
    "func:_is_valid",
    "func:_update_history",
    "func:_update_total_profit",
    "func:_update_unrealized_total_profit",
    "func:action_masks",
    "func:add_entry_fee",
    "func:add_exit_fee",
    "func:calculate_reward",
    "func:current_price",
    "func:get_actions",
    "func:get_attr",
    "func:get_trade_duration",
    "func:get_unrealized_profit",
    "func:is_tradesignal",
    "func:opposite",
    "func:reset",
    "func:reset_env",
    "func:reset_tensorboard_log",
    "func:seed",
    "func:set_action_space",
    "func:step",
    "func:tensorboard_log"
  ],
  "Generate_mypy_results_summary.py": [],
  "Remove_Type_annotation.py": [
    "class:TypeAnnotationRemover",
    "func:analyze_results",
    "func:main",
    "func:process_mypyoutput",
    "func:remove_type_annotations",
    "func:run_mypy_original",
    "func:run_remove_type_on_python_files",
    "func:visit_FunctionDef"
  ],
  "Remove_python_annotation.py": [
    "class:TypeAnnotationRemover",
    "func:generate_no_type_versions",
    "func:generate_safe_filename",
    "func:remove_type_annotations",
    "func:remove_type_hints",
    "func:visit_FunctionDef"
  ],
  "Run_raw_mypy.py": [
    "func:count_parameters",
    "func:run_mypy_and_save_results"
  ],
  "Type_info_collection_of_TypeWriterResult.py": [
    "func:extract_param_types"
  ],
  "__init__.py_gpt4_0ebca355.py": [
    "func:get_full_significant_states_with_session",
    "func:get_last_state_changes",
    "func:get_significant_states",
    "func:get_significant_states_with_session",
    "func:state_changes_during_period"
  ],
  "__init__.py_gpt4_13fc3f16.py": [
    "class:BufferingFormatter",
    "class:ConsoleLogStream",
    "class:FileHandler",
    "class:Filter",
    "class:Filterer",
    "class:Formatter",
    "class:Handler",
    "class:LogRecord",
    "class:Logger",
    "class:LoggerAdapter",
    "class:Manager",
    "class:NullHandler",
    "class:PercentStyle",
    "class:PlaceHolder",
    "class:RootLogger",
    "class:StrFormatStyle",
    "class:StreamHandler",
    "class:StringTemplateStyle",
    "class:_StderrHandler",
    "func:__init__",
    "func:__repr__",
    "func:__str__",
    "func:_acquireLock",
    "func:_addHandlerRef",
    "func:_checkLevel",
    "func:_fixupChildren",
    "func:_fixupParents",
    "func:_getStream",
    "func:_log",
    "func:_releaseLock",
    "func:_removeHandlerRef",
    "func:_resetLogging",
    "func:_showwarning",
    "func:acquire",
    "func:addFilter",
    "func:addHandler",
    "func:addLevelName",
    "func:append",
    "func:basicConfig",
    "func:callHandlers",
    "func:captureWarnings",
    "func:close",
    "func:createLock",
    "func:critical",
    "func:currentframe",
    "func:debug",
    "func:disable",
    "func:emit",
    "func:error",
    "func:exception",
    "func:filter",
    "func:findCaller",
    "func:flush",
    "func:format",
    "func:formatException",
    "func:formatFooter",
    "func:formatHeader",
    "func:formatMessage",
    "func:formatStack",
    "func:formatTime",
    "func:getChild",
    "func:getEffectiveLevel",
    "func:getLevelName",
    "func:getLogRecordFactory",
    "func:getLogger",
    "func:getLoggerClass",
    "func:getMessage",
    "func:get_name",
    "func:handle",
    "func:handleError",
    "func:hasHandlers",
    "func:info",
    "func:isEnabledFor",
    "func:log",
    "func:makeLogRecord",
    "func:makeRecord",
    "func:process",
    "func:release",
    "func:removeFilter",
    "func:removeHandler",
    "func:setFormatter",
    "func:setLevel",
    "func:setLogRecordFactory",
    "func:setLoggerClass",
    "func:set_name",
    "func:shutdown",
    "func:toDict",
    "func:usesTime",
    "func:warn",
    "func:warning",
    "func:write"
  ],
  "__init__.py_gpt4_1516527e.py": [
    "class:AutomationEntity",
    "class:AutomationEntityConfig",
    "class:BaseAutomationEntity",
    "class:IfAction",
    "class:UnavailableAutomationEntity",
    "func:__call__",
    "func:__init__",
    "func:_automation_matches_config",
    "func:_automation_name",
    "func:_automations_with_x",
    "func:_log_callback",
    "func:_trigger_extract_devices",
    "func:_trigger_extract_entities",
    "func:_x_in_automation",
    "func:areas_in_automation",
    "func:automation_matches_config",
    "func:automations_with_area",
    "func:automations_with_blueprint",
    "func:automations_with_device",
    "func:automations_with_entity",
    "func:automations_with_floor",
    "func:automations_with_label",
    "func:blueprint_in_automation",
    "func:capability_attributes",
    "func:devices_in_automation",
    "func:entities_in_automation",
    "func:extra_state_attributes",
    "func:find_matches",
    "func:floors_in_automation",
    "func:is_on",
    "func:labels_in_automation",
    "func:referenced_areas",
    "func:referenced_blueprint",
    "func:referenced_devices",
    "func:referenced_entities",
    "func:referenced_floors",
    "func:referenced_labels",
    "func:reload_targets",
    "func:started_action",
    "func:websocket_config"
  ],
  "__init__.py_gpt4_3224b089.py": [
    "class:AccessHandle",
    "class:CompiledSubprocess",
    "class:InferenceStateSameProcess",
    "class:InferenceStateSubprocess",
    "class:Listener",
    "class:_InferenceStateProcess",
    "func:_GeneralizedPopen",
    "func:__del__",
    "func:__getattr__",
    "func:__getstate__",
    "func:__init__",
    "func:__repr__",
    "func:__setstate__",
    "func:_add_stderr_to_debug",
    "func:_cached_results",
    "func:_cleanup_process",
    "func:_convert_access_handles",
    "func:_enqueue_output",
    "func:_get_function",
    "func:_get_inference_state",
    "func:_get_process",
    "func:_kill",
    "func:_run",
    "func:_send",
    "func:_workaround",
    "func:add_subprocess",
    "func:delete_inference_state",
    "func:get_access_handle",
    "func:get_or_create_access_handle",
    "func:get_sys_path",
    "func:listen",
    "func:run",
    "func:set_access_handle",
    "func:wrapper"
  ],
  "__init__.py_gpt4_535e0013.py": [
    "class:ChangedFile",
    "class:Refactoring",
    "func:__init__",
    "func:__repr__",
    "func:_calculate_rename",
    "func:_remove_indent_of_prefix",
    "func:apply",
    "func:calculate_to_path",
    "func:get_changed_files",
    "func:get_diff",
    "func:get_new_code",
    "func:get_renames",
    "func:inline",
    "func:rename"
  ],
  "__init__.py_gpt4_5412f557.py": [
    "func:_configure_cli_env_vars",
    "func:_configure_logging",
    "func:appgraph",
    "func:cli",
    "func:create_local_server",
    "func:delete",
    "func:deploy",
    "func:dev",
    "func:gen_policy",
    "func:generate_models",
    "func:generate_pipeline",
    "func:generate_sdk",
    "func:get_system_info",
    "func:invoke",
    "func:local",
    "func:logs",
    "func:main",
    "func:new_project",
    "func:package",
    "func:plan",
    "func:run_local_server",
    "func:url"
  ],
  "__init__.py_gpt4_8bb7c28f.py": [
    "class:Args",
    "class:BaseConfigTest",
    "func:__init__",
    "func:assertRaisesOrReturns",
    "func:empty_profile_renderer",
    "func:empty_project_renderer",
    "func:profile_path",
    "func:project_from_config_norender",
    "func:project_from_config_rendered",
    "func:project_path",
    "func:raises_nothing",
    "func:setUp",
    "func:tearDown",
    "func:temp_cd",
    "func:write_empty_profile",
    "func:write_packages",
    "func:write_profile",
    "func:write_project"
  ],
  "__init__.py_gpt4_99e1ea12.py": [
    "class:InferenceState",
    "func:__init__",
    "func:builtins_module",
    "func:execute",
    "func:get_sys_path",
    "func:import_module",
    "func:infer",
    "func:parse",
    "func:parse_and_get_code",
    "func:reset_recursion_limitations",
    "func:typing_module"
  ],
  "__init__.py_gpt4_c8544535.py": [
    "func:_load_feature_fixtures",
    "func:_mock_protocol",
    "func:_mocked_alarm_module",
    "func:_mocked_camera_module",
    "func:_mocked_clean_module",
    "func:_mocked_device",
    "func:_mocked_energy_features",
    "func:_mocked_fan_module",
    "func:_mocked_feature",
    "func:_mocked_light_effect_module",
    "func:_mocked_light_module",
    "func:_mocked_speaker_module",
    "func:_mocked_strip_children",
    "func:_mocked_thermostat_module",
    "func:_patch_connect",
    "func:_patch_discovery",
    "func:_patch_single_discovery"
  ],
  "__init__.py_gpt4_e23044c8.py": [
    "class:WriteBack",
    "func:_black_info",
    "func:_contains_asexpr",
    "func:_format_str_once",
    "func:assert_equivalent",
    "func:assert_stable",
    "func:check_stability_and_equivalence",
    "func:decode_bytes",
    "func:detect_target_versions",
    "func:enable_unstable_feature_callback",
    "func:format_cell",
    "func:format_file_contents",
    "func:format_file_in_place",
    "func:format_ipynb_string",
    "func:format_stdin_to_stdout",
    "func:format_str",
    "func:from_configuration",
    "func:get_features_used",
    "func:get_future_imports",
    "func:get_imports_from_children",
    "func:get_sources",
    "func:main",
    "func:nullcontext",
    "func:patched_main",
    "func:path_empty",
    "func:re_compile_maybe_verbose",
    "func:read_pyproject_toml",
    "func:reformat_code",
    "func:reformat_one",
    "func:spellcheck_pyproject_toml_keys",
    "func:target_version_option_callback",
    "func:validate_metadata",
    "func:validate_regex"
  ],
  "__init__.py_gpt4_e9d890fc.py": [
    "class:AlertWordNotificationProcessor",
    "class:AutoLink",
    "class:BacktickInlineProcessor",
    "class:BlockQuoteProcessor",
    "class:CompiledInlineProcessor",
    "class:CompiledPattern",
    "class:DbData",
    "class:ElementFamily",
    "class:ElementPair",
    "class:Emoji",
    "class:EmoticonTranslation",
    "class:Fence",
    "class:HashHeaderProcessor",
    "class:InlineImageProcessor",
    "class:InlineInterestingLinkProcessor",
    "class:InlineVideoProcessor",
    "class:LinkInfo",
    "class:LinkInlineProcessor",
    "class:LinkifierPattern",
    "class:ListIndentProcessor",
    "class:MarkdownListPreprocessor",
    "class:MessageRenderingResult",
    "class:OListProcessor",
    "class:OpenGraphSession",
    "class:ResultWithFamily",
    "class:StreamPattern",
    "class:StreamTopicMessagePattern",
    "class:StreamTopicMessageProcessor",
    "class:StreamTopicPattern",
    "class:Tex",
    "class:Timestamp",
    "class:TopicLinkMatch",
    "class:UListProcessor",
    "class:UnicodeEmoji",
    "class:UserGroupMentionPattern",
    "class:UserMentionPattern",
    "class:ZulipMarkdown",
    "func:__init__",
    "func:add_a",
    "func:add_embed",
    "func:add_oembed_data",
    "func:add_video",
    "func:are_matches_overlapping",
    "func:build_block_parser",
    "func:build_inlinepatterns",
    "func:build_parser",
    "func:build_postprocessors",
    "func:build_preprocessors",
    "func:build_treeprocessors",
    "func:check_valid_end_position",
    "func:check_valid_start_position",
    "func:clean",
    "func:clear_web_link_regex_for_testing",
    "func:content_has_emoji_syntax",
    "func:corrected_image_source",
    "func:do_convert",
    "func:dropbox_image",
    "func:fetch_open_graph_image",
    "func:fetch_tweet_data",
    "func:find_proper_insertion_index",
    "func:find_stream_id",
    "func:get_actual_image_url",
    "func:get_compiled_stream_link_regex",
    "func:get_compiled_stream_topic_link_regex",
    "func:get_compiled_stream_topic_message_link_regex",
    "func:get_inlining_information",
    "func:get_markdown_requests",
    "func:get_markdown_time",
    "func:get_sub_registry",
    "func:get_tweet_id",
    "func:get_url_data",
    "func:get_web_link_regex",
    "func:get_with_operand",
    "func:handleMatch",
    "func:handle_image_inlining",
    "func:handle_tweet_inlining",
    "func:handle_video_inlining",
    "func:handle_youtube_url_inlining",
    "func:handle_zephyr_mirror",
    "func:has_blockquote_ancestor",
    "func:image_preview_enabled",
    "func:is_image",
    "func:is_video",
    "func:list_of_tlds",
    "func:make_emoji",
    "func:make_md_engine",
    "func:make_realm_emoji",
    "func:markdown_convert",
    "func:markdown_stats_finish",
    "func:markdown_stats_start",
    "func:maybe_update_markdown_engines",
    "func:percent_escape_format_string",
    "func:possible_linked_stream_names",
    "func:possible_linked_topics",
    "func:prepare_linkifier_pattern",
    "func:privacy_clean_markdown",
    "func:register_linkifiers",
    "func:render_message_markdown",
    "func:rewrite_local_links_to_relative",
    "func:run",
    "func:sanitize_url",
    "func:set_text",
    "func:topic_links",
    "func:twitter_link",
    "func:twitter_text",
    "func:url_embed_preview_enabled",
    "func:url_to_a",
    "func:verbose_compile",
    "func:vimeo_id",
    "func:vimeo_title",
    "func:walk_tree",
    "func:walk_tree_with_family",
    "func:youtube_id",
    "func:youtube_image",
    "func:youtube_title",
    "func:zulip_specific_link_changes"
  ],
  "__init__.py_gpt4_ef619f13.py": [
    "class:HomeKit",
    "class:HomeKitPairingQRView",
    "func:__init__",
    "func:_async_all_homekit_instances",
    "func:_async_configure_linked_sensors",
    "func:_async_create_single_accessory",
    "func:_async_get_imported_entries_indices",
    "func:_async_import_options_from_data_if_missing",
    "func:_async_purge_old_bridges",
    "func:_async_register_bridge",
    "func:_async_register_events_and_services",
    "func:_async_remove_accessories_by_entity_id",
    "func:_async_show_setup_message",
    "func:_async_shutdown_accessory",
    "func:_async_update_accessories_hash",
    "func:_async_update_config_entry_from_yaml",
    "func:_fill_config_from_device_registry_entry",
    "func:_has_all_unique_names_and_ports",
    "func:_would_exceed_max_devices",
    "func:add_bridge_accessory",
    "func:async_remove_bridge_accessory",
    "func:async_unpair",
    "func:setup"
  ],
  "__init__.py_gpt4_f3813224.py": [
    "class:Interpreter",
    "class:Script",
    "func:__init__",
    "func:__repr__",
    "func:_analysis",
    "func:_get_module",
    "func:_get_module_context",
    "func:_names",
    "func:_references",
    "func:_search_func",
    "func:complete",
    "func:complete_search",
    "func:extract_function",
    "func:extract_variable",
    "func:get_context",
    "func:get_names",
    "func:get_references",
    "func:get_signatures",
    "func:get_syntax_errors",
    "func:goto",
    "func:help",
    "func:infer",
    "func:inline",
    "func:need_pydoc",
    "func:preload_module",
    "func:rename",
    "func:search",
    "func:set_debug_function"
  ],
  "__main__.py_gpt4_9161fe52.py": [
    "class:ExitCode",
    "class:TransformFilterAst",
    "func:_main",
    "func:filterfunc",
    "func:filterstr_to_filterfunc",
    "func:get_cookies_from_instagram",
    "func:http_status_code_list",
    "func:import_session",
    "func:main",
    "func:usage_string",
    "func:visit_Name"
  ],
  "_api.py_gpt4_1352a98b.py": [
    "func:delete",
    "func:get",
    "func:head",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:request",
    "func:stream"
  ],
  "_base.py_gpt4_d134fb38.py": [
    "class:BaseExcelReader",
    "class:ExcelFile",
    "class:ExcelWriter",
    "func:__enter__",
    "func:__exit__",
    "func:__fspath__",
    "func:__init__",
    "func:__new__",
    "func:_calc_rows",
    "func:_check_skiprows_func",
    "func:_get_sheet_name",
    "func:_parse_sheet",
    "func:_save",
    "func:_value_with_fmt",
    "func:_workbook_class",
    "func:_write_cells",
    "func:book",
    "func:check_extension",
    "func:close",
    "func:date_format",
    "func:datetime_format",
    "func:engine",
    "func:f",
    "func:get_sheet_by_index",
    "func:get_sheet_by_name",
    "func:get_sheet_data",
    "func:if_sheet_exists",
    "func:inspect_excel_format",
    "func:load_workbook",
    "func:parse",
    "func:raise_if_bad_sheet_by_index",
    "func:raise_if_bad_sheet_by_name",
    "func:read_excel",
    "func:sheet_names",
    "func:sheets",
    "func:supported_extensions"
  ],
  "_checklist_internal.py_gpt4_5ee44322.py": [
    "class:CheckList",
    "class:_CheckListManager",
    "func:__init__",
    "func:_get_predictor",
    "func:_get_task_suite",
    "func:_run_suite",
    "func:add_subparser",
    "func:run"
  ],
  "_client.py_gpt4_21d6cf84.py": [
    "class:AsyncClient",
    "class:BaseClient",
    "class:BoundAsyncStream",
    "class:BoundSyncStream",
    "class:Client",
    "class:ClientState",
    "class:UseClientDefault",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__iter__",
    "func:_build_auth",
    "func:_build_redirect_request",
    "func:_build_request_auth",
    "func:_enforce_trailing_slash",
    "func:_get_proxy_map",
    "func:_init_proxy_transport",
    "func:_init_transport",
    "func:_is_https_redirect",
    "func:_merge_cookies",
    "func:_merge_headers",
    "func:_merge_queryparams",
    "func:_merge_url",
    "func:_port_or_default",
    "func:_redirect_headers",
    "func:_redirect_method",
    "func:_redirect_stream",
    "func:_redirect_url",
    "func:_same_origin",
    "func:_send_handling_auth",
    "func:_send_handling_redirects",
    "func:_send_single_request",
    "func:_set_timeout",
    "func:_transport_for_url",
    "func:auth",
    "func:base_url",
    "func:build_request",
    "func:close",
    "func:cookies",
    "func:delete",
    "func:event_hooks",
    "func:get",
    "func:head",
    "func:headers",
    "func:is_closed",
    "func:options",
    "func:params",
    "func:patch",
    "func:post",
    "func:put",
    "func:request",
    "func:send",
    "func:stream",
    "func:timeout",
    "func:trust_env"
  ],
  "_core.py_gpt4_688d1085.py": [
    "class:PlotAccessor",
    "func:__call__",
    "func:__init__",
    "func:_get_call_args",
    "func:_get_plot_backend",
    "func:_load_backend",
    "func:area",
    "func:bar",
    "func:barh",
    "func:box",
    "func:boxplot",
    "func:boxplot_frame",
    "func:boxplot_frame_groupby",
    "func:hexbin",
    "func:hist",
    "func:hist_frame",
    "func:hist_series",
    "func:holds_integer",
    "func:kde",
    "func:line",
    "func:pie",
    "func:scatter"
  ],
  "_json.py_gpt4_09ea9ba0.py": [
    "class:FrameParser",
    "class:FrameWriter",
    "class:JSONTableWriter",
    "class:JsonReader",
    "class:Parser",
    "class:SeriesParser",
    "class:SeriesWriter",
    "class:Writer",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__iter__",
    "func:__next__",
    "func:_combine_lines",
    "func:_convert_axes",
    "func:_format_axes",
    "func:_get_data_from_filepath",
    "func:_get_object_parser",
    "func:_parse",
    "func:_should_convert_dates",
    "func:_try_convert_data",
    "func:_try_convert_to_date",
    "func:_try_convert_types",
    "func:check_keys_split",
    "func:close",
    "func:obj_to_write",
    "func:parse",
    "func:read",
    "func:read_json",
    "func:to_json",
    "func:write"
  ],
  "_main.py_gpt4_93f26c03.py": [
    "func:download_response",
    "func:format_certificate",
    "func:format_request_headers",
    "func:format_response_headers",
    "func:get_lexer_for_response",
    "func:handle_help",
    "func:main",
    "func:print_help",
    "func:print_request_headers",
    "func:print_response",
    "func:print_response_headers",
    "func:trace",
    "func:validate_auth",
    "func:validate_json"
  ],
  "_misc.py_gpt4_e437bff3.py": [
    "class:_Options",
    "func:__contains__",
    "func:__delitem__",
    "func:__getitem__",
    "func:__init__",
    "func:__setitem__",
    "func:_get_canonical_key",
    "func:andrews_curves",
    "func:autocorrelation_plot",
    "func:bootstrap_plot",
    "func:deregister",
    "func:lag_plot",
    "func:parallel_coordinates",
    "func:radviz",
    "func:register",
    "func:reset",
    "func:scatter_matrix",
    "func:table",
    "func:use"
  ],
  "_models.py_gpt4_5798ddfd.py": [
    "class:Cookies",
    "class:Headers",
    "class:Request",
    "class:Response",
    "class:_CookieCompatRequest",
    "class:_CookieCompatResponse",
    "func:__bool__",
    "func:__contains__",
    "func:__delitem__",
    "func:__eq__",
    "func:__getitem__",
    "func:__getstate__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:__setitem__",
    "func:__setstate__",
    "func:_get_content_decoder",
    "func:_is_known_encoding",
    "func:_normalize_header_key",
    "func:_normalize_header_value",
    "func:_obfuscate_sensitive_headers",
    "func:_parse_content_type_charset",
    "func:_parse_header_links",
    "func:_prepare",
    "func:add_unredirected_header",
    "func:charset_encoding",
    "func:clear",
    "func:close",
    "func:content",
    "func:cookies",
    "func:copy",
    "func:delete",
    "func:elapsed",
    "func:encoding",
    "func:extract_cookies",
    "func:get",
    "func:get_list",
    "func:has_redirect_location",
    "func:http_version",
    "func:info",
    "func:is_client_error",
    "func:is_error",
    "func:is_informational",
    "func:is_redirect",
    "func:is_server_error",
    "func:is_success",
    "func:items",
    "func:iter_bytes",
    "func:iter_lines",
    "func:iter_raw",
    "func:iter_text",
    "func:json",
    "func:keys",
    "func:links",
    "func:multi_items",
    "func:num_bytes_downloaded",
    "func:raise_for_status",
    "func:raw",
    "func:read",
    "func:reason_phrase",
    "func:request",
    "func:set",
    "func:set_cookie_header",
    "func:text",
    "func:update",
    "func:url",
    "func:values"
  ],
  "_settings.py_gpt4_461b9e31.py": [
    "class:HealthCheck",
    "class:HealthCheckMeta",
    "class:Phase",
    "class:Setting",
    "class:Verbosity",
    "class:duration",
    "class:settings",
    "class:settingsMeta",
    "class:settingsProperty",
    "func:__call__",
    "func:__delete__",
    "func:__doc__",
    "func:__get__",
    "func:__getattr__",
    "func:__init__",
    "func:__iter__",
    "func:__repr__",
    "func:__set__",
    "func:__setattr__",
    "func:_assign_default_internal",
    "func:_backend_validator",
    "func:_define_setting",
    "func:_max_examples_validator",
    "func:_validate_database",
    "func:_validate_deadline",
    "func:_validate_phases",
    "func:_validate_stateful_step_count",
    "func:all",
    "func:default",
    "func:get_profile",
    "func:is_in_ci",
    "func:load_profile",
    "func:local_settings",
    "func:lock_further_definitions",
    "func:note_deprecation",
    "func:register_profile",
    "func:show_changed",
    "func:validate_health_check_suppressions",
    "func:validator"
  ],
  "_typing.py_gpt4_d123376b.py": [
    "class:AbstractSet",
    "class:Any",
    "class:AnyMeta",
    "class:BinaryIO",
    "class:ByteString",
    "class:Callable",
    "class:CallableMeta",
    "class:Container",
    "class:Dict",
    "class:Final",
    "class:FrozenSet",
    "class:Generator",
    "class:Generic",
    "class:GenericMeta",
    "class:IO",
    "class:ItemsView",
    "class:Iterable",
    "class:Iterator",
    "class:KeysView",
    "class:List",
    "class:Mapping",
    "class:MappingView",
    "class:MutableMapping",
    "class:MutableSequence",
    "class:MutableSet",
    "class:Optional",
    "class:OptionalMeta",
    "class:Reversible",
    "class:Sequence",
    "class:Set",
    "class:SupportsAbs",
    "class:SupportsBytes",
    "class:SupportsComplex",
    "class:SupportsFloat",
    "class:SupportsInt",
    "class:SupportsRound",
    "class:TextIO",
    "class:Tuple",
    "class:TupleMeta",
    "class:TypeVar",
    "class:TypingMeta",
    "class:Union",
    "class:UnionMeta",
    "class:ValuesView",
    "class:_ForwardRef",
    "class:_FrozenSetMeta",
    "class:_Protocol",
    "class:_ProtocolMeta",
    "class:_TypeAlias",
    "class:io",
    "class:re",
    "func:NamedTuple",
    "func:__abs__",
    "func:__bytes__",
    "func:__complex__",
    "func:__enter__",
    "func:__eq__",
    "func:__exit__",
    "func:__float__",
    "func:__getitem__",
    "func:__hash__",
    "func:__init__",
    "func:__instancecheck__",
    "func:__int__",
    "func:__new__",
    "func:__repr__",
    "func:__reversed__",
    "func:__round__",
    "func:__subclasscheck__",
    "func:_eval_type",
    "func:_geqv",
    "func:_get_defaults",
    "func:_get_protocol_attrs",
    "func:_gorg",
    "func:_has_type_var",
    "func:_qualname",
    "func:_type_check",
    "func:_type_repr",
    "func:buffer",
    "func:cast",
    "func:close",
    "func:closed",
    "func:encoding",
    "func:errors",
    "func:fileno",
    "func:flush",
    "func:get_type_hints",
    "func:isatty",
    "func:line_buffering",
    "func:mode",
    "func:name",
    "func:newlines",
    "func:no_type_check",
    "func:no_type_check_decorator",
    "func:overload",
    "func:read",
    "func:readable",
    "func:readline",
    "func:readlines",
    "func:seek",
    "func:seekable",
    "func:tell",
    "func:truncate",
    "func:wrapped_decorator",
    "func:writable",
    "func:write",
    "func:writelines"
  ],
  "accessor.py_gpt4_04ffbbba.py": [
    "class:StringMethods",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:_forbid_nonstring_types",
    "func:_get_group_names",
    "func:_get_series_list",
    "func:_get_single_group_name",
    "func:_map_and_wrap",
    "func:_result_dtype",
    "func:_validate",
    "func:_wrap_result",
    "func:capitalize",
    "func:casefold",
    "func:cat",
    "func:cat_core",
    "func:cat_safe",
    "func:center",
    "func:cons_row",
    "func:contains",
    "func:count",
    "func:decode",
    "func:encode",
    "func:endswith",
    "func:extract",
    "func:extractall",
    "func:find",
    "func:findall",
    "func:forbid_nonstring_types",
    "func:fullmatch",
    "func:get",
    "func:get_dummies",
    "func:index",
    "func:join",
    "func:len",
    "func:ljust",
    "func:lower",
    "func:lstrip",
    "func:match",
    "func:normalize",
    "func:pad",
    "func:partition",
    "func:removeprefix",
    "func:removesuffix",
    "func:repeat",
    "func:replace",
    "func:rfind",
    "func:rindex",
    "func:rjust",
    "func:rpartition",
    "func:rsplit",
    "func:rstrip",
    "func:slice",
    "func:slice_replace",
    "func:split",
    "func:startswith",
    "func:str_extractall",
    "func:strip",
    "func:swapcase",
    "func:title",
    "func:translate",
    "func:upper",
    "func:wrap",
    "func:wrapper",
    "func:zfill"
  ],
  "accessories.py_gpt4_99a8bc17.py": [
    "class:HomeAccessory",
    "class:HomeBridge",
    "class:HomeDriver",
    "class:HomeIIDManager",
    "func:__init__",
    "func:_update_available_from_state",
    "func:async_call_service",
    "func:async_reload",
    "func:async_stop",
    "func:async_update_battery",
    "func:async_update_event_state_callback",
    "func:async_update_linked_battery_callback",
    "func:async_update_linked_battery_charging_callback",
    "func:async_update_state",
    "func:async_update_state_callback",
    "func:available",
    "func:get_accessory",
    "func:get_iid_for_obj",
    "func:pair",
    "func:run",
    "func:setup_message",
    "func:unpair"
  ],
  "adjacency_field.py_gpt4_025db15b.py": [
    "class:AdjacencyField",
    "func:__init__",
    "func:__len__",
    "func:__str__",
    "func:_maybe_warn_for_namespace",
    "func:as_tensor",
    "func:count_vocab_items",
    "func:empty_field",
    "func:get_padding_lengths",
    "func:human_readable_repr",
    "func:index"
  ],
  "adversarial_bias_mitigator.py_gpt4_90b92542.py": [
    "class:AdversarialBiasMitigator",
    "class:AdversarialBiasMitigatorBackwardCallback",
    "class:FeedForwardRegressionAdversary",
    "class:_AdversaryLabelHook",
    "func:__call__",
    "func:__init__",
    "func:_get_prediction_device",
    "func:_maybe_warn_for_unseparable_batches",
    "func:extend_embedder_vocab",
    "func:forward",
    "func:forward_on_instance",
    "func:forward_on_instances",
    "func:get_metrics",
    "func:get_parameters_for_histogram_logging",
    "func:get_parameters_for_histogram_tensorboard_logging",
    "func:get_regularization_penalty",
    "func:make_output_human_readable",
    "func:on_backward",
    "func:train"
  ],
  "aenum.py_gpt4_c2f7f85e.py": [
    "class:EnumMeta",
    "class:IntEnum",
    "class:_EnumDict",
    "class:_RouteClassAttributeToGetattr",
    "func:__bool__",
    "func:__call__",
    "func:__cmp__",
    "func:__contains__",
    "func:__delattr__",
    "func:__delete__",
    "func:__dir__",
    "func:__eq__",
    "func:__format__",
    "func:__ge__",
    "func:__get__",
    "func:__getattr__",
    "func:__getitem__",
    "func:__gt__",
    "func:__hash__",
    "func:__init__",
    "func:__iter__",
    "func:__le__",
    "func:__len__",
    "func:__lt__",
    "func:__members__",
    "func:__ne__",
    "func:__new__",
    "func:__prepare__",
    "func:__reduce_ex__",
    "func:__repr__",
    "func:__reversed__",
    "func:__set__",
    "func:__setattr__",
    "func:__setitem__",
    "func:__str__",
    "func:_break_on_call_reduce",
    "func:_convert",
    "func:_create_",
    "func:_find_new_",
    "func:_get_mixins_",
    "func:_is_descriptor",
    "func:_is_dunder",
    "func:_is_sunder",
    "func:_make_class_unpicklable",
    "func:_reduce_ex_by_name",
    "func:any",
    "func:name",
    "func:unique",
    "func:value"
  ],
  "agent.py_gpt4_deba533c.py": [
    "class:Agent",
    "class:AgentTestWrapper",
    "class:_App",
    "func:__aiter__",
    "func:__call__",
    "func:__init__",
    "func:_agent_label",
    "func:_create_req",
    "func:_get_active_partitions",
    "func:_get_strtopic",
    "func:_get_supervisor_strategy",
    "func:_maybe_unwrap_reply_request",
    "func:_new_supervisor",
    "func:_on_first_isolated_partition_assigned",
    "func:_prepare_channel",
    "func:_repr_info",
    "func:_request_class",
    "func:_response_class",
    "func:actor_from_stream",
    "func:actor_tracebacks",
    "func:add_sink",
    "func:cancel",
    "func:channel",
    "func:channel_iterator",
    "func:clone",
    "func:current_agent",
    "func:get_topic_names",
    "func:info",
    "func:label",
    "func:on_init_dependencies",
    "func:shortlabel",
    "func:stream",
    "func:test_context",
    "func:to_message"
  ],
  "agents.py_gpt4_7fcf219e.py": [
    "class:ActorT",
    "class:AgentManagerT",
    "class:AgentT",
    "class:AgentTestWrapperT",
    "class:AsyncIterableActorT",
    "class:AwaitableActorT",
    "class:_AppT",
    "func:__call__",
    "func:__init__",
    "func:_agent_label",
    "func:actor_tracebacks",
    "func:add_sink",
    "func:cancel",
    "func:channel",
    "func:channel_iterator",
    "func:clone",
    "func:get_topic_names",
    "func:human_tracebacks",
    "func:info",
    "func:stream",
    "func:test_context",
    "func:to_message",
    "func:traceback"
  ],
  "aiohttp.py_gpt4_5a9bb6c0.py": [
    "class:AiohttpClientMockResponse",
    "class:AiohttpClientMocker",
    "class:MockLongPollSideEffect",
    "func:__init__",
    "func:call_count",
    "func:clear_requests",
    "func:close",
    "func:content",
    "func:content_type",
    "func:cookies",
    "func:create_session",
    "func:delete",
    "func:get",
    "func:headers",
    "func:match_request",
    "func:mock_aiohttp_client",
    "func:mock_stream",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:queue_response",
    "func:raise_for_status",
    "func:release",
    "func:request",
    "func:response",
    "func:stop",
    "func:url"
  ],
  "aiokafka.py_gpt4_3e910cf4.py": [
    "class:AIOKafkaConsumerThread",
    "class:Consumer",
    "class:ConsumerRebalanceListener",
    "class:LazySpan",
    "class:Producer",
    "class:Transport",
    "func:__init__",
    "func:__post_init__",
    "func:_create_client_consumer",
    "func:_create_consumer",
    "func:_create_worker_consumer",
    "func:_ensure_consumer",
    "func:_ensure_producer",
    "func:_log_slow_processing",
    "func:_log_slow_processing_commit",
    "func:_log_slow_processing_stream",
    "func:_make_slow_processing_error",
    "func:_new_consumer_thread",
    "func:_new_producer",
    "func:_new_topicpartition",
    "func:_on_span_cancelled_early",
    "func:_on_span_generation_known",
    "func:_on_span_generation_pending",
    "func:_producer_type",
    "func:_settings_auth",
    "func:_settings_default",
    "func:_settings_extra",
    "func:_span_finish",
    "func:_start_span",
    "func:_to_message",
    "func:_topic_config",
    "func:_transform_span_lazy",
    "func:_verify_aiokafka_event_path",
    "func:assignment",
    "func:close",
    "func:credentials_to_aiokafka_auth",
    "func:finish",
    "func:flush_spans",
    "func:highwater",
    "func:key_partition",
    "func:on_generation_id_known",
    "func:on_partitions_revoked",
    "func:seek",
    "func:server_list",
    "func:start_coordinator_span",
    "func:start_rebalancing_span",
    "func:supports_headers",
    "func:topic_partitions",
    "func:trace_category",
    "func:traced_from_parent_span",
    "func:verify_event_path",
    "func:verify_recovery_event_path"
  ],
  "alarm_control_panel.py_gpt4_e816d2fa.py": [
    "class:ManualMQTTAlarm",
    "func:__init__",
    "func:_active_state",
    "func:_async_update_state",
    "func:_async_validate_code",
    "func:_pending_time",
    "func:_state_schema",
    "func:_state_validator",
    "func:_within_pending_time",
    "func:alarm_state",
    "func:async_scheduled_update",
    "func:code_format",
    "func:extra_state_attributes"
  ],
  "alert.py_gpt4_b4a76035.py": [
    "class:Alert",
    "func:__init__",
    "func:__repr__",
    "func:_get_hist_info",
    "func:add_note",
    "func:create",
    "func:deduplicate",
    "func:delete",
    "func:delete_find_all",
    "func:delete_note",
    "func:find_all",
    "func:find_by_id",
    "func:from_action",
    "func:from_db",
    "func:from_document",
    "func:from_expired",
    "func:from_record",
    "func:from_status",
    "func:from_timeout",
    "func:get_alert_history",
    "func:get_alert_notes",
    "func:get_body",
    "func:get_count",
    "func:get_counts_by_severity",
    "func:get_counts_by_status",
    "func:get_environments",
    "func:get_groups",
    "func:get_history",
    "func:get_id",
    "func:get_services",
    "func:get_status_and_value",
    "func:get_tags",
    "func:get_top10_count",
    "func:get_top10_flapping",
    "func:get_top10_standing",
    "func:get_topn_count",
    "func:get_topn_flapping",
    "func:get_topn_standing",
    "func:housekeeping",
    "func:is_blackout",
    "func:is_correlated",
    "func:is_duplicate",
    "func:is_flapping",
    "func:is_suppressed",
    "func:parse",
    "func:serialize",
    "func:set_status",
    "func:tag",
    "func:tag_find_all",
    "func:untag",
    "func:untag_find_all",
    "func:update",
    "func:update_attributes",
    "func:update_attributes_find_all",
    "func:update_tags"
  ],
  "alerta.py_gpt4_318d4d73.py": [
    "class:StateMachine",
    "func:is_suppressed",
    "func:next_state",
    "func:register",
    "func:transition",
    "func:trend",
    "func:valid_severities"
  ],
  "analysis.py_gpt4_7bc9f5b1.py": [
    "class:Error",
    "class:Warning",
    "func:__eq__",
    "func:__hash__",
    "func:__init__",
    "func:__ne__",
    "func:__repr__",
    "func:__str__",
    "func:_check_for_exception_catch",
    "func:_check_for_setattr",
    "func:add",
    "func:add_attribute_error",
    "func:check_hasattr",
    "func:check_match",
    "func:check_try_for_except",
    "func:code",
    "func:column",
    "func:line"
  ],
  "api.py_gpt4_a31f2df4.py": [
    "func:assign_customer",
    "func:process_action",
    "func:process_alert",
    "func:process_delete",
    "func:process_note",
    "func:process_status"
  ],
  "api.py_gpt4_f7c97dc8.py": [
    "class:CattDevice",
    "func:__init__",
    "func:__repr__",
    "func:_create_cast",
    "func:_create_controller",
    "func:controller",
    "func:discover",
    "func:ffwd",
    "func:pause",
    "func:play",
    "func:play_url",
    "func:rewind",
    "func:seek",
    "func:stop",
    "func:volume",
    "func:volumedown",
    "func:volumemute",
    "func:volumeup"
  ],
  "api_tests.py_gpt4_7e37d3ea.py": [
    "class:TestQueryApi",
    "func:create_queries",
    "func:get_random_string",
    "func:insert_query",
    "func:test_get_list_query",
    "func:test_get_list_query_filter_changed_on",
    "func:test_get_list_query_filter_database",
    "func:test_get_list_query_filter_sql",
    "func:test_get_list_query_filter_user",
    "func:test_get_list_query_no_data_access",
    "func:test_get_list_query_order",
    "func:test_get_query",
    "func:test_get_query_no_data_access",
    "func:test_get_query_not_found",
    "func:test_get_updated_since",
    "func:test_stop_query",
    "func:test_stop_query_not_found"
  ],
  "app.py_gpt4_147ce993.py": [
    "func:fetch_available_matrix_servers",
    "func:get_account_and_private_key",
    "func:get_min_reveal_timeout",
    "func:get_smart_contracts_start_at",
    "func:rpc_normalized_endpoint",
    "func:run_raiden_service",
    "func:setup_raiden_config",
    "func:start_api_server"
  ],
  "app.py_gpt4_39324c85.py": [
    "class:AppT",
    "class:BootStrategyT",
    "class:TracerT",
    "class:_AppCommand",
    "class:_EventT",
    "class:_LiveCheck",
    "class:_ModelArg",
    "class:_Monitor",
    "class:_SchemaT",
    "class:_Settings",
    "class:_Worker",
    "func:FlowControlQueue",
    "func:GlobalTable",
    "func:LiveCheck",
    "func:SetGlobalTable",
    "func:SetTable",
    "func:Table",
    "func:Worker",
    "func:__init__",
    "func:_span_add_default_tags",
    "func:_start_span_from_rebalancing",
    "func:agent",
    "func:assignor",
    "func:cache",
    "func:channel",
    "func:client_only",
    "func:command",
    "func:conf",
    "func:config_from_object",
    "func:consumer",
    "func:create_event",
    "func:crontab",
    "func:default_tracer",
    "func:discover",
    "func:finalize",
    "func:flow_control",
    "func:get_tracer",
    "func:http_client",
    "func:in_transaction",
    "func:is_leader",
    "func:main",
    "func:monitor",
    "func:on_rebalance_end",
    "func:on_rebalance_return",
    "func:on_rebalance_start",
    "func:on_webserver_init",
    "func:page",
    "func:producer",
    "func:producer_only",
    "func:producer_transport",
    "func:router",
    "func:serializers",
    "func:server",
    "func:service",
    "func:stream",
    "func:table_route",
    "func:tables",
    "func:task",
    "func:timer",
    "func:topic",
    "func:topics",
    "func:trace",
    "func:transport",
    "func:web",
    "func:worker_init",
    "func:worker_init_post_autodiscover"
  ],
  "app.py_gpt4_4fbf6d96.py": [
    "class:LiveCheck",
    "class:LiveCheckSensor",
    "func:__init__",
    "func:_apply_monkeypatches",
    "func:_can_resolve",
    "func:_connect_signals",
    "func:_contribute_to_app",
    "func:_extract_signals",
    "func:_inner",
    "func:_install_bus_agent",
    "func:_install_test_execution_agent",
    "func:_prepare_case_name",
    "func:add_case",
    "func:bus",
    "func:case",
    "func:current_test",
    "func:for_app",
    "func:on_produce_attach_test_headers",
    "func:on_stream_event_in",
    "func:on_stream_event_out",
    "func:pending_tests",
    "func:reports"
  ],
  "app.py_gpt4_f04d5454.py": [
    "class:APIGateway",
    "class:AuthRequest",
    "class:AuthResponse",
    "class:AuthRoute",
    "class:Authorizer",
    "class:BadRequestError",
    "class:BaseEventSourceConfig",
    "class:BaseLambdaEvent",
    "class:BaseLambdaHandler",
    "class:Blueprint",
    "class:BuiltinAuthConfig",
    "class:CORSConfig",
    "class:CaseInsensitiveMapping",
    "class:Chalice",
    "class:ChaliceAuthorizer",
    "class:ChaliceError",
    "class:ChaliceUnhandledError",
    "class:ChaliceViewError",
    "class:CloudWatchEvent",
    "class:CloudWatchEventConfig",
    "class:CognitoUserPoolAuthorizer",
    "class:ConflictError",
    "class:ConvertToMiddleware",
    "class:Cron",
    "class:CustomAuthorizer",
    "class:DecoratorAPI",
    "class:DynamoDBEvent",
    "class:DynamoDBEventConfig",
    "class:DynamoDBRecord",
    "class:EventSourceHandler",
    "class:ForbiddenError",
    "class:IAMAuthorizer",
    "class:KinesisEvent",
    "class:KinesisEventConfig",
    "class:KinesisRecord",
    "class:LambdaFunction",
    "class:LambdaFunctionEvent",
    "class:MethodNotAllowedError",
    "class:MiddlewareHandler",
    "class:MultiDict",
    "class:NotFoundError",
    "class:PureLambdaWrapper",
    "class:Rate",
    "class:Request",
    "class:RequestTimeoutError",
    "class:Response",
    "class:RestAPIEventHandler",
    "class:RouteEntry",
    "class:S3Event",
    "class:S3EventConfig",
    "class:SNSEvent",
    "class:SNSEventConfig",
    "class:SQSEvent",
    "class:SQSEventConfig",
    "class:SQSRecord",
    "class:ScheduleExpression",
    "class:ScheduledEventConfig",
    "class:TooManyRequestsError",
    "class:UnauthorizedError",
    "class:UnprocessableEntityError",
    "class:WebsocketAPI",
    "class:WebsocketConnectConfig",
    "class:WebsocketDisconnectConfig",
    "class:WebsocketDisconnectedError",
    "class:WebsocketEvent",
    "class:WebsocketEventSourceHandler",
    "class:WebsocketMessageConfig",
    "class:_HandlerRegistration",
    "func:__call__",
    "func:__delitem__",
    "func:__eq__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:__setitem__",
    "func:__str__",
    "func:_add_cors_headers",
    "func:_already_configured",
    "func:_attach_websocket_handler",
    "func:_b64encode_body_if_needed",
    "func:_base64decode",
    "func:_base64encode",
    "func:_build_middleware_handlers",
    "func:_configure_log_level",
    "func:_configure_logging",
    "func:_content_type_header_contains",
    "func:_cors_enabled_for_route",
    "func:_create_registration_function",
    "func:_do_register_handler",
    "func:_extract_attributes",
    "func:_extract_original_param",
    "func:_generate_allowed_resources",
    "func:_generate_arn",
    "func:_generate_policy",
    "func:_get_client",
    "func:_get_cors_headers",
    "func:_get_middleware_handlers",
    "func:_get_region",
    "func:_get_view_function_response",
    "func:_global_error_handler",
    "func:_initialize",
    "func:_main_rest_api_handler",
    "func:_matches_content_type",
    "func:_middleware_wrapper",
    "func:_parse_view_args",
    "func:_register_authorizer",
    "func:_register_blueprint_handler",
    "func:_register_handler",
    "func:_register_lambda_function",
    "func:_register_on_cw_event",
    "func:_register_on_dynamodb_record",
    "func:_register_on_kinesis_record",
    "func:_register_on_s3_event",
    "func:_register_on_sns_message",
    "func:_register_on_sqs_message",
    "func:_register_on_ws_connect",
    "func:_register_on_ws_disconnect",
    "func:_register_on_ws_message",
    "func:_register_route",
    "func:_register_schedule",
    "func:_sort_headers",
    "func:_transform_event",
    "func:_unhandled_exception_to_response",
    "func:_validate_binary_response",
    "func:_validate_response",
    "func:_wrap_handler",
    "func:allow_headers",
    "func:authorizer",
    "func:close",
    "func:configure",
    "func:configure_from_api_id",
    "func:create_request_object",
    "func:current_app",
    "func:current_request",
    "func:debug",
    "func:default_binary_types",
    "func:error_response",
    "func:get_access_control_headers",
    "func:getlist",
    "func:handle_extra_types",
    "func:info",
    "func:json_body",
    "func:lambda_context",
    "func:lambda_function",
    "func:log",
    "func:middleware",
    "func:middleware_handlers",
    "func:on_cw_event",
    "func:on_dynamodb_record",
    "func:on_kinesis_record",
    "func:on_s3_event",
    "func:on_sns_message",
    "func:on_sqs_message",
    "func:on_ws_connect",
    "func:on_ws_disconnect",
    "func:on_ws_message",
    "func:raw_body",
    "func:register",
    "func:register_blueprint",
    "func:register_middleware",
    "func:route",
    "func:schedule",
    "func:send",
    "func:table_name",
    "func:to_dict",
    "func:to_original_event",
    "func:to_string",
    "func:to_swagger",
    "func:with_scopes",
    "func:wrapped",
    "func:wrapped_event"
  ],
  "appengine.py_gpt4_3880ff96.py": [
    "class:AppEngineAdapter",
    "class:AppEngineMROHack",
    "class:InsecureAppEngineAdapter",
    "class:_AppEngineConnection",
    "class:_AppEnginePoolManager",
    "func:__init__",
    "func:_check_version",
    "func:clear",
    "func:connection_from_url",
    "func:init_poolmanager",
    "func:monkeypatch",
    "func:urlopen"
  ],
  "appgraph.py_gpt4_89925212.py": [
    "class:ApplicationGraphBuilder",
    "class:ChaliceBuildError",
    "class:DependencyBuilder",
    "class:GraphPrettyPrint",
    "func:__init__",
    "func:_add_remaining_lines",
    "func:_build_lambda_function",
    "func:_create_api_mapping_model",
    "func:_create_bucket_notification",
    "func:_create_custom_domain_name",
    "func:_create_cwe_subscription",
    "func:_create_ddb_subscription",
    "func:_create_domain_name_model",
    "func:_create_kinesis_subscription",
    "func:_create_lambda_event_resources",
    "func:_create_lambda_model",
    "func:_create_log_group",
    "func:_create_rest_api_model",
    "func:_create_role_reference",
    "func:_create_scheduled_model",
    "func:_create_sns_subscription",
    "func:_create_sqs_subscription",
    "func:_create_websocket_api_model",
    "func:_get_default_private_api_policy",
    "func:_get_filtered_params",
    "func:_get_lambda_layers",
    "func:_get_managed_lambda_layer",
    "func:_get_model_text",
    "func:_get_role_identifier",
    "func:_get_role_reference",
    "func:_get_vpc_params",
    "func:_inject_role_traits",
    "func:_traverse",
    "func:build",
    "func:build_dependencies",
    "func:display_graph"
  ],
  "applications.py_gpt4_4361090c.py": [
    "class:FastAPI",
    "func:__init__",
    "func:add_api_route",
    "func:add_api_websocket_route",
    "func:api_route",
    "func:decorator",
    "func:delete",
    "func:exception_handler",
    "func:get",
    "func:head",
    "func:include_router",
    "func:middleware",
    "func:on_event",
    "func:openapi",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:setup",
    "func:trace",
    "func:websocket",
    "func:websocket_route"
  ],
  "arguments.py_gpt4_8266a1b7.py": [
    "class:AbstractArguments",
    "class:ParamIssue",
    "class:TreeArguments",
    "class:TreeArgumentsWrapper",
    "class:ValuesArguments",
    "class:_AbstractArgumentsMixin",
    "func:__init__",
    "func:__repr__",
    "func:_as_tree_tuple_objects",
    "func:_iterate_star_args",
    "func:_parse_argument_clinic",
    "func:_star_star_dict",
    "func:argument_node",
    "func:context",
    "func:create_cached",
    "func:decorator",
    "func:get_calling_nodes",
    "func:iter_calling_names_with_star",
    "func:iterate_argument_clinic",
    "func:repack_with_argument_clinic",
    "func:trailer",
    "func:try_iter_content",
    "func:unpack",
    "func:unpack_arglist",
    "func:wrapper"
  ],
  "asserters.py_gpt4_adee0207.py": [
    "func:_check_isinstance",
    "func:_check_types",
    "func:_get_base",
    "func:_raise",
    "func:assert_almost_equal",
    "func:assert_attr_equal",
    "func:assert_categorical_equal",
    "func:assert_class_equal",
    "func:assert_contains_all",
    "func:assert_copy",
    "func:assert_datetime_array_equal",
    "func:assert_dict_equal",
    "func:assert_equal",
    "func:assert_extension_array_equal",
    "func:assert_frame_equal",
    "func:assert_index_equal",
    "func:assert_indexing_slices_equivalent",
    "func:assert_interval_array_equal",
    "func:assert_is_sorted",
    "func:assert_metadata_equivalent",
    "func:assert_numpy_array_equal",
    "func:assert_period_array_equal",
    "func:assert_series_equal",
    "func:assert_sp_array_equal",
    "func:assert_timedelta_array_equal",
    "func:is_class_equiv",
    "func:is_extension_array_dtype_and_needs_i8_conversion",
    "func:raise_assert_detail",
    "func:repr_class"
  ],
  "attachment_scores_test.py_gpt4_84069daf.py": [
    "class:AttachmentScoresTest",
    "func:_send_tensors_to_device",
    "func:multiple_runs",
    "func:setup_method",
    "func:test_attachment_scores_can_ignore_labels",
    "func:test_distributed_attachment_scores",
    "func:test_labeled_accuracy_is_affected_by_incorrect_heads",
    "func:test_multiple_distributed_runs",
    "func:test_perfect_scores",
    "func:test_unlabeled_accuracy_ignores_incorrect_labels"
  ],
  "attention_module.py_gpt4_e99ef20b.py": [
    "class:AttentionModule",
    "class:AttentionOutput",
    "class:SelfAttention",
    "class:T5Attention",
    "func:__init__",
    "func:_from_config",
    "func:_get_attention_probs",
    "func:_get_lengths",
    "func:_normalize",
    "func:_output_layer",
    "func:_position_bias",
    "func:_project",
    "func:_query_layer",
    "func:_relative_position_bucket",
    "func:_transpose_for_scores",
    "func:compute_bias",
    "func:forward"
  ],
  "augmented_lstm.py_gpt4_cedcc40b.py": [
    "class:AugmentedLSTMCell",
    "class:AugmentedLstm",
    "class:BiAugmentedLstm",
    "func:__init__",
    "func:_forward_bidirectional",
    "func:_forward_unidirectional",
    "func:forward",
    "func:reset_parameters"
  ],
  "autopep8.py_gpt4_ec53cd25.py": [
    "class:Atom",
    "class:CachedTokenizer",
    "class:Container",
    "class:DictOrSet",
    "class:FixPEP8",
    "class:IfExpression",
    "class:LineEndingWrapper",
    "class:List",
    "class:ListComprehension",
    "class:QuietReport",
    "class:ReformattedLines",
    "class:Reindenter",
    "class:Tuple",
    "class:_Indent",
    "class:_LineBreak",
    "class:_Space",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:_add_container",
    "func:_add_item",
    "func:_delete_whitespace",
    "func:_enforce_space",
    "func:_execute_pep8",
    "func:_find_logical",
    "func:_fix_file",
    "func:_fix_reindent",
    "func:_fix_source",
    "func:_get_extent",
    "func:_get_indentation",
    "func:_get_indentword",
    "func:_get_logical",
    "func:_get_options",
    "func:_get_package_version",
    "func:_get_parameters",
    "func:_is_binary_operator",
    "func:_leading_space_count",
    "func:_parse_container",
    "func:_parse_tokens",
    "func:_prevent_default_initializer_splitting",
    "func:_priority_key",
    "func:_reflow_lines",
    "func:_reindent_stats",
    "func:_remove_leading_and_normalize",
    "func:_shorten_line",
    "func:_shorten_line_at_tokens",
    "func:_shorten_line_at_tokens_new",
    "func:_split_after_delimiter",
    "func:_split_comma_separated",
    "func:add",
    "func:add_comment",
    "func:add_indent",
    "func:add_line_break",
    "func:add_line_break_at",
    "func:add_space_if_needed",
    "func:apply_global_fixes",
    "func:check_syntax",
    "func:close_bracket",
    "func:code_almost_equal",
    "func:code_match",
    "func:code_to_2to3",
    "func:commented_out_code_lines",
    "func:continued_indentation",
    "func:count_unbalanced_brackets",
    "func:create_parser",
    "func:current_size",
    "func:decode_filename",
    "func:detect_encoding",
    "func:docstring_summary",
    "func:emit",
    "func:error",
    "func:extended_blank_lines",
    "func:extract_code_from_function",
    "func:filter_results",
    "func:find_files",
    "func:find_newline",
    "func:fits_on_current_line",
    "func:fix",
    "func:fix_2to3",
    "func:fix_code",
    "func:fix_e112",
    "func:fix_e113",
    "func:fix_e125",
    "func:fix_e131",
    "func:fix_e201",
    "func:fix_e224",
    "func:fix_e225",
    "func:fix_e231",
    "func:fix_e251",
    "func:fix_e262",
    "func:fix_e265",
    "func:fix_e271",
    "func:fix_e301",
    "func:fix_e302",
    "func:fix_e303",
    "func:fix_e304",
    "func:fix_e305",
    "func:fix_e401",
    "func:fix_e502",
    "func:fix_e701",
    "func:fix_e702",
    "func:fix_e704",
    "func:fix_e711",
    "func:fix_e712",
    "func:fix_e713",
    "func:fix_e714",
    "func:fix_e722",
    "func:fix_e731",
    "func:fix_file",
    "func:fix_lines",
    "func:fix_long_line",
    "func:fix_long_line_logically",
    "func:fix_long_line_physically",
    "func:fix_multiple_files",
    "func:fix_w291",
    "func:fix_w391",
    "func:fix_w503",
    "func:fix_w602",
    "func:fix_whitespace",
    "func:flush",
    "func:full_error_results",
    "func:generate_tokens",
    "func:get_diff_text",
    "func:get_encoding",
    "func:get_fixed_long_line",
    "func:get_index_offset_contents",
    "func:get_item",
    "func:getline",
    "func:global_fixes",
    "func:has_arithmetic_operator",
    "func:is_colon",
    "func:is_comma",
    "func:is_keyword",
    "func:is_name",
    "func:is_number",
    "func:is_probably_part_of_multiline",
    "func:is_python_file",
    "func:is_string",
    "func:join_logical_line",
    "func:line_empty",
    "func:line_shortening_rank",
    "func:longest_line_length",
    "func:main",
    "func:match_file",
    "func:multiline_string_lines",
    "func:mutual_startswith",
    "func:normalize_line_endings",
    "func:normalize_multiline",
    "func:open_bracket",
    "func:open_with_encoding",
    "func:parse_args",
    "func:previous_item",
    "func:read_config",
    "func:readlines_from_file",
    "func:refactor",
    "func:refactor_with_2to3",
    "func:reflow",
    "func:reindent",
    "func:run",
    "func:shorten_comment",
    "func:shorten_line",
    "func:size",
    "func:split_and_strip_non_empty_lines",
    "func:split_at_offsets",
    "func:standard_deviation",
    "func:supported_fixes",
    "func:token_offsets",
    "func:untokenize_without_newlines",
    "func:wrap_output",
    "func:write"
  ],
  "awsclient.py_gpt4_49cc8de2.py": [
    "class:AWSClientError",
    "class:DeploymentPackageTooLargeError",
    "class:LambdaClientError",
    "class:LambdaErrorContext",
    "class:ReadTimeout",
    "class:ResourceDoesNotExistError",
    "class:TypedAWSClient",
    "func:__init__",
    "func:_add_lambda_permission_if_needed",
    "func:_add_missing_or_differing_value_requested_tags",
    "func:_add_missing_or_differing_value_resource_tags",
    "func:_build_source_arn_str",
    "func:_call_client_method_with_retries",
    "func:_client",
    "func:_convert_to_datetime",
    "func:_convert_types_on_response",
    "func:_create_api_mapping",
    "func:_create_base_path_mapping",
    "func:_create_domain_name",
    "func:_create_domain_name_v2",
    "func:_create_lambda_function",
    "func:_create_vpc_config",
    "func:_do_update_function_config",
    "func:_get_lambda_code_deployment_error",
    "func:_is_iam_role_related_error",
    "func:_is_settling_error",
    "func:_iter_log_messages",
    "func:_merge_s3_notification_config",
    "func:_policy_gives_access",
    "func:_random_id",
    "func:_remove_lambda_permission_if_needed",
    "func:_remove_unrequested_remote_tags",
    "func:_remove_unrequested_resource_tags",
    "func:_statement_gives_arn_access",
    "func:_update_domain_name",
    "func:_update_domain_name_v2",
    "func:_update_function_code",
    "func:_update_function_config",
    "func:_update_function_tags",
    "func:_update_resource_tags",
    "func:_wait_for_active",
    "func:_wait_for_function_update",
    "func:add_permission_for_apigateway",
    "func:add_permission_for_apigateway_v2",
    "func:add_permission_for_authorizer",
    "func:add_permission_for_cloudwatch_event",
    "func:add_permission_for_s3_event",
    "func:add_permission_for_sns_topic",
    "func:api_mapping_exists",
    "func:connect_rule_to_lambda",
    "func:connect_s3_bucket_to_lambda",
    "func:create_api_mapping",
    "func:create_base_path_mapping",
    "func:create_domain_name",
    "func:create_function",
    "func:create_lambda_event_source",
    "func:create_log_group",
    "func:create_role",
    "func:create_stage",
    "func:create_websocket_api",
    "func:create_websocket_integration",
    "func:create_websocket_route",
    "func:delete_api_mapping",
    "func:delete_domain_name",
    "func:delete_function",
    "func:delete_function_concurrency",
    "func:delete_layer_version",
    "func:delete_log_group",
    "func:delete_rest_api",
    "func:delete_retention_policy",
    "func:delete_role",
    "func:delete_role_policy",
    "func:delete_rule",
    "func:delete_websocket_api",
    "func:delete_websocket_integrations",
    "func:delete_websocket_routes",
    "func:deploy_rest_api",
    "func:deploy_websocket_api",
    "func:disconnect_s3_bucket_from_lambda",
    "func:domain_name_exists",
    "func:domain_name_exists_v2",
    "func:download_sdk",
    "func:endpoint_dns_suffix",
    "func:endpoint_dns_suffix_from_arn",
    "func:endpoint_from_arn",
    "func:filter_log_events",
    "func:get_custom_domain_params_v2",
    "func:get_custom_domain_patch_operations",
    "func:get_domain_name",
    "func:get_function_configuration",
    "func:get_function_policy",
    "func:get_layer_version",
    "func:get_or_create_rule_arn",
    "func:get_rest_api",
    "func:get_rest_api_id",
    "func:get_role",
    "func:get_role_arn_for_name",
    "func:get_sdk_download_stream",
    "func:get_websocket_api_id",
    "func:get_websocket_integrations",
    "func:get_websocket_routes",
    "func:import_rest_api",
    "func:invoke_function",
    "func:iter_log_events",
    "func:lambda_function_exists",
    "func:log_group_exists",
    "func:partition_name",
    "func:publish_layer",
    "func:put_function_concurrency",
    "func:put_retention_policy",
    "func:put_role_policy",
    "func:region_name",
    "func:remove_lambda_event_source",
    "func:remove_permission_for_s3_event",
    "func:remove_permission_for_sns_topic",
    "func:resolve_endpoint",
    "func:service_principal",
    "func:subscribe_function_to_topic",
    "func:unsubscribe_from_topic",
    "func:update_api_from_swagger",
    "func:update_domain_name",
    "func:update_function",
    "func:update_lambda_event_source",
    "func:update_rest_api",
    "func:verify_event_source_arn_current",
    "func:verify_event_source_current",
    "func:verify_sns_subscription_current",
    "func:websocket_api_exists"
  ],
  "backtesting.py_gpt4_86bf3a7e.py": [
    "class:Backtesting",
    "func:__init__",
    "func:_call_adjust_stop",
    "func:_check_trade_exit",
    "func:_collate_rejected",
    "func:_enter_trade",
    "func:_exit_trade",
    "func:_get_adjust_trade_entry_for_candle",
    "func:_get_close_rate",
    "func:_get_close_rate_for_roi",
    "func:_get_close_rate_for_stoploss",
    "func:_get_exit_for_signal",
    "func:_get_min_cached_backtest_date",
    "func:_get_ohlcv_as_lists",
    "func:_get_order_filled",
    "func:_load_protections",
    "func:_process_exit_order",
    "func:_run_funding_fees",
    "func:_set_strategy",
    "func:_time_generator",
    "func:_time_generator_det",
    "func:_time_pair_generator_det",
    "func:_try_close_open_order",
    "func:_validate_pairlists_for_backtesting",
    "func:backtest",
    "func:backtest_loop",
    "func:backtest_one_strategy",
    "func:cancel_open_orders",
    "func:check_abort",
    "func:check_for_trade_entry",
    "func:check_order_cancel",
    "func:check_order_replace",
    "func:cleanup",
    "func:disable_database_use",
    "func:get_detail_data",
    "func:get_valid_price_and_stake",
    "func:handle_left_open",
    "func:handle_similar_order",
    "func:init_backtest",
    "func:init_backtest_detail",
    "func:load_bt_data",
    "func:load_bt_data_detail",
    "func:load_prior_backtest",
    "func:manage_open_orders",
    "func:prepare_backtest",
    "func:run_protections",
    "func:start",
    "func:time_pair_generator",
    "func:trade_slot_available",
    "func:validate_row"
  ],
  "base.py_gpt4_1d275995.py": [
    "class:Alerts",
    "class:ApiKeys",
    "class:Base",
    "class:Blackouts",
    "class:Customers",
    "class:Database",
    "class:Groups",
    "class:Heartbeats",
    "class:Permissions",
    "class:Query",
    "class:QueryBuilder",
    "class:Users",
    "func:__init__",
    "func:add_history",
    "func:add_user_to_group",
    "func:close",
    "func:connect",
    "func:correlate_alert",
    "func:create_alert",
    "func:create_blackout",
    "func:create_customer",
    "func:create_engine",
    "func:create_group",
    "func:create_key",
    "func:create_note",
    "func:create_perm",
    "func:create_user",
    "func:dedup_alert",
    "func:delete_alert",
    "func:delete_alerts",
    "func:delete_blackout",
    "func:delete_customer",
    "func:delete_group",
    "func:delete_heartbeat",
    "func:delete_key",
    "func:delete_note",
    "func:delete_perm",
    "func:delete_user",
    "func:destroy",
    "func:from_params",
    "func:get_alert",
    "func:get_alert_groups",
    "func:get_alert_history",
    "func:get_alert_notes",
    "func:get_alert_tags",
    "func:get_alerts",
    "func:get_backend",
    "func:get_blackout",
    "func:get_blackouts",
    "func:get_blackouts_count",
    "func:get_count",
    "func:get_counts",
    "func:get_counts_by_severity",
    "func:get_counts_by_status",
    "func:get_customer",
    "func:get_customer_notes",
    "func:get_customers",
    "func:get_customers_by_match",
    "func:get_customers_count",
    "func:get_db",
    "func:get_environments",
    "func:get_expired",
    "func:get_group",
    "func:get_group_users",
    "func:get_groups",
    "func:get_groups_by_user",
    "func:get_groups_count",
    "func:get_heartbeat",
    "func:get_heartbeats",
    "func:get_heartbeats_by_status",
    "func:get_heartbeats_count",
    "func:get_history",
    "func:get_key",
    "func:get_keys",
    "func:get_keys_by_user",
    "func:get_keys_count",
    "func:get_metrics",
    "func:get_note",
    "func:get_notes",
    "func:get_perm",
    "func:get_perms",
    "func:get_perms_count",
    "func:get_scopes_by_match",
    "func:get_services",
    "func:get_severity",
    "func:get_status",
    "func:get_topn_count",
    "func:get_topn_flapping",
    "func:get_topn_standing",
    "func:get_unack",
    "func:get_unshelve",
    "func:get_user",
    "func:get_user_by_email",
    "func:get_user_by_hash",
    "func:get_user_by_username",
    "func:get_users",
    "func:get_users_count",
    "func:inc_counter",
    "func:init_app",
    "func:init_db",
    "func:is_alive",
    "func:is_blackout_period",
    "func:is_correlated",
    "func:is_duplicate",
    "func:is_flapping",
    "func:load_backend",
    "func:name",
    "func:remove_user_from_group",
    "func:set_alert",
    "func:set_email_hash",
    "func:set_gauge",
    "func:set_status",
    "func:tag_alert",
    "func:tag_alerts",
    "func:teardown_db",
    "func:untag_alert",
    "func:untag_alerts",
    "func:update_attributes",
    "func:update_attributes_by_query",
    "func:update_blackout",
    "func:update_customer",
    "func:update_group",
    "func:update_key",
    "func:update_key_last_used",
    "func:update_last_login",
    "func:update_note",
    "func:update_perm",
    "func:update_tags",
    "func:update_timer",
    "func:update_user",
    "func:update_user_attributes",
    "func:upsert_heartbeat",
    "func:version"
  ],
  "base.py_gpt4_41047fae.py": [
    "class:App",
    "class:BootStrategy",
    "class:_AppCommand",
    "class:_Fetcher",
    "class:_LiveCheck",
    "class:_Worker",
    "func:FlowControlQueue",
    "func:GlobalTable",
    "func:LiveCheck",
    "func:SetGlobalTable",
    "func:SetTable",
    "func:Table",
    "func:Worker",
    "func:__init__",
    "func:__repr__",
    "func:_chain",
    "func:_configure",
    "func:_create_directories",
    "func:_decorator",
    "func:_discovery_modules",
    "func:_fetcher",
    "func:_init_fixups",
    "func:_init_signals",
    "func:_inner",
    "func:_leader_assignor",
    "func:_load_settings",
    "func:_load_settings_from_source",
    "func:_new_cache_backend",
    "func:_new_conductor",
    "func:_new_consumer",
    "func:_new_producer",
    "func:_new_producer_transport",
    "func:_new_transport",
    "func:_new_web",
    "func:_on_autodiscovery_error",
    "func:_on_rebalance_when_stopped",
    "func:_prepare_compat_settings",
    "func:_prepare_subservice",
    "func:_reply_consumer",
    "func:_should_enable_kafka_consumer",
    "func:_should_enable_kafka_producer",
    "func:_should_enable_web",
    "func:_span_add_default_tags",
    "func:_start_span_from_rebalancing",
    "func:_task",
    "func:_update_assignment",
    "func:agent",
    "func:agents",
    "func:assignor",
    "func:cache",
    "func:channel",
    "func:client_only",
    "func:command",
    "func:conf",
    "func:config_from_object",
    "func:consumer",
    "func:create_event",
    "func:crontab",
    "func:discover",
    "func:finalize",
    "func:flow_control",
    "func:http_client",
    "func:in_transaction",
    "func:is_leader",
    "func:kafka_client_consumer",
    "func:kafka_conductor",
    "func:kafka_consumer",
    "func:kafka_producer",
    "func:label",
    "func:main",
    "func:monitor",
    "func:on_init_dependencies",
    "func:on_rebalance_end",
    "func:on_rebalance_return",
    "func:on_rebalance_start",
    "func:on_webserver_init",
    "func:page",
    "func:producer",
    "func:producer_only",
    "func:producer_transport",
    "func:router",
    "func:sensors",
    "func:serializers",
    "func:server",
    "func:service",
    "func:shortlabel",
    "func:stream",
    "func:table_route",
    "func:tables",
    "func:task",
    "func:timer",
    "func:topic",
    "func:topics",
    "func:trace",
    "func:traced",
    "func:transport",
    "func:web",
    "func:web_components",
    "func:web_server",
    "func:worker_init",
    "func:worker_init_post_autodiscover",
    "func:wrapped"
  ],
  "base.py_gpt4_432e748f.py": [
    "class:BaseTypingClassWithGenerics",
    "class:BaseTypingInstance",
    "class:BaseTypingValue",
    "class:DefineGenericBaseClass",
    "class:EmptyFilter",
    "class:GenericClass",
    "class:_AnnotatedClassContext",
    "class:_BoundTypeVarName",
    "class:_GenericInstanceWrapper",
    "class:_LazyGenericBaseClass",
    "class:_PseudoTreeNameClass",
    "class:_TypeVarFilter",
    "func:__init__",
    "func:__repr__",
    "func:_as_context",
    "func:_create_instance_with_generics",
    "func:_get_wrapped_value",
    "func:_remap_type_vars",
    "func:define_generics",
    "func:get",
    "func:get_annotated_class_object",
    "func:get_filters",
    "func:get_generics",
    "func:get_qualified_names",
    "func:get_signatures",
    "func:get_type_hint",
    "func:get_type_var_filter",
    "func:infer",
    "func:infer_type_vars",
    "func:is_same_class",
    "func:is_sub_class_of",
    "func:iter_",
    "func:name",
    "func:py__bases__",
    "func:py__call__",
    "func:py__class__",
    "func:py__name__",
    "func:py__stop_iteration_returns",
    "func:tree_node",
    "func:values",
    "func:with_generics"
  ],
  "base.py_gpt4_4f3ec3ad.py": [
    "class:Backend",
    "class:HistoryAdapter",
    "func:__init__",
    "func:__str__",
    "func:_adapt_datetime",
    "func:_deleteall",
    "func:_deleteone",
    "func:_fetchall",
    "func:_fetchone",
    "func:_insert",
    "func:_log",
    "func:_updateall",
    "func:_updateone",
    "func:_upsert",
    "func:add_history",
    "func:add_user_to_group",
    "func:close",
    "func:connect",
    "func:correlate_alert",
    "func:create_alert",
    "func:create_blackout",
    "func:create_customer",
    "func:create_engine",
    "func:create_group",
    "func:create_key",
    "func:create_note",
    "func:create_perm",
    "func:create_user",
    "func:dedup_alert",
    "func:delete_alert",
    "func:delete_alerts",
    "func:delete_blackout",
    "func:delete_customer",
    "func:delete_group",
    "func:delete_heartbeat",
    "func:delete_key",
    "func:delete_note",
    "func:delete_perm",
    "func:delete_user",
    "func:destroy",
    "func:get_alert",
    "func:get_alert_groups",
    "func:get_alert_history",
    "func:get_alert_notes",
    "func:get_alert_tags",
    "func:get_alerts",
    "func:get_blackout",
    "func:get_blackouts",
    "func:get_blackouts_count",
    "func:get_count",
    "func:get_counts",
    "func:get_counts_by_severity",
    "func:get_counts_by_status",
    "func:get_customer",
    "func:get_customer_notes",
    "func:get_customers",
    "func:get_customers_by_match",
    "func:get_customers_count",
    "func:get_environments",
    "func:get_expired",
    "func:get_group",
    "func:get_group_users",
    "func:get_groups",
    "func:get_groups_by_user",
    "func:get_groups_count",
    "func:get_heartbeat",
    "func:get_heartbeats",
    "func:get_heartbeats_by_status",
    "func:get_heartbeats_count",
    "func:get_history",
    "func:get_key",
    "func:get_keys",
    "func:get_keys_by_user",
    "func:get_keys_count",
    "func:get_metrics",
    "func:get_note",
    "func:get_notes",
    "func:get_perm",
    "func:get_perms",
    "func:get_perms_count",
    "func:get_scopes_by_match",
    "func:get_services",
    "func:get_severity",
    "func:get_status",
    "func:get_topn_count",
    "func:get_topn_flapping",
    "func:get_topn_standing",
    "func:get_unack",
    "func:get_unshelve",
    "func:get_user",
    "func:get_user_by_email",
    "func:get_user_by_hash",
    "func:get_user_by_username",
    "func:get_users",
    "func:get_users_count",
    "func:getquoted",
    "func:inc_counter",
    "func:is_alive",
    "func:is_blackout_period",
    "func:is_correlated",
    "func:is_duplicate",
    "func:is_flapping",
    "func:name",
    "func:prepare",
    "func:quoted",
    "func:remove_user_from_group",
    "func:set_alert",
    "func:set_email_hash",
    "func:set_gauge",
    "func:set_status",
    "func:tag_alert",
    "func:tag_alerts",
    "func:untag_alert",
    "func:untag_alerts",
    "func:update_attributes",
    "func:update_attributes_by_query",
    "func:update_blackout",
    "func:update_customer",
    "func:update_group",
    "func:update_key",
    "func:update_key_last_used",
    "func:update_last_login",
    "func:update_note",
    "func:update_perm",
    "func:update_tags",
    "func:update_timer",
    "func:update_user",
    "func:update_user_attributes",
    "func:upsert_heartbeat",
    "func:version"
  ],
  "base.py_gpt4_54c1c37b.py": [
    "class:BaseParser",
    "class:ConfiguredParser",
    "class:Parser",
    "class:RelationUpdate",
    "class:SQLParser",
    "class:SimpleParser",
    "class:SimpleSQLParser",
    "func:__call__",
    "func:__init__",
    "func:_context_for",
    "func:_create_error_node",
    "func:_create_parsetime_node",
    "func:_mangle_hooks",
    "func:_update_node_relation_name",
    "func:add_result_node",
    "func:config_dict",
    "func:default_database",
    "func:default_schema",
    "func:generate_unique_id",
    "func:get_compiled_path",
    "func:get_fqn",
    "func:get_fqn_prefix",
    "func:initial_config",
    "func:parse_file",
    "func:parse_from_dict",
    "func:parse_node",
    "func:render_update",
    "func:render_with_context",
    "func:resource_type",
    "func:update_parsed_node_config",
    "func:update_parsed_node_config_dict",
    "func:update_parsed_node_relation_names"
  ],
  "base.py_gpt4_61a41f9b.py": [
    "class:BaseRunner",
    "class:BaseTask",
    "class:ConfiguredTask",
    "class:ExecutionContext",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:_build_run_result",
    "func:_handle_catchable_exception",
    "func:_handle_generic_exception",
    "func:_handle_internal_exception",
    "func:_node_build_path",
    "func:_safe_release_connection",
    "func:_skip_caused_by_ephemeral_failure",
    "func:after_execute",
    "func:before_execute",
    "func:compile",
    "func:compile_and_execute",
    "func:compile_manifest",
    "func:do_skip",
    "func:ephemeral_result",
    "func:error_result",
    "func:execute",
    "func:from_args",
    "func:from_run_result",
    "func:get_nearest_project_dir",
    "func:get_result_status",
    "func:handle_exception",
    "func:interpret_results",
    "func:move_to_nearest_project_dir",
    "func:on_skip",
    "func:read_profiles",
    "func:resource_types_from_args",
    "func:run",
    "func:run_with_hooks",
    "func:safe_run"
  ],
  "base.py_gpt4_80b07b73.py": [
    "class:Model",
    "func:_BUILD_eq",
    "func:_BUILD_hash",
    "func:_BUILD_init",
    "func:__abstract_init__",
    "func:__init_subclass__",
    "func:__repr__",
    "func:_contribute_field_descriptors",
    "func:_contribute_methods",
    "func:_contribute_to_options",
    "func:_derive",
    "func:_from_data_field",
    "func:_humanize",
    "func:_init_subclass",
    "func:_itervalidate",
    "func:_maybe_namespace",
    "func:_maybe_reconstruct",
    "func:derive",
    "func:dumps",
    "func:is_valid",
    "func:loads",
    "func:make_final",
    "func:maybe_model",
    "func:to_representation",
    "func:validate",
    "func:validate_or_raise",
    "func:validation_errors"
  ],
  "base.py_gpt4_aafd8625.py": [
    "class:SerializedStore",
    "class:Store",
    "class:_SerializedStoreItemsView",
    "class:_SerializedStoreKeysView",
    "class:_SerializedStoreValuesView",
    "func:__contains__",
    "func:__delitem__",
    "func:__getitem__",
    "func:__hash__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__setitem__",
    "func:_clear",
    "func:_contains",
    "func:_decode_key",
    "func:_decode_value",
    "func:_del",
    "func:_encode_key",
    "func:_encode_value",
    "func:_get",
    "func:_items_decoded",
    "func:_iteritems",
    "func:_iterkeys",
    "func:_itervalues",
    "func:_keys_decoded",
    "func:_repr_info",
    "func:_set",
    "func:_size",
    "func:_values_decoded",
    "func:apply_changelog_batch",
    "func:clear",
    "func:items",
    "func:keys",
    "func:label",
    "func:persisted_offset",
    "func:set_persisted_offset",
    "func:values"
  ],
  "base.py_gpt4_c6d6bede.py": [
    "class:Benchmark",
    "func:__init__",
    "func:create_benchmark_agent",
    "func:create_produce_command",
    "func:generate_values",
    "func:install",
    "func:on_published"
  ],
  "base.py_gpt4_dfa8658b.py": [
    "class:Collection",
    "func:__and__",
    "func:__copy__",
    "func:__hash__",
    "func:__init__",
    "func:_apply_window_op",
    "func:_changelog_topic_name",
    "func:_del_key",
    "func:_del_windowed",
    "func:_get_key",
    "func:_has_key",
    "func:_human_channel",
    "func:_join",
    "func:_maybe_del_key_ttl",
    "func:_maybe_set_key_ttl",
    "func:_new_changelog_topic",
    "func:_new_store",
    "func:_new_store_by_url",
    "func:_on_changelog_sent",
    "func:_relative_event",
    "func:_relative_field",
    "func:_relative_now",
    "func:_relative_timestamp",
    "func:_repr_info",
    "func:_send_changelog",
    "func:_serializer_from_type",
    "func:_set_key",
    "func:_set_windowed",
    "func:_should_expire_keys",
    "func:_to_key",
    "func:_to_value",
    "func:_verify_source_topic_partitions",
    "func:_window_ranges",
    "func:_windowed_contains",
    "func:_windowed_delta",
    "func:_windowed_now",
    "func:_windowed_timestamp",
    "func:apply_changelog_batch",
    "func:changelog_topic",
    "func:changelog_topic_name",
    "func:clone",
    "func:combine",
    "func:contribute_to_stream",
    "func:data",
    "func:handler",
    "func:info",
    "func:inner_join",
    "func:join",
    "func:label",
    "func:left_join",
    "func:on_recover",
    "func:outer_join",
    "func:partition_for_key",
    "func:persisted_offset",
    "func:reset_state",
    "func:send_changelog",
    "func:shortlabel",
    "func:to_value"
  ],
  "base.py_gpt4_f7c3e2c5.py": [
    "class:Backend",
    "func:_create_indexes",
    "func:_update_lookups",
    "func:add_history",
    "func:add_user_to_group",
    "func:close",
    "func:connect",
    "func:correlate_alert",
    "func:create_alert",
    "func:create_blackout",
    "func:create_customer",
    "func:create_engine",
    "func:create_group",
    "func:create_key",
    "func:create_note",
    "func:create_perm",
    "func:create_user",
    "func:dedup_alert",
    "func:delete_alert",
    "func:delete_alerts",
    "func:delete_blackout",
    "func:delete_customer",
    "func:delete_group",
    "func:delete_heartbeat",
    "func:delete_key",
    "func:delete_note",
    "func:delete_perm",
    "func:delete_user",
    "func:destroy",
    "func:get_alert",
    "func:get_alert_groups",
    "func:get_alert_history",
    "func:get_alert_notes",
    "func:get_alert_tags",
    "func:get_alerts",
    "func:get_blackout",
    "func:get_blackouts",
    "func:get_blackouts_count",
    "func:get_count",
    "func:get_counts",
    "func:get_counts_by_severity",
    "func:get_counts_by_status",
    "func:get_customer",
    "func:get_customer_notes",
    "func:get_customers",
    "func:get_customers_by_match",
    "func:get_customers_count",
    "func:get_environments",
    "func:get_expired",
    "func:get_group",
    "func:get_group_users",
    "func:get_groups",
    "func:get_groups_by_user",
    "func:get_groups_count",
    "func:get_heartbeat",
    "func:get_heartbeats",
    "func:get_heartbeats_by_status",
    "func:get_heartbeats_count",
    "func:get_history",
    "func:get_key",
    "func:get_keys",
    "func:get_keys_by_user",
    "func:get_keys_count",
    "func:get_metrics",
    "func:get_note",
    "func:get_notes",
    "func:get_perm",
    "func:get_perms",
    "func:get_perms_count",
    "func:get_scopes_by_match",
    "func:get_services",
    "func:get_severity",
    "func:get_status",
    "func:get_topn_count",
    "func:get_topn_flapping",
    "func:get_topn_standing",
    "func:get_unack",
    "func:get_unshelve",
    "func:get_user",
    "func:get_user_by_email",
    "func:get_user_by_hash",
    "func:get_user_by_username",
    "func:get_users",
    "func:get_users_count",
    "func:inc_counter",
    "func:is_alive",
    "func:is_blackout_period",
    "func:is_correlated",
    "func:is_duplicate",
    "func:is_flapping",
    "func:name",
    "func:pipeline",
    "func:remove_user_from_group",
    "func:set_alert",
    "func:set_email_hash",
    "func:set_gauge",
    "func:set_status",
    "func:tag_alert",
    "func:tag_alerts",
    "func:untag_alert",
    "func:untag_alerts",
    "func:update_attributes",
    "func:update_attributes_by_query",
    "func:update_blackout",
    "func:update_customer",
    "func:update_group",
    "func:update_key",
    "func:update_key_last_used",
    "func:update_last_login",
    "func:update_note",
    "func:update_perm",
    "func:update_tags",
    "func:update_timer",
    "func:update_user",
    "func:update_user_attributes",
    "func:upsert_heartbeat",
    "func:version"
  ],
  "base_tests.py_gpt4_525dc3b2.py": [
    "class:SupersetTestCase",
    "func:create_app",
    "func:create_fake_db",
    "func:create_fake_db_for_macros",
    "func:create_user",
    "func:create_user_with_roles",
    "func:db_insert_temp_object",
    "func:delete_assert_metric",
    "func:delete_fake_db",
    "func:delete_fake_db_for_macros",
    "func:get_assert_metric",
    "func:get_birth_names_dataset",
    "func:get_dash_by_slug",
    "func:get_database_by_id",
    "func:get_database_by_name",
    "func:get_datasource_mock",
    "func:get_dttm",
    "func:get_json_resp",
    "func:get_list",
    "func:get_nonexistent_numeric_id",
    "func:get_or_create",
    "func:get_resp",
    "func:get_role",
    "func:get_slice",
    "func:get_table",
    "func:get_table_by_id",
    "func:get_user",
    "func:grant_public_access_to_table",
    "func:grant_role_access_to_table",
    "func:insert_dashboard",
    "func:is_module_installed",
    "func:login",
    "func:logout",
    "func:mock_get_dialect",
    "func:post_assert_metric",
    "func:put_assert_metric",
    "func:revoke_public_access_to_table",
    "func:revoke_role_access_to_table",
    "func:run_sql",
    "func:tearDown",
    "func:temporary_user"
  ],
  "base_value.py_gpt4_c7caef3b.py": [
    "class:ContextualizedNode",
    "class:HasNoContext",
    "class:HelperValueMixin",
    "class:LazyValueWrapper",
    "class:TreeValue",
    "class:Value",
    "class:ValueSet",
    "class:ValueWrapper",
    "class:_ValueWrapperBase",
    "func:__and__",
    "func:__bool__",
    "func:__eq__",
    "func:__getattr__",
    "func:__hash__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__ne__",
    "func:__or__",
    "func:__repr__",
    "func:_as_context",
    "func:_from_frozen_set",
    "func:_get_value_filters",
    "func:_get_wrapped_value",
    "func:_getitem",
    "func:_wrapped_value",
    "func:as_context",
    "func:create_cached",
    "func:execute",
    "func:execute_annotation",
    "func:execute_operation",
    "func:execute_with_values",
    "func:filter",
    "func:from_sets",
    "func:gather_annotation_classes",
    "func:get_item",
    "func:get_qualified_names",
    "func:get_root_context",
    "func:get_safe_value",
    "func:get_signatures",
    "func:get_type_hint",
    "func:goto",
    "func:infer",
    "func:infer_type_vars",
    "func:is_bound_method",
    "func:is_builtins_module",
    "func:is_class",
    "func:is_class_mixin",
    "func:is_compiled",
    "func:is_function",
    "func:is_instance",
    "func:is_module",
    "func:is_namespace",
    "func:is_same_class",
    "func:is_stub",
    "func:is_sub_class_of",
    "func:iterate",
    "func:iterate_values",
    "func:iterator_to_value_set",
    "func:mapper",
    "func:merge_types_of_iterate",
    "func:name",
    "func:py__await__",
    "func:py__bool__",
    "func:py__call__",
    "func:py__class__",
    "func:py__doc__",
    "func:py__get__",
    "func:py__get__on_class",
    "func:py__getattribute__",
    "func:py__getattribute__alternatives",
    "func:py__getitem__",
    "func:py__iter__",
    "func:py__name__",
    "func:py__next__",
    "func:py__simple_getitem__",
    "func:py__stop_iteration_returns",
    "func:try_merge",
    "func:wrapper"
  ],
  "beam_search.py_gpt4_11544983.py": [
    "class:BeamSearch",
    "class:Constraint",
    "class:DeterministicSampler",
    "class:FinalSequenceScorer",
    "class:GumbelSampler",
    "class:LengthNormalizedSequenceLogProbabilityScorer",
    "class:MultinomialSampler",
    "class:RepeatedNGramBlockingConstraint",
    "class:Sampler",
    "class:SequenceLogProbabilityScorer",
    "class:TopKSampler",
    "class:TopPSampler",
    "func:__init__",
    "func:_copy_state",
    "func:_is_multilayer_rnn_decoder",
    "func:_reconstruct_sequences",
    "func:_search",
    "func:_update_initial_state",
    "func:_update_state",
    "func:apply",
    "func:gumbel",
    "func:gumbel_with_max",
    "func:init_state",
    "func:new_step",
    "func:sample_beams",
    "func:sample_nodes",
    "func:score",
    "func:search",
    "func:update_state"
  ],
  "beam_search.py_gpt4_2a43a776.py": [
    "class:BeamSearch",
    "class:BrevityPenalty",
    "class:CandidateScorer",
    "class:GreedySearch",
    "class:GreedyTop1",
    "class:LengthPenalty",
    "class:RepeatStates",
    "class:SampleK",
    "class:Search",
    "class:SearchResult",
    "class:SortNormalizeAndUpdateFinished",
    "class:SortStates",
    "class:TopK",
    "class:UpdateScores",
    "class:_EnsembleInference",
    "class:_Inference",
    "class:_SingleModelInference",
    "func:__init__",
    "func:_get_nvs_vocab_slice_ids",
    "func:_get_vocab_slice_ids",
    "func:_should_stop",
    "func:decode_step",
    "func:encode_and_initialize",
    "func:forward",
    "func:get_search_algorithm",
    "func:linear_interpolation",
    "func:log_linear_interpolation",
    "func:log_search_stats",
    "func:model_output_factor_vocab_size",
    "func:model_output_vocab_size",
    "func:state_structure",
    "func:unnormalize",
    "func:update_output_vocab_size"
  ],
  "beam_search_test.py_gpt4_e8e5dc23.py": [
    "class:BeamSearchTest",
    "func:_check_results",
    "func:_step_function",
    "func:_step_function_with_timestep",
    "func:get_step_function",
    "func:setup_method",
    "func:test_batch_size_of_one",
    "func:test_catch_bad_config",
    "func:test_default_from_params_params",
    "func:test_diff_shape_state",
    "func:test_different_per_node_beam_size",
    "func:test_early_stopping",
    "func:test_empty_sequences",
    "func:test_finished_state",
    "func:test_greedy_search",
    "func:test_gumbel_sampler",
    "func:test_k_val",
    "func:test_length_normalized_sequence_log_prob_scorer",
    "func:test_min_steps",
    "func:test_multinomial_sampler",
    "func:test_p_val",
    "func:test_params_p_sampling",
    "func:test_params_sampling",
    "func:test_repeated_ngram_blocking_constraint_apply",
    "func:test_repeated_ngram_blocking_constraint_init_state",
    "func:test_repeated_ngram_blocking_constraint_update_state",
    "func:test_repeated_ngram_blocking_end_indices",
    "func:test_repeated_ngram_blocking_end_to_end_bigrams",
    "func:test_repeated_ngram_blocking_end_to_end_trigrams",
    "func:test_repeated_ngram_blocking_end_to_end_unigrams",
    "func:test_search",
    "func:test_single_step",
    "func:test_stochastic_beam_search",
    "func:test_take_repeated_ngram_step",
    "func:test_take_short_sequence_step",
    "func:test_top_k_sampler",
    "func:test_top_k_search",
    "func:test_top_p_sampler",
    "func:test_top_p_search",
    "func:test_warn_for_bad_log_probs"
  ],
  "bias_direction_wrappers.py_gpt4_a05e9eb9.py": [
    "class:BiasDirectionWrapper",
    "class:ClassificationNormalBiasDirectionWrapper",
    "class:PCABiasDirectionWrapper",
    "class:PairedPCABiasDirectionWrapper",
    "class:TwoMeansBiasDirectionWrapper",
    "func:__call__",
    "func:__init__",
    "func:add_noise",
    "func:train"
  ],
  "bias_metrics.py_gpt4_902c0530.py": [
    "class:AssociationWithoutGroundTruth",
    "class:EmbeddingCoherenceTest",
    "class:NaturalLanguageInference",
    "class:WordEmbeddingAssociationTest",
    "func:__call__",
    "func:__init__",
    "func:_all_pmi_terms",
    "func:_get_ranks",
    "func:_ova_gap",
    "func:_pairwise_gaps",
    "func:get_metric",
    "func:reset",
    "func:spearman_correlation"
  ],
  "bias_mitigator_wrappers.py_gpt4_247c0727.py": [
    "class:BiasMitigatorWrapper",
    "class:HardBiasMitigatorWrapper",
    "class:INLPBiasMitigatorWrapper",
    "class:LinearBiasMitigatorWrapper",
    "class:OSCaRBiasMitigatorWrapper",
    "func:__call__",
    "func:__init__",
    "func:train"
  ],
  "bias_mitigators.py_gpt4_294de2be.py": [
    "class:BiasMitigator",
    "class:HardBiasMitigator",
    "class:INLPBiasMitigator",
    "class:LinearBiasMitigator",
    "class:OSCaRBiasMitigator",
    "func:__call__",
    "func:__init__",
    "func:_get_rowspace_proj",
    "func:_proj",
    "func:_remove_component"
  ],
  "bimpm_matching.py_gpt4_70e09fb8.py": [
    "class:BiMpmMatching",
    "func:__init__",
    "func:create_parameter",
    "func:forward",
    "func:get_output_dim",
    "func:multi_perspective_match",
    "func:multi_perspective_match_pairwise",
    "func:share_or_create"
  ],
  "binary_info.py_gpt4_bb0701ae.py": [
    "class:BinaryInfo",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__str__",
    "func:_download_from_s3",
    "func:filepath",
    "func:matched_rule_ids",
    "func:publish_negative_match_result",
    "func:save_matches_and_alert",
    "func:summary"
  ],
  "binary_sensor.py_gpt4_866a4655.py": [
    "class:SensorTrend",
    "func:__init__",
    "func:_calculate_gradient",
    "func:_validate_min_max",
    "func:extra_state_attributes",
    "func:trend_sensor_state_listener"
  ],
  "bleu_test.py_gpt4_bbfdf5ba.py": [
    "class:BleuTest",
    "func:multiple_runs",
    "func:setup_method",
    "func:test_bleu_computed_correctly",
    "func:test_bleu_computed_with_zero_counts",
    "func:test_distributed_bleu",
    "func:test_get_valid_tokens_mask",
    "func:test_multiple_distributed_runs",
    "func:test_ngrams"
  ],
  "blocks.py_gpt4_073555f1.py": [
    "class:ShanghaiBackwardsHeader",
    "class:ShanghaiBlock",
    "class:ShanghaiBlockHeader",
    "func:__init__",
    "func:__str__",
    "func:blob_gas_used",
    "func:deserialize",
    "func:excess_blob_gas",
    "func:from_header",
    "func:get_receipt_builder",
    "func:get_receipts",
    "func:get_transaction_builder",
    "func:hash",
    "func:hex_hash",
    "func:is_genesis",
    "func:mining_hash",
    "func:number",
    "func:parent_beacon_block_root",
    "func:serialize"
  ],
  "blocks.py_gpt4_268dfb6c.py": [
    "class:LondonBackwardsHeader",
    "class:LondonBlock",
    "class:LondonBlockHeader",
    "class:LondonMiningHeader",
    "func:__init__",
    "func:__str__",
    "func:blob_gas_used",
    "func:deserialize",
    "func:excess_blob_gas",
    "func:hash",
    "func:hex_hash",
    "func:is_genesis",
    "func:mining_hash",
    "func:parent_beacon_block_root",
    "func:serialize",
    "func:withdrawals_root"
  ],
  "blocks.py_gpt4_5859508d.py": [
    "class:CancunBackwardsHeader",
    "class:CancunBlock",
    "class:CancunBlockHeader",
    "func:__init__",
    "func:__str__",
    "func:deserialize",
    "func:hash",
    "func:hex_hash",
    "func:is_genesis",
    "func:mining_hash"
  ],
  "boolean_accuracy_test.py_gpt4_e4251148.py": [
    "class:BooleanAccuracyTest",
    "func:multiple_runs",
    "func:test_accuracy_computation",
    "func:test_distributed_accuracy",
    "func:test_distributed_accuracy_unequal_batches",
    "func:test_does_not_divide_by_zero_with_no_count",
    "func:test_incorrect_gold_labels_shape_catches_exceptions",
    "func:test_incorrect_mask_shape_catches_exceptions",
    "func:test_multiple_distributed_runs",
    "func:test_skips_completely_masked_instances"
  ],
  "boxplot.py_gpt4_8e4f22bc.py": [
    "class:BP",
    "class:BoxPlot",
    "func:__init__",
    "func:_boxes_c",
    "func:_caps_c",
    "func:_color_attrs",
    "func:_get_colors",
    "func:_grouped_plot_by_column",
    "func:_kind",
    "func:_make_legend",
    "func:_make_plot",
    "func:_medians_c",
    "func:_plot",
    "func:_post_plot_logic",
    "func:_set_ticklabels",
    "func:_validate_color_args",
    "func:_whiskers_c",
    "func:boxplot",
    "func:boxplot_frame",
    "func:boxplot_frame_groupby",
    "func:maybe_color_bp",
    "func:orientation",
    "func:plot_group",
    "func:result"
  ],
  "brendel_bethge.py_gpt4_21f649e4.py": [
    "class:BFGSB",
    "class:BrendelBethgeAttack",
    "class:L0BrendelBethgeAttack",
    "class:L0Optimizer",
    "class:L1BrendelBethgeAttack",
    "class:L1Optimizer",
    "class:L2BrendelBethgeAttack",
    "class:L2Optimizer",
    "class:LinfOptimizer",
    "class:LinfinityBrendelBethgeAttack",
    "class:Optimizer",
    "func:_Linf_bounds",
    "func:__get_final_delta",
    "func:__init__",
    "func:_cauchy_point",
    "func:_check_bounds",
    "func:_check_params",
    "func:_cubicmin",
    "func:_distance",
    "func:_get_final_delta",
    "func:_initialize_simplex",
    "func:_line_search_armijo",
    "func:_line_search_wolfe",
    "func:_max_logit_diff",
    "func:_minimum_norm_to_boundary",
    "func:_neg_bounded_fun",
    "func:_nelder_mead_algorithm",
    "func:_project",
    "func:_quadmin",
    "func:_subspace_min",
    "func:best_other_classes",
    "func:binary_search",
    "func:decorator",
    "func:fun",
    "func:fun_and_jac",
    "func:instantiate_optimizer",
    "func:jitclass",
    "func:logits_diff_and_grads",
    "func:loss_fun",
    "func:mid_points",
    "func:minimize",
    "func:minimize_without_trustregion",
    "func:norms",
    "func:optimize_boundary_s_t_trustregion",
    "func:optimize_boundary_s_t_trustregion_fun_and_jac",
    "func:optimize_distance_s_t_boundary_and_trustregion",
    "func:run",
    "func:safe_div",
    "func:solve"
  ],
  "bucket_batch_sampler.py_gpt4_ef6e3a39.py": [
    "class:BucketBatchSampler",
    "func:__init__",
    "func:_argsort_by_padding",
    "func:_guess_sorting_keys",
    "func:add_noise_to_value",
    "func:get_batch_indices",
    "func:get_batch_size",
    "func:get_num_batches"
  ],
  "cache.py_gpt4_397aeb92.py": [
    "class:_NodeCacheItem",
    "func:__init__",
    "func:_get_cache_clear_lock_path",
    "func:_get_cache_directory_path",
    "func:_get_default_cache_path",
    "func:_get_hashed_path",
    "func:_load_from_file_system",
    "func:_remove_cache_and_update_lock",
    "func:_save_to_file_system",
    "func:_set_cache_item",
    "func:_touch",
    "func:clear_cache",
    "func:clear_inactive_cache",
    "func:load_module",
    "func:try_to_save_module"
  ],
  "cache_backend.py_gpt4_421ef640.py": [
    "class:RedisCacheBackend",
    "class:RedisSentinelCacheBackend",
    "func:__init__",
    "func:from_config",
    "func:xadd",
    "func:xrange"
  ],
  "callback.py_gpt4_1996b486.py": [
    "class:Callback",
    "class:CallbackStatus",
    "func:__call__",
    "func:__init__",
    "func:_fire_callback",
    "func:_infere_status_from_data",
    "func:_on_timeout",
    "func:_panic",
    "func:_timeout_callback",
    "func:hexid",
    "func:id",
    "func:initialize_timeout",
    "func:on",
    "func:status",
    "func:timeout"
  ],
  "case.py_gpt4_556666e4.py": [
    "class:Case",
    "class:_LiveCheck",
    "func:__init__",
    "func:_failed_longer_than",
    "func:_maybe_recover_from_failed_state",
    "func:_now",
    "func:_set_pass_state",
    "func:current_execution",
    "func:current_test",
    "func:label",
    "func:seconds_since_last_fail"
  ],
  "channel.py_gpt4_d20e5ead.py": [
    "class:ChannelUsability",
    "class:UnlockGain",
    "func:_del_lock",
    "func:_del_unclaimed_lock",
    "func:_get_balance",
    "func:_handle_action_close",
    "func:_handle_action_coop_settle",
    "func:_handle_action_set_reveal_timeout",
    "func:_handle_action_withdraw",
    "func:_handle_block",
    "func:_handle_channel_batch_unlock",
    "func:_handle_channel_closed",
    "func:_handle_channel_deposit",
    "func:_handle_channel_settled",
    "func:_handle_channel_updated_transfer",
    "func:_handle_channel_withdraw",
    "func:_handle_receive_withdraw_confirmation",
    "func:_handle_receive_withdraw_expired",
    "func:_handle_receive_withdraw_request",
    "func:compute_locks_with",
    "func:compute_locks_without",
    "func:compute_locksroot",
    "func:create_sendexpiredlock",
    "func:create_sendlockedtransfer",
    "func:create_unlock",
    "func:events_for_close",
    "func:events_for_coop_settle",
    "func:events_for_expired_withdraws",
    "func:get_amount_locked",
    "func:get_amount_unclaimed_onchain",
    "func:get_balance",
    "func:get_capacity",
    "func:get_current_balanceproof",
    "func:get_current_nonce",
    "func:get_distributable",
    "func:get_lock",
    "func:get_max_withdraw_amount",
    "func:get_next_nonce",
    "func:get_number_of_pending_transfers",
    "func:get_receiver_expiration_threshold",
    "func:get_safe_initial_expiration",
    "func:get_secret",
    "func:get_sender_expiration_threshold",
    "func:get_status",
    "func:handle_receive_lock_expired",
    "func:handle_receive_lockedtransfer",
    "func:handle_refundtransfer",
    "func:handle_state_transitions",
    "func:handle_unlock",
    "func:is_balance_proof_safe_for_onchain_operations",
    "func:is_balance_proof_usable_onchain",
    "func:is_channel_usable_for_mediation",
    "func:is_channel_usable_for_new_transfer",
    "func:is_lock_expired",
    "func:is_lock_locked",
    "func:is_lock_pending",
    "func:is_secret_known",
    "func:is_secret_known_offchain",
    "func:is_secret_known_onchain",
    "func:is_transfer_expired",
    "func:is_valid_action_coopsettle",
    "func:is_valid_amount",
    "func:is_valid_balanceproof_signature",
    "func:is_valid_channel_total_withdraw",
    "func:is_valid_lock_expired",
    "func:is_valid_lockedtransfer",
    "func:is_valid_refund",
    "func:is_valid_signature",
    "func:is_valid_total_withdraw",
    "func:is_valid_unlock",
    "func:is_valid_withdraw",
    "func:is_valid_withdraw_confirmation",
    "func:is_valid_withdraw_expired",
    "func:is_valid_withdraw_request",
    "func:is_withdraw_expired",
    "func:lock_exists_in_either_channel_side",
    "func:refund_transfer_matches_transfer",
    "func:register_offchain_secret",
    "func:register_onchain_secret",
    "func:register_onchain_secret_endstate",
    "func:register_secret_endstate",
    "func:sanity_check",
    "func:send_lock_expired",
    "func:send_lockedtransfer",
    "func:send_unlock",
    "func:send_withdraw_request",
    "func:set_closed",
    "func:set_coop_settled",
    "func:set_settled",
    "func:state_transition",
    "func:transition_result_invalid",
    "func:update_contract_balance",
    "func:update_fee_schedule_after_balance_change",
    "func:valid_lockedtransfer_check"
  ],
  "channels.py_gpt4_adb5b020.py": [
    "class:Channel",
    "class:SerializedChannel",
    "func:__aiter__",
    "func:__init__",
    "func:__repr__",
    "func:__str__",
    "func:_clone",
    "func:_clone_args",
    "func:_compile_deliver",
    "func:_contribute_to_schema",
    "func:_create_event",
    "func:_future_message_to_event",
    "func:_get_default_schema",
    "func:_object_id_as_hex",
    "func:_throw",
    "func:as_future_message",
    "func:clone",
    "func:clone_using_queue",
    "func:derive",
    "func:empty",
    "func:get_topic_name",
    "func:label",
    "func:on_stop_iteration",
    "func:prepare_headers",
    "func:prepare_key",
    "func:prepare_value",
    "func:queue",
    "func:send_soon",
    "func:stream",
    "func:subscriber_count"
  ],
  "channels.py_gpt4_d312aa75.py": [
    "class:ChannelT",
    "class:_AppT",
    "class:_EventT",
    "class:_ModelArg",
    "class:_SchemaT",
    "class:_StreamT",
    "func:__aiter__",
    "func:__anext__",
    "func:__init__",
    "func:_throw",
    "func:as_future_message",
    "func:clone",
    "func:clone_using_queue",
    "func:derive",
    "func:empty",
    "func:get_topic_name",
    "func:on_stop_iteration",
    "func:prepare_key",
    "func:prepare_value",
    "func:queue",
    "func:send_soon",
    "func:stream",
    "func:subscriber_count"
  ],
  "checker.py_gpt4_d8011288.py": [
    "class:Annotation",
    "class:AnnotationState",
    "class:Argument",
    "class:Assignment",
    "class:Binding",
    "class:Builtin",
    "class:Checker",
    "class:ClassDefinition",
    "class:ClassScope",
    "class:Definition",
    "class:DetectClassScopedMagic",
    "class:DoctestScope",
    "class:DummyNode",
    "class:ExportBinding",
    "class:FunctionDefinition",
    "class:FunctionScope",
    "class:FutureImportation",
    "class:GeneratorScope",
    "class:Importation",
    "class:ImportationFrom",
    "class:ModuleScope",
    "class:Scope",
    "class:StarImportation",
    "class:SubmoduleImportation",
    "class:UnhandledKeyType",
    "class:VariableKey",
    "class:_FieldsOrder",
    "class:_TypeableVisitor",
    "class:state",
    "func:ANNASSIGN",
    "func:ARG",
    "func:ARGUMENTS",
    "func:ASSERT",
    "func:AUGASSIGN",
    "func:BINOP",
    "func:CALL",
    "func:CLASSDEF",
    "func:COMPARE",
    "func:CONSTANT",
    "func:CONTINUE",
    "func:DICT",
    "func:EXCEPTHANDLER",
    "func:FUNCTIONDEF",
    "func:GENERATOREXP",
    "func:GLOBAL",
    "func:IF",
    "func:IMPORT",
    "func:IMPORTFROM",
    "func:JOINEDSTR",
    "func:LAMBDA",
    "func:NAME",
    "func:RAISE",
    "func:RETURN",
    "func:STR",
    "func:SUBSCRIPT",
    "func:TRY",
    "func:TUPLE",
    "func:YIELD",
    "func:__eq__",
    "func:__hash__",
    "func:__init__",
    "func:__missing__",
    "func:__repr__",
    "func:__str__",
    "func:_add_key",
    "func:_add_to_names",
    "func:_bare_name_is_attr",
    "func:_collect_type_comments",
    "func:_enter_annotation",
    "func:_getAncestor",
    "func:_get_fields",
    "func:_handle_percent_format",
    "func:_handle_string_dot_format",
    "func:_handle_type_comments",
    "func:_has_alias",
    "func:_in_doctest",
    "func:_in_postponed_annotation",
    "func:_is_any_typing_member",
    "func:_is_const_non_singleton",
    "func:_is_constant",
    "func:_is_name_or_attr",
    "func:_is_singleton",
    "func:_is_tuple_constant",
    "func:_is_typing",
    "func:_is_typing_helper",
    "func:_match_target",
    "func:_module_scope_is_typing",
    "func:_must_match",
    "func:_parse_inner",
    "func:_typeable",
    "func:_unknown_handler",
    "func:addArgs",
    "func:addBinding",
    "func:annotationsFutureEnabled",
    "func:checkDeadScopes",
    "func:checkReturnWithArgumentInsideGenerator",
    "func:checkUnusedAssignments",
    "func:convert_to_value",
    "func:counter",
    "func:deferAssignment",
    "func:deferFunction",
    "func:descendantOf",
    "func:differentForks",
    "func:futuresAllowed",
    "func:getAlternatives",
    "func:getCommonAncestor",
    "func:getDocstring",
    "func:getNodeHandler",
    "func:getNodeName",
    "func:getNodeType",
    "func:getParent",
    "func:getScopeNode",
    "func:get_raise_argument",
    "func:handleAnnotation",
    "func:handleChildren",
    "func:handleDoctests",
    "func:handleNode",
    "func:handleNodeDelete",
    "func:handleNodeLoad",
    "func:handleNodeStore",
    "func:handleStringAnnotation",
    "func:ignore",
    "func:in_annotation",
    "func:in_annotation_func",
    "func:in_string_annotation",
    "func:isDocstring",
    "func:isLiteralTupleUnpacking",
    "func:is_notimplemented_name_node",
    "func:is_typing_overload",
    "func:iter_child_nodes",
    "func:make_tokens",
    "func:on_conditional_branch",
    "func:parse_percent_format",
    "func:popScope",
    "func:pushScope",
    "func:redefines",
    "func:report",
    "func:runDeferred",
    "func:runFunction",
    "func:scope",
    "func:source_statement",
    "func:unusedAssignments"
  ],
  "checkpoint_decoder.py_gpt4_886fcce4.py": [
    "class:CheckpointDecoder",
    "func:__init__",
    "func:decode_and_evaluate",
    "func:parallel_subsample",
    "func:warmup",
    "func:write_to_file"
  ],
  "checkpointer.py_gpt4_94c98f2d.py": [
    "class:Checkpointer",
    "func:__init__",
    "func:_find_all_checkpoints",
    "func:_is_primary",
    "func:_model_state_path",
    "func:_parse_model_state_path",
    "func:_parse_training_state_path",
    "func:_remove_checkpoint",
    "func:_training_state_path",
    "func:find_latest_checkpoint",
    "func:load_checkpoint",
    "func:maybe_save_checkpoint",
    "func:save_checkpoint"
  ],
  "checks.py_gpt4_e16d1f4c.py": [
    "class:Check",
    "class:Condition",
    "class:Increasing",
    "class:Stationary",
    "class:SystemChecks",
    "func:__init__",
    "func:_transitioned_to_false",
    "func:add",
    "func:asdict",
    "func:color",
    "func:compare",
    "func:get_state_for_faults",
    "func:get_value",
    "func:label",
    "func:on_init_dependencies",
    "func:pause",
    "func:remove",
    "func:store_previous_value",
    "func:to_representation"
  ],
  "classes.py_gpt4_5a5bb443.py": [
    "class:BaseName",
    "class:BaseSignature",
    "class:Completion",
    "class:Name",
    "class:ParamName",
    "class:Signature",
    "func:__eq__",
    "func:__hash__",
    "func:__init__",
    "func:__ne__",
    "func:__repr__",
    "func:_complete",
    "func:_get_cache",
    "func:_get_docstring",
    "func:_get_docstring_signature",
    "func:_get_module_context",
    "func:_get_signatures",
    "func:_sort_names_by_start_pos",
    "func:_values_to_definitions",
    "func:bracket_start",
    "func:column",
    "func:complete",
    "func:defined_names",
    "func:description",
    "func:docstring",
    "func:execute",
    "func:full_name",
    "func:get_completion_prefix_length",
    "func:get_definition_end_position",
    "func:get_definition_start_position",
    "func:get_line_code",
    "func:get_signatures",
    "func:get_type_hint",
    "func:goto",
    "func:in_builtin_module",
    "func:index",
    "func:infer",
    "func:infer_annotation",
    "func:infer_default",
    "func:is_definition",
    "func:is_side_effect",
    "func:is_stub",
    "func:kind",
    "func:line",
    "func:module_name",
    "func:module_path",
    "func:name",
    "func:name_with_symbols",
    "func:params",
    "func:parent",
    "func:to_string",
    "func:type"
  ],
  "classification.py_gpt4_554b95c0.py": [
    "func:_get_catboost_shap_values",
    "func:catboost_classification_learner",
    "func:lgbm_classification_learner",
    "func:logistic_classification_learner",
    "func:nlp_logistic_classification_learner",
    "func:p",
    "func:xgb_classification_learner"
  ],
  "cli.py_gpt4_72c847be.py": [
    "class:AddressType",
    "class:ChainChoiceType",
    "class:ConfigParser",
    "class:Context",
    "class:EnumChoiceType",
    "class:ExpandableFile",
    "class:ExpandablePath",
    "class:GasPriceChoiceType",
    "class:GroupableOption",
    "class:GroupableOptionCommand",
    "class:GroupableOptionCommandGroup",
    "class:HelpFormatter",
    "class:HypenTemplate",
    "class:LogLevelConfigType",
    "class:MatrixServerType",
    "class:Parser",
    "class:PathRelativePath",
    "class:SkipParsing",
    "func:__eq__",
    "func:__init__",
    "func:__lt__",
    "func:_process_parse_result",
    "func:command",
    "func:convert",
    "func:decorator",
    "func:default_priority",
    "func:expand_default",
    "func:fixed_gas_price_strategy",
    "func:format_options",
    "func:get_internal_name",
    "func:get_matrix_servers",
    "func:group",
    "func:invoke",
    "func:keyfunc",
    "func:option",
    "func:option_group",
    "func:parse",
    "func:register_param",
    "func:write_dl"
  ],
  "cli.py_gpt4_889e5fba.py": [
    "class:CattTimeParamType",
    "class:YtdlOptParamType",
    "func:add",
    "func:cast",
    "func:cast_site",
    "func:clear",
    "func:cli",
    "func:convert",
    "func:create_server_thread",
    "func:del_alias",
    "func:del_default",
    "func:fail_if_no_ip",
    "func:ffwd",
    "func:get_alias_from_config",
    "func:get_config_as_dict",
    "func:get_device_from_settings",
    "func:info",
    "func:main",
    "func:pause",
    "func:play",
    "func:play_toggle",
    "func:process_device",
    "func:process_path",
    "func:process_subtitles",
    "func:process_url",
    "func:readconfig",
    "func:remove",
    "func:restore",
    "func:rewind",
    "func:save",
    "func:scan",
    "func:seek",
    "func:set_alias",
    "func:set_default",
    "func:skip",
    "func:status",
    "func:stop",
    "func:volume",
    "func:volumedown",
    "func:volumemute",
    "func:volumeup",
    "func:write_config",
    "func:writeconfig"
  ],
  "cli.py_gpt4_dd85cd69.py": [
    "func:_copy_tree",
    "func:_echo_error",
    "func:_encoding_from_filename",
    "func:_load_config",
    "func:cli",
    "func:docs",
    "func:request",
    "func:validate"
  ],
  "client.py_gpt4_1a527a58.py": [
    "class:ApiKeyAuth",
    "class:Client",
    "class:CustomJsonEncoder",
    "class:HTTPClient",
    "class:TokenAuth",
    "func:__call__",
    "func:__init__",
    "func:action",
    "func:default",
    "func:default_headers",
    "func:delete",
    "func:delete_alert",
    "func:get",
    "func:post",
    "func:put",
    "func:send_alert"
  ],
  "client.py_gpt4_da9172a9.py": [
    "class:DeploymentAsyncClient",
    "class:DeploymentClient",
    "func:_create_deployment_from_schema",
    "func:create_deployment",
    "func:create_deployment_schedules",
    "func:create_flow_run_from_deployment",
    "func:delete_deployment",
    "func:delete_deployment_schedule",
    "func:get_scheduled_flow_runs_for_deployments",
    "func:read_deployment",
    "func:read_deployment_by_name",
    "func:read_deployment_schedules",
    "func:read_deployments",
    "func:set_deployment_paused_state",
    "func:update_deployment",
    "func:update_deployment_schedule"
  ],
  "client.py_gpt4_e3fb94fd.py": [
    "class:ClientSession",
    "class:ClientTimeout",
    "class:_BaseRequestContextManager",
    "class:_RequestOptions",
    "class:_SessionRequestContextManager",
    "func:__await__",
    "func:__del__",
    "func:__init__",
    "func:__init_subclass__",
    "func:__iter__",
    "func:_build_url",
    "func:_prepare_headers",
    "func:auth",
    "func:auto_decompress",
    "func:close",
    "func:closed",
    "func:connector",
    "func:connector_owner",
    "func:cookie_jar",
    "func:delete",
    "func:detach",
    "func:get",
    "func:head",
    "func:headers",
    "func:json_serialize",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:raise_for_status",
    "func:request",
    "func:requote_redirect_url",
    "func:send",
    "func:skip_auto_headers",
    "func:throw",
    "func:timeout",
    "func:trace_configs",
    "func:trust_env",
    "func:version",
    "func:ws_connect"
  ],
  "client.py_gpt4_f3bd83fd.py": [
    "class:GMatrixClient",
    "class:GMatrixHttpApi",
    "class:ReceivedCallMessage",
    "class:ReceivedRaidenMessage",
    "class:_ReceivedMessageBase",
    "func:__init__",
    "func:__repr__",
    "func:_handle_message",
    "func:_handle_responses",
    "func:_record_server_ident",
    "func:_send",
    "func:_sync",
    "func:blocking_sync",
    "func:create_room",
    "func:create_sync_filter",
    "func:disable_push_notifications",
    "func:get_aliases",
    "func:get_presence",
    "func:get_room_state_type",
    "func:get_user_presence",
    "func:listen_forever",
    "func:logout",
    "func:node_address_from_userid",
    "func:processed",
    "func:search_user_directory",
    "func:set_access_token",
    "func:set_presence_state",
    "func:set_sync_filter_id",
    "func:start_listener_thread",
    "func:stop",
    "func:stop_listener_thread",
    "func:sync_iteration",
    "func:synced",
    "func:user__repr__"
  ],
  "client_exceptions.py_gpt4_dce05f8f.py": [
    "class:ClientConnectionError",
    "class:ClientConnectionResetError",
    "class:ClientConnectorCertificateError",
    "class:ClientConnectorDNSError",
    "class:ClientConnectorError",
    "class:ClientConnectorSSLError",
    "class:ClientError",
    "class:ClientHttpProxyError",
    "class:ClientOSError",
    "class:ClientPayloadError",
    "class:ClientProxyConnectionError",
    "class:ClientResponseError",
    "class:ClientSSLError",
    "class:ConnectionTimeoutError",
    "class:ContentTypeError",
    "class:InvalidURL",
    "class:InvalidUrlClientError",
    "class:InvalidUrlRedirectClientError",
    "class:NonHttpUrlClientError",
    "class:NonHttpUrlRedirectClientError",
    "class:RedirectClientError",
    "class:ServerConnectionError",
    "class:ServerDisconnectedError",
    "class:ServerFingerprintMismatch",
    "class:ServerTimeoutError",
    "class:SocketTimeoutError",
    "class:TooManyRedirects",
    "class:UnixClientConnectorError",
    "class:WSMessageTypeError",
    "class:WSServerHandshakeError",
    "func:__init__",
    "func:__repr__",
    "func:__str__",
    "func:certificate_error",
    "func:description",
    "func:host",
    "func:os_error",
    "func:path",
    "func:port",
    "func:ssl",
    "func:url"
  ],
  "client_proto.py_gpt4_b5fecce6.py": [
    "class:ResponseHandler",
    "func:__init__",
    "func:_drop_timeout",
    "func:_on_read_timeout",
    "func:_reschedule_timeout",
    "func:close",
    "func:connection_lost",
    "func:data_received",
    "func:eof_received",
    "func:force_close",
    "func:is_connected",
    "func:pause_reading",
    "func:read_timeout",
    "func:resume_reading",
    "func:set_exception",
    "func:set_parser",
    "func:set_response_params",
    "func:should_close",
    "func:start_timeout",
    "func:upgraded"
  ],
  "client_reqrep.py_gpt4_5e3d3a57.py": [
    "class:ClientRequest",
    "class:ClientResponse",
    "class:ConnectionKey",
    "class:ContentDisposition",
    "class:Fingerprint",
    "class:RequestInfo",
    "class:_RequestInfo",
    "func:__del__",
    "func:__init__",
    "func:__new__",
    "func:__repr__",
    "func:__reset_writer",
    "func:_cleanup_writer",
    "func:_gen_default_accept_encoding",
    "func:_notify_content",
    "func:_release_connection",
    "func:_response_eof",
    "func:_writer",
    "func:check",
    "func:close",
    "func:closed",
    "func:connection",
    "func:connection_key",
    "func:content_disposition",
    "func:cookies",
    "func:fingerprint",
    "func:get_encoding",
    "func:headers",
    "func:history",
    "func:host",
    "func:is_ssl",
    "func:links",
    "func:ok",
    "func:port",
    "func:raise_for_status",
    "func:raw_headers",
    "func:real_url",
    "func:release",
    "func:request_info",
    "func:skip_auto_headers",
    "func:ssl",
    "func:terminate",
    "func:update_auth",
    "func:update_auto_headers",
    "func:update_body_from_data",
    "func:update_content_encoding",
    "func:update_cookies",
    "func:update_expect_continue",
    "func:update_headers",
    "func:update_host",
    "func:update_proxy",
    "func:update_transfer_encoding",
    "func:update_version",
    "func:url"
  ],
  "client_ws.py_gpt4_3e5e5648.py": [
    "class:ClientWSTimeout",
    "class:ClientWebSocketResponse",
    "func:__aiter__",
    "func:__init__",
    "func:_cancel_heartbeat",
    "func:_cancel_pong_response_cb",
    "func:_handle_ping_pong_exception",
    "func:_ping_task_done",
    "func:_pong_not_received",
    "func:_reset_heartbeat",
    "func:_send_heartbeat",
    "func:_set_closed",
    "func:_set_closing",
    "func:client_notakeover",
    "func:close_code",
    "func:closed",
    "func:compress",
    "func:exception",
    "func:get_extra_info",
    "func:protocol"
  ],
  "climate.py_gpt4_542d0e90.py": [
    "class:TadoClimate",
    "func:__init__",
    "func:_async_update_zone_callback",
    "func:_async_update_zone_data",
    "func:_handle_coordinator_update",
    "func:_is_current_setting_supported_by_current_hvac_mode",
    "func:_is_valid_setting_for_hvac_mode",
    "func:_normalize_target_temp_for_hvac_mode",
    "func:adjust_temp",
    "func:available",
    "func:current_humidity",
    "func:current_temperature",
    "func:extra_state_attributes",
    "func:fan_mode",
    "func:hvac_action",
    "func:hvac_mode",
    "func:max_temp",
    "func:min_temp",
    "func:preset_mode",
    "func:preset_modes",
    "func:swing_mode",
    "func:target_temperature",
    "func:target_temperature_step"
  ],
  "climate.py_gpt4_645306d2.py": [
    "class:DemoClimate",
    "func:__init__",
    "func:current_humidity",
    "func:current_temperature",
    "func:fan_mode",
    "func:fan_modes",
    "func:hvac_action",
    "func:hvac_mode",
    "func:hvac_modes",
    "func:preset_mode",
    "func:preset_modes",
    "func:swing_horizontal_mode",
    "func:swing_horizontal_modes",
    "func:swing_mode",
    "func:swing_modes",
    "func:target_humidity",
    "func:target_temperature",
    "func:target_temperature_high",
    "func:target_temperature_low",
    "func:temperature_unit",
    "func:unique_id"
  ],
  "climate.py_gpt4_e4d16686.py": [
    "class:GenericThermostat",
    "func:__init__",
    "func:_async_startup",
    "func:_async_switch_changed",
    "func:_async_update_temp",
    "func:_is_device_active",
    "func:current_temperature",
    "func:hvac_action",
    "func:hvac_mode",
    "func:max_temp",
    "func:min_temp",
    "func:precision",
    "func:target_temperature",
    "func:target_temperature_step"
  ],
  "combined.py_gpt4_3818a3a8.py": [
    "class:CombinedLearningRateScheduler",
    "func:__init__",
    "func:current_scheduler",
    "func:get_values",
    "func:load_state_dict",
    "func:state_dict",
    "func:step",
    "func:step_batch"
  ],
  "commands.py_gpt4_df9e3a12.py": [
    "class:CommandWithOptionalPassword",
    "func:_create_app",
    "func:cli",
    "func:create_key",
    "func:create_user",
    "func:key",
    "func:keys",
    "func:parse_args",
    "func:user",
    "func:users"
  ],
  "common.py_gpt4_7d9ef597.py": [
    "class:GenericTestBlock",
    "class:ParserRef",
    "class:TargetBlock",
    "class:TargetColumnsBlock",
    "class:TestBlock",
    "class:VersionedTestBlock",
    "class:YamlBlock",
    "func:__init__",
    "func:_add",
    "func:columns",
    "func:data_tests",
    "func:from_file_block",
    "func:from_target",
    "func:from_test_block",
    "func:from_versioned_target",
    "func:from_yaml_block",
    "func:name",
    "func:quote_columns",
    "func:tests",
    "func:trimmed"
  ],
  "common.py_gpt4_c333ba96.py": [
    "func:add_column",
    "func:clone_table",
    "func:delete_records",
    "func:get_records",
    "func:insert_records",
    "func:update_records"
  ],
  "compilation.py_gpt4_d99c29f7.py": [
    "class:Compiler",
    "class:Linker",
    "class:SeenDetails",
    "func:__init__",
    "func:_add_prepended_cte",
    "func:_compile_code",
    "func:_compile_relation_for_foreign_key_constraint_to",
    "func:_create_node_context",
    "func:_extend_prepended_ctes",
    "func:_generate_stats",
    "func:_get_multi_test_edges",
    "func:_get_test_edges_2",
    "func:_get_tests_for_node",
    "func:_node_enabled",
    "func:_recursively_prepend_ctes",
    "func:_write_node",
    "func:add_ephemeral_prefix",
    "func:add_node",
    "func:add_test_edges",
    "func:add_test_edges_1",
    "func:add_test_edges_2",
    "func:compile",
    "func:compile_node",
    "func:dependency",
    "func:edges",
    "func:find_cycles",
    "func:get_graph",
    "func:get_graph_summary",
    "func:initialize",
    "func:inject_ctes_into_sql",
    "func:link_graph",
    "func:link_node",
    "func:nodes",
    "func:print_compile_stats",
    "func:write_graph",
    "func:write_graph_file"
  ],
  "completion.py_gpt4_fabf7b75.py": [
    "class:Completion",
    "class:ParamNameWithEquals",
    "func:__init__",
    "func:_complete_code_lines",
    "func:_complete_getattr",
    "func:_complete_global_scope",
    "func:_complete_in_string",
    "func:_complete_inherited",
    "func:_complete_keywords",
    "func:_complete_params",
    "func:_complete_python",
    "func:_complete_trailer",
    "func:_complete_trailer_for_values",
    "func:_extract_string_while_in_string",
    "func:_gather_nodes",
    "func:_get_importer_names",
    "func:_get_signature_param_names",
    "func:_is_parameter_completion",
    "func:_must_be_kwarg",
    "func:_remove_duplicates",
    "func:complete",
    "func:complete_param_names",
    "func:complete_trailer",
    "func:filter_names",
    "func:get_flow_scope_node",
    "func:get_public_name",
    "func:get_user_context",
    "func:iter_relevant_lines",
    "func:return_part_of_leaf",
    "func:search_in_module"
  ],
  "compression_utils.py_gpt4_33cdad47.py": [
    "class:BrotliDecompressor",
    "class:ZLibCompressor",
    "class:ZLibDecompressor",
    "class:ZlibBaseHandler",
    "func:__init__",
    "func:compress_sync",
    "func:decompress_sync",
    "func:encoding_to_mode",
    "func:eof",
    "func:flush",
    "func:unconsumed_tail",
    "func:unused_data"
  ],
  "concat.py_gpt4_b116fbaa.py": [
    "func:_clean_keys_and_objs",
    "func:_concat_indexes",
    "func:_get_concat_axis_dataframe",
    "func:_get_concat_axis_series",
    "func:_get_result",
    "func:_get_sample_object",
    "func:_make_concat_multiindex",
    "func:_sanitize_mixed_ndim",
    "func:concat",
    "func:new_axes",
    "func:validate_unique_levels"
  ],
  "conditional_random_field.py_gpt4_b0709573.py": [
    "class:ConditionalRandomField",
    "func:__init__",
    "func:_input_likelihood",
    "func:_joint_likelihood",
    "func:allowed_transitions",
    "func:forward",
    "func:is_transition_allowed",
    "func:reset_parameters",
    "func:viterbi_tags"
  ],
  "config.py_gpt4_dded29bd.py": [
    "class:Config",
    "class:DeployedResources",
    "func:__init__",
    "func:_chain_lookup",
    "func:_chain_merge",
    "func:_load_json_file",
    "func:_try_old_deployer_values",
    "func:_upgrade_deployed_values",
    "func:_upgrade_lambda_functions",
    "func:_upgrade_rest_api",
    "func:api_gateway_custom_domain",
    "func:api_gateway_endpoint_type",
    "func:api_gateway_endpoint_vpce",
    "func:api_gateway_policy_file",
    "func:api_gateway_stage",
    "func:app_name",
    "func:autogen_policy",
    "func:automatic_layer",
    "func:chalice_app",
    "func:config_file_version",
    "func:config_from_disk",
    "func:create",
    "func:deployed_resources",
    "func:empty",
    "func:environment_variables",
    "func:iam_policy_file",
    "func:iam_role_arn",
    "func:lambda_memory_size",
    "func:lambda_python_version",
    "func:lambda_timeout",
    "func:layers",
    "func:log_retention_in_days",
    "func:manage_iam_role",
    "func:minimum_compression_size",
    "func:profile",
    "func:project_dir",
    "func:reserved_concurrency",
    "func:resource_names",
    "func:resource_values",
    "func:scope",
    "func:security_group_ids",
    "func:subnet_ids",
    "func:tags",
    "func:websocket_api_custom_domain",
    "func:xray_enabled"
  ],
  "config_test.py_gpt4_76bfb2b7.py": [
    "class:BinaryAlertConfigTestFakeFilesystem",
    "func:test_configure_with_defaults",
    "func:test_configure_with_no_defaults",
    "func:test_encrypt_cb_api_token",
    "func:test_invalid_aws_account_id",
    "func:test_invalid_aws_region",
    "func:test_invalid_carbon_black_url",
    "func:test_invalid_enable_carbon_black_downloader",
    "func:test_invalid_encrypted_carbon_black_api_token",
    "func:test_invalid_name_prefix",
    "func:test_property_accesses",
    "func:test_save",
    "func:test_validate_invalid",
    "func:test_validate_valid_with_downloader",
    "func:test_validate_valid_without_downloader",
    "func:test_variable_not_defined"
  ],
  "conftest.py_gpt4_27c9761e.py": [
    "func:album_fixture",
    "func:artist_albums_fixture",
    "func:children_200_fixture",
    "func:children_20_fixture",
    "func:children_300_fixture",
    "func:children_30_fixture",
    "func:empty_library_fixture",
    "func:empty_payload_fixture",
    "func:grandchildren_300_fixture",
    "func:hubs_fixture",
    "func:hubs_music_library_fixture",
    "func:library_fixture",
    "func:library_movies_all_fixture",
    "func:library_movies_collections_fixture",
    "func:library_movies_filtertypes_fixture",
    "func:library_movies_metadata_fixture",
    "func:library_movies_size_fixture",
    "func:library_movies_sort_fixture",
    "func:library_music_all_fixture",
    "func:library_music_collections_fixture",
    "func:library_music_metadata_fixture",
    "func:library_music_size_fixture",
    "func:library_music_sort_fixture",
    "func:library_sections_fixture",
    "func:library_tvshows_all_fixture",
    "func:library_tvshows_collections_fixture",
    "func:library_tvshows_metadata_fixture",
    "func:library_tvshows_size_episodes_fixture",
    "func:library_tvshows_size_fixture",
    "func:library_tvshows_size_seasons_fixture",
    "func:library_tvshows_sort_fixture",
    "func:livetv_sessions_fixture",
    "func:media_100_fixture",
    "func:media_1_fixture",
    "func:media_200_fixture",
    "func:media_30_fixture",
    "func:mock_plex_calls",
    "func:mock_setup_entry",
    "func:mock_websocket",
    "func:player_plexhtpc_resources_fixture",
    "func:player_plexweb_resources_fixture",
    "func:playlist_500_fixture",
    "func:playlists_fixture",
    "func:playqueue_1234_fixture",
    "func:playqueue_created_fixture",
    "func:plex_server_accounts_fixture",
    "func:plex_server_base_fixture",
    "func:plex_server_clients_fixture",
    "func:plex_server_default_fixture",
    "func:plex_server_url",
    "func:plextv_account_fixture",
    "func:plextv_resources_fixture",
    "func:plextv_resources_two_servers_fixture",
    "func:plextv_shared_users_fixture",
    "func:security_token_fixture",
    "func:session_base_fixture",
    "func:session_default_fixture",
    "func:session_live_tv_fixture",
    "func:session_new_user_fixture",
    "func:session_photo_fixture",
    "func:session_plexweb_fixture",
    "func:session_transient_fixture",
    "func:session_unknown_fixture",
    "func:setup_plex_server",
    "func:show_seasons_fixture",
    "func:sonos_resources_fixture",
    "func:update_check_fixture_new",
    "func:update_check_fixture_new_not_updatable",
    "func:update_check_fixture_nochange"
  ],
  "conftest.py_gpt4_8f499602.py": [
    "func:_mock_blu_rtv_device",
    "func:_mock_rpc_device",
    "func:disconnected",
    "func:event",
    "func:events",
    "func:initialized",
    "func:mock_bluetooth",
    "func:mock_coap",
    "func:mock_light_set_state",
    "func:mock_white_light_set_state",
    "func:mock_ws_server",
    "func:online",
    "func:update",
    "func:update_reply"
  ],
  "conftest.py_gpt4_ef4e97b9.py": [
    "func:mock_button",
    "func:mock_buttoncounter",
    "func:mock_controller",
    "func:mock_cover",
    "func:mock_cover_no_position",
    "func:mock_dimmer",
    "func:mock_lightsensor",
    "func:mock_module_no_subdevices",
    "func:mock_module_subdevices",
    "func:mock_relay",
    "func:mock_select",
    "func:mock_sensornumber",
    "func:mock_temperature"
  ],
  "conll2003.py_gpt4_c0cefa4c.py": [
    "class:Conll2003DatasetReader",
    "func:__init__",
    "func:_is_divider",
    "func:_read",
    "func:apply_token_indexers",
    "func:text_to_instance"
  ],
  "connectionpool.py_gpt4_4740ff85.py": [
    "class:ConnectionPool",
    "class:HTTPConnectionPool",
    "class:HTTPSConnectionPool",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__str__",
    "func:_absolute_url",
    "func:_add_transport_headers",
    "func:_build_context",
    "func:_get_timeout",
    "func:_ipv6_host",
    "func:_new_conn",
    "func:_raise_timeout",
    "func:close",
    "func:connection_from_url",
    "func:drain_and_release_conn",
    "func:is_same_host"
  ],
  "connectionpool.py_gpt4_8473b69a.py": [
    "class:ConnectionPool",
    "class:HTTPConnectionPool",
    "class:HTTPSConnectionPool",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__str__",
    "func:_absolute_url",
    "func:_add_transport_headers",
    "func:_build_context",
    "func:_get_conn",
    "func:_get_timeout",
    "func:_ipv6_host",
    "func:_make_request",
    "func:_new_conn",
    "func:_put_conn",
    "func:_raise_timeout",
    "func:_start_conn",
    "func:close",
    "func:connection_from_url",
    "func:drain_and_release_conn",
    "func:is_same_host",
    "func:urlopen"
  ],
  "connector.py_gpt4_468d87c7.py": [
    "class:BaseConnector",
    "class:Connection",
    "class:NamedPipeConnector",
    "class:TCPConnector",
    "class:UnixConnector",
    "class:_DNSCacheTable",
    "class:_TransportPlaceholder",
    "func:__bool__",
    "func:__contains__",
    "func:__del__",
    "func:__init__",
    "func:__repr__",
    "func:_available_connections",
    "func:_cleanup",
    "func:_cleanup_closed",
    "func:_close_immediately",
    "func:_convert_hosts_to_addr_infos",
    "func:_get_fingerprint",
    "func:_get_ssl_context",
    "func:_make_ssl_context",
    "func:_notify_release",
    "func:_release",
    "func:_release_acquired",
    "func:_release_waiter",
    "func:_warn_about_tls_in_tls",
    "func:add",
    "func:add_callback",
    "func:clear",
    "func:clear_dns_cache",
    "func:close",
    "func:closed",
    "func:drop_exception",
    "func:expired",
    "func:family",
    "func:force_close",
    "func:limit",
    "func:limit_per_host",
    "func:next_addrs",
    "func:path",
    "func:protocol",
    "func:release",
    "func:remove",
    "func:transport",
    "func:use_dns_cache"
  ],
  "construct.py_gpt4_36a4b076.py": [
    "class:Chalice",
    "func:__init__",
    "func:_filter_resources",
    "func:_generate_sam_template_with_assets",
    "func:_package_app",
    "func:add_environment_variable",
    "func:get_function",
    "func:get_resource",
    "func:get_role"
  ],
  "consumer.py_gpt4_67f75bdf.py": [
    "class:Consumer",
    "class:ConsumerThread",
    "class:Fetcher",
    "class:ThreadDelegateConsumer",
    "class:TopicPartitionGroup",
    "class:TransactionManager",
    "class:_App",
    "func:__init__",
    "func:_add_gap",
    "func:_clean_unacked_messages",
    "func:_filter_committable_offsets",
    "func:_filter_tps_with_pending_acks",
    "func:_get_active_partitions",
    "func:_is_changelog_tp",
    "func:_new_consumer_thread",
    "func:_new_offset",
    "func:_new_topicpartition",
    "func:_reset_state",
    "func:_set_active_tps",
    "func:_should_commit",
    "func:_to_message",
    "func:_tps_to_active_tpgs",
    "func:_tps_to_transactional_ids",
    "func:ack",
    "func:assignment",
    "func:close",
    "func:ensure_TP",
    "func:ensure_TPset",
    "func:highwater",
    "func:key_partition",
    "func:on_buffer_drop",
    "func:on_buffer_full",
    "func:on_init_dependencies",
    "func:pause_partitions",
    "func:resume_flow",
    "func:resume_partitions",
    "func:seek",
    "func:send_soon",
    "func:stop_flow",
    "func:supports_headers",
    "func:topic_partitions",
    "func:track_message",
    "func:unacked",
    "func:verify_event_path",
    "func:verify_recovery_event_path"
  ],
  "context.py_gpt4_4ae68558.py": [
    "class:AbstractContext",
    "class:ClassContext",
    "class:CompForContext",
    "class:CompiledContext",
    "class:CompiledModuleContext",
    "class:FunctionContext",
    "class:ModuleContext",
    "class:NamespaceContext",
    "class:TreeContextMixin",
    "class:ValueContext",
    "func:__init__",
    "func:__repr__",
    "func:_check_for_additional_knowledge",
    "func:_get_global_filters_for_name",
    "func:code_lines",
    "func:create_context",
    "func:create_name",
    "func:create_value",
    "func:from_scope_node",
    "func:get_filters",
    "func:get_global_filter",
    "func:get_global_filters",
    "func:get_qualified_names",
    "func:get_root_context",
    "func:get_value",
    "func:goto",
    "func:infer_node",
    "func:is_bound_method",
    "func:is_builtins_module",
    "func:is_class",
    "func:is_compiled",
    "func:is_instance",
    "func:is_module",
    "func:is_stub",
    "func:name",
    "func:parent_context",
    "func:parent_scope",
    "func:predefine_names",
    "func:py__doc__",
    "func:py__file__",
    "func:py__getattribute__",
    "func:py__name__",
    "func:string_names",
    "func:tree_node"
  ],
  "context_config.py_gpt4_112f5411.py": [
    "class:BaseContextConfigGenerator",
    "class:ConfigSource",
    "class:ContextConfig",
    "class:ContextConfigGenerator",
    "class:ModelParts",
    "class:RenderedConfig",
    "class:UnrenderedConfig",
    "class:UnrenderedConfigGenerator",
    "func:__init__",
    "func:_active_project_configs",
    "func:_project_configs",
    "func:_update_from_config",
    "func:add_config_call",
    "func:add_unrendered_config_call",
    "func:build_config_dict",
    "func:calculate_node_config",
    "func:calculate_node_config_dict",
    "func:get_config_dict",
    "func:get_config_source",
    "func:get_node_project",
    "func:initial_result",
    "func:translate_hook_names"
  ],
  "controllers.py_gpt4_a277da66.py": [
    "class:App",
    "class:CastController",
    "class:CastState",
    "class:CastStatusListener",
    "class:CattStore",
    "class:DashCastController",
    "class:DefaultCastController",
    "class:MediaControllerMixin",
    "class:MediaStatusListener",
    "class:PlaybackBaseMixin",
    "class:SimpleListener",
    "class:StateMode",
    "class:YoutubeCastController",
    "func:__init__",
    "func:_create_store_dir",
    "func:_is_app_ready",
    "func:_is_audiovideo",
    "func:_is_idle",
    "func:_is_seekable",
    "func:_read_store",
    "func:_supports_google_media_namespace",
    "func:_update_status",
    "func:_write_store",
    "func:add",
    "func:add_next",
    "func:block_until_status_received",
    "func:cast_info",
    "func:cc_name",
    "func:clear",
    "func:ffwd",
    "func:get_app",
    "func:get_controller",
    "func:get_data",
    "func:info",
    "func:is_streaming_local_file",
    "func:kill",
    "func:load_url",
    "func:media_info",
    "func:new_cast_status",
    "func:new_media_status",
    "func:pause",
    "func:play",
    "func:play_media_id",
    "func:play_media_url",
    "func:play_playlist",
    "func:play_toggle",
    "func:prep_app",
    "func:prep_control",
    "func:prep_info",
    "func:remove",
    "func:restore",
    "func:rewind",
    "func:seek",
    "func:set_data",
    "func:setup_cast",
    "func:skip",
    "func:update",
    "func:volume",
    "func:volumedown",
    "func:volumemute",
    "func:volumeup",
    "func:wait_for",
    "func:wait_for_states"
  ],
  "cookiejar.py_gpt4_3ace996d.py": [
    "class:CookieJar",
    "class:DummyCookieJar",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:_delete_cookies",
    "func:_do_expiration",
    "func:_expire_cookie",
    "func:_is_domain_match",
    "func:_parse_date",
    "func:clear",
    "func:clear_domain",
    "func:filter_cookies",
    "func:load",
    "func:quote_cookie",
    "func:save",
    "func:update_cookies"
  ],
  "core.py_gpt4_18a2c38d.py": [
    "class:AdhocFilterClause",
    "class:AdhocMetricExpressionType",
    "class:AnnotationType",
    "class:ColumnSpec",
    "class:ColumnTypeSource",
    "class:DashboardStatus",
    "class:DatasourceDict",
    "class:DatasourceName",
    "class:DatasourceType",
    "class:DateColumn",
    "class:ExtraFiltersReasonType",
    "class:ExtraFiltersTimeColumnType",
    "class:FilterOperator",
    "class:FilterStringOperators",
    "class:GenericDataType",
    "class:HeaderDataType",
    "class:LoggerLevel",
    "class:PostProcessingBoxplotWhiskerType",
    "class:PostProcessingContributionOrientation",
    "class:QueryObjectFilterClause",
    "class:QuerySource",
    "class:QueryStatus",
    "class:ReservedUrlParameters",
    "class:RowLevelSecurityFilterType",
    "class:SigalrmTimeout",
    "class:TimerTimeout",
    "func:LongText",
    "func:MediumText",
    "func:__enter__",
    "func:__eq__",
    "func:__exit__",
    "func:__hash__",
    "func:__init__",
    "func:apply_max_row_limit",
    "func:as_list",
    "func:backend",
    "func:cast_to_boolean",
    "func:cast_to_num",
    "func:check_is_safe_zip",
    "func:choicify",
    "func:convert_legacy_filters_into_adhoc",
    "func:create_ssl_cert_file",
    "func:create_zip",
    "func:ensure_path_exists",
    "func:error_msg_from_exception",
    "func:extract_column_dtype",
    "func:extract_dataframe_dtypes",
    "func:find_duplicates",
    "func:form_data_to_adhoc",
    "func:format_list",
    "func:generic_find_constraint_name",
    "func:generic_find_fk_constraint_name",
    "func:generic_find_fk_constraint_names",
    "func:generic_find_uq_constraint_name",
    "func:get_base_axis_columns",
    "func:get_base_axis_labels",
    "func:get_column_name",
    "func:get_column_name_from_column",
    "func:get_column_name_from_metric",
    "func:get_column_names",
    "func:get_column_names_from_columns",
    "func:get_column_names_from_metrics",
    "func:get_datasource_full_name",
    "func:get_email_address_list",
    "func:get_example_default_schema",
    "func:get_filter_key",
    "func:get_first_metric_name",
    "func:get_form_data_token",
    "func:get_legacy_time_column",
    "func:get_metric_name",
    "func:get_metric_names",
    "func:get_non_base_axis_columns",
    "func:get_stacktrace",
    "func:get_time_filter_status",
    "func:get_user",
    "func:get_user_email",
    "func:get_user_id",
    "func:get_username",
    "func:get_x_axis_label",
    "func:handle_timeout",
    "func:is_adhoc_column",
    "func:is_adhoc_metric",
    "func:is_base_axis",
    "func:is_standalone_mode",
    "func:is_test",
    "func:markdown",
    "func:merge_extra_filters",
    "func:merge_extra_form_data",
    "func:merge_request_params",
    "func:normalize_dttm_col",
    "func:override_user",
    "func:parse_boolean_string",
    "func:parse_js_uri_path_item",
    "func:parse_ssl_cert",
    "func:pessimistic_connection_handling",
    "func:ping_connection",
    "func:readfile",
    "func:remove_duplicates",
    "func:remove_extra_adhoc_filters",
    "func:send_email_smtp",
    "func:send_mime_email",
    "func:set_sqlite_pragma",
    "func:shortid",
    "func:simple_filter_to_adhoc",
    "func:split",
    "func:split_adhoc_filters_into_base_filters",
    "func:time_function",
    "func:to_int",
    "func:user_label",
    "func:zlib_compress",
    "func:zlib_decompress"
  ],
  "core.py_gpt4_9f7a19d9.py": [
    "class:Agent",
    "class:PowerSystem",
    "func:__init__",
    "func:_simulate_power_system",
    "func:block",
    "func:block24",
    "func:deblock24",
    "func:dimension",
    "func:get_num_vars",
    "func:get_output",
    "func:make_plots",
    "func:set_parameters"
  ],
  "core.py_gpt4_d48a740f.py": [
    "class:Block",
    "class:BlockNotSavedError",
    "class:InvalidBlockRegistration",
    "func:__dispatch_key__",
    "func:__init__",
    "func:__new__",
    "func:__repr_args__",
    "func:__str__",
    "func:_calculate_schema_checksum",
    "func:_collect_nested_reference_strings",
    "func:_collect_secret_fields",
    "func:_define_metadata_on_nested_blocks",
    "func:_event_kind",
    "func:_event_method_called_resources",
    "func:_from_block_document",
    "func:_generate_code_example",
    "func:_get_block_document",
    "func:_get_current_package_version",
    "func:_get_non_block_reference_definitions",
    "func:_is_subclass",
    "func:_load_from_block_document",
    "func:_parse_docstring",
    "func:_should_update_block_type",
    "func:_to_block_document",
    "func:_to_block_schema",
    "func:_to_block_schema_reference_dict",
    "func:_to_block_type",
    "func:annotation_refers_to_block_class",
    "func:block_initialization",
    "func:block_schema_to_key",
    "func:collect_block_schema_references",
    "func:get_block_capabilities",
    "func:get_block_class_from_key",
    "func:get_block_class_from_schema",
    "func:get_block_placeholder",
    "func:get_block_schema_version",
    "func:get_block_type_name",
    "func:get_block_type_slug",
    "func:get_code_example",
    "func:get_description",
    "func:is_block_class",
    "func:load",
    "func:model_dump",
    "func:model_json_schema",
    "func:model_validate",
    "func:schema_extra",
    "func:ser_model"
  ],
  "core.py_gpt4_e433c9e7.py": [
    "class:BuildsStrategy",
    "class:CompositeStrategy",
    "class:DataObject",
    "class:DataStrategy",
    "class:DrawFn",
    "class:PermutationStrategy",
    "class:PrettyIter",
    "class:RandomModule",
    "class:RunnerStrategy",
    "func:__call__",
    "func:__init__",
    "func:__iter__",
    "func:__next__",
    "func:__not_a_first_class_strategy",
    "func:__repr__",
    "func:_as_finite_decimal",
    "func:_composite",
    "func:_from_type",
    "func:_from_type_deferred",
    "func:_functions",
    "func:_get_annotation_arg",
    "func:_get_typeddict_qualifiers",
    "func:_maybe_nil_uuids",
    "func:accept",
    "func:as_strategy",
    "func:binary",
    "func:booleans",
    "func:builds",
    "func:calc_label",
    "func:characters",
    "func:complex_numbers",
    "func:composite",
    "func:constrained_complex",
    "func:ctx",
    "func:data",
    "func:decimals",
    "func:deferred",
    "func:dictionaries",
    "func:dm_func",
    "func:do_draw",
    "func:domains",
    "func:draw",
    "func:emails",
    "func:example",
    "func:filter",
    "func:fixed_dictionaries",
    "func:flatmap",
    "func:fraction_to_decimal",
    "func:fractions",
    "func:from_regex",
    "func:from_type",
    "func:from_type_guarded",
    "func:frozensets",
    "func:functions",
    "func:int_to_decimal",
    "func:iterables",
    "func:lists",
    "func:map",
    "func:permutations",
    "func:random_module",
    "func:randoms",
    "func:recursive",
    "func:register_type_strategy",
    "func:runner",
    "func:sampled_from",
    "func:sets",
    "func:shared",
    "func:slices",
    "func:text",
    "func:uuids",
    "func:validate"
  ],
  "core.py_gpt4_f0978ce4.py": [
    "class:AreaPlot",
    "class:BarPlot",
    "class:BarhPlot",
    "class:HexBinPlot",
    "class:LinePlot",
    "class:MPLPlot",
    "class:PiePlot",
    "class:PlanePlot",
    "class:ScatterPlot",
    "func:__init__",
    "func:_add_table",
    "func:_adorn_subplots",
    "func:_append_legend_handles_labels",
    "func:_apply_axis_properties",
    "func:_apply_style_colors",
    "func:_are_valid_colors",
    "func:_axes_and_fig",
    "func:_col_idx_to_axis_idx",
    "func:_color_in_style",
    "func:_compute_plot_data",
    "func:_convert_to_ndarray",
    "func:_decorate_ticks",
    "func:_ensure_frame",
    "func:_get_ax",
    "func:_get_ax_layer",
    "func:_get_ax_legend",
    "func:_get_axes_layout",
    "func:_get_c_values",
    "func:_get_color_mapping",
    "func:_get_colorbar",
    "func:_get_colors",
    "func:_get_custom_index_name",
    "func:_get_errorbars",
    "func:_get_index_name",
    "func:_get_norm_and_cmap",
    "func:_get_nseries",
    "func:_get_stacked_values",
    "func:_get_stacking_id",
    "func:_get_subplots",
    "func:_get_xticks",
    "func:_has_plotted_object",
    "func:_initialize_stacker",
    "func:_is_ts_plot",
    "func:_iter_data",
    "func:_kind",
    "func:_make_legend",
    "func:_make_plot",
    "func:_mark_right_label",
    "func:_maybe_right_yaxis",
    "func:_parse_errorbars",
    "func:_plot",
    "func:_plot_colorbar",
    "func:_post_plot_logic",
    "func:_post_plot_logic_common",
    "func:_start_base",
    "func:_ts_plot",
    "func:_update_stacker",
    "func:_use_dynamic_x",
    "func:_validate_color_args",
    "func:_validate_log_kwd",
    "func:_validate_sharex",
    "func:_validate_subplots_kwarg",
    "func:ax_pos",
    "func:axes",
    "func:blank_labeler",
    "func:fig",
    "func:generate",
    "func:get_label",
    "func:holds_integer",
    "func:legend_title",
    "func:lim_offset",
    "func:match_labels",
    "func:nseries",
    "func:on_right",
    "func:orientation",
    "func:result",
    "func:tickoffset"
  ],
  "create_user.py_gpt4_46a62a4c.py": [
    "func:add_new_user_history",
    "func:created_bot_event",
    "func:do_activate_mirror_dummy_user",
    "func:do_create_user",
    "func:do_reactivate_user",
    "func:notify_created_bot",
    "func:notify_created_user",
    "func:notify_new_user",
    "func:process_new_human_user",
    "func:send_group_direct_message_to_admins",
    "func:send_message_to_signup_notification_stream",
    "func:set_up_streams_and_groups_for_new_human_user",
    "func:stream_name"
  ],
  "create_user.py_gpt4_b066d983.py": [
    "func:copy_default_settings",
    "func:create_user",
    "func:create_user_profile",
    "func:get_display_email_address",
    "func:get_dummy_email_address_for_display_regex"
  ],
  "csvs.py_gpt4_c26b4e7f.py": [
    "class:CSVFormatter",
    "func:__init__",
    "func:_generate_multiindex_header_rows",
    "func:_get_index_label_flat",
    "func:_get_index_label_from_obj",
    "func:_get_index_label_multiindex",
    "func:_has_aliases",
    "func:_initialize_chunksize",
    "func:_initialize_columns",
    "func:_initialize_index_label",
    "func:_initialize_quotechar",
    "func:_need_to_save_header",
    "func:_number_format",
    "func:_save",
    "func:_save_body",
    "func:_save_chunk",
    "func:_save_header",
    "func:data_index",
    "func:decimal",
    "func:encoded_labels",
    "func:float_format",
    "func:has_mi_columns",
    "func:header",
    "func:index",
    "func:na_rep",
    "func:nlevels",
    "func:save",
    "func:write_cols"
  ],
  "data_io.py_gpt4_18af6756.py": [
    "class:BaseParallelSampleIter",
    "class:Batch",
    "class:BatchedRawParallelSampleIter",
    "class:BucketBatchSize",
    "class:DataConfig",
    "class:DataInfo",
    "class:DataStatistics",
    "class:DataStatisticsAccumulator",
    "class:LengthStatistics",
    "class:ParallelDataSet",
    "class:ParallelSampleIter",
    "class:RawParallelDatasetLoader",
    "class:SequenceReader",
    "class:ShardedParallelSampleIter",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__next__",
    "func:_load_shard",
    "func:analyze_sequence_lengths",
    "func:are_none",
    "func:are_token_parallel",
    "func:calculate_length_statistics",
    "func:create_batch_from_parallel_sample",
    "func:create_sequence_readers",
    "func:create_shards",
    "func:create_target_and_shifted_label_sequences",
    "func:define_bucket_batch_sizes",
    "func:define_buckets",
    "func:define_parallel_buckets",
    "func:describe_data_and_buckets",
    "func:fill_up",
    "func:get_batch_indices",
    "func:get_bucket",
    "func:get_bucket_counts",
    "func:get_data_statistics",
    "func:get_eop_id",
    "func:get_num_shards",
    "func:get_parallel_bucket",
    "func:get_permutations",
    "func:get_prepared_data_iters",
    "func:get_prepended_token_length",
    "func:get_scoring_data_iters",
    "func:get_target_bucket",
    "func:get_training_data_iters",
    "func:get_validation_data_iter",
    "func:ids2tokens",
    "func:iter_next",
    "func:length_ratio_stats_per_bucket",
    "func:load",
    "func:load_state",
    "func:log",
    "func:mean_len_target_per_bucket",
    "func:next",
    "func:parallel_iter",
    "func:parallel_iterate",
    "func:permute",
    "func:prepare_data",
    "func:read_content",
    "func:reset",
    "func:save",
    "func:save_shard",
    "func:save_state",
    "func:sequence_pair",
    "func:statistics",
    "func:strids2ids",
    "func:tokens2ids"
  ],
  "dataclasses.py_gpt4_312b2b6e.py": [
    "class:Dataclass",
    "class:DataclassProxy",
    "func:__call__",
    "func:__copy__",
    "func:__deepcopy__",
    "func:__get_validators__",
    "func:__getattr__",
    "func:__init__",
    "func:__instancecheck__",
    "func:__setattr__",
    "func:__validate__",
    "func:_add_pydantic_validation_attributes",
    "func:_dataclass_validate_assignment_setattr",
    "func:_dataclass_validate_values",
    "func:_get_validators",
    "func:_is_field_cached_property",
    "func:_validate_dataclass",
    "func:create_pydantic_model_from_dataclass",
    "func:dataclass",
    "func:handle_extra_init",
    "func:is_builtin_dataclass",
    "func:make_dataclass_validator",
    "func:new_init",
    "func:new_post_init",
    "func:set_validation",
    "func:wrap"
  ],
  "dataclasses.py_gpt4_f70d3a68.py": [
    "func:_call_initvar",
    "func:create_dataclass",
    "func:dataclass",
    "func:is_pydantic_dataclass",
    "func:make_pydantic_fields_compatible",
    "func:rebuild_dataclass"
  ],
  "dataset_reader.py_gpt4_c0f22f74.py": [
    "class:DatasetReader",
    "class:DistributedInfo",
    "class:WorkerInfo",
    "func:__init__",
    "func:_multi_worker_islice",
    "func:_read",
    "func:_set_distributed_info",
    "func:_set_worker_info",
    "func:apply_token_indexers",
    "func:get_distributed_info",
    "func:get_worker_info",
    "func:read",
    "func:shard_iterable",
    "func:text_to_instance"
  ],
  "dataset_reader_test.py_gpt4_85d3c85e.py": [
    "class:MockDatasetReader",
    "class:MockMdsDatasetReader",
    "class:MockMmpdsDatasetReader",
    "class:MockMmpsDatasetReader",
    "func:__init__",
    "func:_read",
    "func:test_instance_slicing",
    "func:text_to_instance"
  ],
  "datetimes.py_gpt4_289303b4.py": [
    "class:DatetimeIndex",
    "func:__getattr__",
    "func:__new__",
    "func:ceil",
    "func:day",
    "func:day_name",
    "func:day_of_week",
    "func:day_of_year",
    "func:dayofweek",
    "func:dayofyear",
    "func:days_in_month",
    "func:daysinmonth",
    "func:disallow_nanoseconds",
    "func:floor",
    "func:hour",
    "func:indexer_at_time",
    "func:indexer_between_time",
    "func:is_leap_year",
    "func:is_month_end",
    "func:is_month_start",
    "func:is_quarter_end",
    "func:is_quarter_start",
    "func:is_year_end",
    "func:is_year_start",
    "func:microsecond",
    "func:minute",
    "func:month",
    "func:month_name",
    "func:normalize",
    "func:pandas_at_time",
    "func:pandas_between_time",
    "func:quarter",
    "func:round",
    "func:second",
    "func:strftime",
    "func:week",
    "func:weekday",
    "func:weekofyear",
    "func:year"
  ],
  "datetimes.py_gpt4_b610e23a.py": [
    "class:DatetimeIndex",
    "func:__new__",
    "func:__reduce__",
    "func:_can_range_setop",
    "func:_disallow_mismatched_indexing",
    "func:_engine_type",
    "func:_formatter_func",
    "func:_get_time_micros",
    "func:_is_comparable_dtype",
    "func:_is_dates_only",
    "func:_maybe_cast_slice_bound",
    "func:_new_DatetimeIndex",
    "func:_parse_with_reso",
    "func:_parsed_string_to_bounds",
    "func:_resolution_obj",
    "func:_time_to_micros",
    "func:bdate_range",
    "func:check_str_or_none",
    "func:date_range",
    "func:get_loc",
    "func:indexer_at_time",
    "func:indexer_between_time",
    "func:inferred_type",
    "func:isocalendar",
    "func:slice_indexer",
    "func:snap",
    "func:strftime",
    "func:to_julian_date",
    "func:to_period",
    "func:tz_convert",
    "func:tz_localize"
  ],
  "datetimes.py_gpt4_c996d436.py": [
    "class:DatetimeArray",
    "func:__array__",
    "func:__iter__",
    "func:_add_offset",
    "func:_assert_tzawareness_compat",
    "func:_box_func",
    "func:_check_compatible_with",
    "func:_construct_from_dt64_naive",
    "func:_field_accessor",
    "func:_format_native_types",
    "func:_from_scalars",
    "func:_from_sequence",
    "func:_from_sequence_not_strict",
    "func:_generate_range",
    "func:_infer_tz_from_endpoints",
    "func:_local_timestamps",
    "func:_maybe_infer_tz",
    "func:_maybe_localize_point",
    "func:_maybe_normalize_endpoints",
    "func:_reduce",
    "func:_resolution_obj",
    "func:_scalar_from_string",
    "func:_scalar_type",
    "func:_sequence_to_dt64",
    "func:_simple_new",
    "func:_unbox_scalar",
    "func:_validate_dt64_dtype",
    "func:_validate_dtype",
    "func:_validate_tz_from_dtype",
    "func:astype",
    "func:date",
    "func:day_name",
    "func:dtype",
    "func:f",
    "func:is_normalized",
    "func:isocalendar",
    "func:maybe_convert_dtype",
    "func:month_name",
    "func:normalize",
    "func:objects_to_datetime64",
    "func:std",
    "func:time",
    "func:timetz",
    "func:to_julian_date",
    "func:to_period",
    "func:to_pydatetime",
    "func:tz",
    "func:tz_convert",
    "func:tz_localize",
    "func:tz_to_dtype",
    "func:tzinfo"
  ],
  "ddp_accelerator.py_gpt4_890ec6c6.py": [
    "class:DdpAccelerator",
    "class:DdpWrappedModel",
    "class:LoadStateDictReturnType",
    "class:TorchDdpAccelerator",
    "func:__init__",
    "func:_add_torch_ddp_prefix",
    "func:_remove_torch_ddp_prefix",
    "func:clip_grad_norm_",
    "func:consolidate_sharded_state",
    "func:init_grad_scaler",
    "func:is_sharded",
    "func:load_state_dict",
    "func:state_dict",
    "func:wrap_model",
    "func:wrap_module"
  ],
  "debias.py_gpt4_c4dc5d24.py": [
    "func:debias_column",
    "func:debias_with_double_ml",
    "func:debias_with_fixed_effects",
    "func:debias_with_regression",
    "func:debias_with_regression_formula",
    "func:get_cv_resid",
    "func:get_resid"
  ],
  "default.py_gpt4_fe677019.py": [
    "class:AsyncHTTPTransport",
    "class:AsyncResponseStream",
    "class:HTTPTransport",
    "class:ResponseStream",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__iter__",
    "func:_load_httpcore_exceptions",
    "func:close",
    "func:handle_request",
    "func:map_httpcore_exceptions"
  ],
  "deployer.py_gpt4_4d988565.py": [
    "class:BaseDeployStep",
    "class:BuildStage",
    "class:ChaliceDeploymentError",
    "class:Deployer",
    "class:DeploymentPackager",
    "class:DeploymentReporter",
    "class:InjectDefaults",
    "class:LambdaEventSourcePolicyInjector",
    "class:ManagedLayerDeploymentPackager",
    "class:NoopResultsRecorder",
    "class:PolicyGenerator",
    "class:ResultsRecorder",
    "class:SwaggerBuilder",
    "class:WebsocketPolicyInjector",
    "func:__init__",
    "func:_create_deployer",
    "func:_default_report",
    "func:_deploy",
    "func:_get_error_location",
    "func:_get_error_message",
    "func:_get_error_message_for_connection_error",
    "func:_get_error_suggestion",
    "func:_get_mb",
    "func:_get_verb_from_client_method",
    "func:_inject_into_function",
    "func:_inject_policy",
    "func:_inject_trigger_policy",
    "func:_needs_policy_injected",
    "func:_read_document_from_file",
    "func:_report_domain_name",
    "func:_report_lambda_function",
    "func:_report_lambda_layer",
    "func:_report_rest_api",
    "func:_report_websocket_api",
    "func:_validate_config",
    "func:_wrap_text",
    "func:create_build_stage",
    "func:create_default_deployer",
    "func:create_deletion_deployer",
    "func:create_plan_only_deployer",
    "func:deploy",
    "func:display_report",
    "func:execute",
    "func:generate_report",
    "func:handle",
    "func:handle_autogeniampolicy",
    "func:handle_deploymentpackage",
    "func:handle_domainname",
    "func:handle_dynamodbeventsource",
    "func:handle_filebasediampolicy",
    "func:handle_kinesiseventsource",
    "func:handle_lambdafunction",
    "func:handle_lambdalayer",
    "func:handle_restapi",
    "func:handle_sqseventsource",
    "func:handle_websocketapi",
    "func:record_results"
  ],
  "diff.py_gpt4_01b3d5ad.py": [
    "class:Diff",
    "class:Insert",
    "class:Keep",
    "class:Modify",
    "class:Remove",
    "class:_Frontier",
    "func:_diff",
    "func:_finalize",
    "func:_get_checkpoint_path",
    "func:add_subparser",
    "func:checkpoint_diff",
    "func:display",
    "func:one"
  ],
  "diff.py_gpt4_0c6e8009.py": [
    "class:DiffParser",
    "class:_NodesTree",
    "class:_NodesTreeNode",
    "class:_PositionUpdatingFinished",
    "func:__init__",
    "func:__repr__",
    "func:_assert_nodes_are_equal",
    "func:_assert_valid_graph",
    "func:_copy_from_old_parser",
    "func:_copy_nodes",
    "func:_diff_tokenize",
    "func:_enabled_debugging",
    "func:_ends_with_newline",
    "func:_flows_finished",
    "func:_func_or_class_has_suite",
    "func:_get_debug_error_message",
    "func:_get_indentation",
    "func:_get_last_line",
    "func:_get_matching_indent_nodes",
    "func:_get_next_leaf_if_indentation",
    "func:_get_old_line_stmt",
    "func:_get_previous_leaf_if_indentation",
    "func:_get_suite_indentation",
    "func:_is_flow_node",
    "func:_is_indentation_error_leaf",
    "func:_parse",
    "func:_remove_endmarker",
    "func:_reset",
    "func:_skip_dedent_error_leaves",
    "func:_suite_or_file_input_is_valid",
    "func:_try_parse_part",
    "func:_update_insertion_node",
    "func:_update_parsed_node_tos",
    "func:_update_positions",
    "func:add_child_node",
    "func:add_parsed_nodes",
    "func:add_tree_nodes",
    "func:close",
    "func:copy_nodes",
    "func:finish",
    "func:get_last_line",
    "func:parsed_until_line",
    "func:update"
  ],
  "diff_shades_gha_helper.py_gpt4_724f1e44.py": [
    "func:comment_body",
    "func:comment_details",
    "func:config",
    "func:get_main_revision",
    "func:get_pr_revision",
    "func:get_pypi_version",
    "func:http_get",
    "func:main",
    "func:set_output"
  ],
  "differentialevolution.py_gpt4_3f237df5.py": [
    "class:Crossover",
    "class:DifferentialEvolution",
    "class:_DE",
    "func:__init__",
    "func:_internal_ask_candidate",
    "func:_internal_tell_candidate",
    "func:_internal_tell_not_asked",
    "func:apply",
    "func:onepoint",
    "func:recommend",
    "func:rotated_twopoints",
    "func:set_objective_weights",
    "func:twopoints",
    "func:variablewise",
    "func:voronoi"
  ],
  "document.py_gpt4_99eb2cc1.py": [
    "class:Document",
    "class:Field",
    "class:Link",
    "class:Response",
    "class:Section",
    "func:__init__",
    "func:get_body_field",
    "func:get_expanded_body",
    "func:get_links",
    "func:get_path_fields",
    "func:get_query_fields",
    "func:get_sections",
    "func:walk_links"
  ],
  "driver.py_gpt4_a019dddb.py": [
    "class:Driver",
    "class:ReleaseRange",
    "class:TokenProxy",
    "func:__init__",
    "func:__iter__",
    "func:__next__",
    "func:_generate_pickle_name",
    "func:_newer",
    "func:_partially_consume_prefix",
    "func:can_advance",
    "func:eat",
    "func:load_grammar",
    "func:load_packaged_grammar",
    "func:lock",
    "func:main",
    "func:parse_file",
    "func:parse_stream",
    "func:parse_stream_raw",
    "func:parse_string",
    "func:parse_tokens",
    "func:release"
  ],
  "dynamic_params.py_gpt4_4bb1022a.py": [
    "func:_avoid_recursions",
    "func:_check_name_for_execution",
    "func:_get_lambda_name",
    "func:_get_potential_nodes",
    "func:_search_function_arguments",
    "func:create_args",
    "func:dynamic_param_lookup",
    "func:wrapper"
  ],
  "elmo.py_gpt4_d981c2e3.py": [
    "class:Elmo",
    "class:_ElmoBiLm",
    "class:_ElmoCharacterEncoder",
    "func:__init__",
    "func:_load_char_embedding",
    "func:_load_cnn_weights",
    "func:_load_highway",
    "func:_load_projection",
    "func:_load_weights",
    "func:batch_to_ids",
    "func:create_cached_cnn_embeddings",
    "func:forward",
    "func:get_output_dim"
  ],
  "elmo_indexer.py_gpt4_56f6acdb.py": [
    "class:ELMoCharacterMapper",
    "class:ELMoTokenCharactersIndexer",
    "func:__eq__",
    "func:__init__",
    "func:_make_bos_eos",
    "func:as_padded_tensor_dict",
    "func:convert_word_to_char_ids",
    "func:count_vocab_items",
    "func:get_empty_token_list",
    "func:padding_token",
    "func:tokens_to_indices"
  ],
  "embedding.py_gpt4_64e6a5c5.py": [
    "class:Embedding",
    "class:EmbeddingsFileURI",
    "class:EmbeddingsTextFile",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__next__",
    "func:_get_num_tokens_from_first_line",
    "func:_get_the_only_file_in_the_archive",
    "func:_open_inside_tar",
    "func:_open_inside_zip",
    "func:_read_embeddings_from_hdf5",
    "func:_read_embeddings_from_text_file",
    "func:_read_pretrained_embeddings_file",
    "func:close",
    "func:extend_vocab",
    "func:format_embeddings_file_uri",
    "func:forward",
    "func:get_output_dim",
    "func:parse_embeddings_file_uri",
    "func:read",
    "func:readline"
  ],
  "encoder_base.py_gpt4_aaa5df5f.py": [
    "class:_EncoderBase",
    "func:__init__",
    "func:_get_initial_states",
    "func:_update_states",
    "func:reset_states",
    "func:sort_and_run_forward"
  ],
  "errors.py_gpt4_cba819bf.py": [
    "class:ErrorFinder",
    "class:ErrorFinderConfig",
    "class:IndentationRule",
    "class:SyntaxRule",
    "class:_AnnotatorRule",
    "class:_ArglistRule",
    "class:_ArgumentRule",
    "class:_AwaitOutsideAsync",
    "class:_BreakOutsideLoop",
    "class:_BytesAndStringMix",
    "class:_CheckAssignmentRule",
    "class:_CompForRule",
    "class:_Context",
    "class:_ContinueChecks",
    "class:_DelStmtRule",
    "class:_ExpectIndentedBlock",
    "class:_ExprListRule",
    "class:_ExprStmtRule",
    "class:_FStringRule",
    "class:_ForStmtRule",
    "class:_FutureImportRule",
    "class:_ImportStarInFunction",
    "class:_InvalidSyntaxRule",
    "class:_NameChecks",
    "class:_NamedExprRule",
    "class:_NonlocalModuleLevelRule",
    "class:_ParameterRule",
    "class:_ReturnAndYieldChecks",
    "class:_StarCheck",
    "class:_StarExprParentRule",
    "class:_StarExprRule",
    "class:_StarStarCheck",
    "class:_StringChecks",
    "class:_TrailingImportComma",
    "class:_TryStmtRule",
    "class:_WithItemRule",
    "class:_YieldFromCheck",
    "func:__init__",
    "func:_add_indentation_error",
    "func:_add_syntax_error",
    "func:_analyze_names",
    "func:_any_fstring_error",
    "func:_check_assignment",
    "func:_check_format_spec",
    "func:_check_fstring_contents",
    "func:_check_fstring_expr",
    "func:_get_comprehension_type",
    "func:_get_expr_stmt_definition_exprs",
    "func:_get_for_stmt_definition_exprs",
    "func:_get_message",
    "func:_get_rhs_name",
    "func:_is_argument_comprehension",
    "func:_is_bytes_literal",
    "func:_is_future_import",
    "func:_is_future_import_first",
    "func:_iter_definition_exprs_from_lists",
    "func:_iter_params",
    "func:_iter_stmts",
    "func:_remove_parens",
    "func:_skip_parens_bottom_up",
    "func:add_block",
    "func:add_context",
    "func:add_issue",
    "func:add_name",
    "func:check_delete_starred",
    "func:check_expr",
    "func:close_child_context",
    "func:create_context",
    "func:finalize",
    "func:get_error_node",
    "func:get_node",
    "func:initialize",
    "func:is_async_funcdef",
    "func:is_definition",
    "func:is_function",
    "func:is_issue",
    "func:message",
    "func:process_comp_for",
    "func:raise_",
    "func:search_all_comp_ancestors",
    "func:search_namedexpr_in_comp_for",
    "func:visit",
    "func:visit_leaf",
    "func:visit_node"
  ],
  "evalb_bracketing_scorer_test.py_gpt4_12a3ec63.py": [
    "class:EvalbBracketingScorerTest",
    "func:multiple_runs",
    "func:setup_method",
    "func:tearDown",
    "func:test_distributed_evalb",
    "func:test_evalb_correctly_calculates_bracketing_metrics_over_multiple_trees",
    "func:test_evalb_correctly_scores_identical_trees",
    "func:test_evalb_correctly_scores_imperfect_trees",
    "func:test_evalb_with_terrible_trees_handles_nan_f1",
    "func:test_multiple_distributed_runs"
  ],
  "evaluator.py_gpt4_8288a291.py": [
    "class:Evaluator",
    "class:SimpleEvaluator",
    "func:__call__",
    "func:__init__",
    "func:_to_params"
  ],
  "events.py_gpt4_b136f42f.py": [
    "class:ClientCapabilities",
    "func:_draft_update_action",
    "func:add_realm_logo_fields",
    "func:always_want",
    "func:apply_event",
    "func:apply_events",
    "func:do_events_register",
    "func:fetch_initial_state_data",
    "func:post_process_state"
  ],
  "ewm.py_gpt4_64027fd2.py": [
    "class:ExponentialMovingWindow",
    "class:ExponentialMovingWindowGroupby",
    "class:OnlineExponentialMovingWindow",
    "func:__init__",
    "func:_calculate_deltas",
    "func:_check_window_bounds",
    "func:_cov",
    "func:_get_window_indexer",
    "func:aggregate",
    "func:corr",
    "func:cov",
    "func:cov_func",
    "func:get_center_of_mass",
    "func:mean",
    "func:online",
    "func:reset",
    "func:std",
    "func:sum",
    "func:var",
    "func:var_func"
  ],
  "excel.py_gpt4_a8ae7b91.py": [
    "class:CSSToExcelConverter",
    "class:CssExcelCell",
    "class:ExcelCell",
    "class:ExcelFormatter",
    "func:__call__",
    "func:__init__",
    "func:_border_style",
    "func:_call_uncached",
    "func:_convert_hex_to_excel",
    "func:_format_body",
    "func:_format_header",
    "func:_format_header_mi",
    "func:_format_header_regular",
    "func:_format_hierarchical_rows",
    "func:_format_regular_rows",
    "func:_format_value",
    "func:_generate_body",
    "func:_get_decoration",
    "func:_get_font_names",
    "func:_get_font_size",
    "func:_get_is_bold",
    "func:_get_is_italic",
    "func:_get_is_wrap_text",
    "func:_get_shadow",
    "func:_get_underline",
    "func:_get_vertical_alignment",
    "func:_get_width_name",
    "func:_has_aliases",
    "func:_is_hex_color",
    "func:_is_shorthand_color",
    "func:_pt_to_float",
    "func:_select_font_family",
    "func:_width_to_float",
    "func:build_alignment",
    "func:build_border",
    "func:build_fill",
    "func:build_font",
    "func:build_number_format",
    "func:build_xlstyle",
    "func:color_to_excel",
    "func:get_formatted_cells",
    "func:remove_none",
    "func:write"
  ],
  "exceptions.py_gpt4_a1212937.py": [
    "class:AliasError",
    "class:AmbiguousAliasError",
    "class:AmbiguousCatalogMatchError",
    "class:AmbiguousResourceNameRefError",
    "class:BadSpecError",
    "class:BooleanError",
    "class:ConfigContractBrokenError",
    "class:ConfigUpdateError",
    "class:ConflictingConfigKeysError",
    "class:ContractBreakingChangeError",
    "class:ContractError",
    "class:CustomMacroPopulatingConfigValueError",
    "class:DbtExclusivePropertyUseError",
    "class:DbtProfileError",
    "class:DbtProjectError",
    "class:DbtReferenceError",
    "class:DbtSelectorsError",
    "class:DependencyError",
    "class:DependencyNotFoundError",
    "class:DictParseError",
    "class:DocArgsError",
    "class:DocTargetNotFoundError",
    "class:DuplicateAliasError",
    "class:DuplicateDependencyToRootError",
    "class:DuplicateMacroNameError",
    "class:DuplicateMacroPatchNameError",
    "class:DuplicatePatchPathError",
    "class:DuplicateProjectDependencyError",
    "class:DuplicateResourceNameError",
    "class:DuplicateSourcePatchNameError",
    "class:DuplicateVersionedUnversionedError",
    "class:DuplicateYamlKeyError",
    "class:EnvVarMissingError",
    "class:FailFastError",
    "class:ForeignKeyConstraintToSyntaxError",
    "class:GitCheckoutError",
    "class:GitCloningError",
    "class:GraphDependencyNotFoundError",
    "class:InlineModelConfigError",
    "class:InvalidAccessTypeError",
    "class:InvalidSelectorError",
    "class:InvalidUnitTestGivenInput",
    "class:JSONValidationError",
    "class:LoadAgateTableNotSeedError",
    "class:LoadAgateTableValueError",
    "class:MacroDispatchArgError",
    "class:MacroNamespaceNotStringError",
    "class:MacroResultAlreadyLoadedError",
    "class:MaterializtionMacroNotUsedError",
    "class:MetricArgsError",
    "class:MismatchedDependencyTypeError",
    "class:MissingRelationError",
    "class:ModelConfigError",
    "class:MultipleVersionGitDepsError",
    "class:NoAdaptersAvailableError",
    "class:NoSupportedLanguagesFoundError",
    "class:NonUniquePackageNameError",
    "class:NumberSourceArgsError",
    "class:OperationError",
    "class:OperationsCannotRefEphemeralNodesError",
    "class:OptionNotYamlDictError",
    "class:PackageNotFoundError",
    "class:PackageNotFoundForMacroError",
    "class:PackageNotInDepsError",
    "class:PackageVersionNotFoundError",
    "class:ParsingError",
    "class:PatchTargetNotFoundError",
    "class:PersistDocsValueTypeError",
    "class:ProfileConfigError",
    "class:ProjectContractBrokenError",
    "class:ProjectContractError",
    "class:PropertyYMLError",
    "class:PythonLiteralEvalError",
    "class:PythonParsingError",
    "class:RPCCompiling",
    "class:RPCFailureResult",
    "class:RPCKilledException",
    "class:RPCLoadException",
    "class:RPCTimeoutException",
    "class:RefArgsError",
    "class:RefBadContextError",
    "class:RequiredVarNotFoundError",
    "class:SameKeyNestedError",
    "class:SchemaConfigError",
    "class:SecretEnvVarLocationError",
    "class:SetStrictWrongTypeError",
    "class:SnapshopConfigError",
    "class:TagNotStringError",
    "class:TagsNotListOfStringsError",
    "class:TargetNotFoundError",
    "class:TestArgIncludesModelError",
    "class:TestArgsNotDictError",
    "class:TestConfigError",
    "class:TestDefinitionDictLengthError",
    "class:TestNameNotStringError",
    "class:TestTypeError",
    "class:UnexpectedTestNamePatternError",
    "class:UninstalledPackagesFoundError",
    "class:UnknownAsyncIDException",
    "class:UnknownGitCloningProblemError",
    "class:UnrecognizedCredentialTypeError",
    "class:YamlLoadError",
    "class:YamlParseDictError",
    "class:YamlParseListError",
    "class:ZipStrictWrongTypeError",
    "class:dbtPluginError",
    "func:__init__",
    "func:__reduce__",
    "func:__str__",
    "func:data",
    "func:get_match_string",
    "func:get_message",
    "func:get_mismatches",
    "func:message",
    "func:type",
    "func:var_secrets"
  ],
  "exchange.py_gpt4_8bef729d.py": [
    "class:Exchange",
    "func:__del__",
    "func:__init__",
    "func:_amount_to_contracts",
    "func:_build_coroutine",
    "func:_build_ohlcv_dl_jobs",
    "func:_ccxt_config",
    "func:_contracts_to_amount",
    "func:_dry_is_price_crossed",
    "func:_fetch_and_calculate_funding_fees",
    "func:_fetch_orders_emulate",
    "func:_get_funding_fees_from_exchange",
    "func:_get_params",
    "func:_get_price_side",
    "func:_get_rate_from_ob",
    "func:_get_rate_from_ticker",
    "func:_get_stake_amount_considering_leverage",
    "func:_get_stake_amount_limit",
    "func:_get_stop_limit_rate",
    "func:_get_stop_order_type",
    "func:_get_stop_params",
    "func:_get_trade_pagination_next_value",
    "func:_init_async_loop",
    "func:_init_ccxt",
    "func:_lev_prep",
    "func:_load_async_markets",
    "func:_log_exchange_response",
    "func:_now_is_time_to_refresh",
    "func:_now_is_time_to_refresh_trades",
    "func:_order_contracts_to_amount",
    "func:_order_needs_price",
    "func:_process_ohlcv_df",
    "func:_process_trades_df",
    "func:_set_leverage",
    "func:_trades_contracts_to_amount",
    "func:_valid_trade_pagination_id",
    "func:add_dry_order_fee",
    "func:additional_exchange_init",
    "func:amount_to_contract_precision",
    "func:amount_to_precision",
    "func:cache_leverage_tiers",
    "func:calculate_fee_rate",
    "func:calculate_funding_fees",
    "func:cancel_order",
    "func:cancel_order_with_result",
    "func:cancel_stoploss_order",
    "func:cancel_stoploss_order_with_result",
    "func:check_dry_limit_order_filled",
    "func:check_order_canceled_empty",
    "func:close",
    "func:combine_funding_and_mark",
    "func:create_dry_run_order",
    "func:create_order",
    "func:create_stoploss",
    "func:dry_run_liquidation_price",
    "func:exchange_has",
    "func:extract_cost_curr_rate",
    "func:features",
    "func:fetch_bids_asks",
    "func:fetch_dry_run_order",
    "func:fetch_l2_order_book",
    "func:fetch_order",
    "func:fetch_order_emulated",
    "func:fetch_order_or_stoploss_order",
    "func:fetch_orders",
    "func:fetch_positions",
    "func:fetch_stoploss_order",
    "func:fetch_ticker",
    "func:fetch_trading_fees",
    "func:fill_leverage_tiers",
    "func:funding_fee_cutoff",
    "func:get_balances",
    "func:get_contract_size",
    "func:get_conversion_rate",
    "func:get_dry_market_fill_price",
    "func:get_fee",
    "func:get_funding_fees",
    "func:get_historic_ohlcv",
    "func:get_historic_trades",
    "func:get_interest_rate",
    "func:get_leverage_tiers",
    "func:get_liquidation_price",
    "func:get_maintenance_ratio_and_amt",
    "func:get_markets",
    "func:get_max_leverage",
    "func:get_max_pair_stake_amount",
    "func:get_min_pair_stake_amount",
    "func:get_next_limit_in_list",
    "func:get_option",
    "func:get_order_id_conditional",
    "func:get_pair_base_currency",
    "func:get_pair_quote_currency",
    "func:get_precision_amount",
    "func:get_precision_price",
    "func:get_proxy_coin",
    "func:get_quote_currencies",
    "func:get_rate",
    "func:get_rates",
    "func:get_tickers",
    "func:get_trades_for_order",
    "func:get_valid_pair_combination",
    "func:id",
    "func:is_cancel_order_result_suitable",
    "func:klines",
    "func:load_cached_leverage_tiers",
    "func:load_leverage_tiers",
    "func:market_is_future",
    "func:market_is_margin",
    "func:market_is_spot",
    "func:market_is_tradable",
    "func:markets",
    "func:name",
    "func:needed_candle_for_trades_ms",
    "func:ohlcv_candle_limit",
    "func:order_has_fee",
    "func:parse_leverage_tier",
    "func:precisionMode",
    "func:precision_mode_price",
    "func:price_get_one_pip",
    "func:price_to_precision",
    "func:refresh_latest_ohlcv",
    "func:refresh_latest_trades",
    "func:refresh_ohlcv_with_cache",
    "func:reload_markets",
    "func:set_margin_mode",
    "func:stoploss_adjust",
    "func:timeframes",
    "func:trades",
    "func:validate_config",
    "func:validate_freqai",
    "func:validate_order_time_in_force",
    "func:validate_orderflow",
    "func:validate_ordertypes",
    "func:validate_pricing",
    "func:validate_required_startup_candles",
    "func:validate_stakecurrency",
    "func:validate_stop_ordertypes",
    "func:validate_timeframes",
    "func:validate_trading_mode_and_margin_mode",
    "func:ws_connection_reset"
  ],
  "expected_catalog.py_gpt4_a0db9c34.py": [
    "func:base_expected_catalog",
    "func:case",
    "func:expected_references_catalog",
    "func:no_stats"
  ],
  "experiments.py_gpt4_56dbe657.py": [
    "class:_Constraint",
    "func:__call__",
    "func:__init__",
    "func:adversarial_attack",
    "func:alldes",
    "func:aquacrop_fao",
    "func:bonnans",
    "func:causal_similarity",
    "func:ceviche",
    "func:complex_tsp",
    "func:constrained_illconditioned_parallel",
    "func:control_problem",
    "func:cv",
    "func:deceptive",
    "func:doe",
    "func:doint",
    "func:double_o_seven",
    "func:epc",
    "func:export_numpy",
    "func:f",
    "func:far_optimum_es",
    "func:fishing",
    "func:fiveshots",
    "func:fpc",
    "func:harderparallel",
    "func:hdbo4d",
    "func:hdmultimodal",
    "func:illcondi",
    "func:illcondipara",
    "func:image_multi_similarity",
    "func:image_multi_similarity_cv",
    "func:image_multi_similarity_pgan",
    "func:image_multi_similarity_pgan_cv",
    "func:image_quality",
    "func:image_quality_cv",
    "func:image_quality_cv_pgan",
    "func:image_quality_pgan",
    "func:image_quality_proxy",
    "func:image_quality_proxy_pgan",
    "func:image_similarity",
    "func:image_similarity_and_quality",
    "func:image_similarity_and_quality_cv",
    "func:image_similarity_and_quality_cv_pgan",
    "func:image_similarity_and_quality_pgan",
    "func:image_similarity_pgan",
    "func:image_single_quality",
    "func:image_single_quality_pgan",
    "func:instrum_discrete",
    "func:keras_tuning",
    "func:lowbudget",
    "func:lsgo",
    "func:make_ctr",
    "func:mixsimulator",
    "func:mlda",
    "func:mldakmeans",
    "func:mltuning",
    "func:mono_rocket",
    "func:morphing_pgan_quality",
    "func:ms_bbob",
    "func:multi_ceviche",
    "func:multi_ceviche_c0",
    "func:multi_ceviche_c0_warmstart",
    "func:multi_ceviche_c0p",
    "func:multimodal",
    "func:multiobjective_example",
    "func:multiobjective_example_hd",
    "func:multiobjective_example_many",
    "func:multiobjective_example_many_hd",
    "func:naive_seq_keras_tuning",
    "func:naive_seq_mltuning",
    "func:naive_veryseq_keras_tuning",
    "func:naivemltuning",
    "func:nano_naive_seq_mltuning",
    "func:nano_naive_veryseq_mltuning",
    "func:nano_seq_mltuning",
    "func:nano_veryseq_mltuning",
    "func:neuro_control_problem",
    "func:newdoe",
    "func:noisy",
    "func:nozp_noms_bbob",
    "func:olympus_emulators",
    "func:olympus_surfaces",
    "func:oneshot",
    "func:oneshot_mltuning",
    "func:paraalldes",
    "func:parahdbo4d",
    "func:parallel",
    "func:parallel_small_budget",
    "func:paramultimodal",
    "func:pbbob",
    "func:pbo_reduced_suite",
    "func:pbo_suite",
    "func:pbt",
    "func:pc",
    "func:photonics",
    "func:photonics2",
    "func:plot_epc",
    "func:plot_pc",
    "func:powersystems",
    "func:ranknoisy",
    "func:realworld",
    "func:reduced_yahdlbbbob",
    "func:refactor_optims",
    "func:rocket",
    "func:seq_keras_tuning",
    "func:seq_mltuning",
    "func:sequential_fastgames",
    "func:sequential_instrum_discrete",
    "func:sequential_topology_optimization",
    "func:simple_tsp",
    "func:skip_ci",
    "func:small_photonics",
    "func:small_photonics2",
    "func:smallbudget_lsgo",
    "func:spsa_benchmark",
    "func:team_cycling",
    "func:topology_optimization",
    "func:ultrasmall_photonics",
    "func:ultrasmall_photonics2",
    "func:unit_commitment",
    "func:veryseq_keras_tuning",
    "func:verysmall_photonics",
    "func:verysmall_photonics2",
    "func:yabbob",
    "func:yabigbbob",
    "func:yaboundedbbob",
    "func:yaboxbbob",
    "func:yaconstrainedbbob",
    "func:yahdbbob",
    "func:yahdlbbbob",
    "func:yahdnoisybbob",
    "func:yahdnoisysplitbbob",
    "func:yahdsplitbbob",
    "func:yamegapenbbob",
    "func:yamegapenbigbbob",
    "func:yamegapenboundedbbob",
    "func:yamegapenboxbbob",
    "func:yamegapenhdbbob",
    "func:yanoisybbob",
    "func:yanoisysplitbbob",
    "func:yaonepenbbob",
    "func:yaonepenbigbbob",
    "func:yaonepenboundedbbob",
    "func:yaonepenboxbbob",
    "func:yaonepennoisybbob",
    "func:yaonepenparabbob",
    "func:yaonepensmallbbob",
    "func:yaparabbob",
    "func:yapenbbob",
    "func:yapenboundedbbob",
    "func:yapenboxbbob",
    "func:yapennoisybbob",
    "func:yapenparabbob",
    "func:yapensmallbbob",
    "func:yasmallbbob",
    "func:yasplitbbob",
    "func:yatinybbob",
    "func:yatuningbbob",
    "func:yawidebbob",
    "func:zp_ms_bbob",
    "func:zp_pbbob"
  ],
  "export.py_gpt4_d1196801.py": [
    "class:Config",
    "class:MessagePartial",
    "func:__init__",
    "func:_get_exported_s3_record",
    "func:_save_s3_object_to_file",
    "func:add_user_profile_child_configs",
    "func:chunkify",
    "func:create_soft_link",
    "func:custom_fetch_direct_message_groups",
    "func:custom_fetch_onboarding_usermessage",
    "func:custom_fetch_realm_audit_logs_for_realm",
    "func:custom_fetch_realm_audit_logs_for_user",
    "func:custom_fetch_scheduled_messages",
    "func:custom_fetch_user_profile",
    "func:custom_fetch_user_profile_cross_realm",
    "func:do_common_export_processes",
    "func:do_export_realm",
    "func:do_export_user",
    "func:do_write_stats_file_for_realm_export",
    "func:export_analytics_tables",
    "func:export_attachment_table",
    "func:export_avatars_from_local",
    "func:export_emoji_from_local",
    "func:export_files_from_s3",
    "func:export_from_config",
    "func:export_messages_single_user",
    "func:export_migration_status",
    "func:export_partial_message_files",
    "func:export_realm_icons",
    "func:export_realm_wrapper",
    "func:export_single_user",
    "func:export_uploads_and_avatars",
    "func:export_uploads_from_local",
    "func:export_usermessages_batch",
    "func:fetch_attachment_data",
    "func:fetch_reaction_data",
    "func:fetch_usermessages",
    "func:floatify_datetime_fields",
    "func:get_analytics_config",
    "func:get_consented_user_ids",
    "func:get_emoji_path",
    "func:get_exportable_scheduled_message_ids",
    "func:get_id_list_gently_from_database",
    "func:get_ids",
    "func:get_realm_config",
    "func:get_realm_exports_serialized",
    "func:get_recipient",
    "func:get_single_user_config",
    "func:launch_user_message_subprocesses",
    "func:make_raw",
    "func:sanity_check_output",
    "func:write_data_to_file",
    "func:write_message_partials",
    "func:write_records_json_file",
    "func:write_table_data"
  ],
  "extract.py_gpt4_65e3a6aa.py": [
    "func:_check_for_non_extractables",
    "func:_expression_nodes_to_string",
    "func:_find_inputs_and_outputs",
    "func:_find_needed_output_variables",
    "func:_find_nodes",
    "func:_find_non_global_names",
    "func:_get_code_insertion_node",
    "func:_get_indentation",
    "func:_get_parent_definition",
    "func:_is_expression_with_error",
    "func:_is_name_input",
    "func:_is_node_ending_return_stmt",
    "func:_is_not_extractable_syntax",
    "func:_remove_unwanted_expression_nodes",
    "func:_replace",
    "func:_split_prefix_at",
    "func:_suite_nodes_to_string",
    "func:extract_function",
    "func:extract_variable"
  ],
  "factory.py_gpt4_53d9a29e.py": [
    "class:CLIFactory",
    "class:LargeRequestBodyFilter",
    "class:NoSuchFunctionError",
    "class:UnknownConfigFileVersion",
    "func:__init__",
    "func:_add_chalice_user_agent",
    "func:_inject_large_request_body_filter",
    "func:_validate_config_from_disk",
    "func:create_app_packager",
    "func:create_botocore_session",
    "func:create_config_obj",
    "func:create_default_deployer",
    "func:create_deletion_deployer",
    "func:create_deployment_reporter",
    "func:create_lambda_invoke_handler",
    "func:create_local_server",
    "func:create_log_retriever",
    "func:create_package_options",
    "func:create_plan_only_deployer",
    "func:create_stdin_reader",
    "func:filter",
    "func:load_chalice_app",
    "func:load_project_config"
  ],
  "fairness_metrics.py_gpt4_a21ddbc3.py": [
    "class:Independence",
    "class:Separation",
    "class:Sufficiency",
    "func:__call__",
    "func:__init__",
    "func:get_metric",
    "func:reset"
  ],
  "fairscale_fsdp_accelerator_test.py_gpt4_1b12340f.py": [
    "class:Decoder",
    "class:Encoder",
    "class:EncoderDecoderModel",
    "class:FeedForward",
    "class:TestFairScaleFsdpAccelerator",
    "func:__init__",
    "func:_dist_load_and_train",
    "func:forward",
    "func:test_distributed_loading_and_training",
    "func:tie_weights"
  ],
  "fbeta_measure_test.py_gpt4_2dbec3bd.py": [
    "class:FBetaMeasureTest",
    "func:multiple_runs",
    "func:setup_method",
    "func:test_config_errors",
    "func:test_distributed_fbeta_measure",
    "func:test_fbeta_handles_batch_size_of_one",
    "func:test_fbeta_handles_no_prediction_false_last_class",
    "func:test_fbeta_handles_no_prediction_true_all_class",
    "func:test_fbeta_handles_no_prediction_true_last_class",
    "func:test_fbeta_handles_no_prediction_true_other_class",
    "func:test_fbeta_multiclass_macro_average_metric",
    "func:test_fbeta_multiclass_metric",
    "func:test_fbeta_multiclass_micro_average_metric",
    "func:test_fbeta_multiclass_state",
    "func:test_fbeta_multiclass_with_explicit_labels",
    "func:test_fbeta_multiclass_with_macro_average",
    "func:test_fbeta_multiclass_with_mask",
    "func:test_fbeta_multiclass_with_micro_average",
    "func:test_fbeta_multiclass_with_weighted_average",
    "func:test_multiple_distributed_runs",
    "func:test_runtime_errors"
  ],
  "fbeta_multi_label_measure_test.py_gpt4_c6fb8ff8.py": [
    "class:FBetaMultiLabelMeasureTest",
    "func:multiple_runs",
    "func:setup_method",
    "func:test_config_errors",
    "func:test_distributed_fbeta_multilabel_measure",
    "func:test_fbeta_multilabel_handles_batch_size_of_one",
    "func:test_fbeta_multilabel_handles_no_prediction_false_last_class",
    "func:test_fbeta_multilabel_handles_no_prediction_true_all_class",
    "func:test_fbeta_multilabel_handles_no_prediction_true_last_class",
    "func:test_fbeta_multilabel_handles_no_prediction_true_other_class",
    "func:test_fbeta_multilabel_macro_average_metric",
    "func:test_fbeta_multilabel_metric",
    "func:test_fbeta_multilabel_micro_average_metric",
    "func:test_fbeta_multilabel_state",
    "func:test_fbeta_multilabel_with_explicit_labels",
    "func:test_fbeta_multilabel_with_macro_average",
    "func:test_fbeta_multilabel_with_mask",
    "func:test_fbeta_multilabel_with_micro_average",
    "func:test_fbeta_multilabel_with_weighted_average",
    "func:test_fbeta_multilable_with_extra_dimensions",
    "func:test_multiple_distributed_runs",
    "func:test_runtime_errors"
  ],
  "fbeta_verbose_measure_test.py_gpt4_de506267.py": [
    "class:FBetaVerboseMeasureTest",
    "func:multiple_runs",
    "func:setup_method",
    "func:test_config_errors",
    "func:test_distributed_fbeta_measure",
    "func:test_fbeta_handles_batch_size_of_one",
    "func:test_fbeta_handles_no_prediction_false_last_class",
    "func:test_fbeta_handles_no_prediction_true_all_class",
    "func:test_fbeta_handles_no_prediction_true_last_class",
    "func:test_fbeta_handles_no_prediction_true_other_class",
    "func:test_fbeta_multiclass_macro_average_metric",
    "func:test_fbeta_multiclass_metric",
    "func:test_fbeta_multiclass_micro_average_metric",
    "func:test_fbeta_multiclass_state",
    "func:test_fbeta_multiclass_weighted_average_metric",
    "func:test_fbeta_multiclass_with_explicit_labels",
    "func:test_fbeta_multiclass_with_explicit_labels_macro",
    "func:test_fbeta_multiclass_with_explicit_labels_micro",
    "func:test_fbeta_multiclass_with_explicit_labels_weighted",
    "func:test_fbeta_multiclass_with_mask",
    "func:test_multiple_distributed_runs",
    "func:test_runtime_errors"
  ],
  "fields.py_gpt4_49602f5d.py": [
    "class:BooleanField",
    "class:BytesField",
    "class:CharField",
    "class:DatetimeField",
    "class:DecimalField",
    "class:FieldDescriptor",
    "class:FloatField",
    "class:IntegerField",
    "class:NumberField",
    "class:StringField",
    "func:__get__",
    "func:__init__",
    "func:__repr__",
    "func:__set__",
    "func:__set_name__",
    "func:_compile_type_expression",
    "func:_copy_descriptors",
    "func:_is_concrete_model",
    "func:_parents_path",
    "func:_prepare_type_expression",
    "func:as_dict",
    "func:clone",
    "func:field_for_type",
    "func:getattr",
    "func:ident",
    "func:lazy_coercion",
    "func:on_model_attached",
    "func:prepare_value",
    "func:related_models",
    "func:should_coerce",
    "func:to_python",
    "func:validate",
    "func:validate_all",
    "func:validation_error"
  ],
  "fields.py_gpt4_5e5b0741.py": [
    "class:ComputedFieldInfo",
    "class:FieldInfo",
    "class:ModelPrivateAttr",
    "class:_EmptyKwargs",
    "class:_FieldInfoInputs",
    "class:_FromFieldInfoInputs",
    "func:Field",
    "func:PrivateAttr",
    "func:__eq__",
    "func:__getattr__",
    "func:__init__",
    "func:__repr_args__",
    "func:__set_name__",
    "func:_collect_metadata",
    "func:_from_dataclass_field",
    "func:_wrapped_property_is_private",
    "func:apply_typevars_map",
    "func:computed_field",
    "func:dec",
    "func:default_factory_takes_validated_data",
    "func:deprecation_message",
    "func:from_annotated_attribute",
    "func:from_annotation",
    "func:from_field",
    "func:get_default",
    "func:is_required",
    "func:merge_field_infos",
    "func:rebuild_annotation"
  ],
  "fields.py_gpt4_68d2e9fc.py": [
    "class:DeferredType",
    "class:FieldInfo",
    "class:ModelField",
    "class:ModelPrivateAttr",
    "class:UndefinedType",
    "func:Field",
    "func:PrivateAttr",
    "func:__copy__",
    "func:__deepcopy__",
    "func:__eq__",
    "func:__init__",
    "func:__reduce__",
    "func:__repr__",
    "func:__repr_args__",
    "func:_apply_validators",
    "func:_create_sub_type",
    "func:_get_field_info",
    "func:_get_mapping_value",
    "func:_set_default_and_type",
    "func:_type_analysis",
    "func:_type_display",
    "func:_validate",
    "func:_validate_discriminated_union",
    "func:_validate_iterable",
    "func:_validate_mapping_like",
    "func:_validate_sequence_like",
    "func:_validate_singleton",
    "func:_validate_tuple",
    "func:alt_alias",
    "func:get_constraints",
    "func:get_default",
    "func:infer",
    "func:is_complex",
    "func:is_finalvar_with_default_val",
    "func:populate_validators",
    "func:prepare",
    "func:prepare_discriminated_union_sub_fields",
    "func:set_config",
    "func:update_from_config",
    "func:validate"
  ],
  "file_name.py_gpt4_3fa33654.py": [
    "class:PathName",
    "func:_add_os_path_join",
    "func:_add_strings",
    "func:_get_string_additions",
    "func:check",
    "func:complete_file_name",
    "func:iterate_nodes"
  ],
  "files.py_gpt4_18460f97.py": [
    "class:BaseSourceFile",
    "class:FilePath",
    "class:FixtureSourceFile",
    "class:ParseFileType",
    "class:RemoteFile",
    "class:SchemaSourceFile",
    "class:SourceFile",
    "func:__init__",
    "func:__post_serialize__",
    "func:_deserialize",
    "func:_serialize",
    "func:absolute_path",
    "func:add_env_var",
    "func:add_metrics_from_measures",
    "func:add_node",
    "func:add_test",
    "func:add_unit_test",
    "func:add_unrendered_config",
    "func:add_unrendered_database",
    "func:add_unrendered_schema",
    "func:append_patch",
    "func:big_seed",
    "func:delete_from_env_vars",
    "func:delete_from_unrendered_configs",
    "func:dict_from_yaml",
    "func:file_id",
    "func:fix_metrics_from_measures",
    "func:full_path",
    "func:get_all_test_ids",
    "func:get_key_and_name_for_test",
    "func:get_tests",
    "func:get_unrendered_config",
    "func:get_unrendered_database",
    "func:get_unrendered_schema",
    "func:macro_patches",
    "func:modification_time",
    "func:node_patches",
    "func:original_file_path",
    "func:relative_path",
    "func:remote",
    "func:remove_tests",
    "func:search_key",
    "func:searched_path",
    "func:seed_too_large",
    "func:source_patches"
  ],
  "files.py_gpt4_7265589e.py": [
    "func:_cached_resolve",
    "func:_load_toml",
    "func:_path_is_ignored",
    "func:best_effort_relative_path",
    "func:find_project_root",
    "func:find_pyproject_toml",
    "func:find_user_pyproject_toml",
    "func:gen_python_files",
    "func:get_gitignore",
    "func:infer_target_version",
    "func:parse_pyproject_toml",
    "func:parse_req_python_specifier",
    "func:parse_req_python_version",
    "func:path_is_excluded",
    "func:resolves_outside_root_or_cannot_stat",
    "func:strip_specifier_set",
    "func:wrap_stream_for_windows"
  ],
  "filters.py_gpt4_ab9e6ca6.py": [
    "class:AbstractFilter",
    "class:AnonymousFunctionExecutionFilter",
    "class:AttributeOverwrite",
    "class:DictFilter",
    "class:FilterWrapper",
    "class:FunctionExecutionFilter",
    "class:GlobalNameFilter",
    "class:LazyAttributeOverwrite",
    "class:MergedFilter",
    "class:ParserTreeFilter",
    "class:SpecialMethodFilter",
    "class:SpecialMethodName",
    "class:_AbstractUsedNamesFilter",
    "class:_AttributeOverwriteMixin",
    "class:_BuiltinMappedMethod",
    "class:_FunctionExecutionFilter",
    "class:_OverwriteMeta",
    "func:__init__",
    "func:__repr__",
    "func:_check_flows",
    "func:_convert",
    "func:_convert_names",
    "func:_convert_param",
    "func:_filter",
    "func:_get_definition_names",
    "func:_is_name_reachable",
    "func:decorator",
    "func:get",
    "func:get_filters",
    "func:infer",
    "func:publish_method",
    "func:py__call__",
    "func:values",
    "func:wrap_names",
    "func:yielder"
  ],
  "find_learning_rate.py_gpt4_5b4e5b17.py": [
    "class:FindLearningRate",
    "func:_save_plot",
    "func:_smooth",
    "func:add_subparser",
    "func:find_learning_rate_from_args",
    "func:find_learning_rate_model",
    "func:search_learning_rate"
  ],
  "flows.py_gpt4_41bb28b6.py": [
    "class:Flow",
    "class:FlowDecorator",
    "class:FlowStateHook",
    "func:__call__",
    "func:__get__",
    "func:__init__",
    "func:_base_placeholder",
    "func:_display_serve_start_message",
    "func:_entrypoint_definition_and_source",
    "func:_raise_on_name_with_banned_characters",
    "func:_sanitize_and_load_flow",
    "func:from_source",
    "func:is_entrypoint_async",
    "func:ismethod",
    "func:load_flow_arguments_from_entrypoint",
    "func:load_flow_from_entrypoint",
    "func:load_function_and_convert_to_flow",
    "func:load_placeholder_flow",
    "func:on_cancellation",
    "func:on_completion",
    "func:on_crashed",
    "func:on_failure",
    "func:on_running",
    "func:resolve_block_reference",
    "func:safe_load_flow_from_entrypoint",
    "func:select_flow",
    "func:serialize_parameters",
    "func:serve",
    "func:sync_placeholder_flow",
    "func:to_deployment",
    "func:validate_parameters",
    "func:with_options"
  ],
  "fmtonoff.py_gpt4_2a9a416c.py": [
    "func:example",
    "func:func_no_args",
    "func:function_signature_stress_test",
    "func:import_as_names",
    "func:long_lines",
    "func:off_and_on_without_data",
    "func:on_and_off_broken",
    "func:single_literal_yapf_disable",
    "func:spaces",
    "func:spaces2",
    "func:spaces_types",
    "func:subscriptlist",
    "func:testlist_star_expr",
    "func:yield_expr"
  ],
  "format.py_gpt4_80a9d557.py": [
    "class:DataFrameFormatter",
    "class:DataFrameRenderer",
    "class:EngFormatter",
    "class:FloatArrayFormatter",
    "class:SeriesFormatter",
    "class:_Datetime64Formatter",
    "class:_Datetime64TZFormatter",
    "class:_ExtensionArrayFormatter",
    "class:_GenericArrayFormatter",
    "class:_IntArrayFormatter",
    "class:_Timedelta64Formatter",
    "func:__call__",
    "func:__init__",
    "func:_adjust_max_rows",
    "func:_calc_max_cols_fitted",
    "func:_calc_max_rows_fitted",
    "func:_chk_truncate",
    "func:_format",
    "func:_format_datetime64",
    "func:_format_datetime64_dateonly",
    "func:_format_strings",
    "func:_formatter",
    "func:_get_buffer",
    "func:_get_column_name_list",
    "func:_get_footer",
    "func:_get_formatted_column_labels",
    "func:_get_formatted_index",
    "func:_get_formatted_values",
    "func:_get_formatter",
    "func:_get_number_of_auxiliary_rows",
    "func:_get_strcols_without_index",
    "func:_has_names",
    "func:_initialize_colspace",
    "func:_initialize_columns",
    "func:_initialize_formatters",
    "func:_initialize_justify",
    "func:_initialize_sparsify",
    "func:_is_in_terminal",
    "func:_is_screen_narrow",
    "func:_is_screen_short",
    "func:_make_fixed_width",
    "func:_trim_zeros_complex",
    "func:_trim_zeros_float",
    "func:_trim_zeros_single_float",
    "func:_truncate_horizontally",
    "func:_truncate_vertically",
    "func:_value_formatter",
    "func:base_formatter",
    "func:buffer_put_lines",
    "func:decimal_formatter",
    "func:dimensions_info",
    "func:format_array",
    "func:format_col",
    "func:format_complex_with_na_rep",
    "func:format_percentiles",
    "func:format_values_with",
    "func:format_with_na_rep",
    "func:formatter",
    "func:get_dataframe_repr_params",
    "func:get_format_datetime64",
    "func:get_format_timedelta64",
    "func:get_level_lengths",
    "func:get_precision",
    "func:get_result",
    "func:get_result_as_array",
    "func:get_series_repr_params",
    "func:get_strcols",
    "func:has_column_names",
    "func:has_index_names",
    "func:is_number_with_decimal",
    "func:is_truncated",
    "func:is_truncated_horizontally",
    "func:is_truncated_vertically",
    "func:just",
    "func:max_rows_displayed",
    "func:save_to_buffer",
    "func:set_eng_float_format",
    "func:should_show_dimensions",
    "func:should_trim",
    "func:show_col_idx_names",
    "func:show_row_idx_names",
    "func:to_csv",
    "func:to_html",
    "func:to_string",
    "func:truncate"
  ],
  "formdata.py_gpt4_c529f9fe.py": [
    "class:FormData",
    "func:__call__",
    "func:__init__",
    "func:_gen_form_data",
    "func:_gen_form_urlencoded",
    "func:add_field",
    "func:add_fields",
    "func:is_multipart"
  ],
  "forwarder.py_gpt4_46b0ae59.py": [
    "class:Forwarder",
    "func:append_to_header",
    "func:delete",
    "func:is_in_xloop",
    "func:post_receive",
    "func:pre_receive",
    "func:status_change",
    "func:take_action"
  ],
  "frame.py_gpt4_9c7c0ae4.py": [
    "class:CachedDataFrame",
    "class:DataFrame",
    "func:__abs__",
    "func:__add__",
    "func:__array_ufunc__",
    "func:__class_getitem__",
    "func:__dir__",
    "func:__div__",
    "func:__enter__",
    "func:__eq__",
    "func:__exit__",
    "func:__floordiv__",
    "func:__ge__",
    "func:__getattr__",
    "func:__getitem__",
    "func:__gt__",
    "func:__init__",
    "func:__iter__",
    "func:__le__",
    "func:__len__",
    "func:__lt__",
    "func:__matmul__",
    "func:__mod__",
    "func:__mul__",
    "func:__ne__",
    "func:__neg__",
    "func:__pow__",
    "func:__radd__",
    "func:__rdiv__",
    "func:__repr__",
    "func:__rfloordiv__",
    "func:__rmod__",
    "func:__rmul__",
    "func:__rpow__",
    "func:__rsub__",
    "func:__rtruediv__",
    "func:__setattr__",
    "func:__setitem__",
    "func:__sub__",
    "func:__truediv__",
    "func:_apply_series_op",
    "func:_assign",
    "func:_create_tuple_for_frame_type",
    "func:_get_or_create_repr_pandas_cache",
    "func:_index_normalized_frame",
    "func:_index_normalized_label",
    "func:_internal",
    "func:_kser_for",
    "func:_ksers",
    "func:_map_series_op",
    "func:_mark_duplicates",
    "func:_reduce_for_stat_function",
    "func:_reduce_spark_multi",
    "func:_reindex_columns",
    "func:_reindex_index",
    "func:_repr_html_",
    "func:_sort",
    "func:_swaplevel_columns",
    "func:_swaplevel_index",
    "func:_to_internal_pandas",
    "func:_update_internal_frame",
    "func:add",
    "func:add_prefix",
    "func:add_suffix",
    "func:aggregate",
    "func:align",
    "func:all",
    "func:any",
    "func:append",
    "func:apply",
    "func:apply_batch",
    "func:apply_func",
    "func:apply_op",
    "func:applymap",
    "func:assign",
    "func:assign_columns",
    "func:astype",
    "func:at_time",
    "func:axes",
    "func:between_time",
    "func:cache",
    "func:calculate_columns_axis",
    "func:clip",
    "func:columns",
    "func:copy",
    "func:corr",
    "func:describe",
    "func:diff",
    "func:div",
    "func:dot",
    "func:drop",
    "func:drop_duplicates",
    "func:droplevel",
    "func:dropna",
    "func:dtypes",
    "func:duplicated",
    "func:empty",
    "func:eq",
    "func:eval",
    "func:eval_func",
    "func:explain",
    "func:explode",
    "func:extract_kv_from_spark_row",
    "func:fillna",
    "func:filter",
    "func:first",
    "func:floordiv",
    "func:from_dict",
    "func:from_records",
    "func:ge",
    "func:gen_mapper_fn",
    "func:gen_names",
    "func:gen_new_column_labels_entry",
    "func:gen_new_index_column",
    "func:get_spark_column",
    "func:gt",
    "func:head",
    "func:hint",
    "func:hist",
    "func:idxmax",
    "func:idxmin",
    "func:index",
    "func:info",
    "func:insert",
    "func:isin",
    "func:isnull",
    "func:items",
    "func:iteritems",
    "func:iterrows",
    "func:itertuples",
    "func:join",
    "func:kde",
    "func:keys",
    "func:last",
    "func:le",
    "func:lt",
    "func:mad",
    "func:map_in_pandas",
    "func:mapper_fn",
    "func:mask",
    "func:melt",
    "func:merge",
    "func:mod",
    "func:mul",
    "func:ndim",
    "func:ne",
    "func:new_getitem",
    "func:nlargest",
    "func:notnull",
    "func:nsmallest",
    "func:nunique",
    "func:op",
    "func:pandas_at_time",
    "func:pandas_between_time",
    "func:pct_change",
    "func:persist",
    "func:pivot",
    "func:pivot_table",
    "func:pop",
    "func:pow",
    "func:print_schema",
    "func:quantile",
    "func:query",
    "func:radd",
    "func:rank",
    "func:rdiv",
    "func:reindex",
    "func:reindex_like",
    "func:rename",
    "func:rename_axis",
    "func:replace",
    "func:reset_index",
    "func:resolve",
    "func:rfloordiv",
    "func:rmod",
    "func:rmul",
    "func:round",
    "func:rpow",
    "func:rsub",
    "func:rtruediv",
    "func:sample",
    "func:select_dtypes",
    "func:set_index",
    "func:shape",
    "func:shift",
    "func:sort_index",
    "func:sort_values",
    "func:spark_schema",
    "func:stack",
    "func:storage_level",
    "func:style",
    "func:sub",
    "func:swapaxes",
    "func:swaplevel",
    "func:tail",
    "func:take",
    "func:toPandas",
    "func:to_clipboard",
    "func:to_delta",
    "func:to_dict",
    "func:to_html",
    "func:to_koalas",
    "func:to_latex",
    "func:to_list",
    "func:to_orc",
    "func:to_pandas",
    "func:to_parquet",
    "func:to_records",
    "func:to_spark",
    "func:to_spark_io",
    "func:to_string",
    "func:to_table",
    "func:transform",
    "func:transform_batch",
    "func:transpose",
    "func:truediv",
    "func:unpersist",
    "func:unstack",
    "func:update",
    "func:where",
    "func:xs"
  ],
  "frame.py_gpt4_fb97c052.py": [
    "class:DataFrame",
    "func:T",
    "func:__arrow_c_stream__",
    "func:__dataframe__",
    "func:__divmod__",
    "func:__getitem__",
    "func:__init__",
    "func:__len__",
    "func:__matmul__",
    "func:__rdivmod__",
    "func:__repr__",
    "func:__rmatmul__",
    "func:__setitem__",
    "func:_align_for_op",
    "func:_append",
    "func:_arith_method",
    "func:_arith_method_with_reindex",
    "func:_arith_op",
    "func:_box_col_values",
    "func:_can_fast_transpose",
    "func:_cmp_method",
    "func:_combine_frame",
    "func:_construct_result",
    "func:_constructor",
    "func:_constructor_from_mgr",
    "func:_constructor_sliced_from_mgr",
    "func:_dict_round",
    "func:_dispatch_frame_op",
    "func:_ensure_valid_index",
    "func:_flex_arith_method",
    "func:_flex_cmp_method",
    "func:_from_arrays",
    "func:_from_nested_dict",
    "func:_get_agg_axis",
    "func:_get_column_array",
    "func:_get_data",
    "func:_get_item",
    "func:_get_value",
    "func:_get_values_for_csv",
    "func:_getitem_bool_array",
    "func:_getitem_multilevel",
    "func:_gotitem",
    "func:_info_repr",
    "func:_is_homogeneous_type",
    "func:_iset_item",
    "func:_iset_item_mgr",
    "func:_iset_not_inplace",
    "func:_iter_column_arrays",
    "func:_ixs",
    "func:_maybe_align_series_as_frame",
    "func:_reduce",
    "func:_reduce_axis1",
    "func:_reindex_for_setitem",
    "func:_reindex_multi",
    "func:_replace_columnwise",
    "func:_repr_fits_horizontal_",
    "func:_repr_fits_vertical_",
    "func:_repr_html_",
    "func:_sanitize_column",
    "func:_series",
    "func:_series_round",
    "func:_set_item",
    "func:_set_item_frame_value",
    "func:_set_item_mgr",
    "func:_set_value",
    "func:_setitem_array",
    "func:_setitem_frame",
    "func:_setitem_slice",
    "func:_should_reindex_frame_op",
    "func:_to_dict_of_blocks",
    "func:_values",
    "func:add",
    "func:aggregate",
    "func:all",
    "func:any",
    "func:apply",
    "func:assign",
    "func:axes",
    "func:blk_func",
    "func:c",
    "func:check_int_infer_dtype",
    "func:combine",
    "func:combine_first",
    "func:combiner",
    "func:compare",
    "func:corr",
    "func:corrwith",
    "func:count",
    "func:cov",
    "func:create_index",
    "func:cummax",
    "func:cummin",
    "func:cumprod",
    "func:cumsum",
    "func:diff",
    "func:dot",
    "func:drop",
    "func:drop_duplicates",
    "func:dropna",
    "func:dtype_predicate",
    "func:duplicated",
    "func:eq",
    "func:eval",
    "func:explode",
    "func:f",
    "func:floordiv",
    "func:from_dict",
    "func:from_records",
    "func:func",
    "func:ge",
    "func:groupby",
    "func:gt",
    "func:idxmax",
    "func:idxmin",
    "func:igetitem",
    "func:infer",
    "func:info",
    "func:insert",
    "func:isetitem",
    "func:isin",
    "func:isin_",
    "func:isna",
    "func:isnull",
    "func:items",
    "func:iterrows",
    "func:itertuples",
    "func:join",
    "func:kurt",
    "func:le",
    "func:lt",
    "func:map",
    "func:max",
    "func:maybe_reorder",
    "func:mean",
    "func:median",
    "func:melt",
    "func:memory_usage",
    "func:merge",
    "func:min",
    "func:mod",
    "func:mode",
    "func:mul",
    "func:ne",
    "func:nlargest",
    "func:notna",
    "func:notnull",
    "func:nsmallest",
    "func:nunique",
    "func:pivot",
    "func:pivot_table",
    "func:pop",
    "func:pow",
    "func:predicate",
    "func:prod",
    "func:quantile",
    "func:query",
    "func:radd",
    "func:reindex",
    "func:rename",
    "func:reorder_levels",
    "func:reset_index",
    "func:rfloordiv",
    "func:rmod",
    "func:rmul",
    "func:round",
    "func:rpow",
    "func:rsub",
    "func:rtruediv",
    "func:select_dtypes",
    "func:sem",
    "func:set_axis",
    "func:set_index",
    "func:shape",
    "func:shift",
    "func:skew",
    "func:sort_index",
    "func:sort_values",
    "func:stack",
    "func:std",
    "func:style",
    "func:sub",
    "func:sum",
    "func:swaplevel",
    "func:to_dict",
    "func:to_feather",
    "func:to_html",
    "func:to_markdown",
    "func:to_numpy",
    "func:to_orc",
    "func:to_parquet",
    "func:to_period",
    "func:to_records",
    "func:to_series",
    "func:to_stata",
    "func:to_string",
    "func:to_timestamp",
    "func:to_xml",
    "func:transform",
    "func:transpose",
    "func:truediv",
    "func:unstack",
    "func:update",
    "func:value_counts",
    "func:values",
    "func:var"
  ],
  "freqtradebot.py_gpt4_fb85bc29.py": [
    "class:FreqtradeBot",
    "func:__init__",
    "func:_check_and_execute_exit",
    "func:_check_depth_of_market",
    "func:_notify_enter",
    "func:_notify_enter_cancel",
    "func:_notify_exit",
    "func:_notify_exit_cancel",
    "func:_refresh_active_whitelist",
    "func:_safe_exit_amount",
    "func:_trades_valid_for_fee",
    "func:_update_trade_after_fill",
    "func:apply_fee_conditional",
    "func:cancel_all_open_orders",
    "func:cancel_open_orders_of_trade",
    "func:cancel_stoploss_on_exchange",
    "func:check_and_call_adjust_trade_position",
    "func:check_for_open_trades",
    "func:cleanup",
    "func:create_stoploss_order",
    "func:create_trade",
    "func:emergency_exit",
    "func:enter_positions",
    "func:execute_entry",
    "func:execute_trade_exit",
    "func:exit_positions",
    "func:fee_detection_from_trades",
    "func:get_free_open_trades",
    "func:get_real_amount",
    "func:get_valid_enter_price_and_stake",
    "func:get_valid_price",
    "func:handle_cancel_enter",
    "func:handle_cancel_exit",
    "func:handle_cancel_order",
    "func:handle_insufficient_funds",
    "func:handle_onexchange_order",
    "func:handle_order_fee",
    "func:handle_protections",
    "func:handle_similar_open_order",
    "func:handle_stoploss_on_exchange",
    "func:handle_trade",
    "func:handle_trailing_stoploss_on_exchange",
    "func:log_took_too_long",
    "func:manage_open_orders",
    "func:manage_trade_stoploss_orders",
    "func:notify_status",
    "func:order_close_notify",
    "func:order_obj_or_raise",
    "func:process",
    "func:process_open_trade_positions",
    "func:process_stopped",
    "func:replace_order",
    "func:replace_order_failed",
    "func:startup",
    "func:startup_backpopulate_precision",
    "func:startup_update_open_orders",
    "func:update",
    "func:update_all_liquidation_prices",
    "func:update_funding_fees",
    "func:update_trade_state",
    "func:update_trades_without_assigned_fees"
  ],
  "freshness.py_gpt4_c430dfa0.py": [
    "class:FreshnessRunner",
    "class:FreshnessSelector",
    "class:FreshnessTask",
    "func:__init__",
    "func:_build_run_result",
    "func:after_execute",
    "func:before_execute",
    "func:before_run",
    "func:compile",
    "func:error_result",
    "func:execute",
    "func:from_run_result",
    "func:get_freshness_metadata_cache",
    "func:get_hooks_by_type",
    "func:get_node_selector",
    "func:get_result",
    "func:get_runner",
    "func:get_runner_type",
    "func:node_is_match",
    "func:on_skip",
    "func:populate_metadata_freshness_cache",
    "func:raise_on_first_error",
    "func:result_path",
    "func:set_metadata_freshness_cache",
    "func:task_end_messages"
  ],
  "from_params.py_gpt4_a2a891b9.py": [
    "class:FromParams",
    "func:_to_params",
    "func:can_construct_from_params",
    "func:construct_arg",
    "func:create_extras",
    "func:create_kwargs",
    "func:from_params",
    "func:infer_constructor_params",
    "func:infer_method_params",
    "func:is_base_registrable",
    "func:pop_and_construct_arg",
    "func:remove_optional",
    "func:replace_object_with_params",
    "func:takes_arg",
    "func:takes_kwargs",
    "func:to_params"
  ],
  "from_params_test.py_gpt4_9292ca91.py": [
    "class:A",
    "class:B",
    "class:B1",
    "class:B2",
    "class:Bar",
    "class:Base",
    "class:BaseClass",
    "class:BaseClass2",
    "class:Baz",
    "class:C",
    "class:ConstructedObject",
    "class:D",
    "class:E",
    "class:F",
    "class:FloatInt",
    "class:Foo",
    "class:IntFloat",
    "class:MyClass",
    "class:NestedClass",
    "class:SomeClass",
    "class:TestFromParams",
    "class:TestLoader",
    "class:Testing",
    "class:WrapperClass",
    "func:__eq__",
    "func:__hash__",
    "func:__init__",
    "func:bar",
    "func:bare_function",
    "func:check_param",
    "func:from_params",
    "func:from_partial_objects",
    "func:set_total",
    "func:test_bare_string_params",
    "func:test_crazy_nested_union",
    "func:test_create_kwargs",
    "func:test_dict",
    "func:test_dict_not_params",
    "func:test_explicit_kwargs_always_passed_to_constructor",
    "func:test_extra_parameters_are_not_allowed_when_there_is_no_constructor",
    "func:test_extras",
    "func:test_extras_for_custom_classes",
    "func:test_from_params",
    "func:test_from_params_base_class_kwargs_crashes_if_params_not_handled",
    "func:test_from_params_child_has_kwargs_base_implicit_constructor",
    "func:test_from_params_does_not_pass_extras_to_non_from_params_registered_class",
    "func:test_from_params_handles_base_class_kwargs",
    "func:test_from_params_handles_kwargs_in_non_from_params_registered_class",
    "func:test_from_params_has_args",
    "func:test_from_params_raises_error_on_wrong_parameter_name_in_optional_union",
    "func:test_good_error_message_when_passing_non_params",
    "func:test_invalid_type_conversions",
    "func:test_iterable",
    "func:test_kwargs_are_passed_to_deeper_superclasses",
    "func:test_kwargs_are_passed_to_superclass",
    "func:test_kwargs_with_multiple_inheritance",
    "func:test_lazy_and_from_params_can_be_pickled",
    "func:test_lazy_construction_can_happen_multiple_times",
    "func:test_list",
    "func:test_mapping",
    "func:test_no_constructor",
    "func:test_only_infer_superclass_params_if_unknown",
    "func:test_optional_vs_required_lazy_objects",
    "func:test_raises_when_there_are_no_implementations",
    "func:test_remove_optional",
    "func:test_set",
    "func:test_takes_arg",
    "func:test_transferring_of_modules",
    "func:test_transferring_of_modules_ensures_type_consistency",
    "func:test_tuple",
    "func:test_union",
    "func:test_union_of_castable_types"
  ],
  "funcdef_return_type_trailing_comma.py_gpt4_9d900532.py": [
    "func:SimplePyFn",
    "func:a",
    "func:aaaaaaaaaaaaaaaaa",
    "func:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "func:foo",
    "func:thiiiiiiiiiiiiiiiiiis_iiiiiiiiiiiiiiiiiiiiiiiiiiiiiis_veeeeeeeeeeeeeeeeeeeeeeery_looooooong"
  ],
  "function.py_gpt4_0038d4cd.py": [
    "class:AnonymousFunctionExecution",
    "class:BaseFunctionExecutionContext",
    "class:FunctionAndClassBase",
    "class:FunctionExecutionContext",
    "class:FunctionMixin",
    "class:FunctionNameInClass",
    "class:FunctionValue",
    "class:LambdaName",
    "class:MethodValue",
    "class:OverloadedFunctionValue",
    "func:__init__",
    "func:_as_context",
    "func:_find_overload_functions",
    "func:_get_yield_lazy_value",
    "func:_is_overload_decorated",
    "func:create",
    "func:from_context",
    "func:get_default_param_context",
    "func:get_defining_qualified_value",
    "func:get_filters",
    "func:get_param_names",
    "func:get_qualified_names",
    "func:get_return_values",
    "func:get_signature_functions",
    "func:get_signatures",
    "func:get_type_hint",
    "func:get_yield_lazy_values",
    "func:infer",
    "func:infer_annotations",
    "func:is_function",
    "func:is_generator",
    "func:merge_yield_values",
    "func:name",
    "func:param_name_to_str",
    "func:py__call__",
    "func:py__class__",
    "func:py__get__",
    "func:py__name__",
    "func:start_pos"
  ],
  "function.py_gpt4_6a4281c5.py": [
    "func:__await__",
    "func:example",
    "func:f",
    "func:func_no_args",
    "func:function_signature_stress_test",
    "func:long_lines",
    "func:spaces",
    "func:spaces2",
    "func:spaces_types",
    "func:trailing_comma"
  ],
  "functionlib.py_gpt4_9ac1b2ed.py": [
    "class:ArtificialFunction",
    "class:ArtificialVariable",
    "class:FarOptimumFunction",
    "func:__init__",
    "func:_initialize",
    "func:_monofunc",
    "func:_multifunc",
    "func:_noisy_call",
    "func:_short_repr",
    "func:_transform",
    "func:compute_pseudotime",
    "func:dimension",
    "func:evaluation_function",
    "func:function_from_transform",
    "func:itercases",
    "func:list_sorted_function_names",
    "func:noisy_function",
    "func:process"
  ],
  "functions.py_gpt4_02c2585e.py": [
    "class:ImplicitNSInfo",
    "func:__init__",
    "func:_find_module",
    "func:_find_module_py33",
    "func:_from_loader",
    "func:_get_init_path",
    "func:_get_source",
    "func:_iter_module_names",
    "func:_test_print",
    "func:_test_raise_error",
    "func:_zip_list_subdirectory",
    "func:create_simple_object",
    "func:get_builtin_module_names",
    "func:get_compiled_method_return",
    "func:get_module_info",
    "func:get_sys_path",
    "func:iter_module_names",
    "func:load_module",
    "func:safe_literal_eval"
  ],
  "gallery.py_gpt4_281bac21.py": [
    "class:BlackVersion",
    "func:black_runner",
    "func:download_and_extract",
    "func:download_and_extract_top_packages",
    "func:format_repo_with_version",
    "func:format_repos",
    "func:get_archive_manager",
    "func:get_first_archive_member",
    "func:get_package",
    "func:get_package_source",
    "func:get_pypi_download_url",
    "func:get_top_packages",
    "func:git_add_and_commit",
    "func:git_create_repository",
    "func:git_switch_branch",
    "func:init_repos",
    "func:main"
  ],
  "gated_cnn_encoder.py_gpt4_3d4edbef.py": [
    "class:GatedCnnEncoder",
    "class:ResidualBlock",
    "func:__init__",
    "func:forward",
    "func:get_input_dim",
    "func:get_output_dim",
    "func:is_bidirectional"
  ],
  "generate.py_gpt4_cae18f75.py": [
    "class:Catalog",
    "class:GenerateTask",
    "func:__init__",
    "func:_get_nodes_from_ids",
    "func:_get_selected_source_ids",
    "func:add_column",
    "func:build_catalog_table",
    "func:format_stats",
    "func:get_catalog_results",
    "func:get_node_selector",
    "func:get_stripped_prefix",
    "func:get_table",
    "func:get_unique_id_mapping",
    "func:interpret_results",
    "func:make_unique_id_map",
    "func:mapping_key",
    "func:run"
  ],
  "generic.py_gpt4_4b81d00f.py": [
    "class:DataFrameGroupBy",
    "class:NamedAgg",
    "class:SeriesGroupBy",
    "func:__getitem__",
    "func:_aggregate_frame",
    "func:_aggregate_multiple_funcs",
    "func:_apply_to_column_groupbys",
    "func:_choose_path",
    "func:_cython_transform",
    "func:_define_paths",
    "func:_get_data_to_aggregate",
    "func:_gotitem",
    "func:_python_agg_general",
    "func:_transform_general",
    "func:_wrap_agged_manager",
    "func:_wrap_applied_output",
    "func:_wrap_applied_output_series",
    "func:_wrap_transform_general_frame",
    "func:aggregate",
    "func:alt",
    "func:apply",
    "func:arr_func",
    "func:build_codes",
    "func:corr",
    "func:corrwith",
    "func:cov",
    "func:describe",
    "func:dtype",
    "func:filter",
    "func:hist",
    "func:idxmax",
    "func:idxmin",
    "func:is_monotonic_decreasing",
    "func:is_monotonic_increasing",
    "func:kurt",
    "func:nlargest",
    "func:nsmallest",
    "func:nunique",
    "func:plot",
    "func:skew",
    "func:take",
    "func:transform",
    "func:true_and_notna",
    "func:unique",
    "func:value_counts"
  ],
  "generic.py_gpt4_c1cad31c.py": [
    "class:Frame",
    "func:__bool__",
    "func:__getitem__",
    "func:_apply_series_op",
    "func:_count_expr",
    "func:_internal",
    "func:_reduce_for_stat_function",
    "func:_to_internal_pandas",
    "func:abs",
    "func:at",
    "func:bfill",
    "func:bool",
    "func:copy",
    "func:count",
    "func:cummax",
    "func:cummin",
    "func:cumprod",
    "func:cumsum",
    "func:dtypes",
    "func:expanding",
    "func:ffill",
    "func:fillna",
    "func:first_valid_index",
    "func:get",
    "func:get_dtype_counts",
    "func:groupby",
    "func:head",
    "func:iat",
    "func:iloc",
    "func:index",
    "func:kurtosis",
    "func:last_valid_index",
    "func:loc",
    "func:max",
    "func:mean",
    "func:median",
    "func:min",
    "func:pipe",
    "func:prod",
    "func:product",
    "func:rolling",
    "func:sem",
    "func:size",
    "func:skew",
    "func:squeeze",
    "func:std",
    "func:sum",
    "func:to_csv",
    "func:to_excel",
    "func:to_json",
    "func:to_markdown",
    "func:to_numpy",
    "func:to_pandas",
    "func:truncate",
    "func:values",
    "func:var"
  ],
  "generic.py_gpt4_ee18657c.py": [
    "class:NDFrame",
    "func:__abs__",
    "func:__array__",
    "func:__array_ufunc__",
    "func:__bool__",
    "func:__contains__",
    "func:__copy__",
    "func:__deepcopy__",
    "func:__delitem__",
    "func:__finalize__",
    "func:__getattr__",
    "func:__getitem__",
    "func:__getstate__",
    "func:__iadd__",
    "func:__iand__",
    "func:__ifloordiv__",
    "func:__imod__",
    "func:__imul__",
    "func:__init__",
    "func:__invert__",
    "func:__ior__",
    "func:__ipow__",
    "func:__isub__",
    "func:__iter__",
    "func:__itruediv__",
    "func:__ixor__",
    "func:__len__",
    "func:__neg__",
    "func:__pos__",
    "func:__repr__",
    "func:__round__",
    "func:__setattr__",
    "func:__setstate__",
    "func:_accum_func",
    "func:_align_frame",
    "func:_align_series",
    "func:_check_copy_deprecation",
    "func:_check_inplace_and_allows_duplicate_labels",
    "func:_check_label_or_level_ambiguity",
    "func:_clip_with_one_bound",
    "func:_clip_with_scalar",
    "func:_consolidate",
    "func:_consolidate_inplace",
    "func:_construct_axes_dict",
    "func:_constructor",
    "func:_dir_additions",
    "func:_drop_axis",
    "func:_drop_labels_or_levels",
    "func:_find_valid_index",
    "func:_from_mgr",
    "func:_get_axis",
    "func:_get_axis_name",
    "func:_get_axis_number",
    "func:_get_axis_resolvers",
    "func:_get_block_manager_axis",
    "func:_get_bool_data",
    "func:_get_cleaned_column_resolvers",
    "func:_get_index_resolvers",
    "func:_get_label_or_level_values",
    "func:_get_numeric_data",
    "func:_getitem_slice",
    "func:_indexed_same",
    "func:_info_axis",
    "func:_init_mgr",
    "func:_inplace_method",
    "func:_is_label_or_level_reference",
    "func:_is_label_reference",
    "func:_is_level_reference",
    "func:_is_mixed_type",
    "func:_logical_func",
    "func:_min_count_stat_function",
    "func:_needs_reindex_multi",
    "func:_pad_or_backfill",
    "func:_reindex_axes",
    "func:_reindex_multi",
    "func:_reindex_with_indexers",
    "func:_rename",
    "func:_repr_data_resource_",
    "func:_repr_latex_",
    "func:_set_axis",
    "func:_set_axis_name",
    "func:_set_axis_nocheck",
    "func:_shift_with_freq",
    "func:_slice",
    "func:_stat_function",
    "func:_stat_function_ddof",
    "func:_to_latex_via_styler",
    "func:_tz_convert",
    "func:_tz_localize",
    "func:_update_inplace",
    "func:_validate_dtype",
    "func:_values",
    "func:_where",
    "func:_wrap",
    "func:abs",
    "func:add_prefix",
    "func:add_suffix",
    "func:align",
    "func:all",
    "func:any",
    "func:asfreq",
    "func:asof",
    "func:astype",
    "func:at_time",
    "func:attrs",
    "func:axes",
    "func:between_time",
    "func:bfill",
    "func:blk_func",
    "func:block_accum_func",
    "func:clip",
    "func:compare",
    "func:convert_dtypes",
    "func:copy",
    "func:cummax",
    "func:cummin",
    "func:cumprod",
    "func:cumsum",
    "func:describe",
    "func:drop",
    "func:droplevel",
    "func:dtypes",
    "func:empty",
    "func:equals",
    "func:ewm",
    "func:expanding",
    "func:f",
    "func:ffill",
    "func:fillna",
    "func:filter",
    "func:first_valid_index",
    "func:flags",
    "func:get",
    "func:head",
    "func:infer_objects",
    "func:interpolate",
    "func:isna",
    "func:isnull",
    "func:items",
    "func:keys",
    "func:kurt",
    "func:last_valid_index",
    "func:make_doc",
    "func:mask",
    "func:max",
    "func:mean",
    "func:median",
    "func:min",
    "func:ndim",
    "func:notna",
    "func:notnull",
    "func:pct_change",
    "func:pipe",
    "func:pop",
    "func:prod",
    "func:rank",
    "func:ranker",
    "func:reindex",
    "func:reindex_like",
    "func:rename_axis",
    "func:replace",
    "func:resample",
    "func:rolling",
    "func:sample",
    "func:sem",
    "func:set_axis",
    "func:set_flags",
    "func:shape",
    "func:shift",
    "func:size",
    "func:skew",
    "func:sort_index",
    "func:sort_values",
    "func:squeeze",
    "func:std",
    "func:sum",
    "func:tail",
    "func:take",
    "func:to_clipboard",
    "func:to_csv",
    "func:to_excel",
    "func:to_hdf",
    "func:to_json",
    "func:to_latex",
    "func:to_pickle",
    "func:to_sql",
    "func:to_xarray",
    "func:truncate",
    "func:tz_convert",
    "func:tz_localize",
    "func:values",
    "func:var",
    "func:where",
    "func:xs"
  ],
  "generic_test_builders.py_gpt4_dbe9f303.py": [
    "class:TestBuilder",
    "func:__init__",
    "func:_bad_type",
    "func:_process_legacy_args",
    "func:_render_values",
    "func:build_model_str",
    "func:build_raw_code",
    "func:construct_config",
    "func:extract_test_args",
    "func:get_synthetic_test_names",
    "func:macro_name",
    "func:synthesize_generic_test_names",
    "func:tags"
  ],
  "git.py_gpt4_08af83e3.py": [
    "func:_checkout",
    "func:_is_commit",
    "func:checkout",
    "func:clone",
    "func:clone_and_checkout",
    "func:get_current_sha",
    "func:list_tags",
    "func:remove_remote"
  ],
  "git.py_gpt4_af760608.py": [
    "class:GitPackageMixin",
    "class:GitPinnedPackage",
    "class:GitUnpinnedPackage",
    "func:__init__",
    "func:_checkout",
    "func:_fetch_metadata",
    "func:all_names",
    "func:from_contract",
    "func:get_subdirectory",
    "func:get_version",
    "func:incorporate",
    "func:install",
    "func:md5sum",
    "func:name",
    "func:nice_version_name",
    "func:resolved",
    "func:source_type",
    "func:to_dict"
  ],
  "git.py_gpt4_e0829e70.py": [
    "func:get_all_committers",
    "func:get_assignee_string",
    "func:get_commits_comment_action_message",
    "func:get_commits_content",
    "func:get_create_branch_event_message",
    "func:get_force_push_commits_event_message",
    "func:get_issue_event_message",
    "func:get_issue_labeled_or_unlabeled_event_message",
    "func:get_issue_milestoned_or_demilestoned_event_message",
    "func:get_pull_request_event_message",
    "func:get_push_commits_event_message",
    "func:get_push_tag_event_message",
    "func:get_release_event_message",
    "func:get_remove_branch_event_message",
    "func:get_short_sha"
  ],
  "gradient_descent_trainer.py_gpt4_a4969319.py": [
    "class:GradientDescentTrainer",
    "func:__init__",
    "func:_finalize_best_model_state",
    "func:_finalize_model",
    "func:_load_model_state",
    "func:_maybe_restore_checkpoint",
    "func:_pytorch_model",
    "func:_save_model_state",
    "func:_train_epoch",
    "func:_try_train",
    "func:_validation_loss",
    "func:batch_outputs",
    "func:clip_gradient",
    "func:from_partial_objects",
    "func:get_best_weights_path",
    "func:get_checkpoint_state",
    "func:rescale_gradients",
    "func:train"
  ],
  "grammar.py_gpt4_81ed9788.py": [
    "class:Grammar",
    "class:PythonGrammar",
    "func:__init__",
    "func:__repr__",
    "func:_get_normalizer",
    "func:_get_normalizer_issues",
    "func:_get_token_namespace",
    "func:_normalize",
    "func:_tokenize",
    "func:_tokenize_lines",
    "func:iter_errors",
    "func:load_grammar",
    "func:parse",
    "func:refactor"
  ],
  "groupby.py_gpt4_6ea92bf9.py": [
    "class:BaseGroupBy",
    "class:GroupBy",
    "class:GroupByPlot",
    "func:__call__",
    "func:__getattr__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:_agg_general",
    "func:_agg_py_fallback",
    "func:_aggregate_with_numba",
    "func:_apply_filter",
    "func:_concat_objects",
    "func:_cumcount_array",
    "func:_cython_agg_general",
    "func:_cython_transform",
    "func:_dir_additions",
    "func:_fill",
    "func:_get_index",
    "func:_get_indices",
    "func:_idxmax_idxmin",
    "func:_insert_inaxis_grouper",
    "func:_insert_quantile_level",
    "func:_mask_selected_obj",
    "func:_nth",
    "func:_numba_agg_general",
    "func:_numba_prep",
    "func:_obj_1d_constructor",
    "func:_op_via_apply",
    "func:_python_apply_general",
    "func:_reduction_kernel_transform",
    "func:_selected_obj",
    "func:_set_result_index_ordered",
    "func:_transform",
    "func:_transform_with_numba",
    "func:_value_counts",
    "func:_wrap_aggregated_output",
    "func:_wrap_applied_output",
    "func:_wrap_idxmax_idxmin",
    "func:_wrap_transform_fast_result",
    "func:all",
    "func:any",
    "func:apply",
    "func:array_func",
    "func:attr",
    "func:bfill",
    "func:blk_func",
    "func:count",
    "func:cumcount",
    "func:cummax",
    "func:cummin",
    "func:cumprod",
    "func:cumsum",
    "func:curried",
    "func:describe",
    "func:diff",
    "func:ewm",
    "func:expanding",
    "func:f",
    "func:ffill",
    "func:first",
    "func:first_compat",
    "func:get_converter",
    "func:get_group",
    "func:get_groupby",
    "func:groups",
    "func:head",
    "func:hfunc",
    "func:indices",
    "func:last",
    "func:last_compat",
    "func:max",
    "func:mean",
    "func:median",
    "func:min",
    "func:ngroup",
    "func:ngroups",
    "func:nth",
    "func:ohlc",
    "func:pct_change",
    "func:pipe",
    "func:post_processor",
    "func:pre_processor",
    "func:prod",
    "func:quantile",
    "func:rank",
    "func:resample",
    "func:rolling",
    "func:sample",
    "func:sem",
    "func:shift",
    "func:size",
    "func:std",
    "func:sum",
    "func:tail",
    "func:var"
  ],
  "gymexperiments.py_gpt4_116f21de.py": [
    "func:big_gym_multi",
    "func:conformant_gp",
    "func:conformant_ng_full_gym",
    "func:conformant_planning",
    "func:deterministic_gym_multi",
    "func:gp",
    "func:gym_budget_modifier",
    "func:gym_multifid_anm",
    "func:gym_optimizer_modifier",
    "func:gym_problem",
    "func:gym_problem_modifier",
    "func:multi_ng_full_gym",
    "func:multi_structured_ng_full_gym",
    "func:neuro_planning",
    "func:ng_full_gym",
    "func:ng_gym",
    "func:ng_stacking_gym",
    "func:small_deterministic_gym_multi",
    "func:sparse_gp",
    "func:tiny_deterministic_gym_multi"
  ],
  "headers.py_gpt4_3581e504.py": [
    "func:compute_gas_limit",
    "func:compute_gas_limit_bounds",
    "func:eth_now",
    "func:fill_header_params_from_parent",
    "func:new_timestamp_from_parent"
  ],
  "headers.py_gpt4_a1534da1.py": [
    "class:BlockHeader",
    "class:MiningHeader",
    "func:__init__",
    "func:__str__",
    "func:base_fee_per_gas",
    "func:blob_gas_used",
    "func:excess_blob_gas",
    "func:hash",
    "func:hex_hash",
    "func:is_genesis",
    "func:mining_hash",
    "func:parent_beacon_block_root",
    "func:withdrawals_root"
  ],
  "heartbeat.py_gpt4_3d4f9698.py": [
    "class:Heartbeat",
    "class:HeartbeatStatus",
    "func:__init__",
    "func:__repr__",
    "func:count",
    "func:create",
    "func:delete",
    "func:find_all",
    "func:find_all_by_status",
    "func:find_by_id",
    "func:from_db",
    "func:from_document",
    "func:from_record",
    "func:parse",
    "func:serialize",
    "func:status"
  ],
  "helpers.py_gpt4_95f79f11.py": [
    "class:CallDetails",
    "class:EndMarkerReached",
    "class:OnErrorLeaf",
    "func:__init__",
    "func:_fuzzy_match",
    "func:_get_code",
    "func:_get_code_for_stack",
    "func:_get_index_and_key",
    "func:_get_signature_details_from_error_node",
    "func:_iter_arguments",
    "func:_list_arguments",
    "func:_start_match",
    "func:cache_signatures",
    "func:calculate_index",
    "func:count_positional_arguments",
    "func:def_ref_filter",
    "func:error_leaf",
    "func:filter_follow_imports",
    "func:get_module_names",
    "func:get_on_completion_name",
    "func:get_signature_details",
    "func:get_stack_at_position",
    "func:index",
    "func:infer",
    "func:is_module_scope_name",
    "func:iter_used_keyword_arguments",
    "func:keyword_name_str",
    "func:match",
    "func:remove_after_pos",
    "func:sorted_definitions",
    "func:split_search_string",
    "func:tokenize_without_endmarker",
    "func:validate_line_column",
    "func:wrapper"
  ],
  "helpers.py_gpt4_ad3722ad.py": [
    "class:AppKey",
    "class:BaseTimerContext",
    "class:BasicAuth",
    "class:ChainMapProxy",
    "class:CookieMixin",
    "class:ETag",
    "class:ErrorableProtocol",
    "class:HeadersMixin",
    "class:MimeType",
    "class:ProxyInfo",
    "class:TimeoutHandle",
    "class:TimerContext",
    "class:TimerNoop",
    "func:__bool__",
    "func:__call__",
    "func:__contains__",
    "func:__enter__",
    "func:__exit__",
    "func:__getitem__",
    "func:__init__",
    "func:__init_subclass__",
    "func:__iter__",
    "func:__len__",
    "func:__lt__",
    "func:__new__",
    "func:__repr__",
    "func:_parse_content_type",
    "func:_weakref_handle",
    "func:assert_timeout",
    "func:basicauth_from_netrc",
    "func:calculate_timeout_when",
    "func:call_later",
    "func:ceil_timeout",
    "func:charset",
    "func:close",
    "func:content_disposition_header",
    "func:content_length",
    "func:content_type",
    "func:cookies",
    "func:decode",
    "func:del_cookie",
    "func:encode",
    "func:from_url",
    "func:get",
    "func:get_env_proxy_for_url",
    "func:guess_filename",
    "func:is_expected_content_type",
    "func:is_ip_address",
    "func:must_be_empty_body",
    "func:netrc_from_env",
    "func:parse_http_date",
    "func:parse_mimetype",
    "func:populate_with_cookies",
    "func:proxies_from_env",
    "func:quoted_string",
    "func:register",
    "func:rfc822_formatted_time",
    "func:set_cookie",
    "func:set_exception",
    "func:set_result",
    "func:should_remove_content_length",
    "func:start",
    "func:strip_auth_from_url",
    "func:timeout",
    "func:timer",
    "func:validate_etag_value",
    "func:weakref_handle"
  ],
  "helpers.py_gpt4_c8399573.py": [
    "class:AuditMixinNullable",
    "class:CertificationMixin",
    "class:ExploreMixin",
    "class:ExtraJSONMixin",
    "class:ImportExportMixin",
    "class:QueryResult",
    "class:QueryStringExtended",
    "class:SqlaQuery",
    "class:UUIDMixin",
    "func:__init__",
    "func:_apply_cte",
    "func:_get_series_orderby",
    "func:_get_top_groups",
    "func:_normalize_prequery_result_type",
    "func:_process_sql_expression",
    "func:_unique_constraints",
    "func:_user",
    "func:adhoc_column_to_sqla",
    "func:adhoc_metric_to_sqla",
    "func:alter_params",
    "func:always_filter_main_dttm",
    "func:assign_column_label",
    "func:cache_timeout",
    "func:catalog",
    "func:certification_details",
    "func:certified_by",
    "func:changed_by_",
    "func:changed_by_fk",
    "func:changed_by_name",
    "func:changed_on_",
    "func:changed_on_delta_humanized",
    "func:changed_on_dttm",
    "func:changed_on_humanized",
    "func:changed_on_utc",
    "func:clone_model",
    "func:column_names",
    "func:columns",
    "func:convert_tbl_column_to_sqla_col",
    "func:convert_uuids",
    "func:copy",
    "func:created_by_fk",
    "func:created_by_name",
    "func:created_on_delta_humanized",
    "func:created_on_humanized",
    "func:creator",
    "func:database",
    "func:database_id",
    "func:db_engine_spec",
    "func:db_extra",
    "func:dttm_cols",
    "func:dttm_sql_literal",
    "func:ensure_extra_json_is_not_none",
    "func:exc_query",
    "func:export_schema",
    "func:export_to_dict",
    "func:extra",
    "func:filter_values_handler",
    "func:formatter",
    "func:get_extra_cache_keys",
    "func:get_extra_dict",
    "func:get_fetch_values_predicate",
    "func:get_from_clause",
    "func:get_query_str",
    "func:get_query_str_extended",
    "func:get_rendered_sql",
    "func:get_sqla_query",
    "func:get_sqla_row_level_filters",
    "func:get_template_processor",
    "func:get_time_filter",
    "func:get_timestamp_expression",
    "func:handle_single_value",
    "func:import_from_dict",
    "func:is_alias_used_in_orderby",
    "func:is_certified",
    "func:is_rls_supported",
    "func:json_to_dict",
    "func:main_dttm_col",
    "func:make_orderby_compatible",
    "func:make_sqla_column_compatible",
    "func:metrics",
    "func:modified",
    "func:offset",
    "func:override",
    "func:owners_data",
    "func:params_dict",
    "func:parent_foreign_key_mappings",
    "func:query",
    "func:remove_params",
    "func:reset_ownership",
    "func:schema",
    "func:set_extra_json_key",
    "func:short_uuid",
    "func:sql",
    "func:template_params_dict",
    "func:text",
    "func:type",
    "func:uid",
    "func:validate_adhoc_subquery",
    "func:values_for_column",
    "func:warning_markdown"
  ],
  "hist.py_gpt4_971ebb25.py": [
    "class:HistPlot",
    "class:KdePlot",
    "func:__init__",
    "func:_adjust_bins",
    "func:_calculate_bins",
    "func:_get_column_weights",
    "func:_get_ind",
    "func:_grouped_hist",
    "func:_grouped_plot",
    "func:_kind",
    "func:_make_plot",
    "func:_make_plot_keywords",
    "func:_plot",
    "func:_post_plot_logic",
    "func:hist_frame",
    "func:hist_series",
    "func:orientation",
    "func:plot_group"
  ],
  "history_utils.py_gpt4_5189a5e1.py": [
    "func:_download_pair_history",
    "func:_download_trades_history",
    "func:_load_cached_data_for_updating",
    "func:download_data",
    "func:download_data_main",
    "func:get_timerange",
    "func:load_data",
    "func:load_pair_history",
    "func:refresh_backtest_ohlcv_data",
    "func:refresh_backtest_trades_data",
    "func:refresh_data",
    "func:validate_backtest_data"
  ],
  "hotflip.py_gpt4_89300a50.py": [
    "class:Hotflip",
    "func:__init__",
    "func:_construct_embedding_matrix",
    "func:_first_order_taylor",
    "func:_make_embedder_input",
    "func:attack_from_json",
    "func:attack_instance",
    "func:initialize"
  ],
  "html.py_gpt4_1065c3b5.py": [
    "class:_BeautifulSoupHtml5LibFrameParser",
    "class:_HtmlFrameParser",
    "class:_LxmlFrameParser",
    "func:__init__",
    "func:_attr_getter",
    "func:_build_doc",
    "func:_build_xpath_expr",
    "func:_data_to_frame",
    "func:_equals_tag",
    "func:_expand_colspan_rowspan",
    "func:_expand_elements",
    "func:_get_skiprows",
    "func:_handle_hidden_tables",
    "func:_href_getter",
    "func:_parse",
    "func:_parse_tables",
    "func:_parse_tbody_tr",
    "func:_parse_td",
    "func:_parse_tfoot_tr",
    "func:_parse_thead_tbody_tfoot",
    "func:_parse_thead_tr",
    "func:_parser_dispatch",
    "func:_print_as_set",
    "func:_read",
    "func:_remove_whitespace",
    "func:_setup_build_doc",
    "func:_text_getter",
    "func:_validate_flavor",
    "func:parse_tables",
    "func:read_html",
    "func:row_is_all_th"
  ],
  "http.py_gpt4_98a64c7a.py": [
    "class:HTTPExecutor",
    "class:JSONRPCExecutor",
    "class:TimeoutHTTPAdapter",
    "func:__init__",
    "func:_send_request",
    "func:_validate_response",
    "func:after_start_check",
    "func:kill",
    "func:running",
    "func:send",
    "func:split_endpoint",
    "func:start",
    "func:stop",
    "func:wait_for"
  ],
  "http_models.py_gpt4_cc140ed5.py": [
    "class:AsyncResponse",
    "class:PreparedRequest",
    "class:Request",
    "class:RequestEncodingMixin",
    "class:RequestHooksMixin",
    "class:Response",
    "func:__enter__",
    "func:__exit__",
    "func:__getstate__",
    "func:__init__",
    "func:__iter__",
    "func:__repr__",
    "func:__setstate__",
    "func:_encode_files",
    "func:_encode_params",
    "func:_get_idna_encoded_host",
    "func:apparent_encoding",
    "func:close",
    "func:content",
    "func:copy",
    "func:deregister_hook",
    "func:generate",
    "func:is_permanent_redirect",
    "func:is_redirect",
    "func:iter_content",
    "func:iter_lines",
    "func:json",
    "func:links",
    "func:next",
    "func:ok",
    "func:path_url",
    "func:prepare",
    "func:prepare_auth",
    "func:prepare_body",
    "func:prepare_content_length",
    "func:prepare_cookies",
    "func:prepare_headers",
    "func:prepare_hooks",
    "func:prepare_method",
    "func:prepare_url",
    "func:raise_for_status",
    "func:register_hook",
    "func:send",
    "func:text",
    "func:uri"
  ],
  "http_parser.py_gpt4_b7839247.py": [
    "class:ChunkState",
    "class:DeflateBuffer",
    "class:HeadersParser",
    "class:HttpParser",
    "class:HttpPayloadParser",
    "class:HttpRequestParser",
    "class:HttpResponseParser",
    "class:ParseState",
    "class:RawRequestMessage",
    "class:RawResponseMessage",
    "func:__init__",
    "func:_is_chunked_te",
    "func:_is_supported_upgrade",
    "func:begin_http_chunk_receiving",
    "func:end_http_chunk_receiving",
    "func:feed_data",
    "func:feed_eof",
    "func:get_content_length",
    "func:parse_headers",
    "func:parse_message",
    "func:set_exception",
    "func:set_upgraded"
  ],
  "http_sessions.py_gpt4_83f5c553.py": [
    "class:AsyncHTTPSession",
    "class:HTTPSession",
    "class:SessionRedirectMixin",
    "func:__enter__",
    "func:__exit__",
    "func:__getstate__",
    "func:__init__",
    "func:__setstate__",
    "func:close",
    "func:get",
    "func:get_adapter",
    "func:get_redirect_target",
    "func:head",
    "func:merge_environment_settings",
    "func:merge_hooks",
    "func:merge_setting",
    "func:mount",
    "func:prepare_request",
    "func:rebuild_auth",
    "func:rebuild_method",
    "func:rebuild_proxies",
    "func:request",
    "func:resolve_redirects",
    "func:send"
  ],
  "http_writer.py_gpt4_59117046.py": [
    "class:HttpVersion",
    "class:StreamWriter",
    "func:__init__",
    "func:_py_serialize_headers",
    "func:_safe_header",
    "func:_write",
    "func:_writelines",
    "func:enable_chunking",
    "func:enable_compression",
    "func:protocol",
    "func:set_eof",
    "func:transport"
  ],
  "httpclient.py_gpt4_76d1a39b.py": [
    "class:AsyncHTTPClient",
    "class:HTTPClient",
    "class:HTTPClientError",
    "class:HTTPRequest",
    "class:HTTPResponse",
    "class:_RequestProxy",
    "func:__del__",
    "func:__getattr__",
    "func:__init__",
    "func:__new__",
    "func:__repr__",
    "func:__str__",
    "func:_async_clients",
    "func:body",
    "func:close",
    "func:configurable_base",
    "func:configurable_default",
    "func:configure",
    "func:fetch",
    "func:fetch_impl",
    "func:handle_response",
    "func:headers",
    "func:initialize",
    "func:main",
    "func:rethrow"
  ],
  "httpserver.py_gpt4_064c87b3.py": [
    "class:HTTPServer",
    "class:_CallableAdapter",
    "class:_HTTPRequestContext",
    "class:_ProxyAdapter",
    "func:__init__",
    "func:__str__",
    "func:_apply_xheaders",
    "func:_cleanup",
    "func:_unapply_xheaders",
    "func:configurable_base",
    "func:configurable_default",
    "func:data_received",
    "func:finish",
    "func:handle_stream",
    "func:headers_received",
    "func:initialize",
    "func:on_close",
    "func:on_connection_close",
    "func:start_request"
  ],
  "httputil.py_gpt4_f381cad3.py": [
    "class:HTTPConnection",
    "class:HTTPFile",
    "class:HTTPHeaders",
    "class:HTTPInputError",
    "class:HTTPMessageDelegate",
    "class:HTTPOutputError",
    "class:HTTPServerConnectionDelegate",
    "class:HTTPServerRequest",
    "class:RequestStartLine",
    "class:ResponseStartLine",
    "func:__delitem__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:__setitem__",
    "func:__str__",
    "func:_encode_header",
    "func:_get_content_range",
    "func:_int_or_none",
    "func:_normalize_header",
    "func:_parse_body",
    "func:_parse_header",
    "func:_parse_request_range",
    "func:_parseparam",
    "func:_unquote_cookie",
    "func:_unquote_replace",
    "func:add",
    "func:cookies",
    "func:copy",
    "func:data_received",
    "func:doctests",
    "func:encode_username_password",
    "func:finish",
    "func:format_timestamp",
    "func:full_url",
    "func:get_all",
    "func:get_list",
    "func:get_ssl_certificate",
    "func:headers_received",
    "func:on_close",
    "func:on_connection_close",
    "func:parse",
    "func:parse_body_arguments",
    "func:parse_cookie",
    "func:parse_line",
    "func:parse_multipart_form_data",
    "func:parse_request_start_line",
    "func:parse_response_start_line",
    "func:qs_to_qsl",
    "func:request_time",
    "func:split_host_and_port",
    "func:start_request",
    "func:url_concat",
    "func:write",
    "func:write_headers"
  ],
  "humidifier.py_gpt4_0cbe9187.py": [
    "class:GenericHygrostat",
    "func:__init__",
    "func:_async_switch_changed",
    "func:_async_switch_event",
    "func:_is_device_active",
    "func:_time_period_or_none",
    "func:available",
    "func:available_modes",
    "func:current_humidity",
    "func:device_class",
    "func:extra_state_attributes",
    "func:is_on",
    "func:max_humidity",
    "func:min_humidity",
    "func:mode",
    "func:name",
    "func:target_humidity"
  ],
  "image_loader.py_gpt4_e007d9e1.py": [
    "class:ImageLoader",
    "class:TorchImageLoader",
    "func:__call__",
    "func:__init__",
    "func:_pack_image_list",
    "func:load"
  ],
  "import_util.py_gpt4_1732c302.py": [
    "class:GetUsers",
    "class:SubscriberHandler",
    "func:__call__",
    "func:__init__",
    "func:build_attachment",
    "func:build_avatar",
    "func:build_defaultstream",
    "func:build_direct_message_group",
    "func:build_direct_message_group_subscriptions",
    "func:build_message",
    "func:build_personal_subscriptions",
    "func:build_realm",
    "func:build_realm_emoji",
    "func:build_recipient",
    "func:build_recipients",
    "func:build_stream",
    "func:build_stream_subscriptions",
    "func:build_subscription",
    "func:build_user_message",
    "func:build_user_profile",
    "func:build_usermessages",
    "func:build_zerver_realm",
    "func:create_converted_data_files",
    "func:get_avatar",
    "func:get_emojis",
    "func:get_uploads",
    "func:get_users",
    "func:long_term_idle_helper",
    "func:make_subscriber_map",
    "func:make_user_messages",
    "func:process_avatars",
    "func:process_emojis",
    "func:process_uploads",
    "func:run_parallel_wrapper",
    "func:set_info",
    "func:validate_user_emails_for_import",
    "func:wrapping_function"
  ],
  "imports.py_gpt4_95ae2396.py": [
    "class:Importer",
    "class:ModuleCache",
    "func:__init__",
    "func:_add_error",
    "func:_get_module_names",
    "func:_level_to_base_import_path",
    "func:_load_builtin_module",
    "func:_load_python_module",
    "func:_prepare_infer_import",
    "func:_str_import_path",
    "func:_sys_path_with_modifications",
    "func:add",
    "func:completion_names",
    "func:follow",
    "func:follow_error_node_imports_if_possible",
    "func:get",
    "func:goto_import",
    "func:import_module",
    "func:import_module_by_names",
    "func:infer_import",
    "func:iter_module_names",
    "func:load_module_from_path",
    "func:load_namespace_from_path"
  ],
  "inference.py_gpt4_11291039.py": [
    "class:BadTranslatorInput",
    "class:IndexedTranslation",
    "class:IndexedTranslatorInput",
    "class:NBestTranslations",
    "class:Translation",
    "class:Translator",
    "class:TranslatorInput",
    "class:TranslatorOutput",
    "func:__init__",
    "func:__len__",
    "func:__str__",
    "func:_assemble_translation",
    "func:_bad_input",
    "func:_concat_nbest_translations",
    "func:_concat_translations",
    "func:_expand_nbest_translation",
    "func:_get_best_translations",
    "func:_get_best_word_indices_for_kth_hypotheses",
    "func:_get_inference_input",
    "func:_get_translation_tokens_and_factors",
    "func:_make_result",
    "func:_reduce_nbest_translations",
    "func:_remove_target_prefix_tokens",
    "func:_translate_batch",
    "func:_translate_np",
    "func:_unshift_target_factors",
    "func:chunks",
    "func:empty_translation",
    "func:eop_id",
    "func:get_max_input_output_length",
    "func:get_max_output_length",
    "func:get_source_prefix_tokens",
    "func:get_target_prefix_factors",
    "func:get_target_prefix_tokens",
    "func:json",
    "func:make_input_from_dict",
    "func:make_input_from_factored_string",
    "func:make_input_from_json_string",
    "func:make_input_from_multiple_strings",
    "func:make_input_from_plain_string",
    "func:max_batch_size",
    "func:max_input_length",
    "func:models_max_input_output_length",
    "func:num_factors",
    "func:num_source_factors",
    "func:num_source_prefix_tokens",
    "func:num_target_factors",
    "func:num_target_prefix_factors",
    "func:num_target_prefix_tokens",
    "func:translate",
    "func:with_eos"
  ],
  "influence_interpreter.py_gpt4_c61f4344.py": [
    "class:InfluenceInterpreter",
    "class:InstanceInfluence",
    "class:InstanceWithGrads",
    "class:InterpretOutput",
    "func:__init__",
    "func:_calculate_influence_scores",
    "func:_gather_instances",
    "func:_gather_train_instances_and_compute_gradients",
    "func:from_archive",
    "func:from_path",
    "func:interpret",
    "func:interpret_from_file",
    "func:interpret_instances",
    "func:train_instances",
    "func:used_param_names",
    "func:used_params"
  ],
  "input_reduction.py_gpt4_3f881361.py": [
    "class:InputReduction",
    "func:__init__",
    "func:_attack_instance",
    "func:_get_ner_tags_and_mask",
    "func:_remove_one_token",
    "func:attack_from_json",
    "func:get_length"
  ],
  "instaloader.py_gpt4_fe952413.py": [
    "class:Instaloader",
    "class:_ArbitraryItemFormatter",
    "class:_PostPathFormatter",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__prepare_filename",
    "func:_all_already_downloaded",
    "func:_already_downloaded",
    "func:_elliptify",
    "func:_error_raiser",
    "func:_get_config_dir",
    "func:_get_id_filename",
    "func:_postcomment_asdict",
    "func:_postcommentanswer_asdict",
    "func:_requires_login",
    "func:_retry_on_connection_error",
    "func:_userid_chunks",
    "func:anonymous_copy",
    "func:call",
    "func:check_profile_id",
    "func:close",
    "func:download_feed_posts",
    "func:download_hashtag",
    "func:download_hashtag_profilepic",
    "func:download_highlight_cover",
    "func:download_highlights",
    "func:download_igtv",
    "func:download_location",
    "func:download_pic",
    "func:download_post",
    "func:download_profile",
    "func:download_profilepic",
    "func:download_profilepic_if_new",
    "func:download_profiles",
    "func:download_reels",
    "func:download_saved_posts",
    "func:download_stories",
    "func:download_storyitem",
    "func:download_tagged",
    "func:download_title_pic",
    "func:format_field",
    "func:format_filename",
    "func:format_filename_within_target_path",
    "func:format_string_contains_key",
    "func:get_default_session_filename",
    "func:get_default_stamps_filename",
    "func:get_explore_posts",
    "func:get_feed_posts",
    "func:get_filename",
    "func:get_hashtag_posts",
    "func:get_highlights",
    "func:get_legacy_session_filename",
    "func:get_location_posts",
    "func:get_new_comments",
    "func:get_stories",
    "func:get_unique_comments",
    "func:get_value",
    "func:has_stored_errors",
    "func:interactive_login",
    "func:load_profile_id",
    "func:load_session",
    "func:load_session_from_file",
    "func:login",
    "func:posts_download_loop",
    "func:sanitize_path",
    "func:save_caption",
    "func:save_comments",
    "func:save_location",
    "func:save_metadata_json",
    "func:save_profile_id",
    "func:save_session",
    "func:save_session_to_file",
    "func:test_login",
    "func:two_factor_login",
    "func:update_comments"
  ],
  "instance.py_gpt4_866bad63.py": [
    "class:AbstractInstanceValue",
    "class:AnonymousInstance",
    "class:AnonymousMethodExecutionContext",
    "class:AnonymousMethodExecutionFilter",
    "class:BoundMethod",
    "class:CompiledBoundMethod",
    "class:CompiledInstance",
    "class:CompiledInstanceClassFilter",
    "class:CompiledInstanceName",
    "class:InstanceArguments",
    "class:InstanceClassFilter",
    "class:InstanceExecutedParamName",
    "class:LazyInstanceClassName",
    "class:MethodExecutionContext",
    "class:SelfAttributeFilter",
    "class:SelfName",
    "class:TreeInstance",
    "class:_BaseTreeInstance",
    "func:__init__",
    "func:__repr__",
    "func:_as_context",
    "func:_check_flows",
    "func:_convert",
    "func:_convert_names",
    "func:_convert_param",
    "func:_filter",
    "func:_filter_self_names",
    "func:_get_annotated_class_object",
    "func:_get_arguments",
    "func:_is_in_right_scope",
    "func:array_type",
    "func:create_instance_context",
    "func:execute_function_slots",
    "func:get",
    "func:get_annotated_class_object",
    "func:get_defining_qualified_value",
    "func:get_filters",
    "func:get_function_slot_names",
    "func:get_key_values",
    "func:get_param_names",
    "func:get_qualified_names",
    "func:get_signature_functions",
    "func:get_signatures",
    "func:get_type_hint",
    "func:infer",
    "func:is_bound_method",
    "func:is_instance",
    "func:is_stub",
    "func:iterate",
    "func:matches_signature",
    "func:name",
    "func:parent_context",
    "func:py__bool__",
    "func:py__call__",
    "func:py__class__",
    "func:py__get__",
    "func:py__getattribute__alternatives",
    "func:py__getitem__",
    "func:py__iter__",
    "func:py__next__",
    "func:py__simple_getitem__",
    "func:unpack",
    "func:values"
  ],
  "integrations.py_gpt4_b64115f4.py": [
    "class:BaseScreenshotConfig",
    "class:BotIntegration",
    "class:EmbeddedBotIntegration",
    "class:HubotIntegration",
    "class:Integration",
    "class:ScreenshotConfig",
    "class:WebhookIntegration",
    "func:__init__",
    "func:get_all_event_types_for_integration",
    "func:get_bot_avatar_path",
    "func:get_fixture_and_image_paths",
    "func:get_function",
    "func:get_logo_path",
    "func:get_logo_url",
    "func:get_translated_categories",
    "func:is_enabled",
    "func:split_fixture_path",
    "func:url_object",
    "func:view"
  ],
  "interface.py_gpt4_85bbe479.py": [
    "class:DummyClass",
    "class:IStrategy",
    "func:__informative_pairs_freqai",
    "func:__init__",
    "func:_adjust_trade_position_internal",
    "func:_analyze_ticker_internal",
    "func:_if_enabled_populate_trades",
    "func:adjust_entry_price",
    "func:adjust_trade_position",
    "func:advise_all_indicators",
    "func:advise_entry",
    "func:advise_exit",
    "func:advise_indicators",
    "func:analyze",
    "func:analyze_pair",
    "func:analyze_ticker",
    "func:assert_df",
    "func:bot_loop_start",
    "func:bot_start",
    "func:check_buy_timeout",
    "func:check_entry_timeout",
    "func:check_exit_timeout",
    "func:check_sell_timeout",
    "func:confirm_trade_entry",
    "func:confirm_trade_exit",
    "func:custom_entry_price",
    "func:custom_exit",
    "func:custom_exit_price",
    "func:custom_sell",
    "func:custom_stake_amount",
    "func:custom_stoploss",
    "func:feature_engineering_expand_all",
    "func:feature_engineering_expand_basic",
    "func:feature_engineering_standard",
    "func:ft_advise_signals",
    "func:ft_bot_cleanup",
    "func:ft_bot_start",
    "func:ft_check_timed_out",
    "func:ft_stoploss_adjust",
    "func:ft_stoploss_reached",
    "func:gather_informative_pairs",
    "func:get_entry_signal",
    "func:get_exit_signal",
    "func:get_latest_candle",
    "func:get_strategy_name",
    "func:ignore_expired_candle",
    "func:informative_pairs",
    "func:is_pair_locked",
    "func:leverage",
    "func:load_freqAI_model",
    "func:lock_pair",
    "func:min_roi_reached",
    "func:min_roi_reached_entry",
    "func:order_filled",
    "func:populate_any_indicators",
    "func:populate_buy_trend",
    "func:populate_entry_trend",
    "func:populate_exit_trend",
    "func:populate_indicators",
    "func:populate_sell_trend",
    "func:preserve_df",
    "func:set_freqai_targets",
    "func:should_exit",
    "func:shutdown",
    "func:start",
    "func:unlock_pair",
    "func:unlock_reason",
    "func:version"
  ],
  "isa_18_2.py_gpt4_21cb4e5b.py": [
    "class:StateMachine",
    "func:is_suppressed",
    "func:next_state",
    "func:register",
    "func:transition",
    "func:trend"
  ],
  "issue_registry.py_gpt4_0619e3d4.py": [
    "class:EventIssueRegistryUpdatedData",
    "class:IssueEntry",
    "class:IssueRegistry",
    "class:IssueRegistryStore",
    "class:IssueSeverity",
    "func:__init__",
    "func:_data_to_save",
    "func:async_create_issue",
    "func:async_delete",
    "func:async_delete_issue",
    "func:async_get",
    "func:async_get_issue",
    "func:async_get_or_create",
    "func:async_ignore",
    "func:async_ignore_issue",
    "func:create_issue",
    "func:delete_issue",
    "func:make_read_only",
    "func:to_json"
  ],
  "iterable.py_gpt4_6250a1ba.py": [
    "class:ComprehensionMixin",
    "class:DictComprehension",
    "class:DictLiteralValue",
    "class:FakeDict",
    "class:FakeList",
    "class:FakeTuple",
    "class:Generator",
    "class:GeneratorBase",
    "class:GeneratorComprehension",
    "class:IterableMixin",
    "class:ListComprehension",
    "class:MergedArray",
    "class:Sequence",
    "class:SequenceLiteralValue",
    "class:SetComprehension",
    "class:Slice",
    "class:_BaseComprehension",
    "class:_DictKeyMixin",
    "class:_DictMixin",
    "class:_FakeSequence",
    "func:__init__",
    "func:__repr__",
    "func:_cached_generics",
    "func:_dict_keys",
    "func:_dict_values",
    "func:_get_cls",
    "func:_get_comp_for_context",
    "func:_get_generics",
    "func:_get_wrapped_value",
    "func:_imitate_items",
    "func:_imitate_values",
    "func:_iter",
    "func:_iterate",
    "func:_nested",
    "func:_next",
    "func:_values",
    "func:comprehension_from_atom",
    "func:exact_key_items",
    "func:get",
    "func:get_annotated_class_object",
    "func:get_key_values",
    "func:get_mapping_item_values",
    "func:get_safe_value",
    "func:get_tree_entries",
    "func:name",
    "func:parent",
    "func:py__bool__",
    "func:py__getitem__",
    "func:py__iter__",
    "func:py__len__",
    "func:py__next__",
    "func:py__simple_getitem__",
    "func:py__stop_iteration_returns",
    "func:unpack_tuple_to_dict"
  ],
  "jinja.py_gpt4_8f8d2bb4.py": [
    "class:MacroGenerator",
    "class:MacroStack",
    "class:UnitTestMacroGenerator",
    "func:__call__",
    "func:__init__",
    "func:_convert_function",
    "func:add_rendered_test_kwargs",
    "func:depth",
    "func:get_rendered",
    "func:get_supported_languages",
    "func:pop",
    "func:push",
    "func:track_call",
    "func:undefined_error"
  ],
  "json-log-to-html.py_gpt4_bd8f0d73.py": [
    "func:_colorize_cache_key",
    "func:colorize_value",
    "func:filter_records",
    "func:get_time_display",
    "func:main",
    "func:nice_time_diff",
    "func:parse_log",
    "func:render",
    "func:render_fields",
    "func:replace",
    "func:rgb_color_picker",
    "func:transform_records",
    "func:truncate_logger_name"
  ],
  "json.py_gpt4_3bee49f9.py": [
    "class:JSONEncoder",
    "func:default",
    "func:dumps",
    "func:loads",
    "func:on_default",
    "func:str_to_decimal"
  ],
  "jsonserver.py_gpt4_e0d4315b.py": [
    "class:Checker",
    "class:JSONHandler",
    "class:JSONServer",
    "func:__init__",
    "func:_check",
    "func:_isprocessrunning",
    "func:collect_incoming_data",
    "func:fileno",
    "func:found_terminator",
    "func:get_logger",
    "func:handle_accept",
    "func:handle_close",
    "func:handle_command",
    "func:log_traceback",
    "func:return_back",
    "func:run",
    "func:serve_forever",
    "func:shutdown"
  ],
  "key.py_gpt4_17750007.py": [
    "class:ApiKey",
    "class:ApiKeyStatus",
    "func:__init__",
    "func:__repr__",
    "func:count",
    "func:create",
    "func:delete",
    "func:find_all",
    "func:find_by_id",
    "func:find_by_user",
    "func:from_db",
    "func:from_document",
    "func:from_record",
    "func:parse",
    "func:serialize",
    "func:status",
    "func:type",
    "func:update",
    "func:verify_key"
  ],
  "klass.py_gpt4_e0e79924.py": [
    "class:ClassFilter",
    "class:ClassMixin",
    "class:ClassName",
    "class:ClassValue",
    "func:__init__",
    "func:_access_possible",
    "func:_as_context",
    "func:_convert_names",
    "func:_equals_origin_scope",
    "func:_filter",
    "func:_get_bases_arguments",
    "func:api_type",
    "func:define_generics",
    "func:get_filters",
    "func:get_metaclass_filters",
    "func:get_metaclass_signatures",
    "func:get_metaclasses",
    "func:get_signatures",
    "func:get_type_hint",
    "func:infer",
    "func:is_class",
    "func:is_class_mixin",
    "func:is_typeddict",
    "func:list_type_vars",
    "func:name",
    "func:py__bases__",
    "func:py__call__",
    "func:py__class__",
    "func:py__getitem__",
    "func:py__mro__",
    "func:py__name__",
    "func:remap_type_vars",
    "func:with_generics"
  ],
  "learning_rate_scheduler.py_gpt4_290a2bf8.py": [
    "class:ConstantLearningRateScheduler",
    "class:ConstantWithWarmupLearningRateScheduler",
    "class:CosineHardRestartsWithWarmupLearningRateScheduler",
    "class:CosineWithWarmupLearningRateScheduler",
    "class:LearningRateScheduler",
    "class:_PyTorchLearningRateSchedulerWithMetricsWrapper",
    "class:_PyTorchLearningRateSchedulerWrapper",
    "func:__init__",
    "func:get_values",
    "func:load_state_dict",
    "func:state_dict",
    "func:step"
  ],
  "legacy.py_gpt4_a4564019.py": [
    "class:AsyncSeeCallback",
    "class:Device",
    "class:DeviceScanner",
    "class:DeviceTracker",
    "class:DeviceTrackerPlatform",
    "class:SeeCallback",
    "func:__call__",
    "func:__init__",
    "func:_load_device_names_and_attributes",
    "func:_on_hass_stop",
    "func:async_setup_integration",
    "func:async_setup_scanner_platform",
    "func:async_update_stale",
    "func:entity_picture",
    "func:extra_state_attributes",
    "func:get_device_name",
    "func:get_extra_attributes",
    "func:get_gravatar_for_email",
    "func:icon",
    "func:mark_stale",
    "func:name",
    "func:remove_device_from_config",
    "func:scan_devices",
    "func:see",
    "func:stale",
    "func:state",
    "func:state_attributes",
    "func:type",
    "func:update_config"
  ],
  "legacy.py_gpt4_b246523a.py": [
    "func:_get_last_state_changes_stmt",
    "func:_get_rows_with_session",
    "func:_get_single_entity_states_stmt",
    "func:_get_states_for_entities_stmt",
    "func:_lambda_stmt_and_join_attributes",
    "func:_significant_states_stmt",
    "func:_sorted_states_to_dict",
    "func:_state_changed_during_period_stmt",
    "func:get_full_significant_states_with_session",
    "func:get_last_state_changes",
    "func:get_significant_states",
    "func:get_significant_states_with_session",
    "func:state_changes_during_period"
  ],
  "light.py_gpt4_d56e7802.py": [
    "class:DemoLight",
    "func:__init__",
    "func:available",
    "func:brightness",
    "func:color_mode",
    "func:color_temp_kelvin",
    "func:effect",
    "func:effect_list",
    "func:hs_color",
    "func:is_on",
    "func:rgbw_color",
    "func:rgbww_color",
    "func:supported_color_modes",
    "func:unique_id"
  ],
  "linegen.py_gpt4_5189a9e8.py": [
    "class:CannotSplit",
    "class:LineGenerator",
    "class:_BracketSplitComponent",
    "func:__init__",
    "func:__post_init__",
    "func:_can_add_trailing_comma",
    "func:_ensure_trailing_comma",
    "func:_first_right_hand_split",
    "func:_get_last_non_comment_leaf",
    "func:_hugging_power_ops_line_to_string",
    "func:_maybe_split_omitting_optional_parens",
    "func:_maybe_wrap_cms_in_parens",
    "func:_normalize_import_from",
    "func:_prefer_split_rhs_oop_over_rhs",
    "func:_rhs",
    "func:_safe_add_trailing_comma",
    "func:append_comments",
    "func:append_to_line",
    "func:bracket_split_build_line",
    "func:bracket_split_succeeded_or_raise",
    "func:delimiter_split",
    "func:dont_increase_indentation",
    "func:generate_trailers_to_omit",
    "func:left_hand_split",
    "func:line",
    "func:maybe_make_parens_invisible_in_atom",
    "func:normalize_invisible_parens",
    "func:remove_await_parens",
    "func:remove_with_parens",
    "func:right_hand_split",
    "func:run_transformer",
    "func:should_split_funcdef_with_rhs",
    "func:should_split_line",
    "func:split_wrapper",
    "func:standalone_comment_split",
    "func:transform_line",
    "func:visit_DEDENT",
    "func:visit_ENDMARKER",
    "func:visit_INDENT",
    "func:visit_NUMBER",
    "func:visit_SEMI",
    "func:visit_STANDALONE_COMMENT",
    "func:visit_STRING",
    "func:visit_async_stmt",
    "func:visit_atom",
    "func:visit_decorators",
    "func:visit_default",
    "func:visit_dictsetmaker",
    "func:visit_factor",
    "func:visit_fstring",
    "func:visit_funcdef",
    "func:visit_match_case",
    "func:visit_paramspec",
    "func:visit_power",
    "func:visit_simple_stmt",
    "func:visit_stmt",
    "func:visit_suite",
    "func:visit_test",
    "func:visit_tname",
    "func:visit_typeparams",
    "func:visit_typevartuple"
  ],
  "linter.py_gpt4_bb25f6eb.py": [
    "class:FakeCol",
    "class:FakeLoc",
    "class:K",
    "class:LintError",
    "class:Linter",
    "class:OffsetError",
    "class:Pep8Error",
    "class:Pep8Warning",
    "class:PythonError",
    "class:SublimeLinterReport",
    "func:__eq__",
    "func:__ge__",
    "func:__gt__",
    "func:__hash__",
    "func:__init__",
    "func:__le__",
    "func:__lt__",
    "func:__ne__",
    "func:__str__",
    "func:_handle_syntactic_error",
    "func:cmp_to_key",
    "func:error",
    "func:parse_errors",
    "func:pep8_check",
    "func:prepare_error_level",
    "func:pyflakes_check",
    "func:run_linter",
    "func:sort_errors"
  ],
  "local.py_gpt4_15035cc4.py": [
    "class:ARNMatcher",
    "class:ChaliceRequestHandler",
    "class:Clock",
    "class:CustomLocalChalice",
    "class:ForbiddenError",
    "class:HTTPServerThread",
    "class:InvalidAuthorizerError",
    "class:LambdaContext",
    "class:LambdaEventConverter",
    "class:LocalARNBuilder",
    "class:LocalChalice",
    "class:LocalDevServer",
    "class:LocalGateway",
    "class:LocalGatewayAuthorizer",
    "class:LocalGatewayException",
    "class:NotAuthorizedError",
    "class:RouteMatcher",
    "class:ThreadedHTTPServer",
    "func:__init__",
    "func:_autogen_options_headers",
    "func:_base64_pad",
    "func:_check_can_invoke_view_function",
    "func:_current_time_millis",
    "func:_decode_jwt_payload",
    "func:_generate_lambda_context",
    "func:_generate_lambda_event",
    "func:_generic_handle",
    "func:_handle_binary",
    "func:_has_user_defined_options_method",
    "func:_is_binary",
    "func:_parse_payload",
    "func:_prepare_authorizer_event",
    "func:_resource_match",
    "func:_route_for_event",
    "func:_send_error_response",
    "func:_send_headers",
    "func:_send_http_response",
    "func:_send_http_response_no_body",
    "func:_send_http_response_with_body",
    "func:_update_lambda_event",
    "func:authorize",
    "func:build_arn",
    "func:create_lambda_event",
    "func:create_local_server",
    "func:current_request",
    "func:does_any_resource_match",
    "func:get_remaining_time_in_millis",
    "func:handle_request",
    "func:handle_single_request",
    "func:match_route",
    "func:run",
    "func:serve_forever",
    "func:shutdown",
    "func:time"
  ],
  "log.py_gpt4_08a35b3f.py": [
    "class:AbstractEventLogger",
    "class:DBEventLogger",
    "class:StdOutEventLogger",
    "func:__call__",
    "func:__enter__",
    "func:__exit__",
    "func:_wrapper",
    "func:collect_request_payload",
    "func:curate_form_data",
    "func:curate_payload",
    "func:func",
    "func:get_event_logger_from_cfg_value",
    "func:get_logger_from_status",
    "func:log",
    "func:log_context",
    "func:log_this",
    "func:log_this_with_context",
    "func:log_this_with_extra_payload",
    "func:log_with_context",
    "func:wrapper"
  ],
  "log_writer.py_gpt4_6fa19710.py": [
    "class:LogWriterCallback",
    "func:__init__",
    "func:_enable_activation_logging",
    "func:_log_activation_distribution",
    "func:_log_distributions",
    "func:_log_gradient_updates",
    "func:_log_learning_rates",
    "func:_log_parameter_and_gradient_statistics",
    "func:_should_log_distributions_next_batch",
    "func:_should_log_distributions_this_batch",
    "func:_should_log_this_batch",
    "func:close",
    "func:hook",
    "func:log_batch",
    "func:log_epoch",
    "func:log_inputs",
    "func:log_scalars",
    "func:log_tensors",
    "func:on_batch",
    "func:on_end",
    "func:on_epoch",
    "func:on_start"
  ],
  "macro_resolver.py_gpt4_62fd2587.py": [
    "class:MacroResolver",
    "class:TestMacroNamespace",
    "func:__init__",
    "func:_add_macro_to",
    "func:_build_internal_packages_namespace",
    "func:_build_macros_by_name",
    "func:add_macro",
    "func:add_macros",
    "func:get_from_package",
    "func:get_macro",
    "func:get_macro_id",
    "func:recursively_get_depends_on_macros"
  ],
  "macros.py_gpt4_6497df06.py": [
    "class:MacroNamespace",
    "class:MacroNamespaceBuilder",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:_add_macro_to",
    "func:_keys",
    "func:_search_order",
    "func:add_macro",
    "func:add_macros",
    "func:build_namespace",
    "func:get_from_package"
  ],
  "main.py_gpt4_0c4e761c.py": [
    "class:BaseModel",
    "func:__class_getitem__",
    "func:__copy__",
    "func:__deepcopy__",
    "func:__delattr__",
    "func:__eq__",
    "func:__fields__",
    "func:__fields_set__",
    "func:__get_pydantic_core_schema__",
    "func:__get_pydantic_json_schema__",
    "func:__getattr__",
    "func:__getstate__",
    "func:__init__",
    "func:__init_subclass__",
    "func:__iter__",
    "func:__pydantic_init_subclass__",
    "func:__replace__",
    "func:__repr__",
    "func:__repr_args__",
    "func:__setattr__",
    "func:__setstate__",
    "func:__str__",
    "func:_calculate_keys",
    "func:_check_frozen",
    "func:_copy_and_set_values",
    "func:_get_value",
    "func:_iter",
    "func:_model_field_setattr_handler",
    "func:_setattr_handler",
    "func:construct",
    "func:copy",
    "func:create_model",
    "func:dict",
    "func:from_orm",
    "func:json",
    "func:model_computed_fields",
    "func:model_construct",
    "func:model_copy",
    "func:model_dump",
    "func:model_dump_json",
    "func:model_extra",
    "func:model_fields",
    "func:model_fields_set",
    "func:model_json_schema",
    "func:model_parametrized_name",
    "func:model_post_init",
    "func:model_rebuild",
    "func:model_validate",
    "func:model_validate_json",
    "func:model_validate_strings",
    "func:parse_file",
    "func:parse_obj",
    "func:parse_raw",
    "func:schema",
    "func:schema_json",
    "func:update_forward_refs",
    "func:validate"
  ],
  "main.py_gpt4_3f8c7064.py": [
    "class:StdoutRefactoringTool",
    "func:__init__",
    "func:diff_texts",
    "func:log_error",
    "func:main",
    "func:print_output",
    "func:warn",
    "func:write_file"
  ],
  "main.py_gpt4_b2604fb7.py": [
    "class:BaseModel",
    "class:ModelMetaclass",
    "func:__eq__",
    "func:__get_validators__",
    "func:__getstate__",
    "func:__init__",
    "func:__instancecheck__",
    "func:__iter__",
    "func:__new__",
    "func:__repr_args__",
    "func:__setattr__",
    "func:__setstate__",
    "func:__try_update_forward_refs__",
    "func:_calculate_keys",
    "func:_copy_and_set_values",
    "func:_decompose_class",
    "func:_enforce_dict_if_root",
    "func:_get_value",
    "func:_init_private_attributes",
    "func:_iter",
    "func:construct",
    "func:copy",
    "func:create_model",
    "func:dict",
    "func:from_orm",
    "func:generate_hash_function",
    "func:hash_function",
    "func:is_untouched",
    "func:json",
    "func:parse_file",
    "func:parse_obj",
    "func:parse_raw",
    "func:schema",
    "func:schema_json",
    "func:update_forward_refs",
    "func:validate",
    "func:validate_custom_root_type",
    "func:validate_model"
  ],
  "makedoc.py_gpt4_89cd5b69.py": [
    "class:MyRenderer",
    "class:RenderType",
    "class:ToC",
    "func:__init__",
    "func:add_dictlist",
    "func:add_entry",
    "func:avrold_doc",
    "func:contents",
    "func:extendsfrom",
    "func:fix_doc",
    "func:has_types",
    "func:header",
    "func:linkto",
    "func:number_headings",
    "func:render_type",
    "func:to_id",
    "func:typefmt"
  ],
  "manager.py_gpt4_7ab81e07.py": [
    "class:DatabaseCatalogSchema",
    "class:SupersetRoleListWidget",
    "class:SupersetSecurityListWidget",
    "class:SupersetSecurityManager",
    "func:__init__",
    "func:_delete_pvm_on_sqla_event",
    "func:_delete_vm_database_access",
    "func:_find_permission_on_sqla_event",
    "func:_find_view_menu_on_sqla_event",
    "func:_get_all_pvms",
    "func:_get_current_epoch_time",
    "func:_get_guest_token_jwt_audience",
    "func:_get_pvms_from_builtin_role",
    "func:_insert_pvm_on_sqla_event",
    "func:_is_accessible_to_all",
    "func:_is_admin_only",
    "func:_is_admin_pvm",
    "func:_is_alpha_only",
    "func:_is_alpha_pvm",
    "func:_is_gamma_pvm",
    "func:_is_sql_lab_only",
    "func:_is_sql_lab_pvm",
    "func:_is_user_defined_permission",
    "func:_update_dataset_catalog_schema_perm",
    "func:_update_dataset_perm",
    "func:_update_vm_database_access",
    "func:_update_vm_datasources_access",
    "func:can_access",
    "func:can_access_all_databases",
    "func:can_access_all_datasources",
    "func:can_access_all_queries",
    "func:can_access_catalog",
    "func:can_access_chart",
    "func:can_access_dashboard",
    "func:can_access_database",
    "func:can_access_datasource",
    "func:can_access_schema",
    "func:can_access_table",
    "func:clean_perms",
    "func:copy_role",
    "func:create_custom_permissions",
    "func:create_guest_access_token",
    "func:create_login_manager",
    "func:create_missing_perms",
    "func:database_after_delete",
    "func:database_after_insert",
    "func:database_after_update",
    "func:dataset_after_delete",
    "func:dataset_after_insert",
    "func:dataset_before_update",
    "func:find_roles_by_id",
    "func:freeze_value",
    "func:get_accessible_databases",
    "func:get_anonymous_user",
    "func:get_catalog_perm",
    "func:get_catalogs_accessible_by_user",
    "func:get_chart_access_error_object",
    "func:get_current_guest_user_if_guest",
    "func:get_dashboard_access_error_object",
    "func:get_database_perm",
    "func:get_dataset_perm",
    "func:get_datasource_access_error_msg",
    "func:get_datasource_access_error_object",
    "func:get_datasource_access_link",
    "func:get_datasources_accessible_by_user",
    "func:get_exclude_users_from_lists",
    "func:get_guest_rls_filters",
    "func:get_guest_rls_filters_str",
    "func:get_guest_user_from_request",
    "func:get_guest_user_from_token",
    "func:get_rls_cache_key",
    "func:get_rls_filters",
    "func:get_rls_sorted",
    "func:get_schema_perm",
    "func:get_schemas_accessible_by_user",
    "func:get_table_access_error_msg",
    "func:get_table_access_error_object",
    "func:get_table_access_link",
    "func:get_user_by_username",
    "func:get_user_datasources",
    "func:get_user_roles",
    "func:has_guest_access",
    "func:is_admin",
    "func:is_guest_user",
    "func:is_owner",
    "func:merge_perm",
    "func:merge_pv",
    "func:on_permission_after_insert",
    "func:on_permission_view_after_delete",
    "func:on_permission_view_after_insert",
    "func:on_role_after_update",
    "func:on_view_menu_after_insert",
    "func:on_view_menu_after_update",
    "func:parse_jwt_guest_token",
    "func:query_context_modified",
    "func:raise_for_access",
    "func:raise_for_ownership",
    "func:request_loader",
    "func:set_role",
    "func:sync_role_definitions",
    "func:user_view_menu_names",
    "func:validate_guest_token_resources"
  ],
  "manager_test.py_gpt4_84ad7741.py": [
    "class:ManagerTest",
    "func:setUp",
    "func:test_apply",
    "func:test_build",
    "func:test_cb_copy_all_not_enabled",
    "func:test_clone_rules",
    "func:test_commands",
    "func:test_compile_rules",
    "func:test_configure",
    "func:test_deploy",
    "func:test_destroy",
    "func:test_enqueue",
    "func:test_help",
    "func:test_live_test",
    "func:test_most_recent_manifest_found",
    "func:test_most_recent_manifest_not_found",
    "func:test_purge_queue",
    "func:test_retro_fast",
    "func:test_retro_fast_no_manifest",
    "func:test_retro_slow",
    "func:test_s3_batch_iterator",
    "func:test_s3_msg_summary"
  ],
  "manifest.py_gpt4_418043bc.py": [
    "class:AnalysisLookup",
    "class:CandidateList",
    "class:Disabled",
    "class:DisabledLookup",
    "class:DocLookup",
    "class:Locality",
    "class:MacroCandidate",
    "class:MacroManifest",
    "class:MacroMethods",
    "class:Manifest",
    "class:ManifestStateCheck",
    "class:MaterializationCandidate",
    "class:MetricLookup",
    "class:ParsingInfo",
    "class:RefableLookup",
    "class:SavedQueryLookup",
    "class:Searchable",
    "class:SemanticModelByMeasureLookup",
    "class:SingularTestLookup",
    "class:SourceLookup",
    "func:__eq__",
    "func:__init__",
    "func:__lt__",
    "func:__post_deserialize__",
    "func:__pre_serialize__",
    "func:__reduce_ex__",
    "func:_build_macros_by_name",
    "func:_build_macros_by_package",
    "func:_check_duplicates",
    "func:_deepcopy",
    "func:_expect_value",
    "func:_find_macros_by_name",
    "func:_find_unique_ids_for_package",
    "func:_get_locality",
    "func:_get_parent_adapter_types",
    "func:_map_list_nodes_to_map_list_resources",
    "func:_map_list_resources_to_map_list_nodes",
    "func:_map_nodes_to_map_resources",
    "func:_map_resources_to_map_nodes",
    "func:_materialization_candidates_for",
    "func:_microbatch_macro_is_core",
    "func:_packages_to_search",
    "func:_sort_values",
    "func:add",
    "func:add_disabled",
    "func:add_disabled_nofile",
    "func:add_doc",
    "func:add_exposure",
    "func:add_fixture",
    "func:add_group",
    "func:add_macro",
    "func:add_metric",
    "func:add_node",
    "func:add_node_nofile",
    "func:add_saved_query",
    "func:add_semantic_model",
    "func:add_singular_test",
    "func:add_source",
    "func:add_unit_test",
    "func:analysis_lookup",
    "func:build_disabled_by_file_id",
    "func:build_flat_graph",
    "func:build_group_map",
    "func:build_macro_child_map",
    "func:build_macro_edges",
    "func:build_node_edges",
    "func:build_parent_and_child_maps",
    "func:deepcopy",
    "func:disabled_lookup",
    "func:doc_lookup",
    "func:expect",
    "func:external_node_unique_ids",
    "func:fill_tracking_metadata",
    "func:filter",
    "func:find",
    "func:find_generate_macro_by_name",
    "func:find_macro_by_name",
    "func:find_macro_candidate_by_name",
    "func:find_materialization_macro_by_name",
    "func:find_node_from_ref_or_source",
    "func:find_unique_id_for_package",
    "func:from_macro",
    "func:from_writable_manifest",
    "func:get_macros_by_name",
    "func:get_macros_by_package",
    "func:get_resource_fqns",
    "func:get_unique_id",
    "func:get_used_databases",
    "func:get_used_schemas",
    "func:has_file",
    "func:is_invalid_private_ref",
    "func:is_invalid_protected_ref",
    "func:last",
    "func:last_candidate",
    "func:merge_from_artifact",
    "func:metric_lookup",
    "func:perform_lookup",
    "func:populate",
    "func:rebuild_disabled_lookup",
    "func:rebuild_doc_lookup",
    "func:rebuild_ref_lookup",
    "func:rebuild_source_lookup",
    "func:ref_lookup",
    "func:resolve_doc",
    "func:resolve_metric",
    "func:resolve_ref",
    "func:resolve_saved_query",
    "func:resolve_semantic_model_for_measure",
    "func:resolve_source",
    "func:saved_query_lookup",
    "func:search_name",
    "func:semantic_model_by_measure_lookup",
    "func:singular_test_lookup",
    "func:source_lookup",
    "func:use_microbatch_batches",
    "func:writable_manifest",
    "func:write"
  ],
  "manifest.py_gpt4_af9f8138.py": [
    "class:ManifestLoader",
    "class:ManifestLoaderInfo",
    "class:ParserInfo",
    "class:ProjectLoaderInfo",
    "class:ReparseReason",
    "func:__init__",
    "func:__post_serialize__",
    "func:_build_model_names_to_versions",
    "func:_check_manifest",
    "func:_check_resource_uniqueness",
    "func:_get_doc_blocks",
    "func:_process_docs_for_exposure",
    "func:_process_docs_for_macro",
    "func:_process_docs_for_metrics",
    "func:_process_docs_for_node",
    "func:_process_docs_for_saved_query",
    "func:_process_docs_for_semantic_model",
    "func:_process_docs_for_source",
    "func:_process_metric_depends_on",
    "func:_process_metric_node",
    "func:_process_metrics_for_node",
    "func:_process_refs",
    "func:_process_sources_for_exposure",
    "func:_process_sources_for_metric",
    "func:_process_sources_for_node",
    "func:_warn_for_unused_resource_config_paths",
    "func:build_macro_resolver",
    "func:build_manifest_state_check",
    "func:build_model_to_generic_tests_map",
    "func:build_perf_info",
    "func:check_for_microbatch_deprecations",
    "func:check_for_model_deprecations",
    "func:check_for_spaces_in_resource_names",
    "func:check_forcing_batch_concurrency",
    "func:check_microbatch_model_has_a_filtered_input",
    "func:check_valid_access_property",
    "func:check_valid_group_config",
    "func:check_valid_group_config_node",
    "func:check_valid_microbatch_config",
    "func:check_valid_snapshot_config",
    "func:cleanup_disabled",
    "func:create_macro_manifest",
    "func:extended_mashumaro_encoder",
    "func:extended_mashumuro_decoder",
    "func:extended_msgpack_decoder",
    "func:extended_msgpack_encoder",
    "func:get_full_manifest",
    "func:inject_external_nodes",
    "func:invalid_target_fail_unless_test",
    "func:is_partial_parsable",
    "func:load",
    "func:load_and_parse_macros",
    "func:load_macros",
    "func:macro_depends_on",
    "func:parse_manifest",
    "func:parse_project",
    "func:process_docs",
    "func:process_macro",
    "func:process_metrics",
    "func:process_model_inferred_primary_keys",
    "func:process_node",
    "func:process_refs",
    "func:process_saved_queries",
    "func:process_sources",
    "func:process_unit_tests",
    "func:read_manifest_for_partial_parse",
    "func:remove_dependent_project_references",
    "func:safe_update_project_parser_files_partially",
    "func:save_macros_to_adapter",
    "func:skip_partial_parsing_because_of_macros",
    "func:track_project_load",
    "func:update_semantic_model",
    "func:version_to_str",
    "func:write_manifest",
    "func:write_manifest_for_partial_parse",
    "func:write_perf_info",
    "func:write_semantic_manifest"
  ],
  "manifest.py_gpt4_c8979c4a.py": [
    "func:ephemeral_model",
    "func:ext_model",
    "func:ext_source",
    "func:ext_source_2",
    "func:ext_source_id_unique",
    "func:ext_source_other",
    "func:ext_source_other_2",
    "func:files",
    "func:macro_default_test_not_null",
    "func:macro_default_test_unique",
    "func:macro_materialization_table_default",
    "func:macro_test_not_null",
    "func:macro_test_unique",
    "func:macros",
    "func:make_exposure",
    "func:make_generic_test",
    "func:make_group",
    "func:make_macro",
    "func:make_manifest",
    "func:make_metric",
    "func:make_model",
    "func:make_not_null_test",
    "func:make_saved_query",
    "func:make_seed",
    "func:make_semantic_model",
    "func:make_singular_test",
    "func:make_source",
    "func:make_unique_test",
    "func:make_unit_test",
    "func:manifest",
    "func:metric",
    "func:metricflow_time_spine_model",
    "func:metrics",
    "func:namespace_model",
    "func:namespaced_seed",
    "func:namespaced_union_model",
    "func:nodes",
    "func:saved_queries",
    "func:saved_query",
    "func:seed",
    "func:semantic_model",
    "func:semantic_models",
    "func:source",
    "func:sources",
    "func:table_id_not_null",
    "func:table_id_unique",
    "func:table_model",
    "func:table_model_csv",
    "func:table_model_py",
    "func:union_model",
    "func:unit_test_table_model",
    "func:unit_tests",
    "func:versioned_model_v1",
    "func:versioned_model_v12_string",
    "func:versioned_model_v2",
    "func:versioned_model_v3",
    "func:versioned_model_v4_nested_dir",
    "func:view_id_unique",
    "func:view_model",
    "func:view_test_nothing"
  ],
  "matplotlib.py_gpt4_714edf47.py": [
    "class:KoalasAreaPlot",
    "class:KoalasBarPlot",
    "class:KoalasBarhPlot",
    "class:KoalasBoxPlot",
    "class:KoalasHistPlot",
    "class:KoalasKdePlot",
    "class:KoalasLinePlot",
    "class:KoalasPiePlot",
    "class:KoalasScatterPlot",
    "func:__init__",
    "func:_args_adjust",
    "func:_compute_plot_data",
    "func:_get_ind",
    "func:_make_plot",
    "func:_plot",
    "func:boxplot",
    "func:plot_frame",
    "func:plot_koalas",
    "func:plot_series",
    "func:rc_defaults",
    "func:update_dict"
  ],
  "mattermost.py_gpt4_6dd6ba56.py": [
    "func:build_reactions",
    "func:check_user_in_team",
    "func:convert_channel_data",
    "func:convert_direct_message_group_data",
    "func:convert_user_data",
    "func:create_username_to_user_mapping",
    "func:do_convert_data",
    "func:fix_mentions",
    "func:get_full_name",
    "func:get_invite_only_value_from_channel_type",
    "func:get_mentioned_user_ids",
    "func:get_recipient_id_from_channel_name",
    "func:get_recipient_id_from_direct_message_group_members",
    "func:get_recipient_id_from_username",
    "func:initialize_stream_membership_dicts",
    "func:is_team_admin",
    "func:is_team_guest",
    "func:label_mirror_dummy_users",
    "func:make_realm",
    "func:mattermost_data_file_to_dict",
    "func:message_to_dict",
    "func:process",
    "func:process_batch",
    "func:process_message_attachments",
    "func:process_posts",
    "func:process_raw_message_batch",
    "func:process_user",
    "func:reset_mirror_dummy_users",
    "func:write_emoticon_data",
    "func:write_message_data"
  ],
  "mccabe.py_gpt4_ed0b9b04.py": [
    "class:ASTVisitor",
    "class:McCabeChecker",
    "class:PathGraph",
    "class:PathGraphingAstVisitor",
    "class:PathNode",
    "func:__init__",
    "func:_read",
    "func:_subgraph",
    "func:_subgraph_parse",
    "func:add_options",
    "func:appendPathNode",
    "func:complexity",
    "func:connect",
    "func:default",
    "func:dispatch",
    "func:dispatch_list",
    "func:dot_id",
    "func:get_code_complexity",
    "func:get_module_complexity",
    "func:main",
    "func:parse_options",
    "func:preorder",
    "func:reset",
    "func:run",
    "func:to_dot",
    "func:visitClassDef",
    "func:visitFunctionDef",
    "func:visitIf",
    "func:visitLoop",
    "func:visitSimpleStatement",
    "func:visitTryExcept",
    "func:visitWith"
  ],
  "merge.py_gpt4_50ebe062.py": [
    "class:_AsOfMerge",
    "class:_MergeOperation",
    "class:_OrderedMerge",
    "func:__init__",
    "func:_any",
    "func:_asof_by_function",
    "func:_check_dtype_match",
    "func:_convert_arrays_and_get_rizer_klass",
    "func:_convert_to_multiindex",
    "func:_convert_values_for_libjoin",
    "func:_create_join_index",
    "func:_cross_merge",
    "func:_factorize_keys",
    "func:_get_empty_indexer",
    "func:_get_join_indexers",
    "func:_get_join_info",
    "func:_get_join_keys",
    "func:_get_merge_keys",
    "func:_get_multiindex_indexer",
    "func:_get_no_sort_one_missing_indexer",
    "func:_groupby_and_merge",
    "func:_handle_anti_join",
    "func:_indicator_name",
    "func:_indicator_post_merge",
    "func:_indicator_pre_merge",
    "func:_items_overlap_with_suffix",
    "func:_left_join_on_index",
    "func:_maybe_add_join_keys",
    "func:_maybe_coerce_merge_keys",
    "func:_maybe_require_matching_dtypes",
    "func:_maybe_restore_index_levels",
    "func:_merger",
    "func:_reindex_and_concat",
    "func:_should_fill",
    "func:_sort_labels",
    "func:_validate_how",
    "func:_validate_left_right_on",
    "func:_validate_operand",
    "func:_validate_tolerance",
    "func:_validate_validate_kwd",
    "func:get_join_indexers",
    "func:get_join_indexers_non_unique",
    "func:get_result",
    "func:merge",
    "func:merge_asof",
    "func:merge_ordered",
    "func:renamer",
    "func:restore_dropped_levels_multijoin"
  ],
  "message_cache.py_gpt4_ef44c5a4.py": [
    "class:MessageDict",
    "class:RawReactionRow",
    "class:ReactionDict",
    "func:build_dict_from_raw_db_row",
    "func:build_message_dict",
    "func:bulk_hydrate_recipient_info",
    "func:bulk_hydrate_sender_info",
    "func:extract_message_dict",
    "func:finalize_payload",
    "func:get_rendering_realm_id",
    "func:hydrate_recipient_info",
    "func:ids_to_dict",
    "func:message_to_encoded_cache",
    "func:messages_to_encoded_cache",
    "func:messages_to_encoded_cache_helper",
    "func:post_process_dicts",
    "func:save_message_rendered_content",
    "func:set_sender_avatar",
    "func:sew_messages_and_reactions",
    "func:sew_messages_and_submessages",
    "func:sew_submessages_and_reactions_to_msgs",
    "func:stringify_message_dict",
    "func:update_message_cache",
    "func:wide_dict"
  ],
  "message_send.py_gpt4_c3e58676.py": [
    "class:ActiveUserDict",
    "class:RecipientInfoResult",
    "class:SentMessageResult",
    "class:UserData",
    "func:_internal_prep_message",
    "func:already_sent_mirrored_message_id",
    "func:build_message_send_dict",
    "func:check_can_send_direct_message",
    "func:check_message",
    "func:check_send_message",
    "func:check_send_private_message",
    "func:check_send_stream_message",
    "func:check_send_stream_message_by_id",
    "func:check_sender_can_access_recipients",
    "func:compute_irc_user_fullname",
    "func:compute_jabber_user_fullname",
    "func:create_mirror_user_if_needed",
    "func:create_user_messages",
    "func:do_send_messages",
    "func:extract_private_recipients",
    "func:extract_stream_indicator",
    "func:filter_presence_idle_user_ids",
    "func:followed_topic_notification_recipients",
    "func:get_active_presence_idle_user_ids",
    "func:get_ids_for",
    "func:get_recipient_info",
    "func:get_recipients_for_user_creation_events",
    "func:get_service_bot_events",
    "func:get_user_profile_delivery_email_cache_key",
    "func:get_validated_emails",
    "func:get_validated_user_ids",
    "func:internal_prep_group_direct_message",
    "func:internal_prep_private_message",
    "func:internal_prep_stream_message",
    "func:internal_prep_stream_message_by_name",
    "func:internal_send_group_direct_message",
    "func:internal_send_private_message",
    "func:internal_send_stream_message",
    "func:internal_send_stream_message_by_name",
    "func:maybe_add_event",
    "func:notification_recipients",
    "func:render_incoming_message",
    "func:send_pm_if_empty_stream",
    "func:send_rate_limited_pm_notification_to_bot_owner",
    "func:validate_stream_id_with_pm_notification",
    "func:validate_stream_name_with_pm_notification"
  ],
  "messages.py_gpt4_30e9304b.py": [
    "class:AssertTuple",
    "class:BreakOutsideLoop",
    "class:CommentAnnotationSyntaxError",
    "class:ContinueInFinally",
    "class:ContinueOutsideLoop",
    "class:DefaultExceptNotLast",
    "class:DoctestSyntaxError",
    "class:DuplicateArgument",
    "class:FStringMissingPlaceholders",
    "class:ForwardAnnotationSyntaxError",
    "class:FutureFeatureNotDefined",
    "class:IfTuple",
    "class:ImportShadowedByLoopVar",
    "class:ImportStarNotPermitted",
    "class:ImportStarUsage",
    "class:ImportStarUsed",
    "class:InvalidPrintSyntax",
    "class:IsLiteral",
    "class:LateFutureImport",
    "class:Message",
    "class:MultiValueRepeatedKeyLiteral",
    "class:MultiValueRepeatedKeyVariable",
    "class:PercentFormatExpectedMapping",
    "class:PercentFormatExpectedSequence",
    "class:PercentFormatExtraNamedArguments",
    "class:PercentFormatInvalidFormat",
    "class:PercentFormatMissingArgument",
    "class:PercentFormatMixedPositionalAndNamed",
    "class:PercentFormatPositionalCountMismatch",
    "class:PercentFormatStarRequiresSequence",
    "class:PercentFormatUnsupportedFormatCharacter",
    "class:RaiseNotImplemented",
    "class:RedefinedInListComp",
    "class:RedefinedWhileUnused",
    "class:ReturnOutsideFunction",
    "class:ReturnWithArgsInsideGenerator",
    "class:StringDotFormatExtraNamedArguments",
    "class:StringDotFormatExtraPositionalArguments",
    "class:StringDotFormatInvalidFormat",
    "class:StringDotFormatMissingArgument",
    "class:StringDotFormatMixingAutomatic",
    "class:TooManyExpressionsInStarredAssignment",
    "class:TwoStarredExpressions",
    "class:UndefinedExport",
    "class:UndefinedLocal",
    "class:UndefinedName",
    "class:UnusedImport",
    "class:UnusedVariable",
    "class:YieldOutsideFunction",
    "func:__init__",
    "func:__str__"
  ],
  "messaging.py_gpt4_c5025826.py": [
    "class:Cache",
    "class:Consumer",
    "class:Publisher",
    "class:RedisStreamsMessage",
    "class:Subscription",
    "func:__eq__",
    "func:__init__"
  ],
  "metrics.py_gpt4_0e2b5a1a.py": [
    "class:Counter",
    "class:Gauge",
    "class:Timer",
    "func:__init__",
    "func:__repr__",
    "func:_time_in_millis",
    "func:decorated",
    "func:find_all",
    "func:from_db",
    "func:from_document",
    "func:from_record",
    "func:inc",
    "func:serialize",
    "func:set",
    "func:start_timer",
    "func:stop_timer",
    "func:timer",
    "func:wrapped"
  ],
  "microbatch.py_gpt4_cb5cf043.py": [
    "class:MicrobatchBuilder",
    "func:__init__",
    "func:batch_id",
    "func:build_batches",
    "func:build_end_time",
    "func:build_jinja_context_for_batch",
    "func:build_start_time",
    "func:ceiling_timestamp",
    "func:format_batch_start",
    "func:offset_timestamp",
    "func:truncate_timestamp"
  ],
  "minserver.py_gpt4_71a7dccc.py": [
    "class:JSONHandler",
    "class:JSONServer",
    "func:__init__",
    "func:collect_incoming_data",
    "func:fileno",
    "func:found_terminator",
    "func:get_log_traceback",
    "func:get_logger",
    "func:handle_accept",
    "func:handle_close",
    "func:handle_command",
    "func:log_traceback",
    "func:return_back",
    "func:serve_forever",
    "func:shutdown"
  ],
  "misc.py_gpt4_3b346c4e.py": [
    "func:_get_marker_compat",
    "func:andrews_curves",
    "func:autocorrelation_plot",
    "func:bootstrap_plot",
    "func:f",
    "func:function",
    "func:lag_plot",
    "func:normalize",
    "func:parallel_coordinates",
    "func:r",
    "func:radviz",
    "func:scatter_matrix",
    "func:unpack_single_str_list"
  ],
  "missing.py_gpt4_68837e1d.py": [
    "func:_akima_interpolate",
    "func:_backfill_1d",
    "func:_backfill_2d",
    "func:_cubicspline_interpolate",
    "func:_datetimelike_compat",
    "func:_fill_limit_area_1d",
    "func:_fill_limit_area_2d",
    "func:_fillna_prep",
    "func:_from_derivatives",
    "func:_index_to_interp_indices",
    "func:_interp_limit",
    "func:_interpolate_1d",
    "func:_interpolate_scipy_wrapper",
    "func:_pad_1d",
    "func:_pad_2d",
    "func:check_value_size",
    "func:clean_fill_method",
    "func:clean_interp_method",
    "func:clean_reindex_fill_method",
    "func:find_valid_index",
    "func:func",
    "func:get_fill_func",
    "func:get_interp_index",
    "func:infer_limit_direction",
    "func:inner",
    "func:interpolate_2d_inplace",
    "func:mask_missing",
    "func:new_func",
    "func:pad_or_backfill_inplace",
    "func:validate_limit_area",
    "func:validate_limit_direction"
  ],
  "mocks.py_gpt4_852f4d73.py": [
    "class:MockChainState",
    "class:MockChannelState",
    "class:MockEth",
    "class:MockJSONRPCClient",
    "class:MockPaymentChannel",
    "class:MockProxyManager",
    "class:MockRaidenService",
    "class:MockTokenNetwork",
    "class:MockTokenNetworkProxy",
    "class:MockTokenNetworkRegistry",
    "class:MockWeb3",
    "class:PFSMock",
    "func:__del__",
    "func:__init__",
    "func:_get_app_address_metadata",
    "func:add_apps",
    "func:add_notification",
    "func:balance",
    "func:can_query_state_for_block",
    "func:chainId",
    "func:detail_participants",
    "func:gas_price",
    "func:get_best_routes_pfs",
    "func:get_block",
    "func:get_pfs_info",
    "func:handle_and_track_state_changes",
    "func:handle_state_changes",
    "func:make_pfs_config",
    "func:make_raiden_service_mock",
    "func:mocked_failed_response",
    "func:mocked_json_response",
    "func:monitoring_service",
    "func:on_messages",
    "func:on_new_block",
    "func:one_to_n",
    "func:payment_channel",
    "func:query_address_metadata",
    "func:reset_routes",
    "func:secret_registry",
    "func:service_registry",
    "func:set_route",
    "func:sign",
    "func:stop",
    "func:token_network_registry",
    "func:update_info",
    "func:user_deposit"
  ],
  "model.py_gpt4_1a9c1b3c.py": [
    "class:Model",
    "func:__init__",
    "func:_get_prediction_device",
    "func:_load",
    "func:_maybe_warn_for_unseparable_batches",
    "func:extend_embedder_vocab",
    "func:filter_out_authorized_missing_keys",
    "func:forward",
    "func:forward_on_instance",
    "func:forward_on_instances",
    "func:from_archive",
    "func:get_metrics",
    "func:get_parameters_for_histogram_logging",
    "func:get_parameters_for_histogram_tensorboard_logging",
    "func:get_regularization_penalty",
    "func:load",
    "func:make_output_human_readable",
    "func:remove_pretrained_embedding_params",
    "func:remove_weights_related_keys_from_params"
  ],
  "model_card.py_gpt4_55460c7b.py": [
    "class:Dataset",
    "class:EvaluationData",
    "class:Factors",
    "class:IntendedUse",
    "class:Metrics",
    "class:ModelCard",
    "class:ModelCardInfo",
    "class:ModelCaveatsAndRecommendations",
    "class:ModelDetails",
    "class:ModelEthicalConsiderations",
    "class:ModelUsage",
    "class:Paper",
    "class:QuantitativeAnalyses",
    "class:TrainingData",
    "func:__init__",
    "func:__str__",
    "func:get_description",
    "func:to_dict"
  ],
  "model_test_case.py_gpt4_462aa8c2.py": [
    "class:ModelTestCase",
    "func:assert_fields_equal",
    "func:check_model_computes_gradients_correctly",
    "func:ensure_batch_predictions_are_consistent",
    "func:ensure_model_can_train",
    "func:ensure_model_can_train_save_and_load",
    "func:set_up_model",
    "func:test_model_batch_norm_verification"
  ],
  "models.py_gpt4_63b1f093.py": [
    "class:FieldDescriptorT",
    "class:ModelOptions",
    "class:ModelT",
    "class:_InitSubclassCheck",
    "class:_UsingKwargsInNew",
    "func:__init__",
    "func:__init_subclass__",
    "func:as_dict",
    "func:clone",
    "func:clone_defaults",
    "func:derive",
    "func:dumps",
    "func:from_data",
    "func:getattr",
    "func:ident",
    "func:is_valid",
    "func:lazy_coercion",
    "func:loads",
    "func:on_model_attached",
    "func:prepare_value",
    "func:related_models",
    "func:should_coerce",
    "func:to_python",
    "func:to_representation",
    "func:validate",
    "func:validate_all",
    "func:validate_or_raise",
    "func:validation_error",
    "func:validation_errors"
  ],
  "modern.py_gpt4_e73854b5.py": [
    "func:_get_last_state_changes_multiple_stmt",
    "func:_get_last_state_changes_single_stmt",
    "func:_get_oldest_possible_ts",
    "func:_get_single_entity_start_time_stmt",
    "func:_get_start_time_state_for_entities_stmt",
    "func:_get_start_time_state_stmt",
    "func:_select_from_subquery",
    "func:_significant_states_stmt",
    "func:_sorted_states_to_dict",
    "func:_state_changed_during_period_stmt",
    "func:_stmt_and_join_attributes",
    "func:_stmt_and_join_attributes_for_start_state",
    "func:get_full_significant_states_with_session",
    "func:get_last_state_changes",
    "func:get_significant_states",
    "func:get_significant_states_with_session",
    "func:state_changes_during_period"
  ],
  "module.py_gpt4_fb2f6031.py": [
    "class:ModuleMixin",
    "class:ModuleValue",
    "class:SubModuleDictMixin",
    "class:_ModuleAttributeName",
    "func:__init__",
    "func:__repr__",
    "func:_as_context",
    "func:_module_attributes_dict",
    "func:get_filters",
    "func:get_qualified_names",
    "func:infer",
    "func:is_module",
    "func:is_package",
    "func:is_stub",
    "func:iter_star_filters",
    "func:name",
    "func:py__class__",
    "func:py__file__",
    "func:py__name__",
    "func:py__package__",
    "func:py__path__",
    "func:star_imports",
    "func:sub_modules_dict"
  ],
  "monitor.py_gpt4_121c517b.py": [
    "class:Monitor",
    "class:TableState",
    "func:__init__",
    "func:__reduce_keywords__",
    "func:_events_by_stream_dict",
    "func:_events_by_task_dict",
    "func:_http_response_codes_dict",
    "func:_metric_counts_dict",
    "func:_normalize",
    "func:_sample",
    "func:_table_or_create",
    "func:_topic_buffer_full_dict",
    "func:_tp_committed_offsets_dict",
    "func:_tp_end_offsets_dict",
    "func:_tp_offsets_as_dict",
    "func:_tp_read_offsets_dict",
    "func:asdict",
    "func:count",
    "func:ms_since",
    "func:on_assignment_completed",
    "func:on_assignment_error",
    "func:on_assignment_start",
    "func:on_commit_completed",
    "func:on_commit_initiated",
    "func:on_message_in",
    "func:on_message_out",
    "func:on_rebalance_end",
    "func:on_rebalance_return",
    "func:on_rebalance_start",
    "func:on_send_completed",
    "func:on_send_error",
    "func:on_send_initiated",
    "func:on_stream_event_in",
    "func:on_stream_event_out",
    "func:on_table_del",
    "func:on_table_get",
    "func:on_table_set",
    "func:on_topic_buffer_full",
    "func:on_tp_commit",
    "func:on_web_request_end",
    "func:on_web_request_start",
    "func:secs_since",
    "func:secs_to_ms",
    "func:track_tp_end_offset"
  ],
  "multilabel_field.py_gpt4_214590a4.py": [
    "class:MultiLabelField",
    "func:__init__",
    "func:__len__",
    "func:__str__",
    "func:_maybe_warn_for_namespace",
    "func:as_tensor",
    "func:count_vocab_items",
    "func:empty_field",
    "func:get_padding_lengths",
    "func:human_readable_repr",
    "func:index"
  ],
  "multipart.py_gpt4_4b2b81d0.py": [
    "class:BadContentDispositionHeader",
    "class:BadContentDispositionParam",
    "class:BodyPartReader",
    "class:BodyPartReaderPayload",
    "class:MultipartPayloadWriter",
    "class:MultipartReader",
    "class:MultipartResponseWrapper",
    "class:MultipartWriter",
    "func:__aiter__",
    "func:__bool__",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:_boundary_value",
    "func:_decode_content",
    "func:_decode_content_transfer",
    "func:_get_boundary",
    "func:_get_part_reader",
    "func:append",
    "func:append_form",
    "func:append_json",
    "func:append_payload",
    "func:at_eof",
    "func:boundary",
    "func:content_disposition_filename",
    "func:decode",
    "func:enable_compression",
    "func:enable_encoding",
    "func:filename",
    "func:from_response",
    "func:get_charset",
    "func:is_continuous_param",
    "func:is_extended_param",
    "func:is_quoted",
    "func:is_rfc5987",
    "func:is_token",
    "func:name",
    "func:parse_content_disposition",
    "func:size",
    "func:unescape"
  ],
  "multiprocess_data_loader.py_gpt4_59f32091.py": [
    "class:MultiProcessDataLoader",
    "class:WorkerError",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:_batch_worker",
    "func:_gather_instances",
    "func:_index_instance",
    "func:_instance_worker",
    "func:_instances_to_batches",
    "func:_iter_batches",
    "func:_join_workers",
    "func:_maybe_tqdm",
    "func:_safe_queue_put",
    "func:_start_batch_workers",
    "func:_start_instance_workers",
    "func:index_with",
    "func:iter_instances",
    "func:set_target_device"
  ],
  "multitask.py_gpt4_818caaf1.py": [
    "class:MultiTaskModel",
    "func:__init__",
    "func:_get_arguments",
    "func:forward",
    "func:get_forward_arguments",
    "func:get_metrics",
    "func:make_inputs_for_task",
    "func:make_output_human_readable"
  ],
  "multitask_data_loader.py_gpt4_52d22210.py": [
    "class:MultiTaskDataLoader",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:_get_instances_for_epoch",
    "func:_make_data_loader",
    "func:index_with",
    "func:iter_instances",
    "func:maybe_shuffle_instances",
    "func:set_target_device"
  ],
  "mypy.py_gpt4_6c8d5216.py": [
    "class:ModelConfigData",
    "class:PydanticModelClassVar",
    "class:PydanticModelField",
    "class:PydanticModelTransformer",
    "class:PydanticPlugin",
    "class:PydanticPluginConfig",
    "func:__init__",
    "func:_get_assignment_statements_from_block",
    "func:_get_assignment_statements_from_if_statement",
    "func:_infer_dataclass_attr_init_type",
    "func:_pydantic_model_class_maker_callback",
    "func:_pydantic_model_metaclass_marker_callback",
    "func:add_initializer",
    "func:add_method",
    "func:add_model_construct_method",
    "func:adjust_decorator_signatures",
    "func:collect_config",
    "func:collect_field_or_class_var_from_stmt",
    "func:collect_fields_and_class_vars",
    "func:deserialize",
    "func:error_extra_fields_on_root_model",
    "func:error_from_attributes",
    "func:error_invalid_config_value",
    "func:error_required_dynamic_aliases",
    "func:error_unexpected_behavior",
    "func:error_untyped_fields",
    "func:expand_type",
    "func:expand_typevar_from_subtype",
    "func:from_attributes_callback",
    "func:get_alias_info",
    "func:get_base_class_hook",
    "func:get_config_update",
    "func:get_field_arguments",
    "func:get_has_default",
    "func:get_metaclass_hook",
    "func:get_method_hook",
    "func:get_strict",
    "func:get_values_dict",
    "func:is_dynamic_alias_present",
    "func:is_field_frozen",
    "func:is_root_model",
    "func:parse_toml",
    "func:plugin",
    "func:report_config_data",
    "func:serialize",
    "func:set_frozen",
    "func:setdefault",
    "func:should_init_forbid_extra",
    "func:to_argument",
    "func:to_data",
    "func:to_var",
    "func:transform",
    "func:update"
  ],
  "namespace.py_gpt4_3e6b5858.py": [
    "func:_get_index_map",
    "func:broadcast",
    "func:column_name",
    "func:concat",
    "func:date_range",
    "func:from_pandas",
    "func:get_dummies",
    "func:isna",
    "func:melt",
    "func:merge",
    "func:notna",
    "func:output_func",
    "func:pandas_to_datetime",
    "func:pd_read_excel",
    "func:range",
    "func:read_clipboard",
    "func:read_csv",
    "func:read_delta",
    "func:read_excel",
    "func:read_excel_on_spark",
    "func:read_html",
    "func:read_index_metadata",
    "func:read_json",
    "func:read_orc",
    "func:read_parquet",
    "func:read_spark_io",
    "func:read_sql",
    "func:read_sql_query",
    "func:read_sql_table",
    "func:read_table",
    "func:resolve_func",
    "func:to_datetime",
    "func:to_numeric"
  ],
  "network.py_gpt4_8d1b1d1c.py": [
    "class:BlockchainServices",
    "class:SimplePFSProxy",
    "func:__init__",
    "func:check_channel",
    "func:create_all_channels_for_network",
    "func:create_apps",
    "func:create_network_channels",
    "func:create_sequential_channels",
    "func:jsonrpc_services",
    "func:network_with_minimum_channels",
    "func:parallel_start_apps",
    "func:payment_channel_open_and_deposit",
    "func:query_address_metadata",
    "func:set_services",
    "func:wait_for_alarm_start",
    "func:wait_for_channels",
    "func:wait_for_token_networks",
    "func:wait_for_usable_channel"
  ],
  "network.py_gpt4_b74d7a34.py": [
    "class:NoURLAvailableError",
    "func:_get_cloud_url",
    "func:_get_external_url",
    "func:_get_internal_url",
    "func:_get_request_host",
    "func:cloud_url",
    "func:get_supervisor_network_url",
    "func:get_url",
    "func:host_ip",
    "func:is_cloud_connection",
    "func:is_hass_url",
    "func:is_internal_request"
  ],
  "network_manager.py_gpt4_eaf8ec93.py": [
    "class:NetworkManager",
    "class:Request",
    "class:Response",
    "class:SecurityDetails",
    "func:__init__",
    "func:_bodyLoadedPromiseFulfill",
    "func:_handleRequestRedirect",
    "func:_handleRequestStart",
    "func:_onLoadingFailed",
    "func:_onLoadingFinished",
    "func:_onRequest",
    "func:_onRequestIntercepted",
    "func:_onRequestServedFromCache",
    "func:_onResponseReceived",
    "func:buffer",
    "func:extraHTTPHeaders",
    "func:failure",
    "func:frame",
    "func:fromCache",
    "func:fromServiceWorker",
    "func:generateRequestHash",
    "func:headers",
    "func:isNavigationRequest",
    "func:issuer",
    "func:method",
    "func:ok",
    "func:postData",
    "func:protocol",
    "func:redirectChain",
    "func:request",
    "func:resourceType",
    "func:response",
    "func:securityDetails",
    "func:status",
    "func:subjectName",
    "func:url",
    "func:validFrom",
    "func:validTo"
  ],
  "networks.py_gpt4_5d69cfc5.py": [
    "class:AmqpDsn",
    "class:AnyHttpUrl",
    "class:AnyUrl",
    "class:CockroachDsn",
    "class:EmailStr",
    "class:FileUrl",
    "class:HostParts",
    "class:HttpUrl",
    "class:IPvAnyAddress",
    "class:IPvAnyInterface",
    "class:IPvAnyNetwork",
    "class:KafkaDsn",
    "class:MongoDsn",
    "class:MultiHostDsn",
    "class:NameEmail",
    "class:Parts",
    "class:PostgresDsn",
    "class:RedisDsn",
    "func:__eq__",
    "func:__get_validators__",
    "func:__init__",
    "func:__modify_schema__",
    "func:__new__",
    "func:__repr__",
    "func:__str__",
    "func:_build_url",
    "func:_match_url",
    "func:_validate_port",
    "func:apply_default_parts",
    "func:ascii_domain_regex",
    "func:build",
    "func:get_default_parts",
    "func:host_regex",
    "func:import_email_validator",
    "func:int_domain_regex",
    "func:multi_host_url_regex",
    "func:stricturl",
    "func:url_regex",
    "func:validate",
    "func:validate_email",
    "func:validate_host",
    "func:validate_parts"
  ],
  "nlp.py_gpt4_c6f6e77f.py": [
    "class:BaseNLPLabelingFunction",
    "class:NLPLabelingFunction",
    "class:SpacyPreprocessorConfig",
    "class:SpacyPreprocessorParameters",
    "class:base_nlp_labeling_function",
    "class:nlp_labeling_function",
    "func:__call__",
    "func:__init__",
    "func:_create_or_check_preprocessor",
    "func:_create_preprocessor"
  ],
  "normalizer.py_gpt4_e04ed541.py": [
    "class:Issue",
    "class:Normalizer",
    "class:NormalizerConfig",
    "class:RefactoringNormalizer",
    "class:Rule",
    "class:_NormalizerMeta",
    "func:__eq__",
    "func:__hash__",
    "func:__init__",
    "func:__ne__",
    "func:__new__",
    "func:__repr__",
    "func:_check_type_rules",
    "func:_get_message",
    "func:_instantiate_rules",
    "func:add_issue",
    "func:create_normalizer",
    "func:decorator",
    "func:feed_node",
    "func:finalize",
    "func:get_node",
    "func:initialize",
    "func:is_issue",
    "func:register_rule",
    "func:visit",
    "func:visit_leaf",
    "func:visit_node",
    "func:walk"
  ],
  "notification_data.py_gpt4_110f4c2c.py": [
    "class:MentionedUserGroup",
    "class:UserMessageNotificationsData",
    "func:__post_init__",
    "func:from_user_id_sets",
    "func:get_email_notification_trigger",
    "func:get_mentioned_user_group",
    "func:get_push_notification_trigger",
    "func:get_user_group_mentions_data",
    "func:is_email_notifiable",
    "func:is_notifiable",
    "func:is_push_notifiable",
    "func:trivially_should_not_notify",
    "func:user_allows_notifications_in_StreamTopic"
  ],
  "notify.py_gpt4_79a4d062.py": [
    "class:MailNotificationService",
    "func:__init__",
    "func:_attach_file",
    "func:_build_html_msg",
    "func:_build_multipart_msg",
    "func:_build_text_msg",
    "func:_send_email",
    "func:connect",
    "func:connection_is_valid",
    "func:get_service",
    "func:send_message"
  ],
  "numpy.py_gpt4_24b50428.py": [
    "class:ArrayStrategy",
    "func:__init__",
    "func:__repr__",
    "func:_dtype_from_args",
    "func:_from_type",
    "func:_no_title_is_name_of_a_titled_field",
    "func:_try_import",
    "func:_unpack_dtype",
    "func:_unpack_generic",
    "func:array_dtypes",
    "func:array_for",
    "func:arrays",
    "func:basic_indices",
    "func:boolean_dtypes",
    "func:byte_string_dtypes",
    "func:compat_kw",
    "func:complex_number_dtypes",
    "func:datetime64_dtypes",
    "func:defines_dtype_strategy",
    "func:do_draw",
    "func:dtype_factory",
    "func:fill_for",
    "func:floating_dtypes",
    "func:from_dtype",
    "func:inner",
    "func:integer_array_indices",
    "func:integer_dtypes",
    "func:mutually_broadcastable_shapes",
    "func:nested_dtypes",
    "func:scalar_dtypes",
    "func:set_element",
    "func:timedelta64_dtypes",
    "func:unicode_string_dtypes",
    "func:unsigned_integer_dtypes",
    "func:valid_tuple_axes",
    "func:validate_time_slice"
  ],
  "oneshot.py_gpt4_15f62085.py": [
    "class:OneShotOptimizer",
    "class:RandomSearchMaker",
    "class:SamplingSearch",
    "class:_RandomSearch",
    "class:_SamplingSearch",
    "func:__init__",
    "func:_internal_ask",
    "func:_internal_ask_candidate",
    "func:_internal_provide_recommendation",
    "func:avg_of_k_best",
    "func:convex_limit",
    "func:hull_center",
    "func:sampler"
  ],
  "openapi.py_gpt4_03accd2a.py": [
    "class:OpenAPI",
    "func:_simple_slugify",
    "func:get_content",
    "func:get_field",
    "func:get_link",
    "func:get_schema_definitions",
    "func:load",
    "func:lookup"
  ],
  "optimizerlib.py_gpt4_60df34c4.py": [
    "class:AXP",
    "class:BFGSCMA",
    "class:BFGSCMAPlus",
    "class:BayesOptim",
    "class:CM",
    "class:CMA",
    "class:CMandAS2",
    "class:CMandAS3",
    "class:CSEC",
    "class:CSEC10",
    "class:CSEC11",
    "class:Carola3",
    "class:Chaining",
    "class:ChoiceBase",
    "class:ConfPSO",
    "class:ConfPortfolio",
    "class:ConfSplitOptimizer",
    "class:EDA",
    "class:EMNA",
    "class:F2SQPCMA",
    "class:F3SQPCMA",
    "class:FSQPCMA",
    "class:ForceMultiCobyla",
    "class:LogBFGSCMA",
    "class:LogBFGSCMAPlus",
    "class:LogMultiBFGS",
    "class:LogMultiBFGSPlus",
    "class:LogSQPCMA",
    "class:LogSQPCMAPlus",
    "class:MEDA",
    "class:MPCEDA",
    "class:MetaCMA",
    "class:MultiBFGS",
    "class:MultiBFGSPlus",
    "class:MultiCobyla",
    "class:MultiCobylaPlus",
    "class:MultiDiscrete",
    "class:MultiSQP",
    "class:MultiSQPPlus",
    "class:MultipleSingleRuns",
    "class:NGDSRW",
    "class:NGO",
    "class:NGOpt",
    "class:NGOpt10",
    "class:NGOpt12",
    "class:NGOpt13",
    "class:NGOpt14",
    "class:NGOpt15",
    "class:NGOpt16",
    "class:NGOpt21",
    "class:NGOpt36",
    "class:NGOpt38",
    "class:NGOpt39",
    "class:NGOpt4",
    "class:NGOpt8",
    "class:NGOptBase",
    "class:NGOptDSBase",
    "class:NGOptF",
    "class:NGOptF2",
    "class:NGOptF3",
    "class:NGOptF5",
    "class:NGOptRW",
    "class:NgDS",
    "class:NgDS11",
    "class:NgDS2",
    "class:NgIoh",
    "class:NgIoh10",
    "class:NgIoh11",
    "class:NgIoh12",
    "class:NgIoh12b",
    "class:NgIoh13",
    "class:NgIoh13b",
    "class:NgIoh14",
    "class:NgIoh14b",
    "class:NgIoh15",
    "class:NgIoh15b",
    "class:NgIoh16",
    "class:NgIoh17",
    "class:NgIoh18",
    "class:NgIoh19",
    "class:NgIoh2",
    "class:NgIoh20",
    "class:NgIoh21",
    "class:NgIoh3",
    "class:NgIoh4",
    "class:NgIoh5",
    "class:NgIoh6",
    "class:NgIoh7",
    "class:NgIoh8",
    "class:NgIoh9",
    "class:NgIohRW2",
    "class:NgIohTuned",
    "class:NoisyBandit",
    "class:NoisySplit",
    "class:PCEDA",
    "class:ParametrizedBO",
    "class:ParametrizedCMA",
    "class:ParametrizedMetaModel",
    "class:ParametrizedOnePlusOne",
    "class:ParametrizedTBPSA",
    "class:Portfolio",
    "class:Rescaled",
    "class:SPSA",
    "class:SQPCMA",
    "class:SQPCMAPlus",
    "class:Shiwa",
    "class:SplitOptimizer",
    "class:SqrtBFGSCMA",
    "class:SqrtBFGSCMAPlus",
    "class:SqrtMultiBFGS",
    "class:SqrtMultiBFGSPlus",
    "class:SqrtSQPCMA",
    "class:SqrtSQPCMAPlus",
    "class:Wiz",
    "class:_BO",
    "class:_BayesOptim",
    "class:_CMA",
    "class:_Chain",
    "class:_EMNA",
    "class:_FakeFunction",
    "class:_MSR",
    "class:_MetaModel",
    "class:_OnePlusOne",
    "class:_PSO",
    "class:_PopulationSizeController",
    "class:_Rescaled",
    "class:_TBPSA",
    "class:cGA",
    "func:__call__",
    "func:__init__",
    "func:_ak",
    "func:_ck",
    "func:_get_boxed_data",
    "func:_info",
    "func:_internal_ask",
    "func:_internal_ask_candidate",
    "func:_internal_provide_recommendation",
    "func:_internal_tell",
    "func:_internal_tell_candidate",
    "func:_internal_tell_not_asked",
    "func:_num_objectives_set_callback",
    "func:_select_optimizer_cls",
    "func:_spawn_mutated_particle",
    "func:add_value",
    "func:bo",
    "func:enable_pickling",
    "func:es",
    "func:invsig",
    "func:key",
    "func:most_frequent",
    "func:optim",
    "func:p",
    "func:recommend",
    "func:recommend_method",
    "func:register",
    "func:rescale_candidate",
    "func:rescaled",
    "func:smooth_copy"
  ],
  "optimizers.py_gpt4_9ab847a5.py": [
    "class:AdadeltaOptimizer",
    "class:AdagradOptimizer",
    "class:AdamOptimizer",
    "class:AdamWOptimizer",
    "class:AdamaxOptimizer",
    "class:AveragedSgdOptimizer",
    "class:DenseSparseAdam",
    "class:HuggingfaceAdafactor",
    "class:HuggingfaceAdamWOptimizer",
    "class:MultiOptimizer",
    "class:Optimizer",
    "class:RmsPropOptimizer",
    "class:SgdOptimizer",
    "class:SparseAdamOptimizer",
    "func:__init__",
    "func:default",
    "func:load_state_dict",
    "func:make_parameter_groups",
    "func:make_sparse",
    "func:state_dict",
    "func:step",
    "func:zero_grad"
  ],
  "package.py_gpt4_797987fb.py": [
    "class:AppPackager",
    "class:CompositePostProcessor",
    "class:DuplicateResourceNameError",
    "class:JSONTemplateSerializer",
    "class:PackageOptions",
    "class:ResourceBuilder",
    "class:SAMCodeLocationPostProcessor",
    "class:SAMTemplateGenerator",
    "class:TemplateDeepMerger",
    "class:TemplateGenerator",
    "class:TemplateMergePostProcessor",
    "class:TemplateMerger",
    "class:TemplatePostProcessor",
    "class:TemplateSerializer",
    "class:TerraformCodeLocationPostProcessor",
    "class:TerraformGenerator",
    "class:UnsupportedFeatureError",
    "class:YAMLTemplateSerializer",
    "func:__init__",
    "func:_add_domain_name",
    "func:_add_domain_name_outputs",
    "func:_add_iam_role",
    "func:_add_websocket_domain_name",
    "func:_add_websocket_lambda_integration",
    "func:_add_websocket_lambda_integrations",
    "func:_add_websocket_lambda_invoke_permission",
    "func:_add_websockets_route",
    "func:_arnref",
    "func:_create_route_for_key",
    "func:_custom_sam_instrinsics",
    "func:_cwe_helper",
    "func:_default",
    "func:_fixup_deployment_package",
    "func:_fref",
    "func:_generate_apimapping",
    "func:_generate_autogeniampolicy",
    "func:_generate_cloudwatchevent",
    "func:_generate_deploymentpackage",
    "func:_generate_domainname",
    "func:_generate_dynamodbeventsource",
    "func:_generate_filebasediampolicy",
    "func:_generate_kinesiseventsource",
    "func:_generate_lambdafunction",
    "func:_generate_lambdalayer",
    "func:_generate_log_group",
    "func:_generate_loggroup",
    "func:_generate_managediamrole",
    "func:_generate_precreatediamrole",
    "func:_generate_restapi",
    "func:_generate_s3bucketnotification",
    "func:_generate_scheduledevent",
    "func:_generate_snslambdasubscription",
    "func:_generate_sqseventsource",
    "func:_generate_websocketapi",
    "func:_get_value",
    "func:_inject_restapi_outputs",
    "func:_inject_websocketapi_outputs",
    "func:_load_template_to_merge",
    "func:_merge",
    "func:_merge_dict",
    "func:_register_cfn_resource_name",
    "func:_to_json",
    "func:_to_yaml",
    "func:construct_resources",
    "func:create_app_packager",
    "func:dispatch",
    "func:generate",
    "func:is_yaml_template",
    "func:load_template",
    "func:merge",
    "func:package_app",
    "func:process",
    "func:serialize_template",
    "func:service_principal"
  ],
  "packager.py_gpt4_e50cfe74.py": [
    "class:AppOnlyDeploymentPackager",
    "class:BaseLambdaDeploymentPackager",
    "class:DependencyBuilder",
    "class:EmptyPackageError",
    "class:InvalidSourceDistributionNameError",
    "class:LambdaDeploymentPackager",
    "class:LayerDeploymentPackager",
    "class:MissingDependencyError",
    "class:NoSuchPackageError",
    "class:Package",
    "class:PackageDownloadError",
    "class:PipRunner",
    "class:SDistMetadataFetcher",
    "class:SubprocessPip",
    "class:UnsupportedPackageError",
    "func:__eq__",
    "func:__hash__",
    "func:__init__",
    "func:__repr__",
    "func:__str__",
    "func:_add_app_files",
    "func:_add_py_deps",
    "func:_add_vendor_files",
    "func:_apply_wheel_whitelist",
    "func:_build_python_dependencies",
    "func:_build_sdists",
    "func:_calculate_name_and_version",
    "func:_categorize_deps",
    "func:_categorize_wheel_files",
    "func:_check_valid_package",
    "func:_create_output_dir_if_needed",
    "func:_deployment_package_filename",
    "func:_download_all_dependencies",
    "func:_download_binary_wheels",
    "func:_download_dependencies",
    "func:_download_sdists",
    "func:_execute",
    "func:_find_sdists",
    "func:_get_pkg_info_filepath",
    "func:_get_requirements_filename",
    "func:_has_at_least_one_package",
    "func:_hash_project_dir",
    "func:_hash_vendor_dir",
    "func:_install_purelib_and_platlib",
    "func:_install_wheels",
    "func:_is_compatible_platform_tag",
    "func:_is_compatible_wheel_filename",
    "func:_iter_all_compatibility_tags",
    "func:_iter_app_filenames",
    "func:_iter_chalice_lib_if_needed",
    "func:_needs_latest_version",
    "func:_normalize_name",
    "func:_parse_pkg_info_file",
    "func:_unpack_sdist_into_dir",
    "func:build_site_packages",
    "func:build_wheel",
    "func:create_deployment_package",
    "func:data_dir",
    "func:deployment_package_filename",
    "func:download_all_dependencies",
    "func:download_manylinux_wheels",
    "func:download_sdists",
    "func:get_package_name_and_version",
    "func:identifier",
    "func:inject_latest_app",
    "func:main",
    "func:matches_data_dir",
    "func:name"
  ],
  "param.py_gpt4_dca155b0.py": [
    "class:ExecutedParamName",
    "func:__init__",
    "func:__repr__",
    "func:_add_argument_issue",
    "func:_error_argument_count",
    "func:get_executed_param_names",
    "func:get_executed_param_names_and_issues",
    "func:infer",
    "func:matches_signature",
    "func:too_many_args"
  ],
  "param_functions.py_gpt4_04bd1709.py": [
    "func:Body",
    "func:Cookie",
    "func:Depends",
    "func:File",
    "func:Form",
    "func:Header",
    "func:Path",
    "func:Query",
    "func:Security"
  ],
  "params.py_gpt4_31063833.py": [
    "class:Params",
    "func:__delitem__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__setitem__",
    "func:__str__",
    "func:_check_is_dict",
    "func:_environment_variables",
    "func:_is_dict_free",
    "func:_is_encodable",
    "func:_replace_none",
    "func:as_dict",
    "func:as_flat_dict",
    "func:as_ordered_dict",
    "func:assert_empty",
    "func:duplicate",
    "func:evaluate_file",
    "func:evaluate_snippet",
    "func:from_file",
    "func:get",
    "func:get_hash",
    "func:infer_and_cast",
    "func:log_recursively",
    "func:order_dict",
    "func:order_func",
    "func:parse_overrides",
    "func:pop",
    "func:pop_bool",
    "func:pop_choice",
    "func:pop_float",
    "func:pop_int",
    "func:recurse",
    "func:remove_keys_from_params",
    "func:to_file",
    "func:with_overrides"
  ],
  "params.py_gpt4_5f47f3d9.py": [
    "class:Body",
    "class:Cookie",
    "class:Depends",
    "class:File",
    "class:Form",
    "class:Header",
    "class:Param",
    "class:ParamTypes",
    "class:Path",
    "class:Query",
    "class:Security",
    "func:__init__",
    "func:__repr__"
  ],
  "params.py_gpt4_e6727dc5.py": [
    "class:Bool",
    "class:BrokerList",
    "class:Codec",
    "class:Credentials",
    "class:Dict",
    "class:EnumParam",
    "class:Int",
    "class:LogHandlers",
    "class:Number",
    "class:Param",
    "class:Path",
    "class:Port",
    "class:SSLContext",
    "class:Seconds",
    "class:Severity",
    "class:Str",
    "class:Timezone",
    "class:URL",
    "class:UnsignedInt",
    "class:Version",
    "class:_Int",
    "class:_Section",
    "class:_Settings",
    "class:_Symbol",
    "func:Enum",
    "func:Symbol",
    "func:__get__",
    "func:__init__",
    "func:__set__",
    "func:_init_options",
    "func:_out_of_range",
    "func:active",
    "func:broker_list",
    "func:build_deprecation_warning",
    "func:class_name",
    "func:convert",
    "func:deprecated",
    "func:on_get",
    "func:on_get_value",
    "func:on_init_set_default",
    "func:on_init_set_value",
    "func:on_set",
    "func:on_set_default",
    "func:prepare_get",
    "func:prepare_init_default",
    "func:prepare_path",
    "func:prepare_set",
    "func:set_class_default",
    "func:to_bool",
    "func:to_python",
    "func:validate_after",
    "func:validate_before"
  ],
  "parse.py_gpt4_20a9738b.py": [
    "class:ParseError",
    "class:Parser",
    "func:__init__",
    "func:addtoken",
    "func:classify",
    "func:pop",
    "func:push",
    "func:setup",
    "func:shift"
  ],
  "parse.py_gpt4_b8cc2822.py": [
    "class:ParseError",
    "class:Parser",
    "class:Recorder",
    "func:__init__",
    "func:_addtoken",
    "func:add_token",
    "func:addtoken",
    "func:backtrack",
    "func:classify",
    "func:determine_route",
    "func:ilabels",
    "func:lam_sub",
    "func:pop",
    "func:push",
    "func:setup",
    "func:shift",
    "func:stack_copy",
    "func:switch_to"
  ],
  "parser.py_gpt4_1d5abd97.py": [
    "class:BaseParser",
    "class:InternalParseError",
    "class:ParserSyntaxError",
    "class:Stack",
    "class:StackNode",
    "func:__init__",
    "func:__repr__",
    "func:_add_token",
    "func:_allowed_transition_names_and_token_types",
    "func:_pop",
    "func:_token_to_transition",
    "func:convert_leaf",
    "func:convert_node",
    "func:error_recovery",
    "func:iterate",
    "func:nonterminal",
    "func:parse"
  ],
  "parser.py_gpt4_d4af11f1.py": [
    "class:Parser",
    "func:__init__",
    "func:_recovery_tokenize",
    "func:_stack_removal",
    "func:convert_leaf",
    "func:convert_node",
    "func:current_suite",
    "func:error_recovery",
    "func:parse"
  ],
  "parser_utils.py_gpt4_8eed369c.py": [
    "func:_function_is_x_method",
    "func:_get_parent_scope_cache",
    "func:clean_scope_docstring",
    "func:cut_value_at_position",
    "func:expr_is_dotted",
    "func:find_statement_documentation",
    "func:for_stmt_defines_one_name",
    "func:get_cached_code_lines",
    "func:get_executable_nodes",
    "func:get_flow_branch_keyword",
    "func:get_following_comment_same_line",
    "func:get_parent_scope",
    "func:get_parso_cache_node",
    "func:get_signature",
    "func:get_sync_comp_fors",
    "func:is_scope",
    "func:move",
    "func:safe_literal_eval",
    "func:wrapper"
  ],
  "partial.py_gpt4_eef62248.py": [
    "class:PartialParsing",
    "func:__init__",
    "func:_handle_element_change",
    "func:_schedule_for_parsing",
    "func:add_to_pp_files",
    "func:add_to_saved",
    "func:already_scheduled_for_parsing",
    "func:build_env_vars_to_files",
    "func:build_file_diff",
    "func:change_schema_file",
    "func:check_for_special_deleted_macros",
    "func:delete_disabled",
    "func:delete_doc_node",
    "func:delete_fixture_node",
    "func:delete_from_saved",
    "func:delete_macro_file",
    "func:delete_schema_data_test_patch",
    "func:delete_schema_exposure",
    "func:delete_schema_file",
    "func:delete_schema_group",
    "func:delete_schema_macro_patch",
    "func:delete_schema_metric",
    "func:delete_schema_mssa_links",
    "func:delete_schema_saved_query",
    "func:delete_schema_semantic_model",
    "func:delete_schema_source",
    "func:delete_schema_unit_test",
    "func:delete_yaml_snapshot",
    "func:get_diff_for",
    "func:get_parsing_files",
    "func:get_schema_element",
    "func:get_schema_file_for_source",
    "func:get_source_override_file_and_dict",
    "func:handle_added_schema_file",
    "func:handle_change",
    "func:handle_macro_file_links",
    "func:handle_schema_file_changes",
    "func:merge_patch",
    "func:recursively_gather_macro_references",
    "func:remove_mssat_file",
    "func:remove_node_in_saved",
    "func:remove_source_override_target",
    "func:remove_tests",
    "func:schedule_macro_nodes_for_parsing",
    "func:schedule_nodes_for_parsing",
    "func:schedule_referencing_nodes_for_parsing",
    "func:skip_parsing",
    "func:update_doc_in_saved",
    "func:update_fixture_in_saved",
    "func:update_in_saved",
    "func:update_macro_in_saved",
    "func:update_mssat_in_saved"
  ],
  "pathfinding.py_gpt4_40519248.py": [
    "class:IOU",
    "class:PFSConfig",
    "class:PFSInfo",
    "class:PFSProxy",
    "func:__init__",
    "func:_query_address_metadata",
    "func:_query_paths",
    "func:as_json",
    "func:check_pfs_for_production",
    "func:configure_pfs_or_exit",
    "func:create_current_iou",
    "func:get_last_iou",
    "func:get_pfs_info",
    "func:get_random_pfs",
    "func:get_valid_pfs_url",
    "func:make_iou",
    "func:post_pfs_feedback",
    "func:post_pfs_paths",
    "func:query_address_metadata",
    "func:query_paths",
    "func:sign",
    "func:update_iou"
  ],
  "payload.py_gpt4_0648dc16.py": [
    "class:AsyncIterablePayload",
    "class:BufferedReaderPayload",
    "class:BytesIOPayload",
    "class:BytesPayload",
    "class:IOBasePayload",
    "class:JsonPayload",
    "class:LookupError",
    "class:Order",
    "class:Payload",
    "class:PayloadRegistry",
    "class:StreamReaderPayload",
    "class:StringIOPayload",
    "class:StringPayload",
    "class:TextIOPayload",
    "class:payload_type",
    "func:__call__",
    "func:__init__",
    "func:_binary_headers",
    "func:content_type",
    "func:decode",
    "func:encoding",
    "func:filename",
    "func:get",
    "func:get_payload",
    "func:headers",
    "func:register",
    "func:register_payload",
    "func:set_content_disposition",
    "func:size"
  ],
  "pep8.py_gpt4_747b5b20.py": [
    "class:BackslashNode",
    "class:BlankLineAtEnd",
    "class:BracketNode",
    "class:ImplicitNode",
    "class:IndentationNode",
    "class:IndentationTypes",
    "class:PEP8Normalizer",
    "class:PEP8NormalizerConfig",
    "func:__init__",
    "func:__repr__",
    "func:_analyse_non_prefix",
    "func:_check_line_length",
    "func:_check_spacing",
    "func:_check_tabs_spaces",
    "func:_get_wanted_blank_lines_count",
    "func:_is_magic_name",
    "func:_reset_newlines",
    "func:_visit_node",
    "func:_visit_part",
    "func:add_if_spaces",
    "func:add_issue",
    "func:add_not_spaces",
    "func:get_latest_suite_node",
    "func:is_issue",
    "func:visit_leaf",
    "func:visit_node"
  ],
  "pipeline.py_gpt4_3c66a9fb.py": [
    "class:BasePipelineTemplate",
    "class:BaseResource",
    "class:BuildSpecExtractor",
    "class:CodeBuild",
    "class:CodeCommitSourceRepository",
    "class:CodePipeline",
    "class:CreatePipelineTemplateLegacy",
    "class:CreatePipelineTemplateV2",
    "class:GithubSource",
    "class:InvalidCodeBuildPythonVersion",
    "class:PipelineParameters",
    "func:__init__",
    "func:_add_bucket_store",
    "func:_add_cfn_deploy_role",
    "func:_add_codebuild_policy",
    "func:_add_codebuild_role",
    "func:_add_codepipeline_role",
    "func:_add_package_build",
    "func:_add_pipeline",
    "func:_add_s3_bucket",
    "func:_code_commit_source",
    "func:_create_beta_stage",
    "func:_create_build_stage",
    "func:_create_pipeline_stages",
    "func:_create_source_stage",
    "func:_extract_version",
    "func:_get_codebuild_image",
    "func:_github_source",
    "func:_lock_to_minor_version",
    "func:_validate_python_version",
    "func:add_to_template",
    "func:create_buildspec_legacy",
    "func:create_buildspec_v2",
    "func:create_template",
    "func:extract_buildspec"
  ],
  "pivot.py_gpt4_366d7a7a.py": [
    "func:__internal_pivot_table",
    "func:_add_margins",
    "func:_all_key",
    "func:_build_names_mapper",
    "func:_compute_grand_margin",
    "func:_convert_by",
    "func:_generate_marginal_results",
    "func:_generate_marginal_results_without_values",
    "func:_get_names",
    "func:_normalize",
    "func:crosstab",
    "func:pivot",
    "func:pivot_table"
  ],
  "predict.py_gpt4_ba4516a8.py": [
    "class:Predict",
    "class:_PredictManager",
    "func:__init__",
    "func:_get_instance_data",
    "func:_get_json_data",
    "func:_get_predictor",
    "func:_maybe_print_to_console_and_file",
    "func:_predict",
    "func:_predict_instances",
    "func:_predict_json",
    "func:add_subparser",
    "func:run"
  ],
  "predict_test.py_gpt4_407f9b49.py": [
    "class:CsvPredictor",
    "class:ExplicitPredictor",
    "class:ExtraArgsPredictor",
    "class:FakeDatasetReader",
    "class:TestPredict",
    "class:_TestPredictor",
    "func:__init__",
    "func:dump_line",
    "func:load_line",
    "func:predict_json",
    "func:setup_method",
    "func:test_add_predict_subparser",
    "func:test_alternative_file_formats",
    "func:test_base_predictor",
    "func:test_batch_prediction_works_with_known_model",
    "func:test_can_specify_extra_args",
    "func:test_can_specify_predictor",
    "func:test_fails_without_required_args",
    "func:test_other_modules",
    "func:test_uses_correct_dataset_reader",
    "func:test_using_dataset_reader_works_with_known_model",
    "func:test_works_with_known_model"
  ],
  "predictor.py_gpt4_9b7f9dd3.py": [
    "class:Predictor",
    "func:__init__",
    "func:_add_output",
    "func:_batch_json_to_instances",
    "func:_json_to_instance",
    "func:_register_embedding_gradient_hooks",
    "func:add_output",
    "func:capture_model_internals",
    "func:dump_line",
    "func:from_archive",
    "func:from_path",
    "func:get_gradients",
    "func:get_interpretable_layer",
    "func:get_interpretable_text_field_embedder",
    "func:get_token_offsets",
    "func:hook_layers",
    "func:json_to_labeled_instances",
    "func:load_line",
    "func:predict_batch_instance",
    "func:predict_batch_json",
    "func:predict_instance",
    "func:predict_json",
    "func:predictions_to_labeled_instances"
  ],
  "pretrained_transformer_embedder.py_gpt4_193bb568.py": [
    "class:PretrainedTransformerEmbedder",
    "func:__init__",
    "func:_fold_long_sequences",
    "func:_number_of_token_type_embeddings",
    "func:_unfold_long_sequences",
    "func:fold",
    "func:forward",
    "func:get_output_dim",
    "func:lengths_to_mask",
    "func:train"
  ],
  "pretrained_transformer_indexer.py_gpt4_f8ddac69.py": [
    "class:PretrainedTransformerIndexer",
    "func:__eq__",
    "func:__init__",
    "func:_add_encoding_to_vocabulary_if_needed",
    "func:_extract_token_and_type_ids",
    "func:_postprocess_output",
    "func:as_padded_tensor_dict",
    "func:count_vocab_items",
    "func:get_empty_token_list",
    "func:indices_to_tokens",
    "func:tokens_to_indices"
  ],
  "pretrained_transformer_mismatched_indexer.py_gpt4_718c7bc6.py": [
    "class:PretrainedTransformerMismatchedIndexer",
    "func:__eq__",
    "func:__init__",
    "func:as_padded_tensor_dict",
    "func:count_vocab_items",
    "func:get_empty_token_list",
    "func:tokens_to_indices"
  ],
  "pretrained_transformer_tokenizer.py_gpt4_2ae9a1cc.py": [
    "class:PretrainedTransformerTokenizer",
    "func:__init__",
    "func:_estimate_character_indices",
    "func:_increment_offsets",
    "func:_intra_word_tokenize",
    "func:_reverse_engineer_special_tokens",
    "func:_to_params",
    "func:add_special_tokens",
    "func:intra_word_tokenize",
    "func:intra_word_tokenize_sentence_pair",
    "func:num_special_tokens_for_pair",
    "func:num_special_tokens_for_sequence",
    "func:tokenize",
    "func:tokenizer_lowercases",
    "func:with_new_type_id"
  ],
  "profile.py_gpt4_40dc588b.py": [
    "class:Profile",
    "func:__eq__",
    "func:__init__",
    "func:_credentials_from_profile",
    "func:_get_profile_data",
    "func:default_profiles_dir",
    "func:from_credentials",
    "func:from_raw_profile_info",
    "func:from_raw_profiles",
    "func:pick_profile_name",
    "func:read_profile",
    "func:render",
    "func:render_profile",
    "func:to_profile_info",
    "func:to_target_dict",
    "func:validate"
  ],
  "project.py_gpt4_a2c4245c.py": [
    "class:TestProjInfo",
    "func:__init__",
    "func:adapter",
    "func:analyses",
    "func:clean_up_logging",
    "func:create_test_schema",
    "func:dbt_profile_data",
    "func:dbt_profile_target",
    "func:dbt_project_yml",
    "func:dependencies",
    "func:dependencies_yml",
    "func:drop_test_schema",
    "func:environment",
    "func:get_tables_in_schema",
    "func:initialization",
    "func:logs_dir",
    "func:macros",
    "func:models",
    "func:packages",
    "func:packages_yml",
    "func:prefix",
    "func:profile_user",
    "func:profiles_config_update",
    "func:profiles_root",
    "func:profiles_yml",
    "func:project",
    "func:project_config_update",
    "func:project_files",
    "func:project_root",
    "func:project_setup",
    "func:properties",
    "func:run_sql",
    "func:run_sql_file",
    "func:seeds",
    "func:selectors",
    "func:selectors_yml",
    "func:shared_data_dir",
    "func:snapshots",
    "func:test_config",
    "func:test_data_dir",
    "func:tests",
    "func:unique_schema",
    "func:write_project_files",
    "func:write_project_files_recursively"
  ],
  "project.py_gpt4_bf7132a4.py": [
    "class:IsFQNResource",
    "class:PartialProject",
    "class:Project",
    "class:RenderComponents",
    "class:VarProvider",
    "func:__eq__",
    "func:__init__",
    "func:__str__",
    "func:_all_source_paths",
    "func:_get_required_version",
    "func:_load_yaml",
    "func:_parse_versions",
    "func:_query_comment_from_cfg",
    "func:all_source_paths",
    "func:check_config_path",
    "func:create_project",
    "func:fixture_paths",
    "func:flag_or",
    "func:from_dicts",
    "func:from_project_root",
    "func:generic_test_paths",
    "func:get_default_selector_name",
    "func:get_macro_search_order",
    "func:get_rendered",
    "func:get_selector",
    "func:hashed_name",
    "func:load_raw_project",
    "func:load_yml_dict",
    "func:package_and_project_data_from_root",
    "func:package_config_from_data",
    "func:project_target_path",
    "func:read_project_flags",
    "func:render",
    "func:render_package_metadata",
    "func:render_profile_name",
    "func:to_dict",
    "func:to_project_config",
    "func:validate",
    "func:validate_version",
    "func:value_or",
    "func:vars_for"
  ],
  "project.py_gpt4_e708b8cd.py": [
    "class:Project",
    "func:__init__",
    "func:__repr__",
    "func:_get_base_sys_path",
    "func:_get_config_folder_path",
    "func:_get_json_path",
    "func:_get_sys_path",
    "func:_is_django_path",
    "func:_is_potential_project",
    "func:_remove_duplicates_from_path",
    "func:_remove_imports",
    "func:_search_func",
    "func:_try_to_skip_duplicates",
    "func:complete_search",
    "func:get_default_project",
    "func:get_environment",
    "func:load",
    "func:load_unsafe_extensions",
    "func:path",
    "func:save",
    "func:search",
    "func:smart_sys_path",
    "func:sys_path",
    "func:wrapper"
  ],
  "providers.py_gpt4_5c8bb950.py": [
    "class:BaseDatabaseWrapper",
    "class:BaseMetricResolver",
    "class:BaseRefResolver",
    "class:BaseResolver",
    "class:BaseSourceResolver",
    "class:Config",
    "class:ExposureMetricResolver",
    "class:ExposureRefResolver",
    "class:ExposureSourceResolver",
    "class:GenerateNameProvider",
    "class:MacroContext",
    "class:ModelConfiguredVar",
    "class:ModelContext",
    "class:OperationProvider",
    "class:OperationRefResolver",
    "class:ParseConfigObject",
    "class:ParseDatabaseWrapper",
    "class:ParseMetricResolver",
    "class:ParseProvider",
    "class:ParseRefResolver",
    "class:ParseSourceResolver",
    "class:ParseVar",
    "class:Provider",
    "class:ProviderContext",
    "class:RelationProxy",
    "class:RuntimeConfigObject",
    "class:RuntimeDatabaseWrapper",
    "class:RuntimeMetricResolver",
    "class:RuntimeProvider",
    "class:RuntimeRefResolver",
    "class:RuntimeSourceResolver",
    "class:RuntimeUnitTestProvider",
    "class:RuntimeUnitTestRefResolver",
    "class:RuntimeUnitTestSourceResolver",
    "class:RuntimeVar",
    "class:SemanticModelRefResolver",
    "class:SourceContext",
    "class:SourceQuotingBaseConfig",
    "class:TestContext",
    "class:UnitTestContext",
    "class:UnitTestVar",
    "func:Relation",
    "func:__call__",
    "func:__getattr__",
    "func:__init__",
    "func:_build_namespace",
    "func:_build_test_namespace",
    "func:_generate_merged",
    "func:_get_adapter_macro_prefixes",
    "func:_get_namespace_builder",
    "func:_get_search_packages",
    "func:_lookup",
    "func:_repack_args",
    "func:_sql_results",
    "func:_transform_config",
    "func:_validate",
    "func:adapter_macro",
    "func:api",
    "func:column",
    "func:commit",
    "func:compiled_code",
    "func:config",
    "func:create",
    "func:create_relation",
    "func:ctx_adapter",
    "func:ctx_config",
    "func:ctx_model",
    "func:current_project",
    "func:database",
    "func:dbt_metadata_envs",
    "func:defer_relation",
    "func:dispatch",
    "func:env",
    "func:env_var",
    "func:exceptions",
    "func:execute",
    "func:generate_generate_name_macro_context",
    "func:generate_parse_exposure",
    "func:generate_parse_semantic_models",
    "func:generate_parser_model_context",
    "func:generate_runtime_macro_context",
    "func:generate_runtime_model_context",
    "func:generate_runtime_unit_test_context",
    "func:generate_test_context",
    "func:get",
    "func:get_missing_var",
    "func:graph",
    "func:inner",
    "func:invocation_args_dict",
    "func:load_agate_table",
    "func:load_result",
    "func:metric",
    "func:packages_for_node",
    "func:persist_column_docs",
    "func:persist_relation_docs",
    "func:post_hooks",
    "func:pre_hooks",
    "func:ref",
    "func:render",
    "func:require",
    "func:resolve",
    "func:resolve_event_time_filter",
    "func:resolve_limit",
    "func:schema",
    "func:selected_resources",
    "func:set",
    "func:source",
    "func:source_node",
    "func:sql",
    "func:sql_now",
    "func:store_raw_result",
    "func:store_result",
    "func:submit_python_job",
    "func:this",
    "func:try_or_compiler_error",
    "func:type",
    "func:validate",
    "func:validate_any",
    "func:validate_args",
    "func:validation",
    "func:var",
    "func:write"
  ],
  "py2md.py_gpt4_0d5aee8c.py": [
    "class:AllenNlpDocstringProcessor",
    "class:AllenNlpFilterProcessor",
    "class:AllenNlpRenderer",
    "class:DocstringError",
    "class:Param",
    "class:ProcessorState",
    "class:RetVal",
    "class:Section",
    "func:_check",
    "func:_format_classdef_signature",
    "func:_format_data_signature",
    "func:_format_function_signature",
    "func:_preprocess_line",
    "func:_py2md_wrapper",
    "func:_render_module_breadcrumbs",
    "func:_render_object",
    "func:_transform_cross_references",
    "func:emphasize",
    "func:from_line",
    "func:from_str",
    "func:main",
    "func:parse_args",
    "func:process",
    "func:process_node",
    "func:py2md",
    "func:to_line"
  ],
  "pycodestyle.py_gpt4_48a20e9a.py": [
    "class:BaseReport",
    "class:Checker",
    "class:DiffReport",
    "class:FileReport",
    "class:StandardReport",
    "class:StyleGuide",
    "func:__init__",
    "func:_add_check",
    "func:_break_around_binary_operators",
    "func:_get_parameters",
    "func:_is_binary_operator",
    "func:_is_eol_token",
    "func:_is_one_liner",
    "func:_main",
    "func:_parse_multi_options",
    "func:ambiguous_identifier",
    "func:bare_except",
    "func:blank_lines",
    "func:break_after_binary_operator",
    "func:break_before_binary_operator",
    "func:build_tokens_line",
    "func:check_all",
    "func:check_ast",
    "func:check_files",
    "func:check_logical",
    "func:check_physical",
    "func:comparison_negative",
    "func:comparison_to_singleton",
    "func:comparison_type",
    "func:compound_statements",
    "func:continued_indentation",
    "func:error",
    "func:excluded",
    "func:expand_indent",
    "func:explicit_line_join",
    "func:extraneous_whitespace",
    "func:filename_match",
    "func:generate_tokens",
    "func:get_checks",
    "func:get_count",
    "func:get_file_results",
    "func:get_parser",
    "func:get_statistics",
    "func:ignore_code",
    "func:imports_on_separate_lines",
    "func:increment_logical_line",
    "func:indentation",
    "func:init_checker_state",
    "func:init_file",
    "func:init_report",
    "func:input_dir",
    "func:input_file",
    "func:is_string_literal",
    "func:maximum_doc_length",
    "func:maximum_line_length",
    "func:maybe_check_physical",
    "func:missing_whitespace",
    "func:missing_whitespace_after_import_keyword",
    "func:missing_whitespace_around_operator",
    "func:module_imports_on_top_of_file",
    "func:mute_string",
    "func:normalize_paths",
    "func:parse_udiff",
    "func:print_benchmark",
    "func:print_statistics",
    "func:process_options",
    "func:python_3000_async_await_keywords",
    "func:python_3000_backticks",
    "func:python_3000_has_key",
    "func:python_3000_invalid_escape_sequence",
    "func:python_3000_not_equal",
    "func:python_3000_raise_comma",
    "func:read_config",
    "func:readline",
    "func:readlines",
    "func:register_check",
    "func:report_invalid_syntax",
    "func:run_check",
    "func:start",
    "func:stdin_get_value",
    "func:stop",
    "func:tabs_obsolete",
    "func:tabs_or_spaces",
    "func:trailing_blank_lines",
    "func:trailing_whitespace",
    "func:update_counts",
    "func:whitespace_around_comma",
    "func:whitespace_around_keywords",
    "func:whitespace_around_named_parameter_equals",
    "func:whitespace_around_operator",
    "func:whitespace_before_comment",
    "func:whitespace_before_parameters"
  ],
  "pytables.py_gpt4_a09fe49a.py": [
    "class:AppendableFrameTable",
    "class:AppendableMultiFrameTable",
    "class:AppendableMultiSeriesTable",
    "class:AppendableSeriesTable",
    "class:AppendableTable",
    "class:BlockManagerFixed",
    "class:DataCol",
    "class:DataIndexableCol",
    "class:Fixed",
    "class:FrameFixed",
    "class:GenericDataIndexableCol",
    "class:GenericFixed",
    "class:GenericIndexCol",
    "class:GenericTable",
    "class:HDFStore",
    "class:IndexCol",
    "class:Selection",
    "class:SeriesFixed",
    "class:Table",
    "class:TableIterator",
    "class:WORMTable",
    "func:__contains__",
    "func:__delitem__",
    "func:__enter__",
    "func:__eq__",
    "func:__exit__",
    "func:__fspath__",
    "func:__getattr__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__ne__",
    "func:__repr__",
    "func:__setitem__",
    "func:_alias_to_class",
    "func:_check_if_open",
    "func:_class_to_alias",
    "func:_complevel",
    "func:_convert_index",
    "func:_convert_string_array",
    "func:_create_axes",
    "func:_create_nodes_and_group",
    "func:_create_storer",
    "func:_dtype_to_kind",
    "func:_ensure_encoding",
    "func:_ensure_str",
    "func:_ensure_term",
    "func:_filters",
    "func:_fletcher32",
    "func:_get_atom",
    "func:_get_blocks_and_items",
    "func:_get_converter",
    "func:_get_data_and_dtype_name",
    "func:_get_index_factory",
    "func:_get_metadata_path",
    "func:_get_tz",
    "func:_handle",
    "func:_identify_group",
    "func:_is_metadata_of",
    "func:_maybe_adjust_name",
    "func:_maybe_convert",
    "func:_maybe_convert_for_string_atom",
    "func:_need_convert",
    "func:_read_axes",
    "func:_read_group",
    "func:_reindex_axis",
    "func:_set_tz",
    "func:_tables",
    "func:_unconvert_index",
    "func:_unconvert_string_array",
    "func:_validate_format",
    "func:_write_to_group",
    "func:append",
    "func:append_to_multiple",
    "func:attrs",
    "func:axes",
    "func:close",
    "func:col",
    "func:convert",
    "func:copy",
    "func:create_description",
    "func:create_index",
    "func:create_table_index",
    "func:cvalues",
    "func:data_orientation",
    "func:delete",
    "func:description",
    "func:dtype",
    "func:dtype_attr",
    "func:f",
    "func:filename",
    "func:flush",
    "func:func",
    "func:generate",
    "func:get",
    "func:get_atom_coltype",
    "func:get_atom_data",
    "func:get_atom_datetime64",
    "func:get_atom_string",
    "func:get_atom_timedelta64",
    "func:get_attrs",
    "func:get_blk_items",
    "func:get_node",
    "func:get_object",
    "func:get_result",
    "func:get_storer",
    "func:groups",
    "func:index_cols",
    "func:indexables",
    "func:infer_axes",
    "func:info",
    "func:is_exists",
    "func:is_indexed",
    "func:is_multi_index",
    "func:is_old_version",
    "func:is_open",
    "func:is_transposed",
    "func:items",
    "func:itemsize",
    "func:keys",
    "func:kind_attr",
    "func:maybe_set_size",
    "func:meta_attr",
    "func:ncols",
    "func:nrows",
    "func:nrows_expected",
    "func:open",
    "func:pandas_type",
    "func:pathname",
    "func:process_axes",
    "func:process_filter",
    "func:put",
    "func:queryables",
    "func:read",
    "func:read_array",
    "func:read_column",
    "func:read_coordinates",
    "func:read_hdf",
    "func:read_index",
    "func:read_index_node",
    "func:read_metadata",
    "func:read_multi_index",
    "func:remove",
    "func:root",
    "func:select",
    "func:select_as_coordinates",
    "func:select_as_multiple",
    "func:select_column",
    "func:select_coords",
    "func:set_attr",
    "func:set_attrs",
    "func:set_data",
    "func:set_info",
    "func:set_object_info",
    "func:set_pos",
    "func:shape",
    "func:storable",
    "func:table",
    "func:table_type_short",
    "func:take_data",
    "func:to_hdf",
    "func:update_info",
    "func:validate",
    "func:validate_and_set",
    "func:validate_attr",
    "func:validate_col",
    "func:validate_data_columns",
    "func:validate_metadata",
    "func:validate_min_itemsize",
    "func:validate_multiindex",
    "func:validate_names",
    "func:validate_read",
    "func:validate_version",
    "func:values_cols",
    "func:version",
    "func:walk",
    "func:write",
    "func:write_array",
    "func:write_array_empty",
    "func:write_data",
    "func:write_data_chunk",
    "func:write_index",
    "func:write_metadata",
    "func:write_multi_index"
  ],
  "python.py_gpt4_6ca98bab.py": [
    "class:RaidenAPI",
    "func:__init__",
    "func:_batch_coop_settle",
    "func:_raise_for_invalid_channel_timeouts",
    "func:address",
    "func:channel_batch_close",
    "func:channel_close",
    "func:channel_open",
    "func:config",
    "func:event_filter_for_payments",
    "func:flatten_transfer",
    "func:get_channel",
    "func:get_channel_list",
    "func:get_new_notifications",
    "func:get_node_network_state",
    "func:get_pending_transfers",
    "func:get_raiden_events_payment_history_with_timestamps",
    "func:get_raiden_internal_events_with_timestamps",
    "func:get_token_network_address_for_token_address",
    "func:get_tokens_list",
    "func:get_transfer_from_task",
    "func:is_already_existing_channel",
    "func:mint_token_for",
    "func:notifications",
    "func:plan_udc_withdraw",
    "func:set_reveal_timeout",
    "func:set_total_channel_deposit",
    "func:set_total_channel_withdraw",
    "func:set_total_udc_deposit",
    "func:shutdown",
    "func:token_network_leave",
    "func:token_network_register",
    "func:transfer_and_wait",
    "func:transfer_async",
    "func:transfer_tasks_view",
    "func:withdraw_from_udc"
  ],
  "python_lint_handler.py_gpt4_bc6a67c9.py": [
    "class:PythonLintHandler",
    "func:__init__",
    "func:_configure_linters",
    "func:_merge",
    "func:_normalize",
    "func:import_validator",
    "func:lint",
    "func:mypy",
    "func:pep257",
    "func:pep8",
    "func:pyflakes",
    "func:pylint"
  ],
  "pytorch_seq2seq_wrapper.py_gpt4_2eda3bde.py": [
    "class:AugmentedLstmSeq2SeqEncoder",
    "class:GruSeq2SeqEncoder",
    "class:LstmSeq2SeqEncoder",
    "class:PytorchSeq2SeqWrapper",
    "class:RnnSeq2SeqEncoder",
    "class:StackedAlternatingLstmSeq2SeqEncoder",
    "class:StackedBidirectionalLstmSeq2SeqEncoder",
    "func:__init__",
    "func:forward",
    "func:get_input_dim",
    "func:get_output_dim",
    "func:is_bidirectional"
  ],
  "pytorch_seq2vec_wrapper.py_gpt4_0cdf5468.py": [
    "class:AugmentedLstmSeq2VecEncoder",
    "class:GruSeq2VecEncoder",
    "class:LstmSeq2VecEncoder",
    "class:PytorchSeq2VecWrapper",
    "class:RnnSeq2VecEncoder",
    "class:StackedAlternatingLstmSeq2VecEncoder",
    "class:StackedBidirectionalLstmSeq2VecEncoder",
    "func:__init__",
    "func:forward",
    "func:get_input_dim",
    "func:get_output_dim"
  ],
  "pytree.py_gpt4_3ec1b766.py": [
    "class:Base",
    "class:BasePattern",
    "class:Leaf",
    "class:LeafPattern",
    "class:NegatedPattern",
    "class:Node",
    "class:NodePattern",
    "class:WildcardPattern",
    "func:__eq__",
    "func:__init__",
    "func:__ne__",
    "func:__new__",
    "func:__repr__",
    "func:__str__",
    "func:__unicode__",
    "func:_bare_name_matches",
    "func:_eq",
    "func:_iterative_matches",
    "func:_prefix_getter",
    "func:_prefix_setter",
    "func:_recursive_matches",
    "func:_submatch",
    "func:append_child",
    "func:changed",
    "func:clone",
    "func:convert",
    "func:depth",
    "func:generate_matches",
    "func:get_lineno",
    "func:get_prefix",
    "func:get_suffix",
    "func:insert_child",
    "func:leaves",
    "func:match",
    "func:match_seq",
    "func:next_sibling",
    "func:optimize",
    "func:post_order",
    "func:pre_order",
    "func:prev_sibling",
    "func:remove",
    "func:replace",
    "func:set_child",
    "func:set_prefix",
    "func:type_repr"
  ],
  "pytree.py_gpt4_4384c707.py": [
    "class:Base",
    "class:BasePattern",
    "class:Leaf",
    "class:LeafPattern",
    "class:NegatedPattern",
    "class:Node",
    "class:NodePattern",
    "class:WildcardPattern",
    "func:__deepcopy__",
    "func:__eq__",
    "func:__init__",
    "func:__new__",
    "func:__repr__",
    "func:__str__",
    "func:_bare_name_matches",
    "func:_eq",
    "func:_iterative_matches",
    "func:_recursive_matches",
    "func:_submatch",
    "func:append_child",
    "func:changed",
    "func:clone",
    "func:convert",
    "func:depth",
    "func:generate_matches",
    "func:get_lineno",
    "func:get_suffix",
    "func:insert_child",
    "func:invalidate_sibling_maps",
    "func:leaves",
    "func:match",
    "func:match_seq",
    "func:next_sibling",
    "func:optimize",
    "func:post_order",
    "func:pre_order",
    "func:prefix",
    "func:prev_sibling",
    "func:remove",
    "func:replace",
    "func:set_child",
    "func:type_repr",
    "func:update_sibling_maps"
  ],
  "query_cache_manager.py_gpt4_92c9b95d.py": [
    "class:QueryCacheManager",
    "func:__init__",
    "func:delete",
    "func:get",
    "func:has",
    "func:set",
    "func:set_query_result"
  ],
  "query_object.py_gpt4_3172d101.py": [
    "class:DeprecatedField",
    "class:QueryObject",
    "func:__init__",
    "func:__repr__",
    "func:_init_series_columns",
    "func:_move_deprecated_extra_fields",
    "func:_rename_deprecated_fields",
    "func:_sanitize_filters",
    "func:_set_annotation_layers",
    "func:_set_is_timeseries",
    "func:_set_metrics",
    "func:_set_post_processing",
    "func:_validate_no_have_duplicate_labels",
    "func:_validate_there_are_no_missing_series",
    "func:cache_key",
    "func:column_names",
    "func:exec_post_processing",
    "func:is_str_or_adhoc",
    "func:metric_names",
    "func:to_dict",
    "func:validate"
  ],
  "querysets.py_gpt4_1a705727.py": [
    "func:_extract_model_type_from_queryset",
    "func:determine_proper_manager_type",
    "func:extract_proper_type_queryset_values",
    "func:extract_proper_type_queryset_values_list",
    "func:get_field_type_from_lookup",
    "func:get_values_list_row_type",
    "func:resolve_field_lookups"
  ],
  "question_answering_suite.py_gpt4_d780ae69.py": [
    "class:QuestionAnsweringSuite",
    "func:__init__",
    "func:_contractions",
    "func:_crossproduct",
    "func:_default_taxonomy_tests",
    "func:_default_tests",
    "func:_default_vocabulary_tests",
    "func:_format_failing_examples",
    "func:_prediction_and_confidence_scores",
    "func:_setup_editor",
    "func:context_punctuation",
    "func:contractions",
    "func:preds_and_confs_fn",
    "func:punctuation",
    "func:question_typo",
    "func:typos"
  ],
  "queue.py_gpt4_cdaf5dd8.py": [
    "class:GraphQueue",
    "func:__init__",
    "func:__len__",
    "func:_already_known",
    "func:_find_new_additions",
    "func:_get_scores",
    "func:_grouped_topological_sort",
    "func:_include_in_cost",
    "func:_mark_in_progress",
    "func:empty",
    "func:get",
    "func:get_selected_nodes",
    "func:join",
    "func:mark_done",
    "func:wait_until_something_was_done"
  ],
  "raiden_network.py_gpt4_34be1bfe.py": [
    "class:RestartNode",
    "func:__call__",
    "func:__init__",
    "func:adhoc_capability",
    "func:capabilities",
    "func:link_exception_to",
    "func:pfs_mock",
    "func:raiden_chain",
    "func:raiden_network",
    "func:resolvers",
    "func:restart_node",
    "func:routing_mode",
    "func:timeout"
  ],
  "raiden_service.py_gpt4_abb03416.py": [
    "class:PaymentStatus",
    "class:RaidenService",
    "class:SyncTimeout",
    "class:SynchronizationState",
    "func:__init__",
    "func:__repr__",
    "func:_best_effort_synchronize",
    "func:_best_effort_synchronize_with_confirmed_head",
    "func:_blockchain_event_listener",
    "func:_handle_events",
    "func:_initialize_channel_fees",
    "func:_initialize_messages_queues",
    "func:_initialize_monitoring_services_queue",
    "func:_initialize_payment_statuses",
    "func:_initialize_ready_to_process_events",
    "func:_initialize_transactions_queues",
    "func:_initialize_wal",
    "func:_log_sync_progress",
    "func:_make_initial_state",
    "func:_maybe_snapshot",
    "func:_run",
    "func:_set_rest_api_service_available",
    "func:_start_alarm_task",
    "func:_start_transport",
    "func:_synchronize_with_blockchain",
    "func:_trigger_state_change_effects",
    "func:add_notification",
    "func:add_pending_greenlet",
    "func:async_handle_events",
    "func:confirmation_blocks",
    "func:get_block_number",
    "func:handle_and_track_state_changes",
    "func:handle_state_changes",
    "func:initiator_init",
    "func:matches",
    "func:maybe_upgrade_db",
    "func:mediated_transfer_async",
    "func:on_messages",
    "func:privkey",
    "func:remove",
    "func:set_channel_reveal_timeout",
    "func:should_continue",
    "func:sign",
    "func:smart_contract_filters_from_node_state",
    "func:start",
    "func:stop",
    "func:time_elapsed",
    "func:withdraw"
  ],
  "read_files.py_gpt4_374cf8d0.py": [
    "class:FileDiff",
    "class:InputFile",
    "class:ReadFiles",
    "class:ReadFilesFromDiff",
    "class:ReadFilesFromFileSystem",
    "func:generate_dbt_ignore_spec",
    "func:get_file_type_lookup",
    "func:get_file_types_for_project",
    "func:get_project_file_types",
    "func:get_project_name",
    "func:get_source_files",
    "func:load_seed_source_file",
    "func:load_source_file",
    "func:read_files",
    "func:read_files_for_parser",
    "func:read_files_for_project",
    "func:validate_yaml"
  ],
  "readers.py_gpt4_a025027f.py": [
    "class:TextFileReader",
    "class:_C_Parser_Defaults",
    "class:_Fwf_Defaults",
    "class:_read_shared",
    "func:TextParser",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:__next__",
    "func:_check_file_or_buffer",
    "func:_clean_na_values",
    "func:_clean_options",
    "func:_extract_dialect",
    "func:_failover_to_python",
    "func:_floatify_na_values",
    "func:_get_options_with_defaults",
    "func:_make_engine",
    "func:_merge_with_dialect_properties",
    "func:_read",
    "func:_refine_defaults_read",
    "func:_stringify_na_values",
    "func:_validate_dialect",
    "func:_validate_names",
    "func:_validate_skipfooter",
    "func:close",
    "func:get_chunk",
    "func:read",
    "func:read_csv",
    "func:read_fwf",
    "func:read_table",
    "func:validate_integer"
  ],
  "record.py_gpt4_e4228424.py": [
    "class:Record",
    "func:_BUILD_asdict",
    "func:_BUILD_asdict_field",
    "func:_BUILD_eq",
    "func:_BUILD_ge",
    "func:_BUILD_gt",
    "func:_BUILD_hash",
    "func:_BUILD_init",
    "func:_BUILD_input_translate_fields",
    "func:_BUILD_le",
    "func:_BUILD_lt",
    "func:_BUILD_ne",
    "func:__eq__",
    "func:__ge__",
    "func:__gt__",
    "func:__init__",
    "func:__init_subclass__",
    "func:__json__",
    "func:__le__",
    "func:__lt__",
    "func:__ne__",
    "func:_contribute_field_descriptors",
    "func:_contribute_methods",
    "func:_contribute_to_options",
    "func:_derive",
    "func:_humanize",
    "func:_kvrepr",
    "func:_prepare_dict",
    "func:add_related_to_tagged_indices",
    "func:add_to_tagged_indices",
    "func:asdict",
    "func:from_data",
    "func:generate_prepare_value",
    "func:generate_setter",
    "func:to_representation"
  ],
  "redis.py_gpt4_a3218d12.py": [
    "class:CacheBackend",
    "class:RedisScheme",
    "class:_RedisClientT",
    "func:__init__",
    "func:_as_cluster_kwargs",
    "func:_client_from_url_and_query",
    "func:_db_from_path",
    "func:_float_from_str",
    "func:_init_schemes",
    "func:_int_from_str",
    "func:_new_client",
    "func:_prepare_client_kwargs",
    "func:client"
  ],
  "ref_resolver.py_gpt4_a5e6c61c.py": [
    "class:Loader",
    "class:NormDict",
    "func:SubLoader",
    "func:__contains__",
    "func:__delitem__",
    "func:__getitem__",
    "func:__init__",
    "func:__setitem__",
    "func:_add_properties",
    "func:add_context",
    "func:add_namespaces",
    "func:add_schemas",
    "func:check_file",
    "func:expand_url",
    "func:fetch",
    "func:fetch_text",
    "func:getid",
    "func:merge_properties",
    "func:resolve_all",
    "func:resolve_ref",
    "func:validate_link",
    "func:validate_links"
  ],
  "refactor.py_gpt4_d1039c8d.py": [
    "class:FixerError",
    "class:MultiprocessRefactoringTool",
    "class:MultiprocessingUnsupported",
    "class:RefactoringTool",
    "class:_EveryNode",
    "func:__init__",
    "func:_child",
    "func:_detect_future_features",
    "func:_from_system_newlines",
    "func:_get_head_types",
    "func:_get_headnode_dict",
    "func:_identity",
    "func:_read_python_source",
    "func:_to_system_newlines",
    "func:advance",
    "func:gen_lines",
    "func:get_all_fix_names",
    "func:get_fixers",
    "func:get_fixers_from_package",
    "func:log_debug",
    "func:log_error",
    "func:log_message",
    "func:parse_block",
    "func:print_output",
    "func:processed_file",
    "func:refactor",
    "func:refactor_dir",
    "func:refactor_docstring",
    "func:refactor_doctest",
    "func:refactor_file",
    "func:refactor_stdin",
    "func:refactor_string",
    "func:refactor_tree",
    "func:summarize",
    "func:traverse_by",
    "func:wrap_toks",
    "func:write_file"
  ],
  "references.py_gpt4_e8e53b01.py": [
    "func:_add_names_in_same_context",
    "func:_check_fs",
    "func:_dictionarize",
    "func:_find_defining_names",
    "func:_find_global_variables",
    "func:_find_names",
    "func:_find_project_modules",
    "func:_find_python_files_in_sys_path",
    "func:_resolve_names",
    "func:find_references",
    "func:get_module_contexts_containing_name",
    "func:gitignored_lines",
    "func:recurse_find_python_files",
    "func:recurse_find_python_folders_and_files",
    "func:search_in_file_ios"
  ],
  "region_detector.py_gpt4_6c3cb449.py": [
    "class:FasterRcnnRegionDetector",
    "class:RandomRegionDetector",
    "class:RegionDetector",
    "class:RegionDetectorOutput",
    "func:__init__",
    "func:_postprocess_detections",
    "func:_seeded_random_tensor",
    "func:forward"
  ],
  "regions.py_gpt4_08792844.py": [
    "class:BaseEndpointResolver",
    "class:EndpointResolver",
    "func:__init__",
    "func:_endpoint_for_partition",
    "func:_expand_template",
    "func:_merge_keys",
    "func:_region_match",
    "func:_resolve",
    "func:construct_endpoint",
    "func:get_available_endpoints",
    "func:get_available_partitions"
  ],
  "registry.py_gpt4_41523333.py": [
    "class:Registry",
    "func:Model",
    "func:__init__",
    "func:_loads",
    "func:_prepare_payload",
    "func:_serializer",
    "func:dumps_key",
    "func:dumps_value",
    "func:loads_key",
    "func:loads_value"
  ],
  "requests_html.py_gpt4_7179eafa.py": [
    "class:AsyncHTMLSession",
    "class:BaseParser",
    "class:BaseSession",
    "class:Element",
    "class:HTML",
    "class:HTMLResponse",
    "class:HTMLSession",
    "class:MaxRetries",
    "func:__aiter__",
    "func:__convert",
    "func:__init__",
    "func:__iter__",
    "func:__next__",
    "func:__repr__",
    "func:_convert_cookiejar_to_render",
    "func:_convert_cookiesjar_to_render",
    "func:_from_response",
    "func:_get_first_or_list",
    "func:_make_absolute",
    "func:absolute_links",
    "func:add_next_symbol",
    "func:attrs",
    "func:base_url",
    "func:browser",
    "func:close",
    "func:encoding",
    "func:find",
    "func:full_text",
    "func:gen",
    "func:get_next",
    "func:html",
    "func:links",
    "func:lxml",
    "func:next",
    "func:pq",
    "func:raw_html",
    "func:render",
    "func:request",
    "func:response_hook",
    "func:run",
    "func:search",
    "func:search_all",
    "func:text",
    "func:user_agent",
    "func:xpath"
  ],
  "resample.py_gpt4_ca3f1bbe.py": [
    "class:DatetimeIndexResampler",
    "class:DatetimeIndexResamplerGroupby",
    "class:PeriodIndexResampler",
    "class:PeriodIndexResamplerGroupby",
    "class:Resampler",
    "class:TimeGrouper",
    "class:TimedeltaIndexResampler",
    "class:TimedeltaIndexResamplerGroupby",
    "class:_GroupByMixin",
    "func:__getattr__",
    "func:__init__",
    "func:__str__",
    "func:_adjust_bin_edges",
    "func:_adjust_binner_for_upsample",
    "func:_adjust_dates_anchored",
    "func:_apply",
    "func:_asfreq_compat",
    "func:_convert_obj",
    "func:_downsample",
    "func:_from_selection",
    "func:_get_binner",
    "func:_get_binner_for_time",
    "func:_get_grouper",
    "func:_get_period_bins",
    "func:_get_period_range_edges",
    "func:_get_resampler",
    "func:_get_resampler_for_grouping",
    "func:_get_time_bins",
    "func:_get_time_delta_bins",
    "func:_get_time_period_bins",
    "func:_get_timestamp_range_edges",
    "func:_gotitem",
    "func:_groupby_and_aggregate",
    "func:_insert_nat_bin",
    "func:_resampler_cls",
    "func:_resampler_for_grouping",
    "func:_set_grouper",
    "func:_take_new_index",
    "func:_upsample",
    "func:_wrap_result",
    "func:aggregate",
    "func:asfreq",
    "func:bfill",
    "func:count",
    "func:ffill",
    "func:first",
    "func:func",
    "func:get_resampler",
    "func:get_resampler_for_grouping",
    "func:interpolate",
    "func:last",
    "func:max",
    "func:mean",
    "func:median",
    "func:min",
    "func:nearest",
    "func:nunique",
    "func:ohlc",
    "func:pipe",
    "func:prod",
    "func:quantile",
    "func:sem",
    "func:size",
    "func:std",
    "func:sum",
    "func:transform",
    "func:var"
  ],
  "response.py_gpt4_bf44d9fe.py": [
    "class:DeflateDecoder",
    "class:GzipDecoder",
    "class:HTTPResponse",
    "func:__getattr__",
    "func:__init__",
    "func:_decode",
    "func:_error_catcher",
    "func:_flush_decoder",
    "func:_get_decoder",
    "func:_init_decoder",
    "func:close",
    "func:closed",
    "func:connection",
    "func:data",
    "func:decompress",
    "func:fileno",
    "func:from_base",
    "func:get_redirect_location",
    "func:getheader",
    "func:getheaders",
    "func:info",
    "func:readable",
    "func:readinto",
    "func:tell"
  ],
  "response.py_gpt4_c8730d4d.py": [
    "class:DeflateDecoder",
    "class:GzipDecoder",
    "class:HTTPResponse",
    "func:__getattr__",
    "func:__init__",
    "func:_decode",
    "func:_error_catcher",
    "func:_flush_decoder",
    "func:_get_decoder",
    "func:_init_decoder",
    "func:close",
    "func:closed",
    "func:connection",
    "func:data",
    "func:decompress",
    "func:fileno",
    "func:from_base",
    "func:get_redirect_location",
    "func:getheader",
    "func:getheaders",
    "func:info",
    "func:read",
    "func:readable",
    "func:readinto",
    "func:release_conn",
    "func:stream",
    "func:tell"
  ],
  "retry.py_gpt4_09c31389.py": [
    "class:Retry",
    "func:__init__",
    "func:__repr__",
    "func:_is_connection_error",
    "func:_is_method_retryable",
    "func:_is_read_error",
    "func:_sleep_backoff",
    "func:from_int",
    "func:get_backoff_time",
    "func:get_retry_after",
    "func:increment",
    "func:is_exhausted",
    "func:is_retry",
    "func:new",
    "func:parse_retry_after",
    "func:sleep",
    "func:sleep_for_retry"
  ],
  "rocketchat.py_gpt4_a96c37a4.py": [
    "func:build_custom_emoji",
    "func:build_reactions",
    "func:categorize_channels_and_map_with_id",
    "func:convert_channel_data",
    "func:convert_direct_message_group_data",
    "func:convert_stream_subscription_data",
    "func:do_convert_data",
    "func:fix_mentions",
    "func:get_stream_name",
    "func:get_topic_name",
    "func:list_reactions",
    "func:make_realm",
    "func:map_receiver_id_to_recipient_id",
    "func:map_upload_id_to_upload_data",
    "func:map_user_id_to_user",
    "func:map_username_to_user_id",
    "func:message_to_dict",
    "func:process_batch",
    "func:process_message_attachment",
    "func:process_messages",
    "func:process_raw_message_batch",
    "func:process_users",
    "func:rocketchat_data_to_dict",
    "func:separate_channel_private_and_livechat_messages",
    "func:truncate_name"
  ],
  "rolling.py_gpt4_ef1f5619.py": [
    "class:BaseWindow",
    "class:BaseWindowGroupby",
    "class:Rolling",
    "class:RollingAndExpandingMixin",
    "class:RollingGroupby",
    "class:Window",
    "func:__getattr__",
    "func:__init__",
    "func:__iter__",
    "func:__repr__",
    "func:_apply",
    "func:_apply_columnwise",
    "func:_apply_pairwise",
    "func:_apply_series",
    "func:_apply_tablewise",
    "func:_center_window",
    "func:_check_window_bounds",
    "func:_create_data",
    "func:_dir_additions",
    "func:_generate_cython_apply_func",
    "func:_get_window_indexer",
    "func:_gotitem",
    "func:_index_array",
    "func:_insert_on_column",
    "func:_make_numeric_only",
    "func:_numba_apply",
    "func:_prep_values",
    "func:_raise_monotonic_error",
    "func:_resolve_output",
    "func:_slice_axis_for_step",
    "func:_validate",
    "func:_validate_datetimelike_monotonic",
    "func:_validate_numeric_only",
    "func:aggregate",
    "func:apply",
    "func:apply_func",
    "func:calc",
    "func:corr",
    "func:corr_func",
    "func:count",
    "func:cov",
    "func:cov_func",
    "func:first",
    "func:homogeneous_func",
    "func:kurt",
    "func:last",
    "func:max",
    "func:mean",
    "func:median",
    "func:min",
    "func:pipe",
    "func:quantile",
    "func:rank",
    "func:sem",
    "func:skew",
    "func:std",
    "func:sum",
    "func:var",
    "func:zsqrt_func"
  ],
  "root_model.py_gpt4_5117385a.py": [
    "class:RootModel",
    "class:_RootModelMetaclass",
    "func:__copy__",
    "func:__deepcopy__",
    "func:__eq__",
    "func:__getstate__",
    "func:__init__",
    "func:__init_subclass__",
    "func:__repr_args__",
    "func:__setstate__",
    "func:model_construct",
    "func:model_dump"
  ],
  "rouge_test.py_gpt4_057140f4.py": [
    "class:RougeTest",
    "func:f1",
    "func:global_distributed_rouge",
    "func:setup_method",
    "func:test_distributed_rouge",
    "func:test_rouge",
    "func:test_rouge_with_zero_counts"
  ],
  "routing.py_gpt4_2c9d0d0d.py": [
    "class:APIRoute",
    "class:APIRouter",
    "class:APIWebSocketRoute",
    "func:__init__",
    "func:_merge_lifespan_context",
    "func:_prepare_response_content",
    "func:add_api_route",
    "func:add_api_websocket_route",
    "func:api_route",
    "func:decorator",
    "func:delete",
    "func:get",
    "func:get_request_handler",
    "func:get_route_handler",
    "func:get_websocket_app",
    "func:head",
    "func:include_router",
    "func:matches",
    "func:on_event",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:route",
    "func:trace",
    "func:websocket",
    "func:websocket_route"
  ],
  "run.py_gpt4_267c585a.py": [
    "class:BiggestName",
    "class:MicrobatchModelRunner",
    "class:ModelRunner",
    "class:RunTask",
    "func:__eq__",
    "func:__init__",
    "func:__lt__",
    "func:_build_failed_run_batch_result",
    "func:_build_run_microbatch_model_result",
    "func:_build_run_model_result",
    "func:_build_succesful_run_batch_result",
    "func:_execute_microbatch_materialization",
    "func:_execute_model",
    "func:_get_adapter_info",
    "func:_has_relation",
    "func:_hook_keyfunc",
    "func:_hook_list",
    "func:_is_incremental",
    "func:_materialization_relations",
    "func:_submit_batch",
    "func:_validate_materialization_relations_dict",
    "func:after_execute",
    "func:after_run",
    "func:batch_start",
    "func:before_execute",
    "func:before_run",
    "func:compile",
    "func:describe_batch",
    "func:describe_node",
    "func:execute",
    "func:get_execution_status",
    "func:get_hook",
    "func:get_hook_sql",
    "func:get_hooks_by_tags",
    "func:get_hooks_by_type",
    "func:get_node_representation",
    "func:get_node_selector",
    "func:get_runner_type",
    "func:handle_job_queue",
    "func:handle_microbatch_model",
    "func:merge_batch_results",
    "func:on_skip",
    "func:populate_microbatch_batches",
    "func:print_batch_result_line",
    "func:print_batch_start_line",
    "func:print_result_line",
    "func:print_results_line",
    "func:print_start_line",
    "func:raise_on_first_error",
    "func:safe_run_hooks",
    "func:set_batch_idx",
    "func:set_batches",
    "func:set_relation_exists",
    "func:should_run_in_parallel",
    "func:task_end_messages",
    "func:track_model_run"
  ],
  "run.py_gpt4_b8f63494.py": [
    "class:RunExecutionResult",
    "class:RunResult",
    "class:RunResultOutput",
    "class:RunResultsArtifact",
    "class:RunResultsMetadata",
    "func:compatible_previous_versions",
    "func:from_execution_results",
    "func:from_node",
    "func:process_run_result",
    "func:skipped",
    "func:upgrade_schema_version",
    "func:write"
  ],
  "runner.py_gpt4_fc821e47.py": [
    "class:DeploymentApplyError",
    "class:RunnerDeployment",
    "func:_construct_deployment_schedules",
    "func:_set_defaults_from_flow",
    "func:entrypoint_type",
    "func:from_entrypoint",
    "func:from_flow",
    "func:from_storage",
    "func:full_name",
    "func:reconcile_paused",
    "func:reconcile_schedules",
    "func:validate_automation_names",
    "func:validate_name"
  ],
  "runtime.py_gpt4_58146c86.py": [
    "class:RuntimeConfig",
    "class:UnsetCredentials",
    "class:UnsetProfile",
    "func:__getattribute__",
    "func:__init__",
    "func:__post_init__",
    "func:_connection_keys",
    "func:_get_config_paths",
    "func:_get_project_directories",
    "func:_get_v2_config_paths",
    "func:_is_config_used",
    "func:_project_quoting_dict",
    "func:clear_dependencies",
    "func:collect_parts",
    "func:connection_info",
    "func:from_args",
    "func:from_parts",
    "func:get_metadata",
    "func:get_profile",
    "func:get_resource_config_paths",
    "func:load_dependencies",
    "func:load_profile",
    "func:load_project",
    "func:load_projects",
    "func:new_project",
    "func:serialize",
    "func:to_target_dict",
    "func:type",
    "func:unique_field",
    "func:validate",
    "func:warn_for_unused_resource_config_paths"
  ],
  "sampled_softmax_loss.py_gpt4_f091e779.py": [
    "class:SampledSoftmaxLoss",
    "func:__init__",
    "func:_choice",
    "func:_forward_eval",
    "func:_forward_train",
    "func:forward",
    "func:get_buffer",
    "func:initialize_num_words",
    "func:log_uniform_candidate_sampler"
  ],
  "schema_generic_tests.py_gpt4_d32963a8.py": [
    "class:SchemaGenericTestParser",
    "func:__init__",
    "func:_lookup_attached_node",
    "func:add_test_node",
    "func:create_test_node",
    "func:generate_unique_id",
    "func:get_compiled_path",
    "func:get_hashable_md",
    "func:parse_column_tests",
    "func:parse_file",
    "func:parse_from_dict",
    "func:parse_generic_test",
    "func:parse_node",
    "func:parse_test",
    "func:parse_tests",
    "func:parse_versioned_tests",
    "func:render_test_update",
    "func:render_with_context",
    "func:resource_type",
    "func:store_env_vars"
  ],
  "schema_yaml_readers.py_gpt4_f77f3b29.py": [
    "class:ExposureParser",
    "class:GroupParser",
    "class:MetricParser",
    "class:SavedQueryParser",
    "class:SemanticModelParser",
    "func:__init__",
    "func:_create_metric",
    "func:_generate_exposure_config",
    "func:_generate_metric_config",
    "func:_generate_saved_query_config",
    "func:_generate_semantic_model_config",
    "func:_get_dimension_type_params",
    "func:_get_dimensions",
    "func:_get_entities",
    "func:_get_export",
    "func:_get_export_config",
    "func:_get_input_measure",
    "func:_get_input_measures",
    "func:_get_measures",
    "func:_get_metric_input",
    "func:_get_metric_inputs",
    "func:_get_metric_type_params",
    "func:_get_non_additive_dimension",
    "func:_get_optional_conversion_type_params",
    "func:_get_optional_cumulative_type_params",
    "func:_get_optional_input_measure",
    "func:_get_optional_metric_input",
    "func:_get_optional_time_window",
    "func:_get_period_agg",
    "func:_get_query_params",
    "func:parse",
    "func:parse_exposure",
    "func:parse_group",
    "func:parse_metric",
    "func:parse_saved_query",
    "func:parse_semantic_model",
    "func:parse_where_filter",
    "func:wrap_tags"
  ],
  "selector.py_gpt4_132c2660.py": [
    "class:NodeSelector",
    "class:ResourceTypeSelector",
    "func:__init__",
    "func:_is_empty_node",
    "func:_is_graph_member",
    "func:_is_match",
    "func:can_select_indirectly",
    "func:collect_specified_neighbors",
    "func:expand_selection",
    "func:filter_selection",
    "func:get_graph_queue",
    "func:get_nodes_from_criteria",
    "func:get_package_names",
    "func:get_selected",
    "func:incorporate_indirect_nodes",
    "func:node_is_match",
    "func:select_included",
    "func:select_nodes",
    "func:select_nodes_recursively"
  ],
  "selector_spec.py_gpt4_6d0aec14.py": [
    "class:BaseSelectionGroup",
    "class:IndirectSelection",
    "class:SelectionCriteria",
    "class:SelectionDifference",
    "class:SelectionIntersection",
    "class:SelectionUnion",
    "func:__init__",
    "func:__iter__",
    "func:__post_init__",
    "func:_match_to_int",
    "func:_probably_path",
    "func:combine_selections",
    "func:combined",
    "func:default_method",
    "func:dict_from_single_spec",
    "func:from_single_spec",
    "func:parse_method",
    "func:selection_criteria_from_dict"
  ],
  "send_email.py_gpt4_a689bab8.py": [
    "class:DoubledEmailArgumentError",
    "class:EmailNotDeliveredError",
    "class:FromAddress",
    "class:NoEmailArgumentError",
    "func:__init__",
    "func:build_email",
    "func:clear_scheduled_emails",
    "func:clear_scheduled_invitation_emails",
    "func:custom_email_sender",
    "func:deliver_scheduled_emails",
    "func:get_header",
    "func:get_inlined_template",
    "func:get_inliner_instance",
    "func:handle_send_email_format_changes",
    "func:initialize_connection",
    "func:log_email_config_errors",
    "func:render_templates",
    "func:security_email_from_name",
    "func:send_custom_email",
    "func:send_custom_server_email",
    "func:send_email",
    "func:send_email_to_admins",
    "func:send_email_to_billing_admins_and_realm_owners",
    "func:send_future_email",
    "func:send_one_email",
    "func:tokenized_no_reply_address"
  ],
  "sensor.py_gpt4_6aacde5a.py": [
    "class:SerialSensor",
    "func:__init__",
    "func:extra_state_attributes",
    "func:name",
    "func:native_value",
    "func:stop_serial_read"
  ],
  "sensor.py_gpt4_85e008f1.py": [
    "class:StatisticsSensor",
    "func:__init__",
    "func:_add_state_to_queue",
    "func:_async_cancel_update_listener",
    "func:_async_handle_new_state",
    "func:_async_next_to_purge_timestamp",
    "func:_async_purge_update_and_schedule",
    "func:_async_scheduled_update",
    "func:_async_stats_sensor_state_change_listener",
    "func:_async_stats_sensor_state_report_listener",
    "func:_calculate_device_class",
    "func:_calculate_state_attributes",
    "func:_calculate_state_class",
    "func:_calculate_unit_of_measurement",
    "func:_callable_characteristic_fn",
    "func:_fetch_states_from_database",
    "func:_purge_old_states",
    "func:_stat_average_linear",
    "func:_stat_average_step",
    "func:_stat_average_timeless",
    "func:_stat_binary_average_step",
    "func:_stat_binary_average_timeless",
    "func:_stat_binary_count",
    "func:_stat_binary_count_off",
    "func:_stat_binary_count_on",
    "func:_stat_binary_datetime_newest",
    "func:_stat_binary_datetime_oldest",
    "func:_stat_binary_mean",
    "func:_stat_change",
    "func:_stat_change_sample",
    "func:_stat_change_second",
    "func:_stat_count",
    "func:_stat_datetime_newest",
    "func:_stat_datetime_oldest",
    "func:_stat_datetime_value_max",
    "func:_stat_datetime_value_min",
    "func:_stat_distance_95_percent_of_values",
    "func:_stat_distance_99_percent_of_values",
    "func:_stat_distance_absolute",
    "func:_stat_mean",
    "func:_stat_mean_circular",
    "func:_stat_median",
    "func:_stat_noisiness",
    "func:_stat_percentile",
    "func:_stat_standard_deviation",
    "func:_stat_sum",
    "func:_stat_sum_differences",
    "func:_stat_sum_differences_nonnegative",
    "func:_stat_total",
    "func:_stat_value_max",
    "func:_stat_value_min",
    "func:_stat_variance",
    "func:_update_extra_state_attributes",
    "func:_update_value",
    "func:valid_boundary_configuration",
    "func:valid_keep_last_sample",
    "func:valid_state_characteristic_configuration"
  ],
  "sensor.py_gpt4_b87a0a59.py": [
    "class:UtilityMeterSensor",
    "class:UtilitySensorExtraStoredData",
    "func:__init__",
    "func:_change_status",
    "func:_config_scheduler",
    "func:_validate_state",
    "func:as_dict",
    "func:async_reading",
    "func:async_source_tracking",
    "func:async_tariff_change",
    "func:calculate_adjustment",
    "func:device_class",
    "func:extra_restore_state_data",
    "func:extra_state_attributes",
    "func:from_dict",
    "func:start",
    "func:state_class",
    "func:validate_is_number"
  ],
  "sentiment_analysis_suite.py_gpt4_ad14d086.py": [
    "class:SentimentAnalysisSuite",
    "func:__init__",
    "func:_add_phrase_function",
    "func:_default_fairness_tests",
    "func:_default_negation_tests",
    "func:_default_ner_tests",
    "func:_default_robustness_tests",
    "func:_default_temporal_tests",
    "func:_default_tests",
    "func:_default_vocabulary_tests",
    "func:_diff_down",
    "func:_diff_up",
    "func:_format_failing_examples",
    "func:_positive_change",
    "func:_prediction_and_confidence_scores",
    "func:_setup_editor",
    "func:perturb_fn",
    "func:preds_and_confs_fn"
  ],
  "sequence_accuracy_test.py_gpt4_9baac76e.py": [
    "class:SequenceAccuracyTest",
    "func:multiple_runs",
    "func:test_distributed_sequence_accuracy",
    "func:test_get_metric_on_new_object_works",
    "func:test_multiple_distributed_runs",
    "func:test_sequence_accuracy",
    "func:test_sequence_accuracy_accumulates_and_resets_correctly",
    "func:test_sequence_accuracy_respects_mask"
  ],
  "serializers.py_gpt4_d7b8c7c6.py": [
    "class:RegistryT",
    "class:SchemaT",
    "class:_AppT",
    "class:_Message",
    "class:_ModelArg",
    "func:__init__",
    "func:dumps_key",
    "func:dumps_value",
    "func:loads_key",
    "func:loads_value",
    "func:on_dumps_key_prepare_headers",
    "func:on_dumps_value_prepare_headers",
    "func:update"
  ],
  "series.py_gpt4_daa29c75.py": [
    "class:Series",
    "func:__class_getitem__",
    "func:__dir__",
    "func:__getattr__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__matmul__",
    "func:__repr__",
    "func:_apply_series_op",
    "func:_column_label",
    "func:_create_type_for_series_type",
    "func:_cum",
    "func:_cumprod",
    "func:_cumsum",
    "func:_diff",
    "func:_drop",
    "func:_fillna",
    "func:_internal",
    "func:_kdf",
    "func:_rank",
    "func:_reduce_for_stat_function",
    "func:_to_internal_pandas",
    "func:_update_anchor",
    "func:_with_new_scol",
    "func:add",
    "func:add_prefix",
    "func:add_suffix",
    "func:aggregate",
    "func:alias",
    "func:align",
    "func:append",
    "func:apply",
    "func:argmax",
    "func:argmin",
    "func:argsort",
    "func:asof",
    "func:at_time",
    "func:axes",
    "func:between",
    "func:between_time",
    "func:clip",
    "func:combine_first",
    "func:compare",
    "func:copy",
    "func:corr",
    "func:describe",
    "func:diff",
    "func:div",
    "func:divmod",
    "func:dot",
    "func:drop",
    "func:drop_duplicates",
    "func:droplevel",
    "func:dropna",
    "func:dtypes",
    "func:eq",
    "func:explode",
    "func:extract_kv_from_spark_row",
    "func:fillna",
    "func:filter",
    "func:first",
    "func:first_series",
    "func:floordiv",
    "func:ge",
    "func:gt",
    "func:head",
    "func:hist",
    "func:idxmax",
    "func:idxmin",
    "func:index",
    "func:is_unique",
    "func:item",
    "func:items",
    "func:iteritems",
    "func:keys",
    "func:last",
    "func:le",
    "func:lt",
    "func:mad",
    "func:map",
    "func:mask",
    "func:mod",
    "func:mode",
    "func:mul",
    "func:name",
    "func:ne",
    "func:new_getitem",
    "func:nlargest",
    "func:nsmallest",
    "func:pct_change",
    "func:pop",
    "func:pow",
    "func:quantile",
    "func:radd",
    "func:rank",
    "func:rdiv",
    "func:rdivmod",
    "func:reindex",
    "func:reindex_like",
    "func:rename",
    "func:rename_axis",
    "func:repeat",
    "func:replace",
    "func:reset_index",
    "func:rfloordiv",
    "func:rmod",
    "func:rmul",
    "func:round",
    "func:rpow",
    "func:rsub",
    "func:rtruediv",
    "func:sample",
    "func:shape",
    "func:sort_index",
    "func:sort_values",
    "func:spark_type",
    "func:sub",
    "func:swapaxes",
    "func:swaplevel",
    "func:tail",
    "func:toPandas",
    "func:to_clipboard",
    "func:to_dict",
    "func:to_frame",
    "func:to_latex",
    "func:to_list",
    "func:to_pandas",
    "func:to_string",
    "func:transform",
    "func:transform_batch",
    "func:transpose",
    "func:truediv",
    "func:unique",
    "func:unpack_scalar",
    "func:unstack",
    "func:update",
    "func:where",
    "func:xs"
  ],
  "series.py_gpt4_ec702417.py": [
    "class:Series",
    "func:__array__",
    "func:__arrow_c_stream__",
    "func:__getitem__",
    "func:__init__",
    "func:__len__",
    "func:__matmul__",
    "func:__repr__",
    "func:__rmatmul__",
    "func:__setitem__",
    "func:_align_for_op",
    "func:_append",
    "func:_arith_method",
    "func:_binop",
    "func:_can_hold_na",
    "func:_cmp_method",
    "func:_construct_result",
    "func:_constructor",
    "func:_constructor_expanddim",
    "func:_constructor_expanddim_from_mgr",
    "func:_constructor_from_mgr",
    "func:_flex_method",
    "func:_get_rows_with_mask",
    "func:_get_value",
    "func:_get_values_tuple",
    "func:_get_with",
    "func:_gotitem",
    "func:_init_dict",
    "func:_ixs",
    "func:_logical_method",
    "func:_needs_reindex_multi",
    "func:_reduce",
    "func:_references",
    "func:_reindex_indexer",
    "func:_set_labels",
    "func:_set_name",
    "func:_set_value",
    "func:_set_values",
    "func:_set_with",
    "func:_set_with_engine",
    "func:_slice",
    "func:_values",
    "func:add",
    "func:aggregate",
    "func:all",
    "func:any",
    "func:apply",
    "func:argsort",
    "func:array",
    "func:autocorr",
    "func:axes",
    "func:between",
    "func:case_when",
    "func:combine",
    "func:combine_first",
    "func:compare",
    "func:corr",
    "func:count",
    "func:cov",
    "func:cummax",
    "func:cummin",
    "func:cumprod",
    "func:cumsum",
    "func:diff",
    "func:divmod",
    "func:dot",
    "func:drop",
    "func:drop_duplicates",
    "func:dropna",
    "func:dtype",
    "func:dtypes",
    "func:duplicated",
    "func:eq",
    "func:explode",
    "func:floordiv",
    "func:ge",
    "func:groupby",
    "func:gt",
    "func:idxmax",
    "func:idxmin",
    "func:info",
    "func:isin",
    "func:isna",
    "func:isnull",
    "func:items",
    "func:keys",
    "func:kurt",
    "func:le",
    "func:lt",
    "func:map",
    "func:max",
    "func:mean",
    "func:median",
    "func:memory_usage",
    "func:min",
    "func:mod",
    "func:mode",
    "func:mul",
    "func:name",
    "func:ne",
    "func:nlargest",
    "func:notna",
    "func:notnull",
    "func:nsmallest",
    "func:pop",
    "func:pow",
    "func:prod",
    "func:quantile",
    "func:radd",
    "func:rdivmod",
    "func:reindex",
    "func:rename",
    "func:rename_axis",
    "func:reorder_levels",
    "func:repeat",
    "func:reset_index",
    "func:rfloordiv",
    "func:rmod",
    "func:rmul",
    "func:round",
    "func:rpow",
    "func:rsub",
    "func:rtruediv",
    "func:searchsorted",
    "func:sem",
    "func:set_axis",
    "func:skew",
    "func:sort_index",
    "func:sort_values",
    "func:std",
    "func:sub",
    "func:sum",
    "func:swaplevel",
    "func:to_dict",
    "func:to_frame",
    "func:to_markdown",
    "func:to_period",
    "func:to_string",
    "func:to_timestamp",
    "func:transform",
    "func:truediv",
    "func:unique",
    "func:unstack",
    "func:update",
    "func:values",
    "func:var"
  ],
  "session.py_gpt4_ce61005a.py": [
    "class:KedroSession",
    "class:KedroSessionError",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:_describe_git",
    "func:_get_config_loader",
    "func:_init_store",
    "func:_jsonify_cli_context",
    "func:_log_exception",
    "func:_logger",
    "func:close",
    "func:create",
    "func:load_context",
    "func:run",
    "func:store"
  ],
  "settings.py_gpt4_ce5a6ab4.py": [
    "class:Settings",
    "class:_WorkerT",
    "func:Agent",
    "func:ConsumerScheduler",
    "func:Event",
    "func:GlobalTable",
    "func:HttpClient",
    "func:LeaderAssignor",
    "func:MY_SETTING",
    "func:Monitor",
    "func:PartitionAssignor",
    "func:Router",
    "func:Schema",
    "func:Serializers",
    "func:SetGlobalTable",
    "func:SetTable",
    "func:Stream",
    "func:Table",
    "func:TableManager",
    "func:Topic",
    "func:Worker",
    "func:__init__",
    "func:__repr__",
    "func:_init_env_prefix",
    "func:_prepare_broker",
    "func:_prepare_datadir",
    "func:_prepare_id",
    "func:_prepare_producer_linger",
    "func:_prepare_reply_to_default",
    "func:_prepare_tabledir",
    "func:agent_supervisor",
    "func:appdir",
    "func:autodiscover",
    "func:blocking_timeout",
    "func:broker",
    "func:broker_api_version",
    "func:broker_check_crcs",
    "func:broker_client_id",
    "func:broker_commit_every",
    "func:broker_commit_interval",
    "func:broker_commit_livelock_soft_timeout",
    "func:broker_consumer",
    "func:broker_credentials",
    "func:broker_heartbeat_interval",
    "func:broker_max_poll_interval",
    "func:broker_max_poll_records",
    "func:broker_producer",
    "func:broker_rebalance_timeout",
    "func:broker_request_timeout",
    "func:broker_session_timeout",
    "func:cache",
    "func:canonical_url",
    "func:consumer_api_version",
    "func:consumer_auto_offset_reset",
    "func:consumer_group_instance_id",
    "func:consumer_max_fetch_size",
    "func:data_directory_for_version",
    "func:datadir",
    "func:debug",
    "func:env_prefix",
    "func:find_old_versiondirs",
    "func:getenv",
    "func:id",
    "func:id_format",
    "func:key_serializer",
    "func:logging_config",
    "func:loghandlers",
    "func:name",
    "func:on_init",
    "func:origin",
    "func:processing_guarantee",
    "func:producer_acks",
    "func:producer_api_version",
    "func:producer_compression_type",
    "func:producer_linger",
    "func:producer_linger_ms",
    "func:producer_max_batch_size",
    "func:producer_max_request_size",
    "func:producer_partitioner",
    "func:producer_request_timeout",
    "func:relative_to_appdir",
    "func:reply_create_topic",
    "func:reply_expires",
    "func:reply_to",
    "func:reply_to_prefix",
    "func:ssl_context",
    "func:store",
    "func:stream_ack_cancelled_tasks",
    "func:stream_ack_exceptions",
    "func:stream_buffer_maxsize",
    "func:stream_processing_timeout",
    "func:stream_publish_on_commit",
    "func:stream_recovery_delay",
    "func:stream_wait_empty",
    "func:table_cleanup_interval",
    "func:table_key_index_size",
    "func:table_standby_replicas",
    "func:tabledir",
    "func:timezone",
    "func:topic_allow_declare",
    "func:topic_disable_leader",
    "func:topic_partitions",
    "func:topic_replication_factor",
    "func:url",
    "func:value_serializer",
    "func:version",
    "func:web",
    "func:web_bind",
    "func:web_cors_options",
    "func:web_enabled",
    "func:web_host",
    "func:web_in_thread",
    "func:web_port",
    "func:web_transport",
    "func:worker_redirect_stdouts",
    "func:worker_redirect_stdouts_level"
  ],
  "simple_influence.py_gpt4_20464f95.py": [
    "class:SimpleInfluence",
    "func:__init__",
    "func:_calculate_influence_scores",
    "func:_flatten_tensors",
    "func:get_hvp",
    "func:get_inverse_hvp_lissa"
  ],
  "single_id_token_indexer.py_gpt4_9a20ee2a.py": [
    "class:SingleIdTokenIndexer",
    "func:__init__",
    "func:_get_feature_value",
    "func:_to_params",
    "func:count_vocab_items",
    "func:get_empty_token_list",
    "func:tokens_to_indices"
  ],
  "six.py_gpt4_06ecd4c4.py": [
    "class:Iterator",
    "class:Module_six_moves_urllib",
    "class:Module_six_moves_urllib_error",
    "class:Module_six_moves_urllib_parse",
    "class:Module_six_moves_urllib_request",
    "class:Module_six_moves_urllib_response",
    "class:Module_six_moves_urllib_robotparser",
    "class:MovedAttribute",
    "class:MovedModule",
    "class:X",
    "class:_LazyDescr",
    "class:_LazyModule",
    "class:_MovedItems",
    "class:_SixMetaPathImporter",
    "class:metaclass",
    "func:__dir__",
    "func:__get__",
    "func:__get_module",
    "func:__getattr__",
    "func:__init__",
    "func:__len__",
    "func:__new__",
    "func:_add_doc",
    "func:_add_module",
    "func:_get_module",
    "func:_import_module",
    "func:_resolve",
    "func:add_metaclass",
    "func:add_move",
    "func:advance_iterator",
    "func:assertCountEqual",
    "func:assertRaisesRegex",
    "func:assertRegex",
    "func:b",
    "func:byte2int",
    "func:callable",
    "func:create_bound_method",
    "func:create_unbound_method",
    "func:exec_",
    "func:find_module",
    "func:get_code",
    "func:get_unbound_function",
    "func:indexbytes",
    "func:is_package",
    "func:iteritems",
    "func:iterkeys",
    "func:iterlists",
    "func:itervalues",
    "func:load_module",
    "func:next",
    "func:print_",
    "func:python_2_unicode_compatible",
    "func:raise_from",
    "func:remove_move",
    "func:reraise",
    "func:u",
    "func:with_metaclass",
    "func:wrapper",
    "func:wraps",
    "func:write"
  ],
  "slack.py_gpt4_8cc09ada.py": [
    "class:SlackBotEmail",
    "func:build_avatar_url",
    "func:build_customprofile_field",
    "func:build_customprofilefields_values",
    "func:build_reactions",
    "func:build_realmemoji",
    "func:build_uploads",
    "func:channel_message_to_zerver_message",
    "func:channels_to_zerver_stream",
    "func:check_token_access",
    "func:convert_bot_info_to_slack_user",
    "func:convert_slack_workspace_messages",
    "func:do_convert_directory",
    "func:do_convert_zipfile",
    "func:fetch_shared_channel_users",
    "func:fetch_team_icons",
    "func:get_admin",
    "func:get_attachment_path_and_content",
    "func:get_data_file",
    "func:get_email",
    "func:get_emoji_code",
    "func:get_guest",
    "func:get_message_sending_user",
    "func:get_messages_iterator",
    "func:get_owner",
    "func:get_slack_api_data",
    "func:get_subscription",
    "func:get_timestamp_from_message",
    "func:get_user_email",
    "func:get_user_timezone",
    "func:is_integration_bot_message",
    "func:process_channels",
    "func:process_customprofilefields",
    "func:process_dms",
    "func:process_long_term_idle_users",
    "func:process_message_files",
    "func:process_mpims",
    "func:process_slack_custom_fields",
    "func:rm_tree",
    "func:slack_workspace_to_realm",
    "func:users_to_zerver_userprofile"
  ],
  "smartcontracts.py_gpt4_a6a2c765.py": [
    "class:FixtureSmartContracts",
    "class:ServicesSmartContracts",
    "func:deploy_monitoring_service",
    "func:deploy_one_to_n",
    "func:deploy_secret_registry",
    "func:deploy_service_registry",
    "func:deploy_smart_contract_bundle_concurrently",
    "func:deploy_token_network_registry",
    "func:deploy_user_deposit",
    "func:fund_node",
    "func:max_token_networks_fixture",
    "func:monitoring_service_address_fixture",
    "func:one_to_n_address_fixture",
    "func:register_token",
    "func:secret_registry_address_fixture",
    "func:secret_registry_proxy_fixture",
    "func:service_registry_address_fixture",
    "func:token_addresses_fixture",
    "func:token_contract_name_fixture",
    "func:token_network_proxy_fixture",
    "func:token_network_registry_address_fixture",
    "func:token_proxy_fixture",
    "func:transfer_user_deposit_tokens",
    "func:user_deposit_address_fixture"
  ],
  "sources.py_gpt4_61b6f7ff.py": [
    "class:EnvFilterSettingsSource",
    "class:FilteredDotEnvSettingsSource",
    "class:PrefectTomlConfigSettingsSource",
    "class:ProfileSettingsTomlLoader",
    "class:PyprojectTomlConfigSettingsSource",
    "class:TomlConfigSettingsSourceBase",
    "func:__call__",
    "func:__init__",
    "func:_get_default_profile",
    "func:_get_profiles_path",
    "func:_get_profiles_path_from_toml",
    "func:_is_test_mode",
    "func:_load_profile_settings",
    "func:_read_file",
    "func:get_field_value"
  ],
  "spacy_tokenizer.py_gpt4_eef4338c.py": [
    "class:SpacyTokenizer",
    "class:_WhitespaceSpacyTokenizer",
    "func:__call__",
    "func:__init__",
    "func:_remove_spaces",
    "func:_sanitize",
    "func:_to_params",
    "func:batch_tokenize",
    "func:tokenize"
  ],
  "span_based_f1_measure.py_gpt4_e66cb97e.py": [
    "class:SpanBasedF1Measure",
    "func:__call__",
    "func:__init__",
    "func:_compute_metrics",
    "func:_handle_continued_spans",
    "func:get_metric",
    "func:reset"
  ],
  "span_utils.py_gpt4_841a1d72.py": [
    "class:InvalidTagSequence",
    "func:__init__",
    "func:__str__",
    "func:_iob1_start_of_chunk",
    "func:bio_tags_to_spans",
    "func:bioul_tags_to_spans",
    "func:bmes_tags_to_spans",
    "func:enumerate_spans",
    "func:extract_bmes_tag_label",
    "func:iob1_tags_to_spans",
    "func:iob1_to_bioul",
    "func:pop_replace_append",
    "func:process_stack",
    "func:replace_label",
    "func:to_bioul"
  ],
  "sql.py_gpt4_c9dcf5db.py": [
    "class:ADBCDatabase",
    "class:BaseEngine",
    "class:PandasSQL",
    "class:SQLAlchemyEngine",
    "class:SQLDatabase",
    "class:SQLTable",
    "class:SQLiteDatabase",
    "class:SQLiteTable",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:_adapt_time",
    "func:_convert_arrays_to_dataframe",
    "func:_create_sql_schema",
    "func:_create_table_setup",
    "func:_execute_create",
    "func:_execute_insert",
    "func:_execute_insert_multi",
    "func:_fetchall_as_list",
    "func:_get_column_names_and_types",
    "func:_get_dtype",
    "func:_get_unicode_name",
    "func:_get_valid_sqlite_name",
    "func:_handle_date_column",
    "func:_harmonize_columns",
    "func:_index_name",
    "func:_parse_date_columns",
    "func:_process_parse_dates_argument",
    "func:_query_iterator",
    "func:_register_date_adapters",
    "func:_sql_type_name",
    "func:_sqlalchemy_type",
    "func:_wrap_result",
    "func:_wrap_result_adbc",
    "func:check_case_sensitive",
    "func:create",
    "func:drop_table",
    "func:execute",
    "func:exists",
    "func:get_engine",
    "func:get_schema",
    "func:get_table",
    "func:has_table",
    "func:insert",
    "func:insert_data",
    "func:insert_records",
    "func:insert_statement",
    "func:pandasSQL_builder",
    "func:prep_table",
    "func:read",
    "func:read_query",
    "func:read_sql",
    "func:read_sql_query",
    "func:read_sql_table",
    "func:read_table",
    "func:run_transaction",
    "func:sql_schema",
    "func:tables",
    "func:to_sql"
  ],
  "stata.py_gpt4_07254f7d.py": [
    "class:StataMissingValue",
    "class:StataNonCatValueLabel",
    "class:StataParser",
    "class:StataReader",
    "class:StataStrLWriter",
    "class:StataValueLabel",
    "class:StataWriter",
    "class:StataWriter117",
    "class:StataWriterUTF8",
    "func:__enter__",
    "func:__eq__",
    "func:__exit__",
    "func:__init__",
    "func:__next__",
    "func:__repr__",
    "func:__str__",
    "func:_cast_to_stata_types",
    "func:_check_column_names",
    "func:_close",
    "func:_convert_datetime_to_stata_type",
    "func:_convert_key",
    "func:_convert_strls",
    "func:_datetime_to_stata_elapsed_vec",
    "func:_decode",
    "func:_do_convert_categoricals",
    "func:_do_convert_missing",
    "func:_do_select_columns",
    "func:_dtype_to_default_stata_fmt",
    "func:_dtype_to_stata_type",
    "func:_dtype_to_stata_type_117",
    "func:_encode_strings",
    "func:_ensure_open",
    "func:_get_data_label",
    "func:_get_dtypes",
    "func:_get_fmtlist",
    "func:_get_lbllist",
    "func:_get_nobs",
    "func:_get_seek_variable_labels",
    "func:_get_time_stamp",
    "func:_get_variable_labels",
    "func:_get_varlist",
    "func:_insert_strls",
    "func:_maybe_convert_to_int_keys",
    "func:_null_terminate_bytes",
    "func:_null_terminate_str",
    "func:_open_file",
    "func:_pad_bytes",
    "func:_pad_bytes_new",
    "func:_prepare_categoricals",
    "func:_prepare_data",
    "func:_prepare_non_cat_value_labels",
    "func:_prepare_pandas",
    "func:_prepare_value_labels",
    "func:_read_char8",
    "func:_read_header",
    "func:_read_int16",
    "func:_read_int16_count",
    "func:_read_int32",
    "func:_read_int64",
    "func:_read_int8",
    "func:_read_new_header",
    "func:_read_new_value_labels",
    "func:_read_old_header",
    "func:_read_old_value_labels",
    "func:_read_strls",
    "func:_read_uint16",
    "func:_read_uint32",
    "func:_read_uint64",
    "func:_read_uint8",
    "func:_read_value_labels",
    "func:_replace_nans",
    "func:_set_encoding",
    "func:_set_endianness",
    "func:_set_formats_and_types",
    "func:_setup_dtype",
    "func:_stata_elapsed_date_to_datetime_vec",
    "func:_tag",
    "func:_update_map",
    "func:_update_strl_names",
    "func:_validate_variable_name",
    "func:_write",
    "func:_write_bytes",
    "func:_write_characteristics",
    "func:_write_data",
    "func:_write_expansion_fields",
    "func:_write_file_close_tag",
    "func:_write_formats",
    "func:_write_header",
    "func:_write_map",
    "func:_write_sortlist",
    "func:_write_strls",
    "func:_write_value_label_names",
    "func:_write_value_labels",
    "func:_write_variable_labels",
    "func:_write_variable_types",
    "func:_write_varnames",
    "func:data_label",
    "func:f",
    "func:g",
    "func:generate_blob",
    "func:generate_table",
    "func:generate_value_label",
    "func:get_base_missing_value",
    "func:get_chunk",
    "func:parse_dates_safe",
    "func:read",
    "func:read_stata",
    "func:string",
    "func:time_stamp",
    "func:value",
    "func:value_labels",
    "func:variable_labels",
    "func:write_file"
  ],
  "stats.py_gpt4_8c4e9045.py": [
    "func:client_label_map",
    "func:do_get_chart_data",
    "func:get_chart_data",
    "func:get_chart_data_for_installation",
    "func:get_chart_data_for_realm",
    "func:get_chart_data_for_remote_installation",
    "func:get_chart_data_for_remote_realm",
    "func:get_chart_data_for_stream",
    "func:get_time_series_by_subgroup",
    "func:is_analytics_ready",
    "func:render_stats",
    "func:rewrite_client_arrays",
    "func:sort_by_totals",
    "func:sort_client_labels",
    "func:stats",
    "func:stats_for_installation",
    "func:stats_for_realm",
    "func:stats_for_remote_installation",
    "func:stats_for_remote_realm",
    "func:table_filtered_to_id"
  ],
  "stdlib.py_gpt4_26ba7adc.py": [
    "class:ClassMethodArguments",
    "class:ClassMethodGet",
    "class:ClassMethodObject",
    "class:DataclassParamName",
    "class:DataclassSignature",
    "class:DataclassWrapper",
    "class:EnumInstance",
    "class:ItemGetterCallable",
    "class:MergedPartialArguments",
    "class:PartialMethodObject",
    "class:PartialObject",
    "class:PartialSignature",
    "class:PropertyObject",
    "class:ReversedObject",
    "class:StaticMethodObject",
    "class:SuperInstance",
    "class:Wrapped",
    "class:WrapsCallable",
    "func:__init__",
    "func:_create_string_input_function",
    "func:_dataclass",
    "func:_follow_param",
    "func:_functools_wraps",
    "func:_get_bases",
    "func:_get_functions",
    "func:_get_wrapped_value",
    "func:_next",
    "func:_operator_itemgetter",
    "func:_os_path_join",
    "func:_random_choice",
    "func:_return_first_param",
    "func:_return_self",
    "func:argument_clinic",
    "func:builtins_classmethod",
    "func:builtins_getattr",
    "func:builtins_isinstance",
    "func:builtins_iter",
    "func:builtins_next",
    "func:builtins_property",
    "func:builtins_reversed",
    "func:builtins_staticmethod",
    "func:builtins_super",
    "func:builtins_type",
    "func:call",
    "func:collections_namedtuple",
    "func:execute",
    "func:f",
    "func:functools_partial",
    "func:functools_partialmethod",
    "func:get_filters",
    "func:get_kind",
    "func:get_metaclass_filters",
    "func:get_param_names",
    "func:get_signature_functions",
    "func:get_signatures",
    "func:infer",
    "func:iterate",
    "func:name",
    "func:py__call__",
    "func:py__doc__",
    "func:py__get__",
    "func:py__iter__",
    "func:tree_name_to_values",
    "func:unpack",
    "func:wrapper"
  ],
  "strategy_test_v3.py_gpt4_49c159a8.py": [
    "class:StrategyTestV3",
    "class:StrategyTestV3Futures",
    "func:adjust_trade_position",
    "func:bot_start",
    "func:informative_pairs",
    "func:leverage",
    "func:populate_entry_trend",
    "func:populate_exit_trend",
    "func:populate_indicators",
    "func:protections"
  ],
  "stream_info.py_gpt4_1936bbf7.py": [
    "class:StreamInfo",
    "func:__init__",
    "func:_get_stream_info",
    "func:_get_stream_preinfo",
    "func:_get_stream_url",
    "func:_is_direct_link",
    "func:extractor",
    "func:guessed_content_category",
    "func:guessed_content_type",
    "func:is_playlist",
    "func:is_playlist_with_active_entry",
    "func:is_remote_file",
    "func:playlist_all_ids",
    "func:playlist_id",
    "func:playlist_length",
    "func:playlist_title",
    "func:set_playlist_entry",
    "func:video_id",
    "func:video_thumbnail",
    "func:video_title",
    "func:video_url"
  ],
  "streams.py_gpt4_06214fcc.py": [
    "class:AsyncStreamIterator",
    "class:AsyncStreamReaderMixin",
    "class:ChunkTupleAsyncStreamIterator",
    "class:DataQueue",
    "class:EmptyStreamReader",
    "class:EofStream",
    "class:StreamReader",
    "func:__aiter__",
    "func:__init__",
    "func:__len__",
    "func:__repr__",
    "func:_read_nowait",
    "func:_read_nowait_chunk",
    "func:at_eof",
    "func:begin_http_chunk_receiving",
    "func:end_http_chunk_receiving",
    "func:exception",
    "func:feed_data",
    "func:feed_eof",
    "func:get_read_buffer_limits",
    "func:is_eof",
    "func:iter_any",
    "func:iter_chunked",
    "func:iter_chunks",
    "func:on_eof",
    "func:read_nowait",
    "func:set_exception",
    "func:unread_data"
  ],
  "streams.py_gpt4_4c29e46e.py": [
    "class:JoinableT",
    "class:StreamT",
    "class:_AppT",
    "class:_JoinT",
    "class:_SchemaT",
    "func:__aiter__",
    "func:__and__",
    "func:__copy__",
    "func:__init__",
    "func:__iter__",
    "func:__next__",
    "func:_human_channel",
    "func:add_processor",
    "func:clone",
    "func:combine",
    "func:contribute_to_stream",
    "func:derive_topic",
    "func:echo",
    "func:enumerate",
    "func:get_active_stream",
    "func:group_by",
    "func:info",
    "func:inner_join",
    "func:join",
    "func:left_join",
    "func:outer_join",
    "func:through"
  ],
  "streams.py_gpt4_5c0ba455.py": [
    "class:StreamDict",
    "class:StreamsCategorizedByPermissions",
    "class:UserGroupMembershipDetails",
    "func:access_default_stream_group_by_id",
    "func:access_stream_by_id",
    "func:access_stream_by_id_for_message",
    "func:access_stream_by_name",
    "func:access_stream_common",
    "func:access_stream_for_delete_or_update_requiring_metadata_access",
    "func:access_stream_for_send_message",
    "func:access_stream_to_remove_visibility_policy_by_id",
    "func:access_stream_to_remove_visibility_policy_by_name",
    "func:access_web_public_stream",
    "func:add_filter_option",
    "func:bulk_can_remove_subscribers_from_streams",
    "func:can_access_stream_history",
    "func:can_access_stream_history_by_id",
    "func:can_access_stream_history_by_name",
    "func:can_access_stream_metadata_user_ids",
    "func:can_administer_accessible_channel",
    "func:check_basic_stream_access",
    "func:check_for_exactly_one_stream_arg",
    "func:check_stream_access_based_on_can_send_message_group",
    "func:check_stream_access_for_delete_or_update_requiring_metadata_access",
    "func:check_stream_name_available",
    "func:check_update_all_streams_active_status",
    "func:create_stream_if_needed",
    "func:create_streams_if_needed",
    "func:do_get_streams",
    "func:ensure_stream",
    "func:filter_stream_authorization",
    "func:get_default_value_for_history_public_to_subscribers",
    "func:get_default_values_for_stream_permission_group_settings",
    "func:get_group_setting_value_dict_for_streams",
    "func:get_occupied_streams",
    "func:get_public_streams_queryset",
    "func:get_setting_values_for_group_settings",
    "func:get_stream_by_narrow_operand_access_unchecked",
    "func:get_stream_permission_default_group",
    "func:get_stream_permission_policy_name",
    "func:get_stream_post_policy_value_based_on_group_setting",
    "func:get_streams_for_user",
    "func:get_streams_to_which_user_cannot_add_subscribers",
    "func:get_subscribed_private_streams_for_user",
    "func:get_user_ids_with_metadata_access_via_permission_groups",
    "func:get_web_public_streams",
    "func:get_web_public_streams_queryset",
    "func:has_metadata_access_to_channel_via_groups",
    "func:is_user_in_can_add_subscribers_group",
    "func:is_user_in_can_administer_channel_group",
    "func:is_user_in_can_remove_subscribers_group",
    "func:list_to_streams",
    "func:notify_stream_is_recently_active_update",
    "func:private_stream_user_ids",
    "func:public_stream_user_ids",
    "func:render_stream_description",
    "func:send_stream_creation_event",
    "func:send_stream_deletion_event",
    "func:stream_to_dict",
    "func:subscribed_to_stream",
    "func:update_stream_active_status_for_realm",
    "func:user_has_content_access"
  ],
  "streams.py_gpt4_eb6777f4.py": [
    "class:Stream",
    "class:_LinkedListDirection",
    "func:__aiter__",
    "func:__and__",
    "func:__copy__",
    "func:__init__",
    "func:__iter__",
    "func:__next__",
    "func:_chain",
    "func:_channel_stop_iteration",
    "func:_enable_passive",
    "func:_human_channel",
    "func:_iter_ll",
    "func:_iter_ll_backwards",
    "func:_iter_ll_forwards",
    "func:_join",
    "func:_repr_channel",
    "func:_repr_info",
    "func:_set_current_event",
    "func:add_processor",
    "func:clone",
    "func:combine",
    "func:contribute_to_stream",
    "func:current_event",
    "func:derive_topic",
    "func:echo",
    "func:enumerate",
    "func:filter",
    "func:get_active_stream",
    "func:get_root_stream",
    "func:group_by",
    "func:info",
    "func:inner_join",
    "func:join",
    "func:label",
    "func:left_join",
    "func:noack",
    "func:outer_join",
    "func:shortlabel",
    "func:through"
  ],
  "stripe.py_gpt4_68c08fad.py": [
    "class:BillingError",
    "class:BillingSession",
    "class:BillingSessionAuditLogEventError",
    "class:BillingSessionEventType",
    "class:EventStatusRequest",
    "class:InitialUpgradeRequest",
    "class:InvalidBillingScheduleError",
    "class:InvalidPlanUpgradeError",
    "class:InvalidTierError",
    "class:LicenseLimitError",
    "class:PlanTierChangeType",
    "class:PriceArgs",
    "class:PushNotificationsEnabledStatus",
    "class:RealmBillingSession",
    "class:RemoteRealmBillingSession",
    "class:RemoteServerBillingSession",
    "class:ServerDeactivateWithExistingPlanError",
    "class:SponsorshipApplicantInfo",
    "class:SponsorshipRequestForm",
    "class:SponsorshipRequestSessionSpecificContext",
    "class:StripeCardError",
    "class:StripeConnectionError",
    "class:StripeCustomerData",
    "class:SupportRequestError",
    "class:SupportType",
    "class:SupportViewRequest",
    "class:UpdatePlanRequest",
    "class:UpgradePageContext",
    "class:UpgradePageParams",
    "class:UpgradePageSessionTypeSpecificContext",
    "class:UpgradeRequest",
    "class:UpgradeWithExistingPlanError",
    "func:__init__",
    "func:add_customer_to_community_plan",
    "func:add_months",
    "func:add_org_type_data_to_sponsorship_context",
    "func:apply_discount_to_plan",
    "func:approve_sponsorship",
    "func:attach_discount_to_customer",
    "func:billing_base_url",
    "func:billing_entity_display_name",
    "func:billing_session_url",
    "func:build_support_url",
    "func:catch_stripe_errors",
    "func:cents_to_dollar_string",
    "func:check_customer_not_on_paid_plan",
    "func:check_plan_tier_is_billable",
    "func:check_upgrade_parameters",
    "func:compute_plan_parameters",
    "func:configure_complimentary_access_plan",
    "func:configure_fixed_price_plan",
    "func:create_card_update_session",
    "func:create_card_update_session_for_upgrade",
    "func:create_complimentary_access_plan",
    "func:create_stripe_customer",
    "func:create_stripe_invoice_and_charge",
    "func:current_count_for_billed_licenses",
    "func:customer_has_credit_card_as_default_payment_method",
    "func:customer_has_last_n_invoices_open",
    "func:customer_plan_exists",
    "func:delete_fixed_price_plan",
    "func:do_change_plan_status",
    "func:do_change_plan_to_new_tier",
    "func:do_change_plan_type",
    "func:do_change_schedule_after_free_trial",
    "func:do_deactivate_remote_server",
    "func:do_reactivate_remote_server",
    "func:do_update_plan",
    "func:do_upgrade",
    "func:downgrade_at_the_end_of_billing_cycle",
    "func:downgrade_now_without_creating_additional_invoices",
    "func:downgrade_small_realms_behind_on_payments_as_needed",
    "func:ensure_current_plan_is_upgradable",
    "func:ensure_customer_does_not_have_active_plan",
    "func:format_discount_percentage",
    "func:format_money",
    "func:generate_invoice_for_upgrade",
    "func:generate_stripe_invoice",
    "func:get_all_invoices_for_customer",
    "func:get_amount_due_fixed_price_plan",
    "func:get_amount_to_credit_for_plan_tier_change",
    "func:get_annual_recurring_revenue_for_support_data",
    "func:get_audit_log_event",
    "func:get_billable_licenses_for_customer",
    "func:get_billing_context_from_plan",
    "func:get_billing_page_context",
    "func:get_cached_seat_count",
    "func:get_complimentary_access_next_plan",
    "func:get_complimentary_access_next_plan_name",
    "func:get_complimentary_access_plan",
    "func:get_configured_fixed_price_plan_offer",
    "func:get_customer",
    "func:get_customer_plan_renewal_amount",
    "func:get_data_for_stripe_customer",
    "func:get_email",
    "func:get_event_status",
    "func:get_flat_discount_info",
    "func:get_formatted_complimentary_access_plan_end_date",
    "func:get_free_trial_days",
    "func:get_guest_user_count",
    "func:get_idempotency_key",
    "func:get_initial_upgrade_context",
    "func:get_last_ledger_for_automanaged_plan_if_exists",
    "func:get_latest_seat_count",
    "func:get_metadata_for_stripe_update_card",
    "func:get_next_billing_cycle",
    "func:get_next_plan",
    "func:get_non_guest_user_count",
    "func:get_past_invoices_session_url",
    "func:get_plan_renewal_or_end_date",
    "func:get_price_per_license",
    "func:get_price_per_license_and_discount",
    "func:get_push_status_for_remote_request",
    "func:get_seat_count",
    "func:get_sponsorship_plan_name",
    "func:get_sponsorship_request_context",
    "func:get_sponsorship_request_session_specific_context",
    "func:get_stripe_customer_portal_url",
    "func:get_type_of_plan_tier_change",
    "func:get_upgrade_page_session_type_specific_context",
    "func:has_billing_access",
    "func:invoice_plan",
    "func:invoice_plans_as_needed",
    "func:is_free_trial_offer_enabled",
    "func:is_realm_on_free_trial",
    "func:is_sponsored",
    "func:is_sponsored_or_pending",
    "func:make_end_of_cycle_updates_if_needed",
    "func:min_licenses_for_flat_discount_to_self_hosted_basic_plan",
    "func:min_licenses_for_plan",
    "func:missing_data_error_page",
    "func:next_invoice_date",
    "func:next_month",
    "func:on_paid_plan",
    "func:org_name",
    "func:payment_method_string",
    "func:process_downgrade",
    "func:process_initial_upgrade",
    "func:process_support_view_request",
    "func:replace_payment_method",
    "func:request_sponsorship",
    "func:save_org_type_from_request_sponsorship_session",
    "func:send_realm_created_internal_admin_message",
    "func:send_support_admin_realm_internal_message",
    "func:set_required_plan_tier",
    "func:sign_string",
    "func:sponsorship_org_type_key_helper",
    "func:stale_seat_count_check",
    "func:start_of_next_billing_cycle",
    "func:stripe_customer_has_credit_card_as_default_payment_method",
    "func:stripe_get_customer",
    "func:support_url",
    "func:switch_plan_tier",
    "func:sync_license_ledger_if_needed",
    "func:unsign_seat_count",
    "func:unsign_string",
    "func:update_billing_modality_of_current_plan",
    "func:update_customer_minimum_licenses",
    "func:update_customer_sponsorship_status",
    "func:update_data_for_checkout_session_and_invoice_payment",
    "func:update_end_date_of_current_plan",
    "func:update_free_trial_invoice_with_licenses",
    "func:update_license_ledger_for_automanaged_plan",
    "func:update_license_ledger_for_manual_plan",
    "func:update_license_ledger_if_needed",
    "func:update_or_create_customer",
    "func:update_or_create_stripe_customer",
    "func:validate_licenses",
    "func:validate_plan_license_management",
    "func:void_all_open_invoices",
    "func:wrapped",
    "func:write_to_audit_log",
    "func:write_to_audit_log_plan_property_changed"
  ],
  "style.py_gpt4_8ae42563.py": [
    "class:MyStyler",
    "class:Styler",
    "func:__copy__",
    "func:__deepcopy__",
    "func:__init__",
    "func:_apply",
    "func:_apply_index",
    "func:_background_gradient",
    "func:_bar",
    "func:_copy",
    "func:_get_numeric_subset_default",
    "func:_highlight_between",
    "func:_highlight_value",
    "func:_map",
    "func:_repr_html_",
    "func:_repr_latex_",
    "func:_update_ctx",
    "func:_update_ctx_header",
    "func:_validate_apply_axis_arg",
    "func:apply",
    "func:apply_index",
    "func:background_gradient",
    "func:bar",
    "func:clear",
    "func:concat",
    "func:css",
    "func:css_bar",
    "func:css_calc",
    "func:export",
    "func:f",
    "func:from_custom_template",
    "func:hide",
    "func:highlight_between",
    "func:highlight_max",
    "func:highlight_min",
    "func:highlight_null",
    "func:highlight_quantile",
    "func:map",
    "func:map_index",
    "func:pipe",
    "func:relative_luminance",
    "func:set_caption",
    "func:set_properties",
    "func:set_sticky",
    "func:set_table_attributes",
    "func:set_table_styles",
    "func:set_td_classes",
    "func:set_tooltips",
    "func:set_uuid",
    "func:text_gradient",
    "func:to_excel",
    "func:to_html",
    "func:to_latex",
    "func:to_string",
    "func:to_typst",
    "func:use"
  ],
  "sublime.py_gpt4_a94819a9.py": [
    "class:Linter",
    "func:__init__",
    "func:add_lint_marks",
    "func:add_message",
    "func:erase_lint_marks",
    "func:get_lineno_msgs",
    "func:get_mypy_settings",
    "func:get_outlines",
    "func:is_that_code",
    "func:last_selected_lineno",
    "func:parse_errors",
    "func:parse_results",
    "func:run_linter",
    "func:underline_range",
    "func:underline_regex",
    "func:update_statusbar"
  ],
  "support.py_gpt4_13ee2db1.py": [
    "class:DemoRequestForm",
    "class:SalesRequestForm",
    "class:SupportRequestForm",
    "class:SupportSelectOption",
    "func:check_update_max_invites",
    "func:demo_request",
    "func:get_confirmations",
    "func:get_default_max_invites_for_plan_type",
    "func:get_plan_type_string",
    "func:get_realm_admin_emails_as_string",
    "func:get_realm_owner_emails_as_string",
    "func:get_realm_plan_type_options",
    "func:get_realm_plan_type_options_for_discount",
    "func:get_remote_plan_tier_options",
    "func:get_remote_realm_billing_user_emails_as_string",
    "func:get_remote_server_billing_user_emails_as_string",
    "func:get_remote_servers_for_support",
    "func:remote_servers_support",
    "func:sales_support_request",
    "func:shared_support_context",
    "func:support",
    "func:support_request"
  ],
  "swagger.py_gpt4_de2853af.py": [
    "class:Swagger",
    "func:_simple_slugify",
    "func:get_content",
    "func:get_field",
    "func:get_link",
    "func:get_schema_definitions",
    "func:load",
    "func:lookup"
  ],
  "switch.py_gpt4_e0aed1a2.py": [
    "class:FluxSwitch",
    "func:__init__",
    "func:find_start_time",
    "func:find_stop_time",
    "func:is_on",
    "func:name"
  ],
  "syntax_tree.py_gpt4_e67d5ced.py": [
    "class:ContextualizedSubscriptListNode",
    "func:_apply_decorators",
    "func:_bool_to_value",
    "func:_get_tuple_ints",
    "func:_infer_comparison",
    "func:_infer_comparison_part",
    "func:_infer_expr_stmt",
    "func:_infer_node",
    "func:_infer_node_cached",
    "func:_infer_node_if_inferred",
    "func:_infer_subscript_list",
    "func:_is_annotation_name",
    "func:_is_list",
    "func:_is_tuple",
    "func:_limit_value_infers",
    "func:_literals_to_types",
    "func:check",
    "func:check_setitem",
    "func:check_tuple_assignments",
    "func:infer",
    "func:infer_atom",
    "func:infer_expr_stmt",
    "func:infer_factor",
    "func:infer_node",
    "func:infer_or_test",
    "func:infer_trailer",
    "func:to_mod",
    "func:tree_name_to_values",
    "func:wrapper"
  ],
  "t5.py_gpt4_d3f65209.py": [
    "class:T5",
    "class:T5Block",
    "class:T5BlockOutput",
    "class:T5DecoderStack",
    "class:T5DenseGatedGeluDense",
    "class:T5DenseReluDense",
    "class:T5EncoderStack",
    "class:T5FeedForwardProjection",
    "class:T5LayerCrossAttention",
    "class:T5LayerCrossAttentionOutput",
    "class:T5LayerFF",
    "class:T5LayerNorm",
    "class:T5LayerSelfAttention",
    "class:T5LayerSelfAttentionOutput",
    "class:T5Output",
    "class:T5Stack",
    "class:T5StackOutput",
    "func:__init__",
    "func:_decoder_cache_to_dict",
    "func:_dict_to_decoder_cache",
    "func:_from_config",
    "func:_get_lm_logits",
    "func:_post_load_state_dict",
    "func:_shift_right",
    "func:basic_decoder",
    "func:basic_encoder",
    "func:forward",
    "func:get_head_mask",
    "func:hidden_size",
    "func:num_blocks",
    "func:resize_token_embeddings",
    "func:take_search_step"
  ],
  "tables.py_gpt4_1d679a61.py": [
    "class:CollectionT",
    "class:GlobalTableT",
    "class:TableManagerT",
    "class:TableT",
    "class:WindowSetT",
    "class:WindowWrapperT",
    "class:WindowedItemsViewT",
    "class:WindowedValuesViewT",
    "class:_AppT",
    "class:_FieldDescriptorT",
    "class:_ModelArg",
    "class:_SchemaT",
    "func:__getitem__",
    "func:__iadd__",
    "func:__iand__",
    "func:__ifloordiv__",
    "func:__ilshift__",
    "func:__imod__",
    "func:__imul__",
    "func:__init__",
    "func:__ior__",
    "func:__ipow__",
    "func:__irshift__",
    "func:__isub__",
    "func:__iter__",
    "func:__itruediv__",
    "func:__ixor__",
    "func:_changelog_topic_name",
    "func:_relative_event",
    "func:_relative_field",
    "func:_relative_now",
    "func:_relative_timestamp",
    "func:_windowed_contains",
    "func:add",
    "func:apply",
    "func:apply_changelog_batch",
    "func:as_ansitable",
    "func:changelog_topic",
    "func:changelog_topics",
    "func:clone",
    "func:current",
    "func:delta",
    "func:get_relative_timestamp",
    "func:get_timestamp",
    "func:hopping",
    "func:keys",
    "func:name",
    "func:now",
    "func:on_commit",
    "func:on_del_key",
    "func:on_partitions_revoked",
    "func:on_rebalance_start",
    "func:on_recover",
    "func:on_set_key",
    "func:partition_for_key",
    "func:persist_offset_on_commit",
    "func:persisted_offset",
    "func:relative_to_field",
    "func:relative_to_now",
    "func:relative_to_stream",
    "func:reset_state",
    "func:send_changelog",
    "func:tumbling",
    "func:using_window",
    "func:value"
  ],
  "task_suite.py_gpt4_7a891628.py": [
    "class:TaskSuite",
    "func:__init__",
    "func:_contraction_test",
    "func:_default_tests",
    "func:_format_failing_examples",
    "func:_prediction_and_confidence_scores",
    "func:_punctuation_test",
    "func:_setup_editor",
    "func:_summary",
    "func:_typo_test",
    "func:add_test",
    "func:cap_order",
    "func:constructor",
    "func:contractions",
    "func:describe",
    "func:punctuation",
    "func:run",
    "func:save_suite",
    "func:summary",
    "func:typos"
  ],
  "tasks.py_gpt4_e0ffa927.py": [
    "class:Task",
    "class:TaskRunNameCallbackWithParameters",
    "func:__call__",
    "func:__get__",
    "func:__init__",
    "func:_generate_task_key",
    "func:_infer_parent_task_runs",
    "func:apply_async",
    "func:delay",
    "func:exponential_backoff",
    "func:is_callback_with_parameters",
    "func:ismethod",
    "func:map",
    "func:on_commit",
    "func:on_completion",
    "func:on_failure",
    "func:on_rollback",
    "func:retry_backoff_callable",
    "func:submit",
    "func:task",
    "func:task_input_hash",
    "func:with_options"
  ],
  "temp_file.py": [
    "class:AttentionModule",
    "class:AttentionOutput",
    "class:SelfAttention",
    "class:T5Attention",
    "func:__init__",
    "func:_from_config",
    "func:_get_attention_probs",
    "func:_get_lengths",
    "func:_normalize",
    "func:_output_layer",
    "func:_position_bias",
    "func:_project",
    "func:_query_layer",
    "func:_relative_position_bucket",
    "func:_transpose_for_scores",
    "func:compute_bias",
    "func:forward"
  ],
  "test.py_gpt4_89891a2f.py": [
    "class:BaseClient",
    "class:Client",
    "class:FunctionNotFoundError",
    "class:HTTPResponse",
    "class:InvokeResponse",
    "class:TestEventsClient",
    "class:TestHTTPClient",
    "class:TestLambdaClient",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:_chalice_config",
    "func:_error_response",
    "func:_patched_env_vars",
    "func:create_from_dict",
    "func:delete",
    "func:events",
    "func:generate_cw_event",
    "func:generate_kinesis_event",
    "func:generate_s3_event",
    "func:generate_sns_event",
    "func:generate_sqs_event",
    "func:get",
    "func:head",
    "func:http",
    "func:invoke",
    "func:json_body",
    "func:lambda_",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:request"
  ],
  "test_aiokafka.py_gpt4_29278101.py": [
    "class:AIOKafkaConsumerThreadFixtures",
    "class:MyPartitioner",
    "class:test_AIOKafkaConsumerThread",
    "class:test_Consumer",
    "class:test_ConsumerRebalanceListener",
    "class:test_Producer",
    "class:test_Transport",
    "class:test_VEP_no_commit",
    "class:test_VEP_no_fetch_since_start",
    "class:test_VEP_no_highwater_since_start",
    "class:test_VEP_no_recent_fetch",
    "class:test_VEP_no_recent_response",
    "class:test_VEP_no_response_since_start",
    "class:test_VEP_stream_idle_highwater_no_acks",
    "class:test_VEP_stream_idle_highwater_no_inbound",
    "class:test_VEP_stream_idle_highwater_same_has_acks_everything_OK",
    "class:test_VEP_stream_idle_no_highwater",
    "class:test_verify_event_path_base",
    "func:REPLACE_WITH_MEMBER_ID",
    "func:_configure",
    "func:_consumer",
    "func:_producer",
    "func:_set_last_commit",
    "func:_set_last_request",
    "func:_set_last_response",
    "func:_set_started",
    "func:_set_stream_inbound",
    "func:aaaa_setup_attributes",
    "func:aiotp",
    "func:assert_calls_thread",
    "func:assert_create_worker_consumer",
    "func:assert_new_producer",
    "func:assert_setup_lazy_spans",
    "func:bar",
    "func:callback",
    "func:consumer",
    "func:cthread",
    "func:foo",
    "func:handler",
    "func:logger",
    "func:mock_record",
    "func:now",
    "func:on_partitions_assigned",
    "func:on_partitions_revoked",
    "func:producer",
    "func:setup_consumer",
    "func:start_span",
    "func:test__create_client_consumer",
    "func:test__create_consumer__client",
    "func:test__create_consumer__worker",
    "func:test__create_worker_consumer",
    "func:test__create_worker_consumer__transaction",
    "func:test__ensure_consumer",
    "func:test__ensure_producer",
    "func:test__new_producer",
    "func:test__new_producer__default",
    "func:test__new_producer__in_transaction",
    "func:test__new_producer__using_settings",
    "func:test__new_topicpartition",
    "func:test__producer_type",
    "func:test__settings_extra",
    "func:test__start_span",
    "func:test__start_span__no_tracer",
    "func:test__to_message",
    "func:test__to_message__no_timestamp",
    "func:test__topic_config",
    "func:test__topic_config__combined",
    "func:test__topic_config__compacting",
    "func:test__topic_config__deleting",
    "func:test__topic_config__retention",
    "func:test_assignment",
    "func:test_close",
    "func:test_close__no_consumer",
    "func:test_committing_fine",
    "func:test_constructor",
    "func:test_credentials_to_aiokafka",
    "func:test_credentials_to_aiokafka__invalid",
    "func:test_has_inbound",
    "func:test_highwater",
    "func:test_highwater__in_transaction",
    "func:test_highwater_same_as_offset",
    "func:test_inbound_timed_out",
    "func:test_just_started",
    "func:test_key_partition",
    "func:test_key_partition__no_metadata",
    "func:test_main",
    "func:test_no_acks",
    "func:test_no_monitor",
    "func:test_producer__uses_custom_partitioner",
    "func:test_recent_fetch",
    "func:test_recent_response",
    "func:test_seek",
    "func:test_session_gt_request_timeout",
    "func:test_span_without_operation_name",
    "func:test_start_coordinator_span",
    "func:test_start_rebalancing_span",
    "func:test_state",
    "func:test_supports_headers",
    "func:test_supports_headers__not_ready",
    "func:test_timed_out",
    "func:test_timed_out_since_last",
    "func:test_timed_out_since_start",
    "func:test_topic_partitions",
    "func:test_trace_category",
    "func:test_traced_from_parent_span",
    "func:test_transform_span_eager",
    "func:test_transform_span_flush_spans",
    "func:test_transform_span_lazy",
    "func:test_transform_span_lazy_no_consumer",
    "func:thread",
    "func:tp",
    "func:tracer",
    "func:transport"
  ],
  "test_alerts.py_gpt4_048d9fde.py": [
    "class:AlertsTestCase",
    "class:DummyRemoteIPPlugin",
    "func:post_receive",
    "func:pre_receive",
    "func:setUp",
    "func:status_change",
    "func:tearDown",
    "func:test_alert",
    "func:test_alert_attributes",
    "func:test_alert_no_attributes",
    "func:test_alert_not_found",
    "func:test_alert_status",
    "func:test_alert_tagging",
    "func:test_alerts_show_fields",
    "func:test_closed_alerts",
    "func:test_duplicate_status",
    "func:test_duplicate_value",
    "func:test_expired_alerts",
    "func:test_filter_and_query_params",
    "func:test_filter_params",
    "func:test_get_alerts",
    "func:test_get_body",
    "func:test_history_limit",
    "func:test_query_param",
    "func:test_reopen_alerts",
    "func:test_timeout"
  ],
  "test_api.py_gpt4_59b369c4.py": [
    "class:CheckTests",
    "class:IntegrationTests",
    "class:LoggingReporter",
    "class:Node",
    "class:SysStreamCapturing",
    "class:TestIterSourceCode",
    "class:TestMain",
    "class:TestReporter",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:_create_StringIO",
    "func:assertHasErrors",
    "func:evaluate",
    "func:flake",
    "func:getErrors",
    "func:getPyflakesBinary",
    "func:makeEmptyFile",
    "func:makeTempFile",
    "func:runPyflakes",
    "func:setUp",
    "func:syntaxError",
    "func:tearDown",
    "func:test_CRLFLineEndings",
    "func:test_checkPathNonExisting",
    "func:test_checkRecursive",
    "func:test_emptyDirectory",
    "func:test_encodedFileUTF8",
    "func:test_eofSyntaxError",
    "func:test_eofSyntaxErrorWithTab",
    "func:test_errors_io",
    "func:test_errors_syntax",
    "func:test_explicitFiles",
    "func:test_fileWithFlakes",
    "func:test_flake",
    "func:test_goodFile",
    "func:test_invalidEscape",
    "func:test_legacyScript",
    "func:test_misencodedFileUTF16",
    "func:test_misencodedFileUTF8",
    "func:test_missingTrailingNewline",
    "func:test_multiLineSyntaxError",
    "func:test_multilineSyntaxError",
    "func:test_multipleDirectories",
    "func:test_nonDefaultFollowsDefaultSyntaxError",
    "func:test_nonKeywordAfterKeywordSyntaxError",
    "func:test_onlyPythonSource",
    "func:test_permissionDenied",
    "func:test_pyflakesWarning",
    "func:test_readFromStdin",
    "func:test_recurses",
    "func:test_shebang",
    "func:test_singleFile",
    "func:test_syntaxError",
    "func:test_syntaxErrorNoOffset",
    "func:test_unexpectedError",
    "func:unexpectedError",
    "func:withStderrTo"
  ],
  "test_app.py_gpt4_7045e04c.py": [
    "class:B",
    "class:EnvCase",
    "class:OtherSchedulingStrategy",
    "class:test_BootStrategy",
    "class:test_settings",
    "func:App",
    "func:_dummy_partitioner",
    "func:assert_config_equivalent",
    "func:assert_expected",
    "func:test_app_config",
    "func:test_broker_as_URL",
    "func:test_broker_with_no_scheme_set",
    "func:test_cache_as_URL",
    "func:test_compat_client_id",
    "func:test_compat_commit_interval",
    "func:test_compat_create_reply_topic",
    "func:test_compat_default_partitions",
    "func:test_compat_num_standby_replicas",
    "func:test_compat_replication_factor",
    "func:test_compat_stream_ack_cancelled_tasks",
    "func:test_compat_stream_ack_exceptions",
    "func:test_compat_url",
    "func:test_consumer_api_version__defaults_to_broker",
    "func:test_custom_host_port_to_canonical",
    "func:test_datadir_as_Path",
    "func:test_defaults",
    "func:test_disable_kafka",
    "func:test_disable_kafka_consumer",
    "func:test_env",
    "func:test_env_with_prefix",
    "func:test_id_no_version",
    "func:test_init",
    "func:test_kafka_consumer",
    "func:test_kafka_producer",
    "func:test_producer_api_version__defaults_to_broker",
    "func:test_producer_linger_ms__compat",
    "func:test_reply_prefix_unique",
    "func:test_sensors",
    "func:test_store_as_URL",
    "func:test_tabledir_is_relative_to_path",
    "func:test_version_cannot_be_zero",
    "func:test_warns_when_key_already_configured",
    "func:test_web_as_URL",
    "func:test_web_server"
  ],
  "test_app.py_gpt4_8a08573d.py": [
    "class:FakeClient",
    "class:FakeExceptionFactory",
    "class:FakeGoneException",
    "class:FakeLambdaContext",
    "class:FakeLambdaContextIdentity",
    "class:FakeSession",
    "class:SomeOtherError",
    "class:TestCORSConfig",
    "class:TestDefaultCORS",
    "class:TestMiddleware",
    "func:__init__",
    "func:_call",
    "func:_func",
    "func:_wrapped",
    "func:appname",
    "func:assert_requires_opt_in",
    "func:assert_response_body_is",
    "func:auth_request",
    "func:badkwargs",
    "func:bar",
    "func:bincat",
    "func:bp_handler",
    "func:bp_middleware",
    "func:builtin_auth",
    "func:client",
    "func:conncet_handler_2",
    "func:connect",
    "func:connect_handler",
    "func:context",
    "func:create_request_with_content_type",
    "func:default",
    "func:delete_connection",
    "func:disconncet_handler_2",
    "func:disconnect",
    "func:disconnect_handler",
    "func:error",
    "func:first",
    "func:foo",
    "func:get_connection",
    "func:get_remaining_time_in_millis",
    "func:get_view",
    "func:handler",
    "func:hello",
    "func:image",
    "func:index",
    "func:index_post",
    "func:index_view",
    "func:index_view_dup",
    "func:is_public_method",
    "func:json_response_body",
    "func:lambda_handler",
    "func:log_message",
    "func:message",
    "func:message_handler",
    "func:message_handler_2",
    "func:my_auth",
    "func:myauth",
    "func:mybar",
    "func:mydecorator",
    "func:myfoo",
    "func:myfunction",
    "func:myhandler",
    "func:myhandler2",
    "func:mylambda",
    "func:mymiddleware",
    "func:mymiddleware_http",
    "func:mymiddleware_pure_lambda",
    "func:mymiddleware_s3",
    "func:mymiddleware_sns",
    "func:mymiddleware_websocket",
    "func:myroot",
    "func:name",
    "func:name_kwarg",
    "func:notfound",
    "func:off",
    "func:on",
    "func:on_s3",
    "func:on_sns",
    "func:on_sqs",
    "func:other_view",
    "func:post_to_connection",
    "func:put_view",
    "func:py_dict",
    "func:raise_error",
    "func:routefoo",
    "func:s3_handler",
    "func:sample_app",
    "func:sample_app_with_cors",
    "func:sample_app_with_default_cors",
    "func:sample_middleware_app",
    "func:sample_websocket_app",
    "func:second_middleware",
    "func:serialize",
    "func:sns_handler",
    "func:sqs_handler",
    "func:test_auth_response_can_include_context",
    "func:test_auth_response_serialization",
    "func:test_auth_response_wildcard",
    "func:test_auth_response_wildcard_string",
    "func:test_auth_response_with_colon_chars",
    "func:test_aws_execution_env_set",
    "func:test_blueprint_docstring_is_preserved",
    "func:test_blueprint_gets_middlware_added",
    "func:test_builtin_auth_can_transform_event",
    "func:test_bytes_when_binary_type_is_application_json",
    "func:test_can__about_websocket_connection",
    "func:test_can_access_context",
    "func:test_can_access_log_when_mounted",
    "func:test_can_access_original_event_and_context_in_http",
    "func:test_can_access_raw_body",
    "func:test_can_access_websocket_json_body_twice",
    "func:test_can_add_authorizer_with_url_prefix_and_routes",
    "func:test_can_alter_response",
    "func:test_can_base64_encode_binary_multiple_media_types",
    "func:test_can_call_current_app_on_blueprint_when_mounted",
    "func:test_can_call_current_request_on_blueprint_when_mounted",
    "func:test_can_call_lambda_context_on_blueprint_when_mounted",
    "func:test_can_call_to_dict_on_current_request",
    "func:test_can_call_to_dict_on_request_with_querystring",
    "func:test_can_change_order_of_definitions",
    "func:test_can_close_websocket_connection",
    "func:test_can_combine_lambda_functions_and_routes_in_blueprints",
    "func:test_can_combine_multiple_blueprints_in_single_app",
    "func:test_can_configure_client_on_connect",
    "func:test_can_configure_client_on_disconnect",
    "func:test_can_configure_client_on_message",
    "func:test_can_configure_non_aws_partition_clients",
    "func:test_can_configure_websockets",
    "func:test_can_convert_existing_lambda_decorator_to_middleware",
    "func:test_can_create_cwe_event_handler",
    "func:test_can_create_ddb_handler",
    "func:test_can_create_kinesis_handler",
    "func:test_can_create_s3_event_handler",
    "func:test_can_create_sns_handler",
    "func:test_can_create_sqs_handler",
    "func:test_can_encode_binary_body_as_base64",
    "func:test_can_encode_binary_body_with_header_charset",
    "func:test_can_encode_binary_json",
    "func:test_can_explicitly_set_debug_false_in_initializer",
    "func:test_can_filter_middleware_registration",
    "func:test_can_handle_builtin_auth",
    "func:test_can_handle_multiple_routes",
    "func:test_can_have_views_of_same_route_but_different_methods",
    "func:test_can_map_cwe_event_dict_to_object",
    "func:test_can_map_ddb_event",
    "func:test_can_map_kinesis_event",
    "func:test_can_map_schedule_event_dict_to_object",
    "func:test_can_map_sns_event",
    "func:test_can_map_sqs_event",
    "func:test_can_map_to_s3_event_object",
    "func:test_can_mix_auth_routes_and_strings",
    "func:test_can_mount_all_decorators_in_blueprint",
    "func:test_can_mount_apis_at_url_prefix",
    "func:test_can_mount_event_sources_with_blueprint",
    "func:test_can_mount_lambda_functions_with_name_prefix",
    "func:test_can_mount_root_url_in_blueprint",
    "func:test_can_parse_json_websocket_body",
    "func:test_can_parse_route_view_args",
    "func:test_can_preserve_signature_on_blueprint",
    "func:test_can_receive_binary_data",
    "func:test_can_register_blueprint_on_app",
    "func:test_can_register_middleware_on_blueprints",
    "func:test_can_register_middleware_without_decorator",
    "func:test_can_register_scheduled_event_with_event",
    "func:test_can_register_scheduled_event_with_rate",
    "func:test_can_register_scheduled_event_with_str",
    "func:test_can_return_auth_dict_directly",
    "func:test_can_return_auth_response",
    "func:test_can_return_response_object",
    "func:test_can_return_text_even_with_binary_content_type_configured",
    "func:test_can_return_unicode_body",
    "func:test_can_route_api_call_to_view_function",
    "func:test_can_route_single_view",
    "func:test_can_route_websocket_connect_message",
    "func:test_can_route_websocket_connect_response_dict",
    "func:test_can_route_websocket_connect_response_obj",
    "func:test_can_route_websocket_default_message",
    "func:test_can_route_websocket_disconnect_message",
    "func:test_can_send_websocket_message",
    "func:test_can_serialize_cognito_auth",
    "func:test_can_serialize_custom_authorizer",
    "func:test_can_serialize_iam_auth",
    "func:test_can_set_ddb_handler_maximum_batching_window_in_seconds",
    "func:test_can_set_debug_mode_in_initialzier",
    "func:test_can_set_kinesis_handler_maximum_batching_window",
    "func:test_can_set_sqs_handler_maximum_batching_window_in_seconds",
    "func:test_can_set_sqs_handler_name",
    "func:test_can_short_circuit_response",
    "func:test_can_specify_extra_auth_attributes",
    "func:test_can_use_auth_routes_instead_of_strings",
    "func:test_can_use_for_websocket_handlers",
    "func:test_can_use_middleware_for_pure_lambda",
    "func:test_can_use_out_of_order_args",
    "func:test_can_use_rest_api_for_middleware",
    "func:test_cannot_configure_client_without_session",
    "func:test_cannot_re_register_websocket_handlers",
    "func:test_cannot_receive_base64_string_with_binary_response",
    "func:test_cannot_send_message_on_unconfigured_app",
    "func:test_cannot_send_websocket_message_without_configure",
    "func:test_cant_access_json_body_with_wrong_content_type",
    "func:test_case_insensitive_mapping",
    "func:test_chalice_view_errors_propagate_in_debug_mode",
    "func:test_chalice_view_errors_propagate_in_non_debug_mode",
    "func:test_close_does_fail_if_already_disconnected",
    "func:test_content_type_validation_raises_error_on_unknown_types",
    "func:test_content_type_with_charset",
    "func:test_content_types_must_be_lists",
    "func:test_cors_disabled",
    "func:test_cors_enabled",
    "func:test_cors_none",
    "func:test_cron_expression_converts_to_str",
    "func:test_debug_mode_changes_log_level",
    "func:test_default_logging_handlers_created",
    "func:test_default_logging_only_added_once",
    "func:test_doc_saved_on_route",
    "func:test_does_only_configure_client_once",
    "func:test_does_raise_on_invalid_json_wbsocket_body",
    "func:test_does_raise_on_send_to_bad_websocket",
    "func:test_does_reraise_on_other_send_exception",
    "func:test_does_reraise_on_websocket_send_error",
    "func:test_empty_headers_have_basic_validation",
    "func:test_ensure_debug_mode_is_false_by_default",
    "func:test_eq",
    "func:test_eq_non_default_configurations",
    "func:test_error_contains_cors_headers",
    "func:test_error_handler_rest_api_untouched",
    "func:test_error_on_duplicate_route_methods",
    "func:test_error_on_unknown_event",
    "func:test_error_on_unsupported_method",
    "func:test_error_on_unsupported_method_gives_feedback_on_method",
    "func:test_every_decorator_added_to_blueprint",
    "func:test_exceptions_raised_as_chalice_errors",
    "func:test_fallsback_to_session_if_needed",
    "func:test_handles_binary_responses",
    "func:test_headers_have_basic_validation",
    "func:test_http_request_to_dict_is_json_serializable",
    "func:test_http_response_to_dict",
    "func:test_info_does_fail_if_already_disconnected",
    "func:test_internal_exception_debug_false",
    "func:test_invalid_JSON_response_body_throws_type_error",
    "func:test_invalid_binary_response_body_throws_value_error",
    "func:test_json_body_available_on_multiple_content_types",
    "func:test_json_body_available_when_content_type_matches",
    "func:test_json_body_available_with_lowercase_content_type_key",
    "func:test_json_body_available_with_right_content_type",
    "func:test_json_body_none_with_malformed_json",
    "func:test_logs_can_be_disabled",
    "func:test_middleware_basic_api",
    "func:test_middleware_errors_result_in_500",
    "func:test_middleware_errors_return_500_still_caught",
    "func:test_multidict_assignment",
    "func:test_multidict_get_list_wraps_key",
    "func:test_multidict_get_reassigned_value",
    "func:test_multidict_getlist_does_raise_keyerror",
    "func:test_multidict_list_can_pop_value",
    "func:test_multidict_list_wont_change_source",
    "func:test_multidict_pop_raises_del_error",
    "func:test_multidict_raises_keyerror",
    "func:test_multidict_repr",
    "func:test_multidict_returns_all_values",
    "func:test_multidict_returns_lastvalue",
    "func:test_multidict_str",
    "func:test_name_kwargs_does_not_raise_error",
    "func:test_no_content_type_is_still_allowed",
    "func:test_not_eq_different_type",
    "func:test_not_eq_differing_configurations",
    "func:test_original_exception_raised_in_debug_mode",
    "func:test_pure_lambda_function_direct_mapping",
    "func:test_pure_lambda_functions_are_registered_in_app",
    "func:test_raw_body_cache_returns_same_result",
    "func:test_raw_body_is_none_if_body_is_none",
    "func:test_request_to_dict_does_not_contain_internal_attrs",
    "func:test_root_resource",
    "func:test_route_equality",
    "func:test_route_inequality",
    "func:test_rule_object_converts_to_str",
    "func:test_runtime_error_if_current_request_access_on_non_registered_blueprint",
    "func:test_s3_event_urldecodes_keys",
    "func:test_s3_event_urldecodes_unicode_keys",
    "func:test_typecheck_list_type",
    "func:test_unhandled_error_not_caught",
    "func:test_unknown_kwargs_raise_error",
    "func:test_uses_api_id_not_domain_name",
    "func:test_validation_raised_on_unknown_kwargs",
    "func:test_websocket_event_json_body_available",
    "func:test_websocket_event_json_body_can_raise_error",
    "func:test_wildcard_accepts_with_native_python_types_serializes_json",
    "func:test_wildcard_accepts_with_response_class",
    "func:test_will_pass_captured_params_to_view",
    "func:todict",
    "func:view_function",
    "func:websocket_handler_for_route",
    "func:ws_handler"
  ],
  "test_appgraph.py_gpt4_d2cf8562.py": [
    "class:TestApplicationGraphBuilder",
    "func:bar",
    "func:connect",
    "func:create_config",
    "func:disconnect",
    "func:foo",
    "func:message",
    "func:new_handler",
    "func:second",
    "func:test_all_lambda_functions_share_managed_layer",
    "func:test_autogen_policy_for_function",
    "func:test_can_build_app_with_domain_name",
    "func:test_can_build_lambda_function_app_with_reserved_concurrency",
    "func:test_can_build_lambda_function_app_with_vpc_config",
    "func:test_can_build_lambda_function_with_layers",
    "func:test_can_build_private_rest_api",
    "func:test_can_build_private_rest_api_custom_policy",
    "func:test_can_build_rest_api",
    "func:test_can_build_rest_api_with_authorizer",
    "func:test_can_build_single_lambda_function_app",
    "func:test_can_build_single_lambda_function_app_with_log_retention",
    "func:test_can_build_single_lambda_function_app_with_managed_layer",
    "func:test_can_create_ddb_event_handler",
    "func:test_can_create_kinesis_event_handler",
    "func:test_can_create_s3_event_handler",
    "func:test_can_create_sns_event_handler",
    "func:test_can_create_sqs_event_handler",
    "func:test_can_create_sqs_handler_with_queue_arn",
    "func:test_can_create_websocket_api_with_domain_name",
    "func:test_can_create_websocket_app_missing_connect",
    "func:test_can_create_websocket_app_missing_disconnect",
    "func:test_can_create_websocket_app_missing_message",
    "func:test_can_create_websocket_event_handler",
    "func:test_cloudwatch_event_models",
    "func:test_exception_raised_when_missing_vpc_params",
    "func:test_multiple_lambda_functions_share_role_and_package",
    "func:test_scheduled_event_models",
    "func:test_vpc_trait_added_when_vpc_configured",
    "func:websocket_app_without_connect",
    "func:websocket_app_without_disconnect",
    "func:websocket_app_without_message"
  ],
  "test_awsclient.py_gpt4_2fbde922.py": [
    "class:TestServicePrincipal",
    "func:awsclient",
    "func:non_iso_suffixes",
    "func:region",
    "func:test_codedeploy_and_logs",
    "func:test_defaults",
    "func:test_ec2",
    "func:test_endpoint_dns_suffix",
    "func:test_endpoint_dns_suffix_from_arn",
    "func:test_endpoint_from_arn",
    "func:test_iso_exceptions",
    "func:test_local_suffix",
    "func:test_others",
    "func:test_resolve_endpoint",
    "func:test_states",
    "func:test_states_iso",
    "func:test_states_isob",
    "func:test_unmatched_service",
    "func:url_suffix"
  ],
  "test_base.py_gpt4_6611b4aa.py": [
    "class:test_Sensor",
    "class:test_SensorDelegate",
    "func:assignor",
    "func:consumer",
    "func:event",
    "func:message",
    "func:producer",
    "func:req",
    "func:response",
    "func:sensor",
    "func:sensors",
    "func:stream",
    "func:table",
    "func:test_asdict",
    "func:test_on_assignment",
    "func:test_on_commit",
    "func:test_on_commit_completed",
    "func:test_on_commit_initiated",
    "func:test_on_message_in",
    "func:test_on_message_out",
    "func:test_on_rebalance",
    "func:test_on_send",
    "func:test_on_send_completed",
    "func:test_on_send_error",
    "func:test_on_send_initiated",
    "func:test_on_stream_event_in",
    "func:test_on_stream_event_in_out",
    "func:test_on_stream_event_out",
    "func:test_on_table_del",
    "func:test_on_table_get",
    "func:test_on_table_set",
    "func:test_on_topic_buffer_full",
    "func:test_on_web_request",
    "func:test_remove",
    "func:test_repr",
    "func:topic",
    "func:view"
  ],
  "test_base.py_gpt4_6c089270.py": [
    "class:MyTable",
    "class:User",
    "class:test_Collection",
    "func:__post_init__",
    "func:_del_key",
    "func:_get_key",
    "func:_has_key",
    "func:_set_key",
    "func:as_ansitable",
    "func:get_stale",
    "func:hopping",
    "func:is_stale",
    "func:mock_ranges",
    "func:on_sleep",
    "func:table",
    "func:test__human_channel",
    "func:test__join",
    "func:test__maybe_del_key_ttl",
    "func:test__maybe_set_key_ttl",
    "func:test__verify_source_topic_partitions",
    "func:test_and",
    "func:test_apply_changelog_batch",
    "func:test_apply_window_op",
    "func:test_clone",
    "func:test_combine",
    "func:test_contribute_to_stream",
    "func:test_copy",
    "func:test_hash",
    "func:test_info",
    "func:test_inner_join",
    "func:test_join",
    "func:test_key_type_bytes_implies_raw_serializer",
    "func:test_label",
    "func:test_left_join",
    "func:test_new_changelog_topic__default_compacting",
    "func:test_new_changelog_topic__default_deleting",
    "func:test_new_changelog_topic__window_expires",
    "func:test_on_changelog_sent",
    "func:test_on_changelog_sent__transactions",
    "func:test_outer_join",
    "func:test_partition_for_key__partitioner",
    "func:test_persisted_offset",
    "func:test_relative_event",
    "func:test_relative_event__raises_if_no_event",
    "func:test_relative_field",
    "func:test_relative_field__raises_if_no_event",
    "func:test_relative_now",
    "func:test_relative_now__no_event",
    "func:test_relative_timestamp",
    "func:test_repr_info",
    "func:test_reset_state",
    "func:test_send_changelog",
    "func:test_send_changelog__custom_serializers",
    "func:test_send_changelog__no_current_event",
    "func:test_set_del_windowed",
    "func:test_shortlabel",
    "func:test_should_expire_keys",
    "func:test_to_key",
    "func:test_to_value",
    "func:test_window_ranges",
    "func:test_windowed_delta",
    "func:test_windowed_now",
    "func:test_windowed_timestamp",
    "func:tumbling",
    "func:using_window"
  ],
  "test_binance.py_gpt4_cc31d283.py": [
    "func:fetch_funding_rates",
    "func:get_historic_ohlcv",
    "func:get_maint_ratio",
    "func:make_storage",
    "func:patch_binance_vision_ohlcv",
    "func:test__get_params_binance",
    "func:test__set_leverage_binance",
    "func:test_additional_exchange_init_binance",
    "func:test_create_stoploss_order_binance",
    "func:test_create_stoploss_order_dry_run_binance",
    "func:test_fill_leverage_tiers_binance",
    "func:test_fill_leverage_tiers_binance_dryrun",
    "func:test_get_historic_ohlcv_binance",
    "func:test_get_maintenance_ratio_and_amt_binance",
    "func:test_liquidation_price_binance",
    "func:test_stoploss_adjust_binance"
  ],
  "test_black.py_gpt4_ae8fadad.py": [
    "class:BlackRunner",
    "class:BlackTestCase",
    "class:FakeContext",
    "class:FakeParameter",
    "class:TestASTSafety",
    "class:TestCaching",
    "class:TestDeFactoAPI",
    "class:TestFileCollection",
    "func:__init__",
    "func:_new_wrapper",
    "func:assert_collected_sources",
    "func:cache_dir",
    "func:check_ast_equivalence",
    "func:check_features_used",
    "func:compare_results",
    "func:err",
    "func:event_loop",
    "func:fail",
    "func:get_output",
    "func:invokeBlack",
    "func:out",
    "func:test_assertFormatEqual_print_full_tree",
    "func:test_assertFormatEqual_print_tree_diff",
    "func:test_assert_equivalent_basic",
    "func:test_assert_equivalent_del",
    "func:test_assert_equivalent_fstring",
    "func:test_assert_equivalent_strings",
    "func:test_async_as_identifier",
    "func:test_bpo_2142_workaround",
    "func:test_bpo_33660_workaround",
    "func:test_broken_symlink",
    "func:test_cache_broken_file",
    "func:test_cache_file_length",
    "func:test_cache_key",
    "func:test_cache_multiple_files",
    "func:test_cache_single_file_already_cached",
    "func:test_check_diff_use_together",
    "func:test_cli_unstable",
    "func:test_code_option",
    "func:test_code_option_changed",
    "func:test_code_option_check",
    "func:test_code_option_check_changed",
    "func:test_code_option_color_diff",
    "func:test_code_option_config",
    "func:test_code_option_diff",
    "func:test_code_option_fast",
    "func:test_code_option_parent_config",
    "func:test_code_option_safe",
    "func:test_debug_visitor",
    "func:test_detect_debug_f_strings",
    "func:test_detect_pos_only_arguments",
    "func:test_empty_ff",
    "func:test_empty_include",
    "func:test_endmarker",
    "func:test_equivalency_ast_parse_failure_includes_error",
    "func:test_exclude_absolute_path",
    "func:test_exclude_for_issue_1572",
    "func:test_expression_diff",
    "func:test_expression_diff_with_color",
    "func:test_expression_ff",
    "func:test_extend_exclude",
    "func:test_failed_formatting_does_not_get_cached",
    "func:test_false_positive_symlink_output_issue_3384",
    "func:test_filter_cached",
    "func:test_filter_cached_hash",
    "func:test_find_project_root",
    "func:test_find_pyproject_toml",
    "func:test_find_user_pyproject_toml_linux",
    "func:test_find_user_pyproject_toml_windows",
    "func:test_for_handled_unexpected_eof_error",
    "func:test_format_file_contents",
    "func:test_format_str",
    "func:test_get_cache_dir",
    "func:test_get_features_used",
    "func:test_get_features_used_decorator",
    "func:test_get_features_used_for_future_flags",
    "func:test_get_future_imports",
    "func:test_get_sources_symlink_and_force_exclude",
    "func:test_get_sources_with_stdin",
    "func:test_get_sources_with_stdin_filename",
    "func:test_get_sources_with_stdin_filename_and_exclude",
    "func:test_get_sources_with_stdin_filename_and_extend_exclude",
    "func:test_get_sources_with_stdin_filename_and_force_exclude",
    "func:test_get_sources_with_stdin_filename_and_force_exclude_and_symlink",
    "func:test_get_sources_with_stdin_symlink_outside_root",
    "func:test_gitignore_exclude",
    "func:test_gitignore_that_ignores_directory",
    "func:test_gitignore_that_ignores_subfolders",
    "func:test_gitignore_used_as_default",
    "func:test_gitignore_used_on_multiple_sources",
    "func:test_include_absolute_path",
    "func:test_include_exclude",
    "func:test_infer_target_version",
    "func:test_invalid_cli_regex",
    "func:test_invalid_config_return_code",
    "func:test_invalid_gitignore",
    "func:test_invalid_nested_gitignore",
    "func:test_lib2to3_parse",
    "func:test_line_ranges_in_pyproject_toml",
    "func:test_line_ranges_with_code_option",
    "func:test_line_ranges_with_ipynb",
    "func:test_line_ranges_with_multiple_sources",
    "func:test_line_ranges_with_source",
    "func:test_line_ranges_with_stdin",
    "func:test_lines_with_leading_tabs_expanded",
    "func:test_multi_file_force_py36",
    "func:test_multi_file_force_pyi",
    "func:test_nested_gitignore",
    "func:test_nested_gitignore_directly_in_source_directory",
    "func:test_newline_comment_interaction",
    "func:test_no_cache_when_stdin",
    "func:test_no_cache_when_writeback_diff",
    "func:test_no_src_fails",
    "func:test_normalize_line_endings",
    "func:test_normalize_path_ignore_windows_junctions_outside_of_root",
    "func:test_one_empty_line",
    "func:test_one_empty_line_ff",
    "func:test_output_locking_when_writeback_diff",
    "func:test_parse_pyproject_toml",
    "func:test_parse_pyproject_toml_project_metadata",
    "func:test_pep_572_version_detection",
    "func:test_pep_695_version_detection",
    "func:test_pep_696_version_detection",
    "func:test_pipe_force_py36",
    "func:test_pipe_force_pyi",
    "func:test_piping",
    "func:test_piping_diff",
    "func:test_piping_diff_with_color",
    "func:test_preserves_line_endings",
    "func:test_preserves_line_endings_via_stdin",
    "func:test_python37",
    "func:test_read_cache_line_lengths",
    "func:test_read_cache_no_cachefile",
    "func:test_read_pyproject_toml",
    "func:test_read_pyproject_toml_from_stdin",
    "func:test_reformat_one_with_stdin",
    "func:test_reformat_one_with_stdin_and_existing_path",
    "func:test_reformat_one_with_stdin_empty",
    "func:test_reformat_one_with_stdin_filename",
    "func:test_reformat_one_with_stdin_filename_ipynb",
    "func:test_reformat_one_with_stdin_filename_pyi",
    "func:test_report_normal",
    "func:test_report_quiet",
    "func:test_report_verbose",
    "func:test_required_version_does_not_match_on_minor_version",
    "func:test_required_version_does_not_match_version",
    "func:test_required_version_matches_partial_version",
    "func:test_required_version_matches_version",
    "func:test_root_logger_not_used_directly",
    "func:test_single_file_force_py36",
    "func:test_single_file_force_pyi",
    "func:test_skip_magic_trailing_comma",
    "func:test_skip_source_first_line",
    "func:test_skip_source_first_line_when_mixing_newlines",
    "func:test_spellcheck_pyproject_toml",
    "func:test_src_and_code_fails",
    "func:test_string_quotes",
    "func:test_symlinks",
    "func:test_tab_comment_indentation",
    "func:test_works_in_mono_process_only_environment",
    "func:test_write_cache_creates_directory_if_needed",
    "func:test_write_cache_read_cache",
    "func:test_write_cache_write_fail",
    "func:tracefunc",
    "func:wrapped_func"
  ],
  "test_blackouts.py_gpt4_e962ce24.py": [
    "class:Blackout",
    "class:BlackoutsTestCase",
    "class:CustomNotify",
    "func:post_receive",
    "func:pre_receive",
    "func:setUp",
    "func:status_change",
    "func:tearDown",
    "func:test_combination_blackout",
    "func:test_custom_notify",
    "func:test_edit_blackout",
    "func:test_notification_blackout",
    "func:test_origin_blackout",
    "func:test_previous_status",
    "func:test_suppress_blackout",
    "func:test_user_info",
    "func:test_whole_environment_blackout"
  ],
  "test_business_hour.py_gpt4_13906fb9.py": [
    "class:TestBusinessHour",
    "class:TestOpeningTimes",
    "func:_offset",
    "func:dt",
    "func:offset1",
    "func:offset10",
    "func:offset2",
    "func:offset3",
    "func:offset4",
    "func:offset5",
    "func:offset6",
    "func:offset7",
    "func:offset8",
    "func:offset9",
    "func:testRollback1",
    "func:testRollback2",
    "func:testRollforward1",
    "func:testRollforward2",
    "func:test_add_bday_offset_nanos",
    "func:test_add_datetime",
    "func:test_apply",
    "func:test_apply_large_n",
    "func:test_apply_nanoseconds",
    "func:test_bday_ignores_timedeltas",
    "func:test_constructor_errors",
    "func:test_different_normalize_equals",
    "func:test_eq",
    "func:test_eq_attribute",
    "func:test_hash",
    "func:test_is_on_offset",
    "func:test_multiply_by_zero",
    "func:test_neq",
    "func:test_normalize",
    "func:test_opening_time",
    "func:test_repr",
    "func:test_roll_date_object",
    "func:test_sub",
    "func:test_with_offset"
  ],
  "test_callables.py_gpt4_03d6aa1c.py": [
    "class:Color",
    "class:Foo",
    "class:TestCollapseVariadicParameter",
    "class:TestEntrypointToSchema",
    "class:TestExplodeVariadicParameter",
    "class:TestFunctionToSchema",
    "class:TestGetCallParameters",
    "class:TestMethodToSchema",
    "class:TestParseFlowDescriptionToSchema",
    "func:dog",
    "func:f",
    "func:foo",
    "func:g",
    "func:h",
    "func:test_does_not_raise_when_missing_dependencies",
    "func:test_flow_with_args_docstring",
    "func:test_flow_with_complex_args_docstring",
    "func:test_flow_without_args_docstring",
    "func:test_flow_without_docstring",
    "func:test_function_not_found",
    "func:test_function_with_complex_args_across_v1_and_v2",
    "func:test_function_with_datetime_arguments",
    "func:test_function_with_enum_argument",
    "func:test_function_with_generic_arguments",
    "func:test_function_with_kwargs_only",
    "func:test_function_with_one_optional_annotated_argument",
    "func:test_function_with_one_optional_argument",
    "func:test_function_with_one_required_argument",
    "func:test_function_with_positional_only_args",
    "func:test_function_with_pydantic_base_model_collisions",
    "func:test_function_with_pydantic_model_default_across_v1_and_v2",
    "func:test_function_with_secretstr",
    "func:test_function_with_two_arguments",
    "func:test_function_with_user_defined_pydantic_model",
    "func:test_function_with_user_defined_type",
    "func:test_function_with_v1_secretstr_from_compat_module",
    "func:test_handles_dynamically_created_models",
    "func:test_method_with_kwargs_only",
    "func:test_methods_with_complex_arguments",
    "func:test_methods_with_enum_arguments",
    "func:test_methods_with_no_arguments",
    "func:test_no_error_if_no_variadic_parameter",
    "func:test_no_error_if_variadic_parameter_and_kwargs_provided",
    "func:test_no_error_if_variadic_parameter_and_no_kwargs_provided",
    "func:test_params_unchanged_if_variadic_parameter_and_no_kwargs_provided",
    "func:test_raises_parameter_bind_error_with_excess_kwargs",
    "func:test_raises_parameter_bind_error_with_excess_kwargs_no_args",
    "func:test_raises_parameter_bind_with_missing_kwargs",
    "func:test_raises_parameter_bind_with_no_kwargs",
    "func:test_raises_parameter_bind_with_wrong_kwargs_same_number",
    "func:test_simple_function_with_no_arguments",
    "func:test_value_error_raised_if_extra_args_but_no_variadic_parameter"
  ],
  "test_classes.py_gpt4_96b213d8.py": [
    "class:BouncerTestCase",
    "class:EmptyResponseError",
    "class:MigrationsTestCase",
    "class:UploadSerializeMixin",
    "class:WebhookTestCase",
    "class:ZulipClientHandler",
    "class:ZulipTestCase",
    "class:ZulipTestCaseMixin",
    "class:ZulipTestClient",
    "class:ZulipTransactionTestCase",
    "func:__init__",
    "func:_assert_long_term_idle",
    "func:_fixture_teardown",
    "func:_get_page_params",
    "func:_get_sentry_params",
    "func:add_mock_response",
    "func:api_channel_message",
    "func:api_delete",
    "func:api_get",
    "func:api_patch",
    "func:api_post",
    "func:app",
    "func:assertEqual",
    "func:assert_channel_message",
    "func:assert_database_query_count",
    "func:assert_in_response",
    "func:assert_in_success_response",
    "func:assert_json_error",
    "func:assert_json_error_contains",
    "func:assert_json_success",
    "func:assert_length",
    "func:assert_logged_in_user_id",
    "func:assert_login_failure",
    "func:assert_memcached_count",
    "func:assert_message_stream_name",
    "func:assert_not_in_success_response",
    "func:build_webhook_url",
    "func:capture_send_event_calls",
    "func:change_ldap_user_attr",
    "func:check_rendered_logged_in_app",
    "func:check_user_added_in_system_group",
    "func:check_user_subscribed_only_to_streams",
    "func:check_webhook",
    "func:client_delete",
    "func:client_get",
    "func:client_head",
    "func:client_options",
    "func:client_patch",
    "func:client_patch_multipart",
    "func:client_post",
    "func:client_post_request",
    "func:client_put",
    "func:create_attachment_helper",
    "func:create_default_device",
    "func:create_or_update_anonymous_group_for_setting",
    "func:create_test_bot",
    "func:create_user_notifications_data_object",
    "func:email_display_from",
    "func:email_envelope_from",
    "func:encode_credentials",
    "func:encode_email",
    "func:encode_user",
    "func:encode_uuid",
    "func:example_email",
    "func:example_user",
    "func:expect_soft_reactivation",
    "func:expect_to_stay_long_term_idle",
    "func:fail_to_create_test_bot",
    "func:find_by_id",
    "func:fixture_data",
    "func:fixture_file_name",
    "func:get_body",
    "func:get_confirmation_url_from_outbox",
    "func:get_generic_payload",
    "func:get_json_error",
    "func:get_last_message",
    "func:get_maybe_enqueue_notifications_parameters",
    "func:get_messages",
    "func:get_messages_response",
    "func:get_payload",
    "func:get_response",
    "func:get_row_ids_in_all_tables",
    "func:get_second_to_last_message",
    "func:get_set",
    "func:get_stream_id",
    "func:get_streams",
    "func:get_topic_messages",
    "func:get_user_from_email",
    "func:handle_missedmessage_emails",
    "func:init_default_ldap_database",
    "func:json_patch",
    "func:json_put",
    "func:ldap_password",
    "func:ldap_username",
    "func:lear_user",
    "func:login",
    "func:login_2fa",
    "func:login_by_email",
    "func:login_user",
    "func:login_with_return",
    "func:logout",
    "func:make_import_output_dir",
    "func:make_stream",
    "func:mit_email",
    "func:mit_user",
    "func:nonreg_email",
    "func:nonreg_user",
    "func:not_long_term_idle_subscriber_ids",
    "func:notification_bot",
    "func:on_exception",
    "func:register",
    "func:remove_ldap_user_attr",
    "func:request_callback",
    "func:resolve_topic_containing_message",
    "func:rm_tree",
    "func:run",
    "func:send_and_test_private_message",
    "func:send_group_direct_message",
    "func:send_personal_message",
    "func:send_stream_message",
    "func:send_webhook_payload",
    "func:setUp",
    "func:setUpBeforeMigration",
    "func:setUpClass",
    "func:set_http_headers",
    "func:set_up_db_for_testing_user_access",
    "func:side_effect",
    "func:simulated_markdown_failure",
    "func:soft_deactivate_user",
    "func:submit_realm_creation_form",
    "func:submit_reg_form_for_user",
    "func:subscribe",
    "func:subscribe_realm_to_manual_license_management_plan",
    "func:subscribe_realm_to_monthly_plan_on_manual_license_management",
    "func:subscribe_via_post",
    "func:subscribed_stream_name_list",
    "func:tearDown",
    "func:test_user",
    "func:thumbnail_formats",
    "func:unsubscribe",
    "func:upload_and_thumbnail_image",
    "func:upload_image",
    "func:users_subscribed_to_stream",
    "func:uuid_get",
    "func:uuid_post",
    "func:verify_emoji_code_foreign_keys",
    "func:webhook_fixture_data"
  ],
  "test_compilation.py_gpt4_c9741389.py": [
    "class:TestLinker",
    "func:_get_graph_queue",
    "func:_mock_manifest",
    "func:assert_would_join",
    "func:linker",
    "func:test__find_cycles__cycles",
    "func:test__find_cycles__no_cycles",
    "func:test_linker_add_dependency",
    "func:test_linker_add_disjoint_dependencies",
    "func:test_linker_add_node",
    "func:test_linker_dependencies_limited_to_some_nodes",
    "func:test_linker_write_graph"
  ],
  "test_constraints.py_gpt4_bd33987f.py": [
    "class:BaseConstraintQuotedColumn",
    "class:BaseConstraintsColumnsEqual",
    "class:BaseConstraintsRollback",
    "class:BaseConstraintsRuntimeDdlEnforcement",
    "class:BaseContractSqlHeader",
    "class:BaseIncrementalConstraintsColumnsEqual",
    "class:BaseIncrementalConstraintsRollback",
    "class:BaseIncrementalConstraintsRuntimeDdlEnforcement",
    "class:BaseIncrementalContractSqlHeader",
    "class:BaseModelConstraintsRuntimeEnforcement",
    "class:BaseTableConstraintsColumnsEqual",
    "class:BaseTableContractSqlHeader",
    "class:BaseViewConstraintsColumnsEqual",
    "class:TestConstraintQuotedColumn",
    "class:TestIncrementalConstraintsColumnsEqual",
    "class:TestIncrementalConstraintsRollback",
    "class:TestIncrementalConstraintsRuntimeDdlEnforcement",
    "class:TestIncrementalContractSqlHeader",
    "class:TestIncrementalForeignKeyConstraint",
    "class:TestModelConstraintsRuntimeEnforcement",
    "class:TestTableConstraintsColumnsEqual",
    "class:TestTableConstraintsRollback",
    "class:TestTableConstraintsRuntimeDdlEnforcement",
    "class:TestTableContractSqlHeader",
    "class:TestViewConstraintsColumnsEqual",
    "func:_find_and_replace",
    "func:_normalize_whitespace",
    "func:assert_expected_error_messages",
    "func:data_types",
    "func:expected_color",
    "func:expected_error_messages",
    "func:expected_sql",
    "func:int_type",
    "func:macros",
    "func:models",
    "func:null_model_sql",
    "func:schema_int_type",
    "func:schema_string_type",
    "func:string_type",
    "func:test__constraints_correct_column_data_types",
    "func:test__constraints_ddl",
    "func:test__constraints_enforcement_rollback",
    "func:test__constraints_wrong_column_data_types",
    "func:test__constraints_wrong_column_names",
    "func:test__constraints_wrong_column_order",
    "func:test__contract_sql_header",
    "func:test__model_constraints_ddl",
    "func:test_incremental_foreign_key_constraint"
  ],
  "test_consumer.py_gpt4_2db18c43.py": [
    "class:MockedConsumerAbstractMethods",
    "class:MyConsumer",
    "class:MyConsumerThread",
    "class:TestThreadDelegateConsumer",
    "class:test_Consumer",
    "class:test_ConsumerThread",
    "class:test_Fetcher",
    "class:test_ThreadDelegateConsumer",
    "class:test_TransactionManager",
    "func:__init__",
    "func:_new_consumer_thread",
    "func:_new_topicpartition",
    "func:_setup_records",
    "func:_to_message",
    "func:assignment",
    "func:callback",
    "func:close",
    "func:consumer",
    "func:create_topic",
    "func:earliest_offsets",
    "func:fetcher",
    "func:highwater",
    "func:highwaters",
    "func:key_partition",
    "func:manager",
    "func:message",
    "func:message_callback",
    "func:on_P_assigned",
    "func:on_P_revoked",
    "func:on_commit",
    "func:on_sleep",
    "func:partitions_assigned_callback",
    "func:partitions_revoked_callback",
    "func:pause_partitions",
    "func:position",
    "func:producer",
    "func:resume_flow",
    "func:resume_partitions",
    "func:se",
    "func:stop_flow",
    "func:test__add_gap",
    "func:test__add_gap__previous_to_committed",
    "func:test__get_active_partitions__when_empty",
    "func:test__get_active_partitions__when_set",
    "func:test_ack",
    "func:test_ack__already_acked",
    "func:test_ack__disabled",
    "func:test_assignment",
    "func:test_close",
    "func:test_committed_offset_default",
    "func:test_filter_committable_offsets",
    "func:test_filter_tps_with_pending_acks",
    "func:test_highwater",
    "func:test_is_changelog_tp",
    "func:test_key_partition",
    "func:test_new_offset",
    "func:test_new_offset_with_gaps",
    "func:test_on_init_dependencies__default",
    "func:test_on_init_dependencies__exactly_once",
    "func:test_pause_partitions",
    "func:test_read_offset_default",
    "func:test_resume_flow",
    "func:test_resume_partitions",
    "func:test_send_soon",
    "func:test_should_commit",
    "func:test_stop_flow",
    "func:test_supports_headers",
    "func:test_topic_partitions",
    "func:test_track_message",
    "func:test_verify_event_path",
    "func:thread",
    "func:to_message",
    "func:topic_partitions",
    "func:transport"
  ],
  "test_context.py_gpt4_2fdf0e1c.py": [
    "class:TestParseWrapper",
    "class:TestRuntimeWrapper",
    "class:TestVar",
    "func:assert_has_keys",
    "func:config",
    "func:config_postgres",
    "func:context",
    "func:get_adapter",
    "func:get_include_paths",
    "func:gmbp",
    "func:manifest_fx",
    "func:mock_adapter",
    "func:mock_macro",
    "func:mock_manifest",
    "func:mock_model",
    "func:mock_unit_test_node",
    "func:model",
    "func:postgres_adapter",
    "func:provider",
    "func:responder",
    "func:test_base_context",
    "func:test_dbt_metadata_envs",
    "func:test_docs_runtime_context",
    "func:test_invocation_args_to_dict_in_macro_runtime_context",
    "func:test_macro_namespace",
    "func:test_macro_namespace_duplicates",
    "func:test_macro_runtime_context",
    "func:test_model_parse_context",
    "func:test_model_runtime_context",
    "func:test_parser_var_default_none",
    "func:test_parser_var_default_something",
    "func:test_parser_var_not_defined",
    "func:test_query_header_context",
    "func:test_unit_test_runtime_context",
    "func:test_unit_test_runtime_context_macro_overrides_dbt_macro",
    "func:test_unit_test_runtime_context_macro_overrides_global",
    "func:test_unit_test_runtime_context_macro_overrides_package",
    "func:test_unwrapped_method",
    "func:test_var_default_none",
    "func:test_var_default_something",
    "func:test_var_not_defined",
    "func:test_wrapped_method",
    "func:wrapper"
  ],
  "test_datahandler.py_gpt4_ef9e6109.py": [
    "func:test_datahandler__check_empty_df",
    "func:test_datahandler_ohlcv_append",
    "func:test_datahandler_ohlcv_data_min_max",
    "func:test_datahandler_ohlcv_get_available_data",
    "func:test_datahandler_ohlcv_get_pairs",
    "func:test_datahandler_ohlcv_regex",
    "func:test_datahandler_trades_append",
    "func:test_datahandler_trades_data_min_max",
    "func:test_datahandler_trades_get_available_data",
    "func:test_datahandler_trades_get_pairs",
    "func:test_datahandler_trades_load",
    "func:test_datahandler_trades_not_supported",
    "func:test_datahandler_trades_purge",
    "func:test_datahandler_trades_store",
    "func:test_generic_datahandler_ohlcv_load_and_resave",
    "func:test_get_datahandler",
    "func:test_gethandlerclass",
    "func:test_hdf5datahandler_deprecated",
    "func:test_jsondatahandler_ohlcv_load",
    "func:test_jsondatahandler_ohlcv_purge",
    "func:test_jsondatahandler_trades_load",
    "func:test_rebuild_pair_from_filename"
  ],
  "test_deps.py_gpt4_53ca3d12.py": [
    "class:MockMetadata",
    "class:MockRegistry",
    "class:TestGitPackage",
    "class:TestHubPackage",
    "class:TestLocalPackage",
    "class:TestPackageSpec",
    "class:TestTarballPackage",
    "func:__init__",
    "func:get_compatible_versions",
    "func:index_cached",
    "func:package",
    "func:package_version",
    "func:setUp",
    "func:tearDown",
    "func:test_default_revision",
    "func:test_dependency_resolution",
    "func:test_dependency_resolution_allow_prerelease",
    "func:test_deps_install",
    "func:test_fetch_metadata",
    "func:test_fetch_metadata_fails_on_incorrect_tar_folder_structure",
    "func:test_get_version_latest_prelease_false",
    "func:test_get_version_latest_prelease_true",
    "func:test_get_version_prerelease_explicitly_requested",
    "func:test_init",
    "func:test_init_with_unrendered",
    "func:test_invalid",
    "func:test_private_package_raise_error",
    "func:test_resolve_conflict",
    "func:test_resolve_fail",
    "func:test_resolve_missing_package",
    "func:test_resolve_missing_version",
    "func:test_resolve_ok",
    "func:test_resolve_ranges",
    "func:test_resolve_ranges_install_prerelease_default_false",
    "func:test_resolve_ranges_install_prerelease_true",
    "func:test_tarball_package_contract",
    "func:test_tarball_package_contract_fails_on_no_name",
    "func:test_tarball_pinned_package_contract_with_unrendered",
    "func:test_validation_error_when_namespace_is_missing_from_package_config",
    "func:test_validation_error_when_version_is_missing_from_package_config"
  ],
  "test_exchange.py_gpt4_872a0fde.py": [
    "func:ccxt_exceptionhandlers",
    "func:has_resp",
    "func:sort_data",
    "func:test___now_is_time_to_refresh",
    "func:test__amount_to_contracts",
    "func:test__ccxt_config",
    "func:test__fetch_and_calculate_funding_fees",
    "func:test__fetch_and_calculate_funding_fees_datetime_called",
    "func:test__get_contract_size",
    "func:test__get_funding_fees_from_exchange",
    "func:test__get_params",
    "func:test__get_stake_amount_limit",
    "func:test__get_stop_limit_rate",
    "func:test__load_async_markets",
    "func:test__load_markets",
    "func:test__order_contracts_to_amount",
    "func:test__trades_contracts_to_amount",
    "func:test__valid_trade_pagination_id",
    "func:test_amount_to_contract_precision",
    "func:test_buy_considers_time_in_force",
    "func:test_buy_dry_run",
    "func:test_buy_prod",
    "func:test_calculate_backoff",
    "func:test_calculate_fee_rate",
    "func:test_calculate_funding_fees",
    "func:test_cancel_order",
    "func:test_cancel_order_dry_run",
    "func:test_cancel_order_with_result",
    "func:test_cancel_order_with_result_error",
    "func:test_cancel_stoploss_order",
    "func:test_cancel_stoploss_order_with_result",
    "func:test_check_order_canceled_empty",
    "func:test_combine_funding_and_mark",
    "func:test_create_dry_run_order",
    "func:test_create_dry_run_order_fees",
    "func:test_create_dry_run_order_limit_fill",
    "func:test_create_dry_run_order_market_fill",
    "func:test_create_order",
    "func:test_destroy",
    "func:test_exchange_features",
    "func:test_exchange_has",
    "func:test_exchange_resolver",
    "func:test_extract_cost_curr_rate",
    "func:test_fetch_bids_asks",
    "func:test_fetch_l2_order_book",
    "func:test_fetch_l2_order_book_exception",
    "func:test_fetch_order",
    "func:test_fetch_order_emulated",
    "func:test_fetch_order_or_stoploss_order",
    "func:test_fetch_orders",
    "func:test_fetch_positions",
    "func:test_fetch_stoploss_order",
    "func:test_fetch_ticker",
    "func:test_fetch_trading_fees",
    "func:test_get_balances_prod",
    "func:test_get_conversion_rate",
    "func:test_get_entry_rate",
    "func:test_get_exit_rate",
    "func:test_get_exit_rate_exception",
    "func:test_get_exit_rate_orderbook",
    "func:test_get_exit_rate_orderbook_exception",
    "func:test_get_fee",
    "func:test_get_funding_fees",
    "func:test_get_historic_ohlcv",
    "func:test_get_historic_trades",
    "func:test_get_historic_trades_notsupported",
    "func:test_get_liquidation_price",
    "func:test_get_liquidation_price1",
    "func:test_get_maintenance_ratio_and_amt",
    "func:test_get_maintenance_ratio_and_amt_exceptions",
    "func:test_get_markets",
    "func:test_get_markets_error",
    "func:test_get_max_leverage_from_margin",
    "func:test_get_max_leverage_futures",
    "func:test_get_max_pair_stake_amount",
    "func:test_get_min_pair_stake_amount_real_data",
    "func:test_get_next_limit_in_list",
    "func:test_get_pair_base_currency",
    "func:test_get_pair_quote_currency",
    "func:test_get_quote_currencies",
    "func:test_get_rates_testing_entry",
    "func:test_get_rates_testing_exit",
    "func:test_get_stake_amount_considering_leverage",
    "func:test_get_ticker_rate_error",
    "func:test_get_tickers",
    "func:test_get_trades_for_order",
    "func:test_get_valid_pair_combination",
    "func:test_init",
    "func:test_init_ccxt_kwargs",
    "func:test_init_exception",
    "func:test_is_cancel_order_result_suitable",
    "func:test_liquidation_price_is_none",
    "func:test_load_leverage_tiers",
    "func:test_market_is_active",
    "func:test_market_is_tradable",
    "func:test_merge_ft_has_dict",
    "func:test_name",
    "func:test_ohlcv_candle_limit",
    "func:test_order_has_fee",
    "func:test_parse_leverage_tier",
    "func:test_price_get_one_pip",
    "func:test_price_to_precision_with_default_conf",
    "func:test_refresh_latest_ohlcv",
    "func:test_refresh_latest_ohlcv_cache",
    "func:test_refresh_latest_ohlcv_inv_result",
    "func:test_refresh_latest_trades",
    "func:test_refresh_ohlcv_with_cache",
    "func:test_reload_markets",
    "func:test_reload_markets_exception",
    "func:test_remove_exchange_credentials",
    "func:test_sell_considers_time_in_force",
    "func:test_sell_dry_run",
    "func:test_sell_prod",
    "func:test_set_margin_mode",
    "func:test_stoploss_contract_size",
    "func:test_stoploss_order_unsupported_exchange",
    "func:test_validate_freqai_compat",
    "func:test_validate_order_time_in_force",
    "func:test_validate_order_types_not_in_config",
    "func:test_validate_orderflow",
    "func:test_validate_ordertypes",
    "func:test_validate_ordertypes_stop_advanced",
    "func:test_validate_pricing",
    "func:test_validate_required_startup_candles",
    "func:test_validate_stakecurrency",
    "func:test_validate_stakecurrency_error",
    "func:test_validate_timeframes",
    "func:test_validate_timeframes_emulated_ohlcv_1",
    "func:test_validate_timeframes_emulated_ohlcvi_2",
    "func:test_validate_timeframes_failed",
    "func:test_validate_timeframes_not_in_config",
    "func:test_validate_trading_mode_and_margin_mode"
  ],
  "test_features.py_gpt4_6df2353e.py": [
    "class:InternalServerError",
    "class:SmokeTestApplication",
    "func:__init__",
    "func:_assert_contains_access_control_allow_methods",
    "func:_create_wrapped_retry_function",
    "func:_delete_app",
    "func:_deploy_app",
    "func:_deploy_with_retries",
    "func:_get_error_code_from_exception",
    "func:_get_json",
    "func:_get_resource_id",
    "func:_inject_app_name",
    "func:_send_request",
    "func:_wait_for_stablize",
    "func:_wrapped_with_retry",
    "func:apig_client",
    "func:get_json",
    "func:get_response",
    "func:options_response",
    "func:post_response",
    "func:put_response",
    "func:redeploy_once",
    "func:rest_api_id",
    "func:retry",
    "func:smoke_test_app",
    "func:test_api_key_required_fails_with_no_key",
    "func:test_can_handle_charset",
    "func:test_can_have_nested_routes",
    "func:test_can_raise_bad_request",
    "func:test_can_raise_not_found",
    "func:test_can_read_json_body_on_post",
    "func:test_can_return_default_binary_data_to_a_browser",
    "func:test_can_round_trip_binary",
    "func:test_can_round_trip_binary_custom_content_type",
    "func:test_can_route_multiple_methods_in_one_view",
    "func:test_can_support_cors",
    "func:test_can_support_custom_cors",
    "func:test_can_use_builtin_custom_auth",
    "func:test_can_use_shared_auth",
    "func:test_custom_response",
    "func:test_empty_raw_body",
    "func:test_form_encoded_content_type",
    "func:test_multi_doc_mapped_in_api",
    "func:test_multifile_support",
    "func:test_path_params_mapped_in_api",
    "func:test_redeploy_change_route_info",
    "func:test_redeploy_changed_function",
    "func:test_redeploy_new_function",
    "func:test_redeploy_no_change_view",
    "func:test_redeploy_view_deleted",
    "func:test_returns_simple_response",
    "func:test_single_doc_mapped_in_api",
    "func:test_supports_path_params",
    "func:test_supports_post",
    "func:test_supports_put",
    "func:test_supports_shared_routes",
    "func:test_to_dict_is_also_json_serializable",
    "func:test_unexpected_error_raises_500_in_prod_mode",
    "func:test_websocket_lifecycle",
    "func:url",
    "func:websocket_api_id",
    "func:websocket_connect_url"
  ],
  "test_flags.py_gpt4_205bc8a8.py": [
    "class:TestFlags",
    "func:_create_flags_from_dict",
    "func:make_dbt_context",
    "func:project_flags",
    "func:run_context",
    "func:test_anonymous_usage_state",
    "func:test_cli_args_unmodified",
    "func:test_cli_group_flags_from_params",
    "func:test_duplicate_flags_raises_error",
    "func:test_empty_project_flags_uses_default",
    "func:test_from_dict_0_value",
    "func:test_from_dict__build",
    "func:test_from_dict__run",
    "func:test_from_dict__seed",
    "func:test_from_dict__which_fails",
    "func:test_global_flag_at_child_context",
    "func:test_global_flag_with_env_var",
    "func:test_log_file_max_size_default",
    "func:test_log_file_settings_from_config",
    "func:test_log_format_interaction",
    "func:test_log_level_interaction",
    "func:test_log_path_default",
    "func:test_log_settings_from_config",
    "func:test_mutually_exclusive_options_from_cli",
    "func:test_mutually_exclusive_options_from_cli_and_envvar",
    "func:test_mutually_exclusive_options_from_cli_and_project_flags",
    "func:test_mutually_exclusive_options_from_envvar",
    "func:test_mutually_exclusive_options_from_project_flags",
    "func:test_mutually_exclusive_options_from_project_flags_and_envvar",
    "func:test_mutually_exclusive_options_passed_separately",
    "func:test_no_color_interaction",
    "func:test_none_project_flags_uses_default",
    "func:test_prefer_env_to_project_flags",
    "func:test_prefer_param_value_to_project_flags",
    "func:test_prefer_project_flags_to_default",
    "func:test_project_flag_defaults",
    "func:test_resource_types",
    "func:test_set_project_only_flags",
    "func:test_which"
  ],
  "test_freqtradebot.py_gpt4_2b80392e.py": [
    "func:make_sure_its_651",
    "func:patch_RPCManager",
    "func:patch_with_fee",
    "func:refresh_latest_ohlcv_mock",
    "func:reset_open_orders",
    "func:test__safe_exit_amount",
    "func:test_adjust_entry_cancel",
    "func:test_adjust_entry_maintain_replace",
    "func:test_adjust_entry_replace_fail",
    "func:test_adjust_entry_replace_fail_create_order",
    "func:test_apply_fee_conditional",
    "func:test_apply_fee_conditional_multibuy",
    "func:test_bot_cleanup",
    "func:test_bot_cleanup_db_errors",
    "func:test_bot_loop_start_called_once",
    "func:test_cancel_all_open_orders",
    "func:test_check_and_call_adjust_trade_position",
    "func:test_check_available_stake_amount",
    "func:test_check_depth_of_market",
    "func:test_check_for_open_trades",
    "func:test_check_handle_cancelled_buy",
    "func:test_check_handle_cancelled_exit",
    "func:test_close_trade",
    "func:test_create_trade",
    "func:test_create_trade_minimal_amount",
    "func:test_create_trade_no_signal",
    "func:test_create_trade_no_stake_amount",
    "func:test_create_trades_multiple_trades",
    "func:test_create_trades_preopen",
    "func:test_disable_ignore_roi_if_entry_signal",
    "func:test_edge_called_in_process",
    "func:test_edge_overrides_stake_amount",
    "func:test_edge_overrides_stoploss",
    "func:test_enter_positions",
    "func:test_enter_positions_global_pairlock",
    "func:test_enter_positions_no_pairs_left",
    "func:test_execute_entry",
    "func:test_execute_entry_confirm_error",
    "func:test_execute_entry_fully_canceled_on_create",
    "func:test_execute_entry_min_leverage",
    "func:test_execute_trade_exit_custom_exit_price",
    "func:test_execute_trade_exit_down",
    "func:test_execute_trade_exit_insufficient_funds_error",
    "func:test_execute_trade_exit_market_order",
    "func:test_execute_trade_exit_up",
    "func:test_exit_positions",
    "func:test_exit_positions_exception",
    "func:test_exit_profit_only",
    "func:test_freqtradebot_state",
    "func:test_get_real_amount",
    "func:test_get_real_amount_fees_order",
    "func:test_get_real_amount_in_point",
    "func:test_get_real_amount_invalid_order",
    "func:test_get_real_amount_multi",
    "func:test_get_real_amount_no_trade",
    "func:test_get_real_amount_open_trade_usdt",
    "func:test_get_real_amount_quote",
    "func:test_get_real_amount_quote_dust",
    "func:test_get_real_amount_wrong_amount",
    "func:test_get_real_amount_wrong_amount_rounding",
    "func:test_get_trade_stake_amount",
    "func:test_get_valid_price",
    "func:test_handle_cancel_enter",
    "func:test_handle_cancel_enter_corder_empty",
    "func:test_handle_cancel_enter_exchanges",
    "func:test_handle_cancel_exit_cancel_exception",
    "func:test_handle_cancel_exit_limit",
    "func:test_handle_insufficient_funds",
    "func:test_handle_onexchange_order",
    "func:test_handle_onexchange_order_changed_amount",
    "func:test_handle_onexchange_order_exit",
    "func:test_handle_onexchange_order_fully_canceled_enter",
    "func:test_handle_overlapping_signals",
    "func:test_handle_protections",
    "func:test_handle_trade",
    "func:test_handle_trade_roi",
    "func:test_handle_trade_use_exit_signal",
    "func:test_ignore_roi_if_entry_signal",
    "func:test_load_strategy_no_keys",
    "func:test_locked_pairs",
    "func:test_manage_open_orders_buy_exception",
    "func:test_manage_open_orders_entry",
    "func:test_manage_open_orders_entry_usercustom",
    "func:test_manage_open_orders_exception",
    "func:test_manage_open_orders_exit",
    "func:test_manage_open_orders_exit_usercustom",
    "func:test_manage_open_orders_partial",
    "func:test_manage_open_orders_partial_except",
    "func:test_manage_open_orders_partial_fee",
    "func:test_order_book_depth_of_market",
    "func:test_order_book_entry_pricing1",
    "func:test_order_book_exit_pricing",
    "func:test_order_dict",
    "func:test_position_adjust",
    "func:test_position_adjust2",
    "func:test_position_adjust3",
    "func:test_process_calls_sendmsg",
    "func:test_process_exchange_failures",
    "func:test_process_informative_pairs_added",
    "func:test_process_open_trade_positions_exception",
    "func:test_process_operational_exception",
    "func:test_process_stopped",
    "func:test_process_trade_creation",
    "func:test_process_trade_handling",
    "func:test_process_trade_no_whitelist_pair",
    "func:test_reupdate_enter_order_fees",
    "func:test_sell_not_enough_balance",
    "func:test_startup_backpopulate_precision",
    "func:test_startup_state",
    "func:test_startup_trade_reinit",
    "func:test_startup_update_open_orders",
    "func:test_sync_wallet_dry_run",
    "func:test_total_open_trades_stakes",
    "func:test_trailing_stop_loss",
    "func:test_trailing_stop_loss_positive",
    "func:test_update_funding_fees",
    "func:test_update_funding_fees_error",
    "func:test_update_funding_fees_schedule",
    "func:test_update_trade_state",
    "func:test_update_trade_state_exception",
    "func:test_update_trade_state_orderexception",
    "func:test_update_trade_state_sell",
    "func:test_update_trade_state_withorderdict",
    "func:test_update_trades_without_assigned_fees"
  ],
  "test_graph.py_gpt4_2fea874f.py": [
    "class:TestGraph",
    "func:extra_parent_model",
    "func:graph",
    "func:local_manifest_extensions",
    "func:model_with_two_direct_parents",
    "func:non_shared_child_of_extra",
    "func:test_ancestors",
    "func:test_descendantcs",
    "func:test_exclude_edge_type",
    "func:test_nodes",
    "func:test_select_children",
    "func:test_select_childrens_parents",
    "func:test_select_parents"
  ],
  "test_graph_selection.py_gpt4_fdead4e1.py": [
    "func:_get_graph",
    "func:_get_manifest",
    "func:graph",
    "func:id_macro",
    "func:manifest",
    "func:test_invalid_specs",
    "func:test_parse_specs",
    "func:test_run_specs"
  ],
  "test_hooks.py_gpt4_80a9401d.py": [
    "class:Plugin1",
    "class:PluginsTestCase",
    "func:delete",
    "func:post_receive",
    "func:pre_receive",
    "func:setUp",
    "func:status_change",
    "func:take_action",
    "func:take_note",
    "func:tearDown",
    "func:test_run_hooks"
  ],
  "test_http_parser.py_gpt4_fc96f364.py": [
    "class:TestDeflateBuffer",
    "class:TestParsePayload",
    "func:_gen_ids",
    "func:parser",
    "func:protocol",
    "func:request_cls",
    "func:response",
    "func:response_cls",
    "func:test_bad_chunked_c",
    "func:test_bad_chunked_py",
    "func:test_bad_header_name",
    "func:test_bad_headers",
    "func:test_bad_upgrade",
    "func:test_c_parser_loaded",
    "func:test_compression_brotli",
    "func:test_compression_deflate",
    "func:test_compression_empty",
    "func:test_compression_gzip",
    "func:test_compression_unknown",
    "func:test_conn_close",
    "func:test_conn_close_1_0",
    "func:test_conn_default_1_0",
    "func:test_conn_default_1_1",
    "func:test_conn_keep_alive_1_0",
    "func:test_conn_keep_alive_1_1",
    "func:test_conn_other_1_0",
    "func:test_conn_other_1_1",
    "func:test_conn_upgrade",
    "func:test_content_length_transfer_encoding",
    "func:test_cve_2023_37276",
    "func:test_empty_header_name",
    "func:test_headers_connect",
    "func:test_headers_content_length_err_1",
    "func:test_headers_content_length_err_2",
    "func:test_headers_multi_feed",
    "func:test_headers_old_websocket_key1",
    "func:test_headers_split_field",
    "func:test_http_request_bad_status_line",
    "func:test_http_request_bad_status_line_number",
    "func:test_http_request_bad_status_line_separator",
    "func:test_http_request_bad_status_line_whitespace",
    "func:test_http_request_chunked_payload",
    "func:test_http_request_chunked_payload_and_next_message",
    "func:test_http_request_chunked_payload_chunks",
    "func:test_http_request_max_status_line",
    "func:test_http_request_max_status_line_under_limit",
    "func:test_http_request_message_after_close",
    "func:test_http_request_parser",
    "func:test_http_request_parser_bad_ascii_uri",
    "func:test_http_request_parser_bad_method",
    "func:test_http_request_parser_bad_nonascii_uri",
    "func:test_http_request_parser_bad_version",
    "func:test_http_request_parser_bad_version_number",
    "func:test_http_request_parser_non_utf8",
    "func:test_http_request_parser_two_slashes",
    "func:test_http_request_parser_utf8",
    "func:test_http_request_parser_utf8_request_line",
    "func:test_http_request_upgrade",
    "func:test_http_response_parser_bad",
    "func:test_http_response_parser_bad_crlf",
    "func:test_http_response_parser_bad_status_line_too_long",
    "func:test_http_response_parser_bad_version",
    "func:test_http_response_parser_bad_version_number",
    "func:test_http_response_parser_code_above_999",
    "func:test_http_response_parser_code_not_ascii",
    "func:test_http_response_parser_code_not_int",
    "func:test_http_response_parser_code_under_100",
    "func:test_http_response_parser_lenient_headers",
    "func:test_http_response_parser_no_reason",
    "func:test_http_response_parser_obs_line_folding",
    "func:test_http_response_parser_status_line_under_limit",
    "func:test_http_response_parser_strict_headers",
    "func:test_http_response_parser_strict_obs_line_folding",
    "func:test_http_response_parser_utf8",
    "func:test_http_response_parser_utf8_without_reason",
    "func:test_invalid_character",
    "func:test_invalid_header",
    "func:test_invalid_header_spacing",
    "func:test_invalid_linebreak",
    "func:test_invalid_name",
    "func:test_max_header_field_size",
    "func:test_max_header_field_size_under_limit",
    "func:test_max_header_value_size",
    "func:test_max_header_value_size_continuation",
    "func:test_max_header_value_size_continuation_under_limit",
    "func:test_max_header_value_size_under_limit",
    "func:test_parse",
    "func:test_parse_bad_method_for_c_parser_raises",
    "func:test_parse_chunked_payload_chunk_extension",
    "func:test_parse_chunked_payload_empty_body_than_another_chunked",
    "func:test_parse_content_length_payload_multiple",
    "func:test_parse_content_length_than_chunked_payload",
    "func:test_parse_delayed",
    "func:test_parse_headers",
    "func:test_parse_headers_longline",
    "func:test_parse_headers_multi",
    "func:test_parse_length_payload",
    "func:test_parse_no_length_or_te_on_post",
    "func:test_parse_no_length_payload",
    "func:test_parse_payload_response_without_body",
    "func:test_parse_unusual_request_line",
    "func:test_parse_uri_percent_encoded",
    "func:test_parse_uri_utf8",
    "func:test_parse_uri_utf8_percent_encoded",
    "func:test_partial_url",
    "func:test_reject_obsolete_line_folding",
    "func:test_request_chunked",
    "func:test_request_te_chunked123",
    "func:test_request_te_chunked_with_content_length",
    "func:test_request_te_first_chunked",
    "func:test_unpaired_surrogate_in_header_py",
    "func:test_url_absolute",
    "func:test_url_connect",
    "func:test_whitespace_before_header",
    "func:xfail_c_parser_status",
    "func:xfail_c_parser_url"
  ],
  "test_include_router_defaults_overrides.py_gpt4_3beef000.py": [
    "class:ResponseLevel0",
    "class:ResponseLevel1",
    "class:ResponseLevel2",
    "class:ResponseLevel3",
    "class:ResponseLevel4",
    "class:ResponseLevel5",
    "func:test_level1_default",
    "func:test_level1_override",
    "func:test_openapi",
    "func:test_paths_level3",
    "func:test_paths_level5"
  ],
  "test_incremental_schema.py_gpt4_dd73924f.py": [
    "class:TestIncrementalSchemaChange",
    "func:models",
    "func:properties",
    "func:run_incremental_append_new_columns",
    "func:run_incremental_append_new_columns_remove_one",
    "func:run_incremental_sync_all_columns",
    "func:run_incremental_sync_remove_only",
    "func:run_twice_and_assert",
    "func:test_run_incremental_append_new_columns",
    "func:test_run_incremental_fail_on_schema_change",
    "func:test_run_incremental_ignore",
    "func:test_run_incremental_sync_all_columns",
    "func:tests"
  ],
  "test_incremental_unique_id.py_gpt4_5edd8e87.py": [
    "class:BaseIncrementalUniqueKey",
    "class:TestIncrementalUniqueKey",
    "func:check_scenario_correctness",
    "func:clean_up",
    "func:fail_to_build_inc_missing_unique_key_column",
    "func:get_expected_fields",
    "func:get_test_fields",
    "func:models",
    "func:seeds",
    "func:test__bad_unique_key",
    "func:test__bad_unique_key_list",
    "func:test__duplicated_unary_unique_key_list",
    "func:test__empty_str_unique_key",
    "func:test__empty_unique_key_list",
    "func:test__no_unique_keys",
    "func:test__one_unique_key",
    "func:test__trinary_unique_key_list",
    "func:test__trinary_unique_key_list_no_update",
    "func:test__unary_unique_key_list",
    "func:update_incremental_model"
  ],
  "test_init.py_gpt4_870ad21b.py": [
    "class:TestInitInsideOfProjectBase",
    "class:TestInitInsideProjectAndSkipProfileSetup",
    "class:TestInitInvalidProfileTemplate",
    "class:TestInitInvalidProjectNameCLI",
    "class:TestInitInvalidProjectNamePrompt",
    "class:TestInitOutsideOfProject",
    "class:TestInitOutsideOfProjectBase",
    "class:TestInitOutsideOfProjectSpecifyingInvalidProfile",
    "class:TestInitOutsideOfProjectSpecifyingProfileNoProfilesYml",
    "class:TestInitOutsideOfProjectWithSpecifiedProfile",
    "class:TestInitProjectWithExistingProfilesYml",
    "class:TestInitProjectWithProfileTemplateWithoutExistingProfilesYml",
    "class:TestInitProjectWithoutExistingProfilesYml",
    "class:TestInitProjectWithoutExistingProfilesYmlOrTemplate",
    "class:TestInitProvidedProjectNameAndSkipProfileSetup",
    "func:dbt_profile_data",
    "func:exists_side_effect",
    "func:project_name",
    "func:setup",
    "func:test_init_inside_project_and_skip_profile_setup",
    "func:test_init_invalid_project_name_cli",
    "func:test_init_invalid_project_name_prompt",
    "func:test_init_provided_project_name_and_skip_profile_setup",
    "func:test_init_task_in_project_specifying_profile_errors",
    "func:test_init_task_in_project_with_existing_profiles_yml",
    "func:test_init_task_in_project_with_invalid_profile_template",
    "func:test_init_task_in_project_with_profile_template_without_existing_profiles_yml",
    "func:test_init_task_in_project_without_existing_profiles_yml",
    "func:test_init_task_in_project_without_existing_profiles_yml_or_profile_template",
    "func:test_init_task_in_project_without_profile_yml_specifying_profile_errors",
    "func:test_init_task_outside_of_project",
    "func:test_init_task_outside_of_project_with_specified_profile",
    "func:test_init_task_outside_project_specifying_invalid_profile_errors",
    "func:test_init_task_outside_project_specifying_profile_no_profiles_yml_errors"
  ],
  "test_interface.py_gpt4_c697fae0.py": [
    "func:test__analyze_ticker_internal_skip_analyze",
    "func:test_advise_all_indicators",
    "func:test_advise_all_indicators_copy",
    "func:test_analyze_pair_empty",
    "func:test_analyze_ticker_default",
    "func:test_assert_df",
    "func:test_assert_df_raise",
    "func:test_auto_hyperopt_interface",
    "func:test_auto_hyperopt_interface_loadparams",
    "func:test_custom_exit",
    "func:test_freqai_not_initialized",
    "func:test_ft_stoploss_reached",
    "func:test_get_signal_empty",
    "func:test_get_signal_exception_valueerror",
    "func:test_get_signal_no_sell_column",
    "func:test_get_signal_old_dataframe",
    "func:test_hyperopt_parameters",
    "func:test_ignore_expired_candle",
    "func:test_is_informative_pairs_callback",
    "func:test_is_pair_locked",
    "func:test_leverage_callback",
    "func:test_min_roi_reached",
    "func:test_min_roi_reached2",
    "func:test_min_roi_reached3",
    "func:test_pandas_warning_direct",
    "func:test_pandas_warning_through_analyze_pair",
    "func:test_returns_latest_signal",
    "func:test_should_sell"
  ],
  "test_isa_18_2.py_gpt4_076df0d5.py": [
    "class:Isa182TestCase",
    "class:NotificationBlackout",
    "func:post_receive",
    "func:pre_receive",
    "func:setUp",
    "func:status_change",
    "func:tearDown",
    "func:test_ack_active_alarm",
    "func:test_operator_shelve",
    "func:test_operator_unack",
    "func:test_out_of_service",
    "func:test_rtn_before_ack"
  ],
  "test_local.py_gpt4_3856ab90.py": [
    "class:HTTPFetcher",
    "class:ThreadedLocalServer",
    "func:__init__",
    "func:_assert_env_var_loaded",
    "func:_wait_for_server_ready",
    "func:basic_app",
    "func:cd",
    "func:config",
    "func:configure",
    "func:create_server",
    "func:get_record_counter",
    "func:http_session",
    "func:index",
    "func:index_view",
    "func:json_get",
    "func:local_server_factory",
    "func:make_call",
    "func:make_requests",
    "func:record_counter",
    "func:run",
    "func:sample_app",
    "func:shutdown",
    "func:test_can_accept_get_request",
    "func:test_can_accept_multiple_connections",
    "func:test_can_accept_multiple_options_request",
    "func:test_can_accept_options_request",
    "func:test_can_get_unicode_string_content_length",
    "func:test_can_import_env_vars",
    "func:test_can_reload_server",
    "func:test_cors",
    "func:test_has_thread_safe_current_request",
    "func:unused_tcp_port",
    "func:wait_for_server_ready"
  ],
  "test_manifest.py_gpt4_4664fd28.py": [
    "class:TestCheckForcingConcurrentBatches",
    "class:TestFailedPartialParse",
    "class:TestGetFullManifest",
    "class:TestPartialParse",
    "class:TestWarnUnusedConfigs",
    "func:event_catcher",
    "func:manifest_loader",
    "func:set_required_mocks",
    "func:test_check_forcing_concurrent_batches",
    "func:test_partial_parse_by_version",
    "func:test_partial_parse_file_diff_flag",
    "func:test_partial_parse_file_path",
    "func:test_partial_parse_safe_update_project_parser_files_partially",
    "func:test_profile_hash_change",
    "func:test_reset",
    "func:test_warn_for_unused_resource_config_paths",
    "func:test_write_perf_info"
  ],
  "test_manifest.py_gpt4_d5cde5aa.py": [
    "class:ManifestTest",
    "class:MixedManifestTest",
    "class:TestDisabledLookup",
    "class:TestManifestFindNodeFromRefOrSource",
    "class:TestManifestSearch",
    "func:_ambiguous_ref_parameter_sets",
    "func:_docs_parameter_sets",
    "func:_materialization_parameter_sets",
    "func:_materialization_parameter_sets_legacy",
    "func:_refable_parameter_sets",
    "func:_source_parameter_sets",
    "func:docs",
    "func:id_macro",
    "func:id_mat",
    "func:id_nodes",
    "func:macros",
    "func:manifest",
    "func:mock_disabled_node",
    "func:mock_disabled_source",
    "func:mock_manifest",
    "func:mock_model",
    "func:mock_model_with_version",
    "func:mock_node",
    "func:mock_seed",
    "func:mock_source",
    "func:nodes",
    "func:setUp",
    "func:tearDown",
    "func:test_build_flat_graph",
    "func:test_deepcopy_copies_flat_graph",
    "func:test_find",
    "func:test_find_generate_macros_by_name",
    "func:test_find_macro_by_name",
    "func:test_find_materialization_by_name",
    "func:test_find_materialization_by_name_legacy",
    "func:test_find_multiple_nodes",
    "func:test_find_multiple_nodes_with_resource_types",
    "func:test_find_multiple_nodes_with_resource_types_empty",
    "func:test_find_multiple_nodes_with_wrong_resource_types",
    "func:test_find_no_package",
    "func:test_find_node_from_ref_or_source",
    "func:test_find_node_from_ref_or_source_invalid_expression",
    "func:test_find_versioned_node",
    "func:test_find_versioned_node_no_package",
    "func:test_find_versioned_node_no_version",
    "func:test_find_versioned_node_wrong_name",
    "func:test_find_versioned_node_wrong_package",
    "func:test_find_versioned_node_wrong_version",
    "func:test_find_wrong_name",
    "func:test_find_wrong_package",
    "func:test_find_wrong_resource_types",
    "func:test_find_wrong_version",
    "func:test_get_resource_fqns",
    "func:test_get_resource_fqns_empty",
    "func:test_merge_from_artifact",
    "func:test_nested_nodes",
    "func:test_no_nodes",
    "func:test_no_nodes_with_metadata",
    "func:test_resolve_doc",
    "func:test_resolve_ref",
    "func:test_resolve_ref_ambiguous_resource_name_across_packages",
    "func:test_resolve_source"
  ],
  "test_microbatch.py_gpt4_7185f3ce.py": [
    "class:TestMicrobatchBuilder",
    "func:microbatch_model",
    "func:test_build_batches",
    "func:test_build_end_time",
    "func:test_build_jinja_context_for_incremental_batch",
    "func:test_build_jinja_context_for_incremental_batch_false",
    "func:test_build_start_time",
    "func:test_ceiling_timestamp",
    "func:test_format_batch_start",
    "func:test_offset_timestamp",
    "func:test_truncate_timestamp"
  ],
  "test_microbatch.py_gpt4_9b74143e.py": [
    "class:BaseMicrobatchCustomUserStrategy",
    "class:BaseMicrobatchTest",
    "class:TestCanSilenceInvalidConcurrentBatchesConfigWarning",
    "class:TestFirstAndLastBatchAlwaysSequential",
    "class:TestFirstBatchRunsPreHookLastBatchRunsPostHook",
    "class:TestMicrbobatchModelsRunWithSameCurrentTime",
    "class:TestMicroBatchBoundsDefault",
    "class:TestMicrobatchCLI",
    "class:TestMicrobatchCLIBuild",
    "class:TestMicrobatchCLIRunOutputJSON",
    "class:TestMicrobatchCanRunParallelOrSequential",
    "class:TestMicrobatchCompiledRunPaths",
    "class:TestMicrobatchCustomUserStrategyDefault",
    "class:TestMicrobatchCustomUserStrategyProjectFlagTrueNoValidBuiltin",
    "class:TestMicrobatchCustomUserStrategyProjectFlagTrueValid",
    "class:TestMicrobatchFullRefreshConfigFalse",
    "class:TestMicrobatchIncrementalBatchFailure",
    "class:TestMicrobatchInitialBatchFailure",
    "class:TestMicrobatchJinjaContext",
    "class:TestMicrobatchJinjaContextVarsAvailable",
    "class:TestMicrobatchModelSkipped",
    "class:TestMicrobatchModelStoppedByKeyboardInterrupt",
    "class:TestMicrobatchMultipleRetries",
    "class:TestMicrobatchRetriesPartialSuccesses",
    "class:TestMicrobatchSecondBatchFailure",
    "class:TestMicrobatchUsingRefRenderSkipsFilter",
    "class:TestMicrobatchWithInputWithoutEventTime",
    "class:TestMicrobatchWithSource",
    "class:TestWhenOnlyOneBatchRunBothPostAndPreHooks",
    "func:assert_row_count",
    "func:batch_exc_catcher",
    "func:batch_log_catcher",
    "func:catch_aw",
    "func:catch_eors",
    "func:deprecation_catcher",
    "func:event_catcher",
    "func:generic_exception_catcher",
    "func:macros",
    "func:models",
    "func:pre_or_post_hook",
    "func:project_config_update",
    "func:seeds",
    "func:test_list_output_json",
    "func:test_microbatch",
    "func:test_microbatch_model_skipped",
    "func:test_run_with_event_time",
    "func:test_run_with_event_time_logs",
    "func:test_use_custom_microbatch_strategy_by_default",
    "func:test_use_custom_microbatch_strategy_project_flag_true_invalid_incremental_strategy"
  ],
  "test_model_hooks.py_gpt4_30523da7.py": [
    "class:BaseTestPrePost",
    "class:PrePostModelHooksInConfigSetup",
    "class:TestDuplicateHooksInConfigs",
    "class:TestHookRefs",
    "class:TestHooksRefsOnSeeds",
    "class:TestPrePostModelHooks",
    "class:TestPrePostModelHooksInConfig",
    "class:TestPrePostModelHooksInConfigKwargs",
    "class:TestPrePostModelHooksInConfigWithCount",
    "class:TestPrePostModelHooksListWithMacros",
    "class:TestPrePostModelHooksOnSeeds",
    "class:TestPrePostModelHooksOnSeedsPlusPrefixed",
    "class:TestPrePostModelHooksOnSeedsPlusPrefixedWhitespace",
    "class:TestPrePostModelHooksOnSnapshots",
    "class:TestPrePostModelHooksUnderscores",
    "class:TestPrePostModelHooksWithMacros",
    "class:TestPrePostSnapshotHooksInConfigKwargs",
    "func:check_hooks",
    "func:get_ctx_vars",
    "func:macros",
    "func:models",
    "func:project_config_update",
    "func:seeds",
    "func:setUp",
    "func:test_hook_with_ref_on_seeds",
    "func:test_hooks_on_seeds",
    "func:test_hooks_on_snapshots",
    "func:test_pre_and_post_model_hooks_model",
    "func:test_pre_and_post_model_hooks_model_and_project",
    "func:test_pre_and_post_run_hooks",
    "func:test_pre_post_model_hooks_refed",
    "func:test_run_duplicate_hook_defs"
  ],
  "test_monitor.py_gpt4_0fe2bb6f.py": [
    "class:test_Monitor",
    "func:assert_on_web_request_end",
    "func:create_monitor",
    "func:create_populated_monitor",
    "func:event",
    "func:message",
    "func:mon",
    "func:on_sample",
    "func:stream",
    "func:table",
    "func:test_TableState_asdict",
    "func:test__sample",
    "func:test_asdict",
    "func:test_init_max_assignment_latency_history",
    "func:test_init_max_assignment_latency_history__default",
    "func:test_init_max_avg_history",
    "func:test_init_max_avg_history__default",
    "func:test_init_max_commit_latency_history",
    "func:test_init_max_commit_latency_history__default",
    "func:test_init_max_send_latency_history",
    "func:test_init_max_send_latency_history__default",
    "func:test_init_rebalances",
    "func:test_on_assignment_completed",
    "func:test_on_assignment_error",
    "func:test_on_assignment_start",
    "func:test_on_commit_completed",
    "func:test_on_commit_initiated",
    "func:test_on_message_in",
    "func:test_on_message_out",
    "func:test_on_rebalance_end",
    "func:test_on_rebalance_return",
    "func:test_on_rebalance_start",
    "func:test_on_send_completed",
    "func:test_on_send_error",
    "func:test_on_send_initiated",
    "func:test_on_stream_event_in",
    "func:test_on_stream_event_out",
    "func:test_on_stream_event_out__missing_state",
    "func:test_on_table_del",
    "func:test_on_table_get",
    "func:test_on_table_set",
    "func:test_on_topic_buffer_full",
    "func:test_on_tp_commit",
    "func:test_on_web_request_end",
    "func:test_on_web_request_end__None_response",
    "func:test_on_web_request_start",
    "func:test_track_tp_end_offsets",
    "func:time",
    "func:topic"
  ],
  "test_nodes.py_gpt4_db0f5dea.py": [
    "class:TestModelNode",
    "class:TestParsedNode",
    "class:TestSemanticModel",
    "func:assertSameContents",
    "func:default_model_node",
    "func:default_semantic_model",
    "func:dimensions",
    "func:entities",
    "func:measures",
    "func:parsed_node",
    "func:test_all_constraints",
    "func:test_checked_agg_time_dimension_for_measure_exception",
    "func:test_checked_agg_time_dimension_for_measure_via_defaults",
    "func:test_checked_agg_time_dimension_for_measure_via_measure",
    "func:test_disabled_unique_combo_multiple",
    "func:test_disabled_unique_combo_single",
    "func:test_disabled_unique_multiple",
    "func:test_disabled_unique_single",
    "func:test_enabled_unique_combo_multiple",
    "func:test_enabled_unique_combo_single",
    "func:test_enabled_unique_multiple",
    "func:test_enabled_unique_single",
    "func:test_get_target_write_path",
    "func:test_get_target_write_path_split",
    "func:test_is_past_deprecation_date",
    "func:test_no_primary_key",
    "func:test_primary_key_column_constraint",
    "func:test_primary_key_model_constraint",
    "func:test_semantic_model_same_contents",
    "func:test_semantic_model_same_contents_different_node_relation",
    "func:test_semantic_model_same_contents_update_model",
    "func:test_unique_non_null_multiple",
    "func:test_unique_non_null_single"
  ],
  "test_package.py_gpt4_523b0cd1.py": [
    "class:TestPackage",
    "func:_calculate_checksum",
    "func:_get_package_install_test_cases",
    "func:_get_random_package_name",
    "func:_run_package_cmd",
    "func:_verify_file_is_executable",
    "func:app_skeleton",
    "func:assert_can_package_dependency",
    "func:cd",
    "func:runner",
    "func:test_can_package_pandas",
    "func:test_can_package_simplejson",
    "func:test_can_package_sqlalchemy",
    "func:test_can_package_with_dashes_in_name",
    "func:test_does_not_package_bad_requirements_file",
    "func:test_package_install_smoke_tests",
    "func:test_packaging_requirements_keeps_same_hash",
    "func:test_preserves_executable_permissions"
  ],
  "test_package.py_gpt4_6f38ff17.py": [
    "class:EmptyEnv",
    "class:FakePip",
    "class:FakeSdistBuilder",
    "class:PathArgumentEndingWith",
    "class:PipSideEffect",
    "class:TestDependencyBuilder",
    "class:TestPackage",
    "class:TestSdistMetadataFetcher",
    "class:TestSubprocessPip",
    "func:__eq__",
    "func:__init__",
    "func:_build_fake_sdist",
    "func:_build_fake_whl",
    "func:_create_app_structure",
    "func:_make_appdir_and_dependency_builder",
    "func:_write_fake_sdist",
    "func:_write_requirements_txt",
    "func:calls",
    "func:empty_env_osutils",
    "func:environ",
    "func:execute",
    "func:index",
    "func:main",
    "func:osutils",
    "func:packages_to_download",
    "func:pip_runner",
    "func:sample_app",
    "func:sdist_builder",
    "func:sdist_reader",
    "func:set_return_tuple",
    "func:test_bad_format",
    "func:test_both_zip",
    "func:test_build_into_existing_dir_with_preinstalled_packages",
    "func:test_build_sdist_makes_incompatible_whl",
    "func:test_can_build_local_dir_as_whl",
    "func:test_can_build_package_with_optional_c_speedups_and_no_wheel",
    "func:test_can_build_sdist",
    "func:test_can_create_app_packager_with_no_autogen",
    "func:test_can_create_app_packager_with_yaml_extention",
    "func:test_can_expand_platlib_and_platlib_and_root",
    "func:test_can_expand_platlib_and_purelib",
    "func:test_can_expand_platlib_whl",
    "func:test_can_expand_purelib_whl",
    "func:test_can_get_py27_whls",
    "func:test_can_get_sdist_if_missing_initially",
    "func:test_can_get_whls_all_manylinux",
    "func:test_can_get_whls_mixed_compat",
    "func:test_can_invoke_pip",
    "func:test_can_normalize_dirname_for_purelib_whl",
    "func:test_can_replace_incompat_whl",
    "func:test_can_specify_yaml_output",
    "func:test_can_support_compressed_tags",
    "func:test_can_support_new_wheel_tags",
    "func:test_can_use_abi3_whl_for_any_python3",
    "func:test_cant_get_egg_info_filename",
    "func:test_distutil_tar_bz2",
    "func:test_distutil_tar_gz",
    "func:test_distutil_zip",
    "func:test_does_error_code_propagate",
    "func:test_does_fail_on_invalid_local_package",
    "func:test_does_fail_on_narrow_py27_unicode",
    "func:test_does_fail_on_python_1_whl",
    "func:test_does_ignore_data",
    "func:test_does_ignore_include",
    "func:test_does_ignore_scripts",
    "func:test_ensure_sdist_name_normalized_for_comparison",
    "func:test_ensure_wheel_name_normalized_for_comparison",
    "func:test_includes_layer_package_with_sam",
    "func:test_includes_layer_package_with_terraform",
    "func:test_pkg_info_fallback_fails_raises_error",
    "func:test_same_pkg_sdist_and_wheel_collide",
    "func:test_setup_tar_bz2",
    "func:test_setup_tar_gz",
    "func:test_setup_zip",
    "func:test_whitelist_sqlalchemy",
    "func:test_will_create_outdir_if_needed",
    "func:validate",
    "func:wheels_to_build",
    "func:write_fake_sdist"
  ],
  "test_parser.py_gpt4_48278aad.py": [
    "class:AnalysisParserTest",
    "class:BaseParserTest",
    "class:GenericTestParserTest",
    "class:MacroParserTest",
    "class:ModelParserTest",
    "class:SchemaParserModelsTest",
    "class:SchemaParserSourceTest",
    "class:SchemaParserTest",
    "class:SchemaParserVersionedModels",
    "class:SingularTestParserTest",
    "class:SnapshotParserTest",
    "class:StaticModelParserTest",
    "class:StaticModelParserUnitTest",
    "func:_generate_macros",
    "func:assertEqualNodes",
    "func:assert_has_manifest_lengths",
    "func:file_block_for",
    "func:get_abs_os_path",
    "func:setUp",
    "func:source_file_for",
    "func:tearDown",
    "func:test__parse_basic_model_tests",
    "func:test__parse_basic_source",
    "func:test__parse_basic_source_meta",
    "func:test__parse_basic_source_tests",
    "func:test__parse_model_freshness",
    "func:test__parse_model_freshness_depend_on",
    "func:test__parse_versioned_model_tests",
    "func:test__parsed_versioned_models",
    "func:test__parsed_versioned_models_contract_enforced",
    "func:test__parsed_versioned_models_v0",
    "func:test__parsed_versioned_models_v0_latest_version",
    "func:test__read_basic_model_tests",
    "func:test__read_basic_model_tests_wrong_severity",
    "func:test__read_basic_source",
    "func:test__read_basic_source_tests",
    "func:test__read_source_patch",
    "func:test__read_versioned_model_tests",
    "func:test_basic",
    "func:test_built_in_macro_override_detection",
    "func:test_config_shifting",
    "func:test_exp_sample_results",
    "func:test_multi_block",
    "func:test_multiple_blocks",
    "func:test_parse_error",
    "func:test_parse_source_custom_freshness_at_source",
    "func:test_parse_source_custom_freshness_at_source_field_at_table",
    "func:test_parse_source_field_at_custom_freshness_both_at_source_fails",
    "func:test_parse_source_field_at_custom_freshness_both_at_table_fails",
    "func:test_parse_source_field_at_source_custom_freshness_at_table",
    "func:test_python_model_config",
    "func:test_python_model_config_with_defaults",
    "func:test_python_model_custom_materialization",
    "func:test_python_model_default_materialization",
    "func:test_python_model_empty_file",
    "func:test_python_model_f_string_config",
    "func:test_python_model_incorrect_argument_name",
    "func:test_python_model_incorrect_function_name",
    "func:test_python_model_incorrect_ref",
    "func:test_python_model_multiple_models",
    "func:test_python_model_multiple_returns",
    "func:test_python_model_no_argument",
    "func:test_python_model_no_return",
    "func:test_python_model_parse",
    "func:test_python_model_single_argument",
    "func:test_python_model_single_return",
    "func:test_sample_results",
    "func:test_single_block",
    "func:test_source_shifting",
    "func:test_sql_model_parse_error",
    "func:test_stable_sample_results",
    "func:yaml_block_for"
  ],
  "test_partial_parsing.py_gpt4_dd53b5fd.py": [
    "class:TestExternalModels",
    "class:TestModels",
    "class:TestNestedMacros",
    "class:TestPartialParsingDependency",
    "class:TestPortablePartialParsing",
    "class:TestProfileChanges",
    "class:TestSkipMacros",
    "class:TestSnapshots",
    "class:TestSources",
    "class:TestTests",
    "func:external_model_node",
    "func:external_model_node_depends_on",
    "func:external_model_node_depends_on_parent",
    "func:external_model_node_merge",
    "func:external_model_node_versioned",
    "func:initial_run_and_rename_project_dir",
    "func:local_dependency_files",
    "func:macros",
    "func:models",
    "func:normalize",
    "func:packages",
    "func:rename_project_root",
    "func:setUp",
    "func:test_nested_macros",
    "func:test_parsing_with_dependency",
    "func:test_pp_external_models",
    "func:test_pp_generic_tests",
    "func:test_pp_models",
    "func:test_pp_renamed_project_dir_changed_project_contents",
    "func:test_pp_renamed_project_dir_unchanged_project_contents",
    "func:test_pp_snapshots",
    "func:test_pp_sources",
    "func:test_profile_change",
    "func:test_skip_macros",
    "func:tests"
  ],
  "test_persistence.py_gpt4_754580b0.py": [
    "func:test_Trade_object_idem",
    "func:test_adjust_min_max_rates",
    "func:test_adjust_stop_loss",
    "func:test_adjust_stop_loss_short",
    "func:test_borrowed",
    "func:test_calc_close_trade_price",
    "func:test_calc_close_trade_price_exception",
    "func:test_calc_open_close_trade_price",
    "func:test_calc_open_trade_value",
    "func:test_calc_profit",
    "func:test_enter_exit_side",
    "func:test_fee_updated",
    "func:test_fully_canceled_entry_order_count",
    "func:test_get_best_pair",
    "func:test_get_best_pair_lev",
    "func:test_get_canceled_exit_order_count",
    "func:test_get_open",
    "func:test_get_open_lev",
    "func:test_get_open_orders",
    "func:test_get_overall_performance",
    "func:test_get_total_closed_profit",
    "func:test_get_trades__query",
    "func:test_get_trades_backtest",
    "func:test_get_trades_proxy",
    "func:test_interest",
    "func:test_order_to_ccxt",
    "func:test_recalc_trade_from_orders",
    "func:test_recalc_trade_from_orders_dca",
    "func:test_recalc_trade_from_orders_ignores_bad_orders",
    "func:test_recalc_trade_from_orders_kucoin",
    "func:test_select_filled_orders",
    "func:test_select_filled_orders_usdt",
    "func:test_select_order",
    "func:test_set_stop_loss_liquidation",
    "func:test_stoploss_reinitialization",
    "func:test_stoploss_reinitialization_leverage",
    "func:test_stoploss_reinitialization_short",
    "func:test_to_json",
    "func:test_total_open_trades_stakes",
    "func:test_trade_close",
    "func:test_trade_truncates_string_fields",
    "func:test_update_fee",
    "func:test_update_invalid_order",
    "func:test_update_limit_order",
    "func:test_update_market_order",
    "func:test_update_open_order",
    "func:test_update_order_from_ccxt"
  ],
  "test_pipeline.py_gpt4_2e127b37.py": [
    "class:TestPipelineGenLegacy",
    "class:TestPipelineGenV2",
    "func:generate_template",
    "func:pipeline_gen",
    "func:pipeline_params",
    "func:setup_method",
    "func:test_app_name_in_param_default",
    "func:test_build_extractor",
    "func:test_can_add_github_as_source_stage",
    "func:test_can_create_buildspec_v2",
    "func:test_can_extract_python_version",
    "func:test_can_generate_github_source",
    "func:test_can_provide_codebuild_image",
    "func:test_can_validate_python_version",
    "func:test_codebuild_resource",
    "func:test_codepipeline_resource",
    "func:test_default_version_range_locks_minor_version",
    "func:test_github_source_uses_secretsmanager_in_v2",
    "func:test_install_requirements_in_buildspec",
    "func:test_invalid_python_throws_error",
    "func:test_new_default_codebuild_image",
    "func:test_no_source_resource_when_using_github",
    "func:test_nonsense_py_version_throws_error",
    "func:test_python_36_in_param_default",
    "func:test_python_version_in_param_default",
    "func:test_source_repo_resource",
    "func:test_uses_v2_codebuild_spec",
    "func:test_validate_python_versions"
  ],
  "test_planner.py_gpt4_8f4efc62.py": [
    "class:BasePlannerTests",
    "class:FakeConfig",
    "class:Foo",
    "class:InMemoryRemoteState",
    "class:TestKeyVariable",
    "class:TestPlanCloudWatchEvent",
    "class:TestPlanCreateUpdateAPIMapping",
    "class:TestPlanCreateUpdateDomainName",
    "class:TestPlanDynamoDBSubscription",
    "class:TestPlanKinesisSubscription",
    "class:TestPlanLambdaFunction",
    "class:TestPlanLogGroup",
    "class:TestPlanManagedRole",
    "class:TestPlanRestAPI",
    "class:TestPlanS3Events",
    "class:TestPlanSNSSubscription",
    "class:TestPlanSQSSubscription",
    "class:TestPlanScheduledEvent",
    "class:TestPlanWebsocketAPI",
    "class:TestRemoteState",
    "class:TestUnreferencedResourcePlanner",
    "func:__init__",
    "func:assert_apicall_equals",
    "func:assert_loads_needed_variables",
    "func:assert_recorded_values",
    "func:create_api_mapping",
    "func:create_domain_name",
    "func:create_function_resource",
    "func:create_http_domain_name",
    "func:create_managed_layer",
    "func:create_rest_api_model",
    "func:create_websocket_api_model",
    "func:create_websocket_domain_name",
    "func:declare_no_resources_exists",
    "func:declare_resource_exists",
    "func:deployed_resources",
    "func:determine_plan",
    "func:execute",
    "func:filter_api_calls",
    "func:function_resource",
    "func:get_remote_model",
    "func:no_deployed_values",
    "func:one_deployed_lambda_function",
    "func:resource_deployed_values",
    "func:resource_exists",
    "func:setup_method",
    "func:test_api_gateway_domain_name_exists",
    "func:test_can_create_api_mapping",
    "func:test_can_create_domain_name",
    "func:test_can_create_function",
    "func:test_can_create_function_with_reserved_concurrency",
    "func:test_can_create_layer",
    "func:test_can_create_log_group",
    "func:test_can_create_plan_for_filebased_role",
    "func:test_can_create_websocket_api_mapping_with_path",
    "func:test_can_delete_api_mapping",
    "func:test_can_delete_api_mapping_none",
    "func:test_can_delete_domain_name",
    "func:test_can_delete_iam_role",
    "func:test_can_delete_lambda_layer",
    "func:test_can_delete_rest_api",
    "func:test_can_delete_s3_event",
    "func:test_can_delete_scheduled_event",
    "func:test_can_delete_sns_subscription",
    "func:test_can_delete_sqs_subscription",
    "func:test_can_delete_websocket_api",
    "func:test_can_get_deployed_values",
    "func:test_can_handle_domain_name_without_api_mapping",
    "func:test_can_handle_when_resource_changes_values",
    "func:test_can_plan_cloudwatch_event",
    "func:test_can_plan_dynamodb_event_source",
    "func:test_can_plan_dynamodb_event_source_update",
    "func:test_can_plan_for_iam_role_creation",
    "func:test_can_plan_kinesis_event_source",
    "func:test_can_plan_rest_api",
    "func:test_can_plan_s3_event",
    "func:test_can_plan_scheduled_event",
    "func:test_can_plan_scheduled_event_can_omit_description",
    "func:test_can_plan_sns_arn_subscription",
    "func:test_can_plan_sns_subscription",
    "func:test_can_plan_sqs_event_source",
    "func:test_can_plan_websocket_api",
    "func:test_can_set_variables_when_needed",
    "func:test_can_update_domain_name",
    "func:test_can_update_file_based_policy",
    "func:test_can_update_kinesis_event_source",
    "func:test_can_update_lambda_function_code",
    "func:test_can_update_lambda_function_with_managed_layer",
    "func:test_can_update_layer",
    "func:test_can_update_log_group",
    "func:test_can_update_managed_role",
    "func:test_can_update_rest_api",
    "func:test_can_update_rest_api_with_policy",
    "func:test_can_update_sqs_event_with_queue_arn",
    "func:test_can_update_websocket_api",
    "func:test_correct_deletion_order_for_dependencies",
    "func:test_create_function_with_layers",
    "func:test_ddb_event_source_exists",
    "func:test_ddb_event_source_not_exists",
    "func:test_domain_name_does_not_exist",
    "func:test_dynamically_lookup_iam_role",
    "func:test_exists_check_is_cached",
    "func:test_exists_check_is_cached_api_mapping",
    "func:test_handles_when_queue_name_change",
    "func:test_handles_when_topic_name_change",
    "func:test_key_variable_str",
    "func:test_key_variables_equal",
    "func:test_kinesis_event_source_exists",
    "func:test_kinesis_event_source_not_exists",
    "func:test_lambda_function_does_not_exist",
    "func:test_lambda_function_exists",
    "func:test_lambda_layer_exists",
    "func:test_lambda_layer_not_exists",
    "func:test_no_deletion_when_no_changes",
    "func:test_no_sqs_deletion_when_no_changes",
    "func:test_no_sweeping_when_resource_value_unchanged",
    "func:test_no_update_for_non_managed_role",
    "func:test_none_api_mapping_exists",
    "func:test_noop_when_all_resources_accounted_for",
    "func:test_path_api_mapping_exists",
    "func:test_path_api_mapping_exists_with_slash",
    "func:test_raise_error_not_existed_resource_delete",
    "func:test_rest_api_exists_no_deploy",
    "func:test_rest_api_exists_with_existing_deploy",
    "func:test_rest_api_not_exists_with_preexisting_deploy",
    "func:test_role_does_not_exist",
    "func:test_role_exists",
    "func:test_sns_subscription_exists",
    "func:test_sns_subscription_exists_is_noop_for_planner",
    "func:test_sns_subscription_not_in_deployed_values",
    "func:test_sqs_event_source_exists",
    "func:test_sqs_event_source_exists_updates_batch_size",
    "func:test_sqs_event_source_exists_updates_maximum_concurrency",
    "func:test_sqs_event_supports_maximum_concurrency",
    "func:test_sqs_event_supports_queue_arn",
    "func:test_store_api_mapping_if_already_exists",
    "func:test_store_api_mapping_none_if_already_exists",
    "func:test_supports_multiple_unreferenced_and_unchanged",
    "func:test_unknown_model_type_raises_error",
    "func:test_update_plan_with_insert_without_message",
    "func:test_value_error_raised_for_unknown_resource_name",
    "func:test_value_error_raised_on_no_deployed_values",
    "func:test_websocket_api_exists_no_deploy",
    "func:test_websocket_api_exists_with_existing_deploy",
    "func:test_websocket_api_not_exists_with_preexisting_deploy",
    "func:test_websocket_api_plan_omits_unused_lambdas",
    "func:test_websocket_domain_name_exists",
    "func:test_will_delete_log_group",
    "func:test_will_delete_unreferenced_resource"
  ],
  "test_plugins.py_gpt4_e2ab7a56.py": [
    "class:CustAckPlugin1",
    "class:CustActionPlugin1",
    "class:CustActionPlugin2",
    "class:CustActionPlugin3",
    "class:CustDeletePlugin1",
    "class:CustDeletePlugin2",
    "class:CustNotePlugin1",
    "class:CustPlugin1",
    "class:CustPlugin2",
    "class:CustPlugin3",
    "class:OldPlugin1",
    "class:PluginsTestCase",
    "class:Teapot",
    "func:delete",
    "func:post_action",
    "func:post_receive",
    "func:pre_receive",
    "func:setUp",
    "func:status_change",
    "func:take_action",
    "func:take_note",
    "func:tearDown",
    "func:test_add_and_remove_tags",
    "func:test_custom_ack",
    "func:test_delete",
    "func:test_im_a_teapot",
    "func:test_invalid_action",
    "func:test_status_update",
    "func:test_take_action",
    "func:test_take_note"
  ],
  "test_previous_version_state.py_gpt4_89d24786.py": [
    "class:TestPreviousVersionState",
    "func:analyses",
    "func:compare_previous_results",
    "func:compare_previous_state",
    "func:generate_latest_manifest",
    "func:generate_latest_run_results",
    "func:macros",
    "func:models",
    "func:seeds",
    "func:snapshots",
    "func:test_backwards_compatible_run_results_versions",
    "func:test_backwards_compatible_versions",
    "func:test_compare_results_current",
    "func:test_compare_state_current",
    "func:test_get_manifest_schema_version",
    "func:test_nonbackwards_compatible_versions",
    "func:test_project",
    "func:tests"
  ],
  "test_procedure.py_gpt4_32a863d6.py": [
    "class:CattTest",
    "class:CattTestError",
    "func:__init__",
    "func:_failure_test",
    "func:_get_val",
    "func:_regular_test",
    "func:_should_fail_test",
    "func:cli",
    "func:run",
    "func:run_tests",
    "func:set_cmd_base",
    "func:subp_run"
  ],
  "test_profile_dir.py_gpt4_ec19df54.py": [
    "class:TestProfiles",
    "class:TestProfilesMayNotExist",
    "func:_write_profiles_yml",
    "func:cleanup",
    "func:cwd",
    "func:cwd_child",
    "func:cwd_parent",
    "func:dbt_debug",
    "func:environ",
    "func:profiles_env_root",
    "func:profiles_flag_root",
    "func:profiles_home_root",
    "func:profiles_project_root",
    "func:profiles_yml",
    "func:test_debug",
    "func:test_deps",
    "func:test_profiles",
    "func:write_profiles_yml"
  ],
  "test_providers.py_gpt4_7d8a7750.py": [
    "class:ResolverSubclass",
    "class:TestBaseResolver",
    "class:TestRuntimeRefResolver",
    "class:TestRuntimeSourceResolver",
    "func:__call__",
    "func:resolver",
    "func:test_create_relation_with_empty",
    "func:test_resolve_event_time_filter",
    "func:test_resolve_limit"
  ],
  "test_proxy_functional.py_gpt4_9569b1ca.py": [
    "class:_ResponseArgs",
    "func:_make_ssl_transport_dummy",
    "func:_patch_ssl_transport",
    "func:mock_is_file",
    "func:proxy_test_server",
    "func:secure_proxy_url",
    "func:web_server_endpoint_payload",
    "func:web_server_endpoint_type"
  ],
  "test_run.py_gpt4_3a6172d5.py": [
    "class:Relation",
    "class:RelationInfo",
    "class:TestMicrobatchModelRunner",
    "class:TestModelRunner",
    "class:TestRunTask",
    "func:hook_node",
    "func:log_model_result_catcher",
    "func:mock_run_queue",
    "func:model_runner",
    "func:run_result",
    "func:test__is_incremental",
    "func:test_adapter_info_tracking",
    "func:test_execute",
    "func:test_print_result_line",
    "func:test_run_task_cancel_connections",
    "func:test_run_task_preserve_edges",
    "func:test_safe_run_hooks",
    "func:test_should_run_in_parallel",
    "func:test_tracking_fails_safely_for_missing_adapter"
  ],
  "test_run_app.py_gpt4_63bfbda1.py": [
    "class:DictRecordClear",
    "class:ServerWithRecordClear",
    "class:TestShutdown",
    "func:__init__",
    "func:base_runner_init_spy",
    "func:clear",
    "func:f",
    "func:patched_loop",
    "func:raiser",
    "func:run_app",
    "func:skip_if_on_windows",
    "func:stopper",
    "func:test_run_app_abstract_linux_socket",
    "func:test_run_app_cancels_all_pending_tasks",
    "func:test_run_app_cancels_done_tasks",
    "func:test_run_app_cancels_failed_tasks",
    "func:test_run_app_close_loop",
    "func:test_run_app_context_vars",
    "func:test_run_app_coro",
    "func:test_run_app_custom_backlog",
    "func:test_run_app_custom_backlog_unix",
    "func:test_run_app_default_logger",
    "func:test_run_app_default_logger_setup_only_if_unconfigured",
    "func:test_run_app_default_logger_setup_requires_debug",
    "func:test_run_app_default_logger_setup_requires_default_logger",
    "func:test_run_app_http",
    "func:test_run_app_http_unix_socket",
    "func:test_run_app_https",
    "func:test_run_app_https_unix_socket",
    "func:test_run_app_keepalive_timeout",
    "func:test_run_app_mixed_bindings",
    "func:test_run_app_multiple_hosts",
    "func:test_run_app_multiple_preexisting_sockets",
    "func:test_run_app_nondefault_host_port",
    "func:test_run_app_preexisting_inet6_socket",
    "func:test_run_app_preexisting_inet_socket",
    "func:test_run_app_preexisting_unix_socket",
    "func:test_run_app_raises_exception",
    "func:test_run_app_with_sock",
    "func:test_shutdown_close_idle_keepalive",
    "func:test_shutdown_close_websockets",
    "func:test_shutdown_handler_cancellation_suppressed",
    "func:test_shutdown_new_conn_rejected",
    "func:test_shutdown_pending_handler_responds",
    "func:test_shutdown_timeout_handler",
    "func:test_shutdown_timeout_not_reached",
    "func:test_shutdown_wait_for_handler",
    "func:test_sigint",
    "func:test_sigterm",
    "func:test_startup_cleanup_signals_even_on_failure"
  ],
  "test_sample_mode.py_gpt4_40df71d0.py": [
    "class:BaseSampleMode",
    "class:TestBasicSampleMode",
    "class:TestIncrementalModelSampleModeRelative",
    "class:TestIncrementalModelSampleModeSpecific",
    "class:TestMicrobatchSampleMode",
    "class:TestSampleSeedRefs",
    "func:assert_row_count",
    "func:event_catcher",
    "func:event_time_end_catcher",
    "func:event_time_start_catcher",
    "func:models",
    "func:seeds",
    "func:test_incremental_model_sample",
    "func:test_sample_mode"
  ],
  "test_selection_expansion.py_gpt4_7b9b0e02.py": [
    "class:TestExpansionWithSelectors",
    "class:TestSelectionExpansion",
    "func:list_tests_and_assert",
    "func:project_config_update",
    "func:run_tests_and_assert",
    "func:selectors",
    "func:test_all_tests_no_specifiers",
    "func:test_exclude_column_level_tag",
    "func:test_exclude_data_test_tag",
    "func:test_exclude_model_b",
    "func:test_model_a_alone",
    "func:test_model_a_exclude_specific_test",
    "func:test_model_a_exclude_specific_test_buildable",
    "func:test_model_a_exclude_specific_test_cautious",
    "func:test_model_a_indirect_selection",
    "func:test_model_a_indirect_selection_buildable",
    "func:test_model_a_indirect_selection_cautious",
    "func:test_model_a_indirect_selection_eager",
    "func:test_model_a_indirect_selection_empty",
    "func:test_model_a_indirect_selection_exclude_unique_tests",
    "func:test_model_a_model_b",
    "func:test_model_a_only_singular",
    "func:test_model_a_only_singular_cautious",
    "func:test_model_a_only_singular_eager",
    "func:test_model_a_only_singular_unset",
    "func:test_model_a_sources",
    "func:test_model_tag_test_name_intersection",
    "func:test_only_generic",
    "func:test_only_singular",
    "func:test_select_column_level_tag",
    "func:test_selector_model_a_buildable_indirect_selection",
    "func:test_selector_model_a_cautious_indirect_selection",
    "func:test_selector_model_a_eager_indirect_selection",
    "func:test_selector_model_a_unset_indirect_selection",
    "func:test_test_level_tag",
    "func:test_test_name_intersection"
  ],
  "test_selector.py_gpt4_a29e14e2.py": [
    "class:TestCompiler",
    "class:TestNodeSelector",
    "func:_get_graph",
    "func:_get_manifest",
    "func:graph",
    "func:id_macro",
    "func:mock_manifest_with_mock_graph",
    "func:test_dependency_list",
    "func:test_invalid_specs",
    "func:test_parse_specs",
    "func:test_run_specs",
    "func:test_select_downstream_of_empty_model",
    "func:test_single_model",
    "func:test_two_models_simple_ref"
  ],
  "test_semantic_layer_nodes_satisfy_protocols.py_gpt4_ba04deda.py": [
    "class:RuntimeCheckableDimension",
    "class:RuntimeCheckableDimensionTypeParams",
    "class:RuntimeCheckableDimensionValidityParams",
    "class:RuntimeCheckableEntity",
    "class:RuntimeCheckableFileSlice",
    "class:RuntimeCheckableMeasure",
    "class:RuntimeCheckableMeasureAggregationParams",
    "class:RuntimeCheckableMetric",
    "class:RuntimeCheckableMetricInput",
    "class:RuntimeCheckableMetricInputMeasure",
    "class:RuntimeCheckableMetricTimeWindow",
    "class:RuntimeCheckableMetricTypeParams",
    "class:RuntimeCheckableNonAdditiveDimension",
    "class:RuntimeCheckableSavedQuery",
    "class:RuntimeCheckableSemanticModel",
    "class:RuntimeCheckableSemanticModelDefaults",
    "class:RuntimeCheckableSourceFileMetadata",
    "class:RuntimeCheckableWhereFilter",
    "func:complex_metric_input",
    "func:complex_metric_input_measure",
    "func:complex_metric_type_params",
    "func:conversion_type_params",
    "func:cumulative_type_params",
    "func:dimension_type_params",
    "func:dimension_validity_params",
    "func:file_slice",
    "func:measure_agg_params",
    "func:metric_time_window",
    "func:non_additive_dimension",
    "func:semantic_model_defaults",
    "func:simple_metric_input",
    "func:simple_metric_input_measure",
    "func:source_file_metadata",
    "func:test_defaults_obj_satisfies_protocol",
    "func:test_dimension_satisfies_protocol_optionals_specified",
    "func:test_dimension_satisfies_protocol_optionals_unspecified",
    "func:test_dimension_type_params_satisfies_protocol",
    "func:test_dimension_validity_params_satisfies_protocol",
    "func:test_entity_satisfies_protocol_optionals_specified",
    "func:test_entity_satisfies_protocol_optionals_unspecified",
    "func:test_file_slice_obj_satisfies_protocol",
    "func:test_measure_aggregation_params_satisfies_protocol",
    "func:test_measure_satisfies_protocol_optionals_specified",
    "func:test_measure_satisfies_protocol_optionals_unspecified",
    "func:test_metadata_obj_satisfies_protocol",
    "func:test_metric_input",
    "func:test_metric_input_measure",
    "func:test_metric_node_satisfies_protocol_optionals_specified",
    "func:test_metric_node_satisfies_protocol_optionals_unspecified",
    "func:test_metric_time_window",
    "func:test_metric_type_params_satisfies_protocol",
    "func:test_non_additive_dimension_satisfies_protocol",
    "func:test_saved_query_satisfies_protocol",
    "func:test_semantic_model_node_satisfies_protocol_optionals_specified",
    "func:test_semantic_model_node_satisfies_protocol_optionals_unspecified",
    "func:test_where_filter_satisfies_protocol",
    "func:where_filter"
  ],
  "test_sets.py_gpt4_a2e17664.py": [
    "class:X",
    "class:test_ChangeloggedSet",
    "class:test_SetTable",
    "class:test_SetTableManager",
    "class:test_SetWindowSet",
    "func:cset",
    "func:key",
    "func:man",
    "func:manager",
    "func:stable",
    "func:table",
    "func:test_ChangeloggedSetManager",
    "func:test__apply_set_operation",
    "func:test__clear",
    "func:test__difference_update",
    "func:test__getitem__",
    "func:test__intersection_update",
    "func:test__new_store",
    "func:test__symmetric_difference_update",
    "func:test__update",
    "func:test_add",
    "func:test_apply_changelog_event__ADD",
    "func:test_apply_changelog_event__DISCARD",
    "func:test_apply_changelog_event__UPDATE",
    "func:test_apply_changelog_event__not_implemented",
    "func:test_as_stored_value",
    "func:test_constructor",
    "func:test_constructor__with_specific_name",
    "func:test_constructor__with_suffix",
    "func:test_constructor_disabled",
    "func:test_constructor_enabled",
    "func:test_discard",
    "func:test_on_add",
    "func:test_on_change__diff",
    "func:test_on_change__update",
    "func:test_on_discard",
    "func:test_sync_from_storage",
    "func:wrapper",
    "func:wset"
  ],
  "test_simple_source.py_gpt4_67af4ba3.py": [
    "class:SuccessfulSourcesTest",
    "class:TestBasicSource",
    "class:TestEmptySource",
    "class:TestMalformedSources",
    "class:TestRenderingInSourceTests",
    "class:TestSourceChildrenParents",
    "class:TestSourceDef",
    "class:TestSourceRunOperation",
    "class:TestSourceSelector",
    "class:TestUnquotedSources",
    "func:_create_schemas",
    "func:alternative_schema",
    "func:createDummyTables",
    "func:macros",
    "func:models",
    "func:run_dbt_with_vars",
    "func:setUp",
    "func:test_basic_source_def",
    "func:test_catalog",
    "func:test_empty_source_def",
    "func:test_malformed_schema_will_break_run",
    "func:test_render_in_source_tests",
    "func:test_run_operation_source",
    "func:test_source_childrens_parents",
    "func:test_source_only_def",
    "func:test_source_selector"
  ],
  "test_statsd.py_gpt4_a00807bc.py": [
    "class:test_StatsdMonitor",
    "func:assert_on_web_request",
    "func:event",
    "func:mon",
    "func:req",
    "func:response",
    "func:statsd",
    "func:stream",
    "func:table",
    "func:test_count",
    "func:test_on_assignment_start_completed",
    "func:test_on_assignment_start_failed",
    "func:test_on_commit_completed",
    "func:test_on_message_in_out",
    "func:test_on_rebalance",
    "func:test_on_send_initiated_completed",
    "func:test_on_stream_event_in_out",
    "func:test_on_table_del",
    "func:test_on_table_get",
    "func:test_on_table_set",
    "func:test_on_tp_commit",
    "func:test_on_web_request",
    "func:test_on_web_request__None_response",
    "func:test_raises_if_statsd_not_installed",
    "func:test_statsd",
    "func:test_track_tp_end_offsets",
    "func:time",
    "func:view"
  ],
  "test_tokenize.py_gpt4_f6c0a0ac.py": [
    "class:Token",
    "func:assert_tokenizes",
    "func:get_tokens",
    "func:test_fstring",
    "func:test_simple",
    "func:tokeneater"
  ],
  "test_transformation.py_gpt4_3aa90dce.py": [
    "func:test_capper",
    "func:test_count_categorizer",
    "func:test_custom_transformer",
    "func:test_discrete_ecdfer",
    "func:test_ecdfer",
    "func:test_floorer",
    "func:test_label_categorizer",
    "func:test_missing_warner",
    "func:test_null_injector",
    "func:test_onehot_categorizer",
    "func:test_prediction_ranger",
    "func:test_quantile_biner",
    "func:test_rank_categorical",
    "func:test_selector",
    "func:test_standard_scaler",
    "func:test_target_categorizer",
    "func:test_truncate_categorical",
    "func:test_value_mapper"
  ],
  "test_utils.py_gpt4_1803dff5.py": [
    "class:AioHTTPTestCase",
    "class:BaseTestServer",
    "class:RawTestServer",
    "class:TestClient",
    "class:TestServer",
    "func:__init__",
    "func:_create_app_mock",
    "func:_create_transport",
    "func:app",
    "func:closed",
    "func:delete",
    "func:get",
    "func:get_dict",
    "func:get_extra_info",
    "func:get_port_socket",
    "func:get_unused_port_socket",
    "func:handler",
    "func:head",
    "func:host",
    "func:loop_context",
    "func:make_mocked_coro",
    "func:make_mocked_request",
    "func:make_url",
    "func:options",
    "func:patch",
    "func:port",
    "func:post",
    "func:put",
    "func:request",
    "func:scheme",
    "func:server",
    "func:session",
    "func:set_dict",
    "func:setup_test_loop",
    "func:started",
    "func:teardown_test_loop",
    "func:unused_port",
    "func:ws_connect"
  ],
  "test_utils.py_gpt4_88405595.py": [
    "class:TestChaliceZip",
    "class:TestPipeReader",
    "class:TestTimestampUtils",
    "class:TestUI",
    "func:set_now",
    "func:setup_method",
    "func:test_chalice_zip_file",
    "func:test_confirm_raises_own_exception",
    "func:test_confirm_returns_value",
    "func:test_error_goes_to_err_obj",
    "func:test_iso_no_timezone",
    "func:test_iso_with_timezone",
    "func:test_parse_iso8601_timestamp",
    "func:test_pipe_reader_does_not_read_tty",
    "func:test_pipe_reader_does_read_pipe",
    "func:test_serialize_json",
    "func:test_to_cfn_resource_name",
    "func:test_to_cfn_resource_name_properties",
    "func:test_to_datetime_relative_day",
    "func:test_to_datetime_relative_hour",
    "func:test_to_datetime_relative_minute",
    "func:test_to_datetime_relative_multiple_seconds",
    "func:test_to_datetime_relative_second",
    "func:test_to_datetime_relative_week",
    "func:test_write_goes_to_out_obj"
  ],
  "test_utils.py_gpt4_ef0b5816.py": [
    "func:collect_translate_output_and_scores",
    "func:generate_digits_file",
    "func:generate_fast_align_lex",
    "func:generate_json_input_file_with_tgt_prefix",
    "func:generate_low_high_factors",
    "func:generate_odd_even_factors",
    "func:run_train_translate",
    "func:run_translate_restrict",
    "func:tmp_digits_dataset"
  ],
  "test_value_counts.py_gpt4_32e737e2.py": [
    "func:_frame_value_counts",
    "func:assert_categorical_single_grouper",
    "func:education_df",
    "func:rebuild_index",
    "func:seed_df",
    "func:test_against_frame_and_seriesgroupby",
    "func:test_ambiguous_grouping",
    "func:test_bad_subset",
    "func:test_basic",
    "func:test_categorical_multiple_groupers",
    "func:test_categorical_non_groupers",
    "func:test_categorical_single_grouper_observed_false",
    "func:test_categorical_single_grouper_observed_true",
    "func:test_categorical_single_grouper_with_only_observed_categories",
    "func:test_column_label_duplicates",
    "func:test_compound",
    "func:test_data_frame_value_counts",
    "func:test_data_frame_value_counts_dropna",
    "func:test_dropna_combinations",
    "func:test_mixed_groupings",
    "func:test_result_label_duplicates",
    "func:test_series_groupby_value_counts",
    "func:test_series_groupby_value_counts_empty",
    "func:test_series_groupby_value_counts_no_sort",
    "func:test_series_groupby_value_counts_on_categorical",
    "func:test_series_groupby_value_counts_one_row",
    "func:test_series_groupby_value_counts_with_grouper",
    "func:test_subset",
    "func:test_subset_doesnt_exist_in_frame",
    "func:test_subset_duplicate_columns",
    "func:test_subset_overlaps_gb_key_raises",
    "func:test_value_counts_all_na",
    "func:test_value_counts_integer_columns",
    "func:test_value_counts_sort",
    "func:test_value_counts_sort_categorical",
    "func:test_value_counts_time_grouper",
    "func:tests_value_counts_index_names_category_column"
  ],
  "test_warn_error_options.py_gpt4_9915cccb.py": [
    "class:TestEmptyWarnError",
    "class:TestWarnErrorOptionsFromCLI",
    "class:TestWarnErrorOptionsFromProject",
    "func:assert_deprecation_error",
    "func:assert_deprecation_warning",
    "func:catcher",
    "func:clear_project_flags",
    "func:models",
    "func:runner",
    "func:test_can_exclude_specific_event",
    "func:test_can_raise_warning_to_error",
    "func:test_can_silence",
    "func:test_cant_set_both_exclude_and_warn",
    "func:test_cant_set_both_include_and_error",
    "func:test_project_flags"
  ],
  "test_web_response.py_gpt4_6840945c.py": [
    "class:CustomIO",
    "class:TestJSONResponse",
    "func:__init__",
    "func:buf",
    "func:make_request",
    "func:read",
    "func:test___repr___not_prepared",
    "func:test_assign_nonstr_text",
    "func:test_body_in_ctor_with_content_type_header_multidict",
    "func:test_charset_without_content_type",
    "func:test_content_length",
    "func:test_content_length_setter",
    "func:test_content_length_setter_with_enable_chunked_encoding",
    "func:test_content_type_is_application_json_by_default",
    "func:test_content_type_is_overrideable",
    "func:test_content_type_with_set_body",
    "func:test_content_type_with_set_text",
    "func:test_ctor_both_charset_param_and_header",
    "func:test_ctor_both_charset_param_and_header_with_text",
    "func:test_ctor_both_content_type_param_and_header",
    "func:test_ctor_both_content_type_param_and_header_with_text",
    "func:test_ctor_charset",
    "func:test_ctor_charset_default_utf8",
    "func:test_ctor_charset_in_content_type",
    "func:test_ctor_charset_without_text",
    "func:test_ctor_content_type",
    "func:test_ctor_content_type_with_extra",
    "func:test_ctor_text_body_combined",
    "func:test_data_and_body_raises_value_error",
    "func:test_data_and_text_raises_value_error",
    "func:test_default_charset",
    "func:test_default_content_type_in_response",
    "func:test_default_content_type_in_stream_response",
    "func:test_drop_content_length_header_on_setting_len_to_None",
    "func:test_enable_chunked_encoding_with_content_length",
    "func:test_etag_any",
    "func:test_etag_class",
    "func:test_etag_initial",
    "func:test_etag_invalid_value_class",
    "func:test_etag_invalid_value_get",
    "func:test_etag_invalid_value_set",
    "func:test_etag_reset",
    "func:test_etag_string",
    "func:test_force_close",
    "func:test_last_modified_datetime",
    "func:test_last_modified_initial",
    "func:test_last_modified_invalid_type",
    "func:test_last_modified_reset",
    "func:test_last_modified_string",
    "func:test_last_modified_string_invalid",
    "func:test_last_modified_timestamp",
    "func:test_nonstr_text_in_ctor",
    "func:test_passing_text_only",
    "func:test_payload_body_get_text",
    "func:test_prepared_when_not_started",
    "func:test_request_iter",
    "func:test_reset_charset",
    "func:test_reset_charset_after_setting",
    "func:test_response_ctor",
    "func:test_response_set_content_length",
    "func:test_response_with_content_length_header_without_body",
    "func:test_response_with_immutable_headers",
    "func:test_set_content_length_to_None_on_non_set",
    "func:test_set_status_with_empty_reason",
    "func:test_set_status_with_reason",
    "func:test_set_text_with_charset",
    "func:test_set_text_with_content_type",
    "func:test_setting_charset",
    "func:test_setting_content_type",
    "func:test_stream_response_ctor",
    "func:test_stream_response_delitem",
    "func:test_stream_response_eq",
    "func:test_stream_response_hashable",
    "func:test_stream_response_is_mutable_mapping",
    "func:test_stream_response_len",
    "func:test_text_in_ctor_with_content_type",
    "func:test_text_in_ctor_with_content_type_header",
    "func:test_text_in_ctor_with_content_type_header_multidict",
    "func:test_text_is_json_encoded",
    "func:test_text_with_empty_payload",
    "func:test_weakref_creation",
    "func:writer"
  ],
  "test_web_websocket.py_gpt4_18bcab25.py": [
    "class:_RequestMaker",
    "func:__call__",
    "func:app",
    "func:make_request",
    "func:maker",
    "func:protocol",
    "func:test_bool_websocket_not_ready",
    "func:test_bool_websocket_ready",
    "func:test_can_prepare_ok",
    "func:test_can_prepare_unknown_protocol",
    "func:test_can_prepare_without_upgrade",
    "func:test_closed_after_ctor",
    "func:test_websocket_not_ready",
    "func:test_websocket_ready",
    "func:test_websocket_ready_unknown_protocol"
  ],
  "test_websocket_handshake.py_gpt4_5fe4076a.py": [
    "func:gen_ws_headers",
    "func:test_handshake_compress_bad_ext",
    "func:test_handshake_compress_client_notakeover",
    "func:test_handshake_compress_multi_ext_bad",
    "func:test_handshake_compress_multi_ext_wbits",
    "func:test_handshake_compress_server_notakeover",
    "func:test_handshake_compress_wbits",
    "func:test_handshake_compress_wbits_error",
    "func:test_handshake_no_transfer_encoding"
  ],
  "test_websocket_parser.py_gpt4_a8778b95.py": [
    "class:PatchableWebSocketReader",
    "class:TestWebSocketError",
    "func:build_close_frame",
    "func:build_frame",
    "func:out",
    "func:out_low_limit",
    "func:parser",
    "func:parser_low_limit",
    "func:protocol",
    "func:test_close_frame",
    "func:test_close_frame_info",
    "func:test_close_frame_invalid",
    "func:test_close_frame_invalid_2",
    "func:test_close_frame_unicode_err",
    "func:test_compressed_msg_too_large",
    "func:test_continuation",
    "func:test_continuation_err",
    "func:test_continuation_with_close",
    "func:test_continuation_with_close_bad_code",
    "func:test_continuation_with_close_bad_payload",
    "func:test_continuation_with_close_empty",
    "func:test_continuation_with_close_unicode_err",
    "func:test_continuation_with_ping",
    "func:test_ctor",
    "func:test_feed_data_remembers_exception",
    "func:test_flow_control_binary",
    "func:test_flow_control_multi_byte_text",
    "func:test_fragmentation_header",
    "func:test_msg_too_large",
    "func:test_msg_too_large_not_fin",
    "func:test_parse_compress_error_frame",
    "func:test_parse_compress_frame_multi",
    "func:test_parse_compress_frame_single",
    "func:test_parse_frame",
    "func:test_parse_frame_header_control_frame",
    "func:test_parse_frame_header_new_data_err",
    "func:test_parse_frame_header_payload_size",
    "func:test_parse_frame_header_reversed_bits",
    "func:test_parse_frame_length0",
    "func:test_parse_frame_length2",
    "func:test_parse_frame_length2_multi_byte",
    "func:test_parse_frame_length2_multi_byte_multi_packet",
    "func:test_parse_frame_length4",
    "func:test_parse_frame_mask",
    "func:test_parse_no_compress_frame_single",
    "func:test_pickle",
    "func:test_ping_frame",
    "func:test_pong_frame",
    "func:test_simple_binary",
    "func:test_simple_text",
    "func:test_simple_text_unicode_err",
    "func:test_unknown_frame",
    "func:test_websocket_mask_cython",
    "func:test_websocket_mask_cython_empty",
    "func:test_websocket_mask_python",
    "func:test_websocket_mask_python_empty"
  ],
  "test_websockets.py_gpt4_9d44913f.py": [
    "class:CountingMessageSender",
    "class:SmokeTestApplication",
    "class:Task",
    "func:__init__",
    "func:_create_dynamodb_table",
    "func:_create_wrapped_retry_function",
    "func:_create_ws_connection",
    "func:_delete_app",
    "func:_delete_dynamodb_table",
    "func:_deploy_app",
    "func:_deploy_with_retries",
    "func:_get_error_code_from_exception",
    "func:_inject_app_name",
    "func:_wrapped_with_retry",
    "func:counter",
    "func:find_skips_in_seq",
    "func:get_errors_from_dynamodb",
    "func:get_numbers_from_dynamodb",
    "func:last_sent",
    "func:redeploy_once",
    "func:region",
    "func:retry",
    "func:run",
    "func:send",
    "func:smoke_test_app_ws",
    "func:stop",
    "func:test_websocket_redployment_does_not_lose_messages",
    "func:websocket_api_id",
    "func:websocket_connect_url",
    "func:websocket_message_handler_arn"
  ],
  "test_zrouting.py_gpt4_149302f7.py": [
    "class:DummyConfigPlugin",
    "class:DummyPagerDutyPlugin",
    "class:DummySlackPlugin",
    "class:RoutingTestCase",
    "func:post_receive",
    "func:pre_receive",
    "func:rules",
    "func:setUp",
    "func:status_change",
    "func:tearDown",
    "func:test_config",
    "func:test_config_precedence",
    "func:test_routing"
  ],
  "testclient.py_gpt4_b53c0624.py": [
    "class:TestClient",
    "class:WebSocketDenialResponse",
    "class:WebSocketTestSession",
    "class:_AsyncBackend",
    "class:_TestClientTransport",
    "class:_Upgrade",
    "class:_WrapASGI2",
    "func:__enter__",
    "func:__exit__",
    "func:__init__",
    "func:_is_asgi3",
    "func:_portal_factory",
    "func:_raise_on_close",
    "func:close",
    "func:delete",
    "func:get",
    "func:handle_request",
    "func:head",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:receive",
    "func:receive_bytes",
    "func:receive_json",
    "func:receive_text",
    "func:request",
    "func:reset_portal",
    "func:send",
    "func:send_bytes",
    "func:send_json",
    "func:send_text",
    "func:wait_shutdown",
    "func:websocket_connect"
  ],
  "text_classification_json.py_gpt4_45388262.py": [
    "class:TextClassificationJsonReader",
    "func:__init__",
    "func:_read",
    "func:_truncate",
    "func:apply_token_indexers",
    "func:text_to_instance"
  ],
  "textual_entailment_suite.py_gpt4_657c92f3.py": [
    "class:TextualEntailmentSuite",
    "func:__init__",
    "func:_default_coreference_tests",
    "func:_default_fairness_tests",
    "func:_default_logic_tests",
    "func:_default_negation_tests",
    "func:_default_ner_tests",
    "func:_default_robustness_tests",
    "func:_default_taxonomy_tests",
    "func:_default_temporal_tests",
    "func:_default_tests",
    "func:_default_vocabulary_tests",
    "func:_format_failing_examples",
    "func:_prediction_and_confidence_scores",
    "func:_setup_editor",
    "func:_wrap_apply_to_each",
    "func:contractions",
    "func:new_fn",
    "func:preds_and_confs_fn",
    "func:punctuation",
    "func:typos"
  ],
  "token_characters_indexer.py_gpt4_ea93cfc1.py": [
    "class:TokenCharactersIndexer",
    "func:__init__",
    "func:as_padded_tensor_dict",
    "func:count_vocab_items",
    "func:get_empty_token_list",
    "func:get_padding_lengths",
    "func:tokens_to_indices"
  ],
  "tokenize.py_gpt4_37f27c2e.py": [
    "class:StopTokenizing",
    "class:TokenError",
    "class:Untokenizer",
    "func:__init__",
    "func:_get_normal_name",
    "func:add_whitespace",
    "func:any",
    "func:compat",
    "func:detect_encoding",
    "func:find_cookie",
    "func:generate_tokens",
    "func:group",
    "func:maybe",
    "func:printtoken",
    "func:read_or_stop",
    "func:tokenize",
    "func:tokenize_loop",
    "func:untokenize"
  ],
  "tokenize.py_gpt4_81bfde58.py": [
    "class:FStringState",
    "class:StopTokenizing",
    "class:TokenError",
    "class:Untokenizer",
    "func:__init__",
    "func:_combinations",
    "func:_get_normal_name",
    "func:_split_fstring_start_and_middle",
    "func:add_whitespace",
    "func:any",
    "func:compat",
    "func:consume_colon",
    "func:consume_lbrace",
    "func:consume_rbrace",
    "func:current",
    "func:detect_encoding",
    "func:enter_fstring",
    "func:find_cookie",
    "func:generate_tokens",
    "func:group",
    "func:is_fstring_start",
    "func:is_in_fstring_expression",
    "func:leave_fstring",
    "func:maybe",
    "func:printtoken",
    "func:read_or_stop",
    "func:tokenize",
    "func:tokenize_loop",
    "func:untokenize"
  ],
  "tokenize.py_gpt4_d744cf6b.py": [
    "class:FStringNode",
    "class:PythonToken",
    "class:Token",
    "class:TokenCollection",
    "func:__init__",
    "func:__repr__",
    "func:_all_string_prefixes",
    "func:_close_fstring_if_necessary",
    "func:_compile",
    "func:_create_token_collection",
    "func:_find_fstring_string",
    "func:_get_token_collection",
    "func:_print_tokens",
    "func:_split_illegal_unicode_name",
    "func:allow_multiline",
    "func:close_parentheses",
    "func:create_token",
    "func:dedent_if_necessary",
    "func:different_case_versions",
    "func:end_pos",
    "func:group",
    "func:is_in_expr",
    "func:is_in_format_spec",
    "func:maybe",
    "func:open_parentheses",
    "func:tokenize",
    "func:tokenize_lines",
    "func:wrapper"
  ],
  "toolkit_test.py_gpt4_4397b6b3.py": [
    "class:AlmostRegularTransformer",
    "class:MediumTransformer",
    "class:SmallTransformer",
    "class:TestTransformerToolkit",
    "class:TinyTransformer",
    "func:__init__",
    "func:forward",
    "func:setup_method",
    "func:test_combination_of_two_different_berts",
    "func:test_create_embedder_using_toolkit",
    "func:test_end_to_end",
    "func:test_use_first_four_layers_of_pretrained",
    "func:test_use_selected_layers_of_bert_for_different_purposes"
  ],
  "topics.py_gpt4_fe9d0a1d.py": [
    "class:Topic",
    "class:_App",
    "func:__aiter__",
    "func:__init__",
    "func:__str__",
    "func:_clone_args",
    "func:_compile_decode",
    "func:_on_published",
    "func:_topic_name_or_default",
    "func:derive",
    "func:derive_topic",
    "func:get_topic_name",
    "func:partitions",
    "func:pattern",
    "func:send_soon"
  ],
  "train.py_gpt4_bd12c8b9.py": [
    "class:Train",
    "class:TrainModel",
    "func:__init__",
    "func:_train_worker",
    "func:add_subparser",
    "func:finish",
    "func:from_partial_objects",
    "func:run",
    "func:train_model",
    "func:train_model_from_args",
    "func:train_model_from_file"
  ],
  "train_test.py_gpt4_f735c70e.py": [
    "class:CounterOnBatchCallback",
    "class:MockLRScheduler",
    "class:TestDryRun",
    "class:TestTrain",
    "class:TrainingDataLoggerOnBatchCallback",
    "class:TrainingDeviceLoggerOnBatchCallback",
    "class:TrainingPrimaryCheckCallback",
    "func:__init__",
    "func:on_batch",
    "func:on_start",
    "func:setup_method",
    "func:test_detect_gpu",
    "func:test_distributed_raises_error_with_no_gpus",
    "func:test_dry_run_doesnt_overwrite_vocab",
    "func:test_dry_run_makes_vocab",
    "func:test_dry_run_with_extension",
    "func:test_dry_run_without_extension",
    "func:test_error_is_throw_when_cuda_device_is_not_available",
    "func:test_force_cpu",
    "func:test_force_gpu",
    "func:test_make_vocab_args",
    "func:test_train_args",
    "func:test_train_can_fine_tune_model_from_archive",
    "func:test_train_model",
    "func:test_train_model_can_instantiate_from_params",
    "func:test_train_model_distributed",
    "func:test_train_model_distributed_with_gradient_accumulation",
    "func:test_train_model_distributed_with_sharded_reader",
    "func:test_train_model_distributed_without_sharded_reader",
    "func:test_train_nograd_regex",
    "func:test_train_number_of_steps",
    "func:test_train_saves_all_keys_in_config",
    "func:test_train_with_test_set",
    "func:test_warn_validation_loader_batches_per_epoch"
  ],
  "trainer_test.py_gpt4_cdc7ca6a.py": [
    "class:FakeDatasetReader",
    "class:FakeModel",
    "class:FakeOnBatchCallback",
    "class:FakeTrainerCallback",
    "class:RecordMetricLearningRateScheduler",
    "class:SecondBackwardCallback",
    "class:SlowDataLoader",
    "class:TestAmpTrainer",
    "class:TestSparseClipGrad",
    "class:TestTrainer",
    "class:TrainerTestBase",
    "class:ZeroGradientsBackwardCallback",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:_read",
    "func:forward",
    "func:on_backward",
    "func:on_batch",
    "func:on_end",
    "func:on_epoch",
    "func:on_start",
    "func:set_target_device",
    "func:setup_method",
    "func:step",
    "func:test_confidence_check_callback",
    "func:test_confidence_check_default",
    "func:test_console_log_callback",
    "func:test_data_loader_lazy_epoch_size_correct",
    "func:test_data_loader_lazy_epoch_size_correct_custom_epoch_size",
    "func:test_metric_only_considered_best_so_far_when_strictly_better_than_those_before_it_decreasing_metric",
    "func:test_metric_only_considered_best_so_far_when_strictly_better_than_those_before_it_increasing_metric",
    "func:test_passing_trainer_multiple_gpus_raises_error",
    "func:test_restored_training_returns_best_epoch_metrics_even_if_no_better_epoch_is_found_after_restoring",
    "func:test_should_stop_early_with_decreasing_metric",
    "func:test_should_stop_early_with_early_stopping_disabled",
    "func:test_should_stop_early_with_flat_lining_metric",
    "func:test_should_stop_early_with_increasing_metric",
    "func:test_should_stop_early_with_invalid_patience",
    "func:test_should_validate_callback",
    "func:test_sparse_clip_grad",
    "func:test_total_loss_is_average_of_batch_loss",
    "func:test_track_epoch_callback",
    "func:test_train_zero_gradients",
    "func:test_trainer_callback_is_called_everywhere",
    "func:test_trainer_can_log_batch_inputs",
    "func:test_trainer_can_log_histograms",
    "func:test_trainer_can_log_learning_rates_tensorboard",
    "func:test_trainer_can_resume_training",
    "func:test_trainer_can_resume_training_for_exponential_moving_average",
    "func:test_trainer_can_resume_with_lr_scheduler",
    "func:test_trainer_can_run",
    "func:test_trainer_can_run_amp",
    "func:test_trainer_can_run_and_resume_with_momentum_scheduler",
    "func:test_trainer_can_run_cuda",
    "func:test_trainer_can_run_exponential_moving_average",
    "func:test_trainer_can_run_gradient_accumulation",
    "func:test_trainer_can_run_with_lr_scheduler",
    "func:test_trainer_raises_on_model_with_no_loss_key",
    "func:test_trainer_respects_epoch_size_equals_total",
    "func:test_trainer_respects_epoch_size_larger_tnan_total",
    "func:test_trainer_respects_epoch_size_smaller_tnan_total",
    "func:test_trainer_respects_keep_serialized_model_every_num_seconds",
    "func:test_trainer_respects_num_serialized_models_to_keep",
    "func:test_trainer_restores_and_makes_same_results",
    "func:test_trainer_saves_and_loads_best_validation_metrics_correctly_1",
    "func:test_trainer_saves_and_loads_best_validation_metrics_correctly_2",
    "func:test_trainer_saves_metrics_every_epoch",
    "func:test_trainer_sends_metric_to_lr_scheduler",
    "func:test_two_backward_callbacks",
    "func:text_to_instance"
  ],
  "training.py_gpt4_79729440.py": [
    "class:EarlyStoppingTrainer",
    "class:ModelWithLoss",
    "class:Speedometer",
    "class:TensorboardLogger",
    "class:TrainState",
    "class:TrainerConfig",
    "func:__call__",
    "func:__getstate__",
    "func:__init__",
    "func:__setstate__",
    "func:_adjust_learning_rate",
    "func:_cleanup",
    "func:_create_checkpoint",
    "func:_determine_convergence",
    "func:_determine_divergence",
    "func:_determine_improvement",
    "func:_evaluate",
    "func:_forward_backward",
    "func:_load_lr_scheduler",
    "func:_load_optimizer_state",
    "func:_load_training_state",
    "func:_save_lr_scheduler",
    "func:_save_optimizer_state",
    "func:_save_params",
    "func:_save_training_state",
    "func:_step",
    "func:_update_best_params",
    "func:_write_and_log_metrics",
    "func:best_lr_scheduler_fname",
    "func:best_optimizer_state_fname",
    "func:best_params_fname",
    "func:cleanup_params_files",
    "func:current_params_fname",
    "func:fit",
    "func:forward",
    "func:load",
    "func:log_metrics",
    "func:metrics_fname",
    "func:safe_custom_metrics_logger",
    "func:save",
    "func:time_elapsed",
    "func:training_state_dirname",
    "func:update_time_elapsed"
  ],
  "transactions.py_gpt4_125a38fe.py": [
    "class:DynamicFeePayloadDecoder",
    "class:DynamicFeeTransaction",
    "class:LondonLegacyTransaction",
    "class:LondonTransactionBuilder",
    "class:LondonTypedTransaction",
    "class:LondonUnsignedLegacyTransaction",
    "class:UnsignedDynamicFeeTransaction",
    "func:_type_byte",
    "func:as_signed_transaction",
    "func:blob_versioned_hashes",
    "func:check_signature_validity",
    "func:decode",
    "func:encode",
    "func:gas_price",
    "func:gas_used_by",
    "func:get_intrinsic_gas",
    "func:get_message_for_signing",
    "func:get_sender",
    "func:hash",
    "func:intrinsic_gas",
    "func:make_receipt",
    "func:max_fee_per_blob_gas",
    "func:new_dynamic_fee_transaction",
    "func:new_unsigned_dynamic_fee_transaction",
    "func:validate"
  ],
  "transactions.py_gpt4_8abeba06.py": [
    "class:BlobPayloadDecoder",
    "class:BlobTransaction",
    "class:CancunLegacyTransaction",
    "class:CancunTransactionBuilder",
    "class:CancunTypedTransaction",
    "class:CancunUnsignedLegacyTransaction",
    "class:UnsignedBlobTransaction",
    "func:_type_byte",
    "func:as_signed_transaction",
    "func:blob_versioned_hashes",
    "func:check_signature_validity",
    "func:decode",
    "func:encode",
    "func:gas_price",
    "func:gas_used_by",
    "func:get_intrinsic_gas",
    "func:get_message_for_signing",
    "func:get_sender",
    "func:hash",
    "func:intrinsic_gas",
    "func:make_receipt",
    "func:max_fee_per_blob_gas",
    "func:new_blob_transaction",
    "func:new_unsigned_blob_transaction",
    "func:validate"
  ],
  "transactions.py_gpt4_e917af4b.py": [
    "class:AccessListPayloadDecoder",
    "class:AccessListTransaction",
    "class:AccountAccesses",
    "class:BerlinLegacyTransaction",
    "class:BerlinTransactionBuilder",
    "class:BerlinUnsignedLegacyTransaction",
    "class:TypedTransaction",
    "class:UnsignedAccessListTransaction",
    "func:__eq__",
    "func:__hash__",
    "func:__init__",
    "func:_calculate_txn_intrinsic_gas_berlin",
    "func:_type_byte",
    "func:access_list",
    "func:as_signed_transaction",
    "func:blob_versioned_hashes",
    "func:chain_id",
    "func:check_signature_validity",
    "func:copy",
    "func:create_unsigned_transaction",
    "func:data",
    "func:decode",
    "func:deserialize",
    "func:encode",
    "func:gas",
    "func:gas_price",
    "func:gas_used_by",
    "func:get_intrinsic_gas",
    "func:get_message_for_signing",
    "func:get_payload_codec",
    "func:get_sender",
    "func:hash",
    "func:intrinsic_gas",
    "func:make_receipt",
    "func:max_fee_per_blob_gas",
    "func:max_fee_per_gas",
    "func:max_priority_fee_per_gas",
    "func:new_access_list_transaction",
    "func:new_transaction",
    "func:new_unsigned_access_list_transaction",
    "func:nonce",
    "func:r",
    "func:s",
    "func:serialize",
    "func:to",
    "func:validate",
    "func:value",
    "func:y_parity"
  ],
  "transformer_embeddings.py_gpt4_ab63089b.py": [
    "class:Embeddings",
    "class:ImageFeatureEmbeddings",
    "class:TransformerEmbeddings",
    "func:__init__",
    "func:_from_config",
    "func:forward"
  ],
  "transformer_embeddings_test.py_gpt4_7e8d35e5.py": [
    "class:OldImageFeatureEmbeddings",
    "class:TextEmbeddings",
    "func:__init__",
    "func:forward",
    "func:get_modules",
    "func:image_embeddings",
    "func:image_params",
    "func:image_params_dict",
    "func:params",
    "func:params_dict",
    "func:test_can_construct_from_params",
    "func:test_can_construct_image_embeddings_from_params",
    "func:test_forward_against_huggingface_output",
    "func:test_forward_runs_with_inputs",
    "func:test_image_embedding_forward_runs_with_inputs",
    "func:test_image_embeddings_sanity",
    "func:test_loading_albert",
    "func:test_loading_from_pretrained_module",
    "func:test_no_token_type_layer",
    "func:test_output_size",
    "func:test_sanity",
    "func:transformer_embeddings"
  ],
  "transformer_layer.py_gpt4_238a1cf9.py": [
    "class:AttentionLayer",
    "class:TransformerLayer",
    "class:TransformerLayerOutput",
    "func:__init__",
    "func:_from_config",
    "func:forward",
    "func:get_output_dim"
  ],
  "transformer_module.py_gpt4_54125978.py": [
    "class:TransformerModule",
    "func:_from_config",
    "func:_get_mapped_state_dict",
    "func:_get_mapping",
    "func:_get_pretrained_state_dict",
    "func:_get_relevant_submodule_state",
    "func:from_pretrained_module"
  ],
  "tree.py_gpt4_18330a9c.py": [
    "class:BaseNode",
    "class:ErrorLeaf",
    "class:ErrorNode",
    "class:Leaf",
    "class:Node",
    "class:NodeOrLeaf",
    "class:TypedLeaf",
    "func:__init__",
    "func:__repr__",
    "func:_format_dump",
    "func:_get_code_for_children",
    "func:binary_search",
    "func:dump",
    "func:end_pos",
    "func:get_code",
    "func:get_first_leaf",
    "func:get_last_leaf",
    "func:get_leaf_for_position",
    "func:get_next_leaf",
    "func:get_next_sibling",
    "func:get_previous_leaf",
    "func:get_previous_sibling",
    "func:get_root_node",
    "func:get_start_pos_of_prefix",
    "func:search_ancestor",
    "func:start_pos"
  ],
  "tuples.py_gpt4_03a2bff8.py": [
    "class:ConsumerMessage",
    "class:FutureMessage",
    "class:Message",
    "class:PendingMessage",
    "class:RecordMetadata",
    "class:TP",
    "class:_ChannelT",
    "class:_ConsumerT",
    "func:_PendingMessage_to_Message",
    "func:__init__",
    "func:__repr__",
    "func:_get_len",
    "func:ack",
    "func:decref",
    "func:from_message",
    "func:incref",
    "func:on_final_ack",
    "func:set_result",
    "func:tp_set_to_map"
  ],
  "type_adapter.py_gpt4_7ba21e97.py": [
    "class:TypeAdapter",
    "func:__init__",
    "func:__repr__",
    "func:_defer_build",
    "func:_fetch_parent_frame",
    "func:_getattr_no_parents",
    "func:_init_core_attrs",
    "func:_model_config",
    "func:_type_has_config",
    "func:dump_json",
    "func:dump_python",
    "func:get_default_value",
    "func:json_schema",
    "func:json_schemas",
    "func:rebuild",
    "func:validate_json",
    "func:validate_python",
    "func:validate_strings"
  ],
  "typecheck_tests.py_gpt4_dd4ca18f.py": [
    "class:ProgressPrinter",
    "func:get_django_repo_object",
    "func:get_unused_ignores",
    "func:is_ignored",
    "func:is_pattern_fits",
    "func:line_dropped",
    "func:replace_with_clickable_location",
    "func:update"
  ],
  "typeshed.py_gpt4_219c0af4.py": [
    "func:_cache_stub_file_map",
    "func:_create_stub_map",
    "func:_get_typeshed_directories",
    "func:_load_from_typeshed",
    "func:_merge_create_stub_map",
    "func:_try_to_load_stub",
    "func:_try_to_load_stub_from_file",
    "func:create_stub_module",
    "func:generate",
    "func:import_module_decorator",
    "func:parse_stub_module",
    "func:try_to_load_stub_cached",
    "func:wrapper"
  ],
  "typing.py_gpt4_fde7d8f3.py": [
    "class:AnyClass",
    "class:Callable",
    "class:CastFunction",
    "class:Generic",
    "class:NewType",
    "class:NewTypeFunction",
    "class:OverloadFunction",
    "class:Protocol",
    "class:ProxyTypingClassValue",
    "class:ProxyTypingValue",
    "class:ProxyWithGenerics",
    "class:Tuple",
    "class:TypeAlias",
    "class:TypedDict",
    "class:TypedDictClass",
    "class:TypingClassWithGenerics",
    "class:TypingModuleFilterWrapper",
    "class:TypingModuleName",
    "class:_TypingClassMixin",
    "func:__init__",
    "func:__repr__",
    "func:_create_instance_with_generics",
    "func:_get_wrapped_value",
    "func:_is_homogenous",
    "func:_remap",
    "func:execute_annotation",
    "func:gather_annotation_classes",
    "func:get_key_values",
    "func:get_metaclasses",
    "func:get_signatures",
    "func:infer",
    "func:infer_type_vars",
    "func:name",
    "func:py__bases__",
    "func:py__call__",
    "func:py__class__",
    "func:py__get__",
    "func:py__getitem__",
    "func:py__iter__",
    "func:py__name__",
    "func:py__simple_getitem__",
    "func:with_generics"
  ],
  "unigram_recall_test.py_gpt4_10b745f1.py": [
    "class:UnigramRecallTest",
    "func:multiple_runs",
    "func:test_distributed_accuracy",
    "func:test_get_metric_on_new_object_works",
    "func:test_multiple_distributed_runs",
    "func:test_sequence_recall",
    "func:test_sequence_recall_accumulates_and_resets_correctly",
    "func:test_sequence_recall_respects_mask"
  ],
  "unit_system.py_gpt4_e74b9d39.py": [
    "class:UnitSystem",
    "func:__init__",
    "func:_deprecated_unit_system",
    "func:_is_valid_unit",
    "func:accumulated_precipitation",
    "func:area",
    "func:as_dict",
    "func:get_converted_unit",
    "func:get_unit_system",
    "func:length",
    "func:pressure",
    "func:temperature",
    "func:volume",
    "func:wind_speed"
  ],
  "unit_tests.py_gpt4_77d66121.py": [
    "class:UnitTestManifestLoader",
    "class:UnitTestParser",
    "func:__init__",
    "func:_build_fixture_raw_code",
    "func:_build_fqn",
    "func:_build_unit_test_config",
    "func:_convert_csv_to_list_of_dicts",
    "func:_get_fixture",
    "func:_get_original_input_node",
    "func:_get_unit_test",
    "func:_load_rows_from_seed",
    "func:_promote_first_non_none_row",
    "func:_validate_and_normalize_expect",
    "func:_validate_and_normalize_given",
    "func:_validate_and_normalize_rows",
    "func:find_tested_model_node",
    "func:get_fixture_file_rows",
    "func:load",
    "func:parse",
    "func:parse_unit_test_case",
    "func:process_models_for_unit_test"
  ],
  "user.py_gpt4_e720dd47.py": [
    "class:User",
    "class:UserStatus",
    "func:__init__",
    "func:__repr__",
    "func:_clear_email_hash",
    "func:_set_email_hash",
    "func:check_credentials",
    "func:count",
    "func:create",
    "func:delete",
    "func:domain",
    "func:find_all",
    "func:find_by_email",
    "func:find_by_id",
    "func:find_by_username",
    "func:from_db",
    "func:from_document",
    "func:from_record",
    "func:get_groups",
    "func:is_active",
    "func:parse",
    "func:reset_password",
    "func:send_confirmation",
    "func:send_password_reset",
    "func:serialize",
    "func:set_email_verified",
    "func:update",
    "func:update_attributes",
    "func:update_last_login",
    "func:verify_hash",
    "func:verify_password"
  ],
  "util.py_gpt4_19495ecf.py": [
    "class:HasBeenWarned",
    "func:create_serialization_dir",
    "func:data_loaders_from_params",
    "func:description_from_metrics",
    "func:enable_gradient_clipping",
    "func:evaluate",
    "func:get_batch_size",
    "func:get_metrics",
    "func:get_train_and_validation_metrics",
    "func:get_valid_tokens_mask",
    "func:make_vocab_from_params",
    "func:move_optimizer_to_cuda",
    "func:ngrams",
    "func:rescale_gradients",
    "func:str_to_time",
    "func:time_to_str"
  ],
  "util.py_gpt4_9004c9d0.py": [
    "class:BlackBaseTestCase",
    "class:FormatFailure",
    "class:TestCaseArgs",
    "func:_assert_format_equal",
    "func:_assert_format_inner",
    "func:_parse_minimum_version",
    "func:all_data_cases",
    "func:assertFormatEqual",
    "func:assert_format",
    "func:change_directory",
    "func:dump_to_stderr",
    "func:get_base_dir",
    "func:get_case_path",
    "func:get_flags_parser",
    "func:parse_mode",
    "func:read_data",
    "func:read_data_from_file",
    "func:read_data_with_mode",
    "func:read_jupyter_notebook",
    "func:read_jupyter_notebook_from_file"
  ],
  "util.py_gpt4_ef82b226.py": [
    "class:_IncompatibleKeys",
    "func:__repr__",
    "func:_check_incompatible_keys",
    "func:_collect_state_dict",
    "func:_get_combination",
    "func:_get_combination_and_multiply",
    "func:_get_combination_dim",
    "func:_rindex",
    "func:add_positional_features",
    "func:add_sentence_boundary_token_ids",
    "func:batch_tensor_dicts",
    "func:batched_index_select",
    "func:batched_span_select",
    "func:bucket_values",
    "func:clamp_tensor",
    "func:clone",
    "func:combine_initial_dims",
    "func:combine_tensors",
    "func:combine_tensors_and_multiply",
    "func:device_mapping",
    "func:dist_reduce",
    "func:dist_reduce_sum",
    "func:distributed_device",
    "func:extend_layer",
    "func:find_embedding_layer",
    "func:find_text_field_embedder",
    "func:flatten_and_batch_shift_indices",
    "func:flattened_index_select",
    "func:get_combined_dim",
    "func:get_device_of",
    "func:get_dropout_mask",
    "func:get_final_encoder_states",
    "func:get_lengths_from_binary_sequence_mask",
    "func:get_mask_from_sequence_lengths",
    "func:get_range_vector",
    "func:get_text_field_mask",
    "func:get_token_ids_from_text_field_tensors",
    "func:get_token_offsets_from_text_field_inputs",
    "func:info_value_of_dtype",
    "func:inner_device_mapping",
    "func:inspect_parameters",
    "func:load_state_dict_distributed",
    "func:logsumexp",
    "func:masked_flip",
    "func:masked_index_fill",
    "func:masked_index_replace",
    "func:masked_log_softmax",
    "func:masked_max",
    "func:masked_mean",
    "func:masked_softmax",
    "func:masked_topk",
    "func:max_value_of_dtype",
    "func:min_value_of_dtype",
    "func:move_to_device",
    "func:read_state_dict",
    "func:remove_sentence_boundaries",
    "func:replace_masked_values",
    "func:sequence_cross_entropy_with_logits",
    "func:sort_batch_by_length",
    "func:tensors_equal",
    "func:tiny_value_of_dtype",
    "func:uncombine_initial_dims",
    "func:update_key_list",
    "func:viterbi_decode",
    "func:weighted_sum"
  ],
  "util_test.py_gpt4_ca92da89.py": [
    "class:A",
    "class:DistributedFixtureModel",
    "class:DistributedFixtureSubmodule",
    "class:FakeTensor",
    "class:ShardedDistributedFixtureSubmodule",
    "class:TestNnUtil",
    "func:__init__",
    "func:_brute_decode",
    "func:_dist_load_ok",
    "func:_dist_load_with_errors",
    "func:assert_array_equal_with_mask",
    "func:forward",
    "func:get_original_module",
    "func:global_distributed_func",
    "func:test_add_positional_features",
    "func:test_add_sentence_boundary_token_ids_handles_2D_input",
    "func:test_add_sentence_boundary_token_ids_handles_3D_input",
    "func:test_batched_index_select",
    "func:test_batched_span_select",
    "func:test_bucket_values",
    "func:test_clamp_tensor",
    "func:test_combine_initial_dims",
    "func:test_combine_tensors_and_multiply",
    "func:test_combine_tensors_and_multiply_with_batch_size_one",
    "func:test_combine_tensors_and_multiply_with_batch_size_one_and_seq_len_one",
    "func:test_combine_tensors_and_multiply_with_same_batch_size_and_embedding_dim",
    "func:test_dist_reduce_sum",
    "func:test_extend_layer",
    "func:test_flatten_and_batch_shift_indices",
    "func:test_flattened_index_select",
    "func:test_get_final_encoder_states",
    "func:test_get_mask_from_sequence_lengths",
    "func:test_get_sequence_lengths_converts_to_long_tensor_and_avoids_variable_overflow",
    "func:test_get_sequence_lengths_from_binary_mask",
    "func:test_get_text_field_mask_returns_a_correct_mask",
    "func:test_get_text_field_mask_returns_a_correct_mask_character_only_input",
    "func:test_get_text_field_mask_returns_a_correct_mask_character_only_input_custom_padding_id",
    "func:test_get_text_field_mask_returns_a_correct_mask_custom_padding_id",
    "func:test_get_text_field_mask_returns_a_correct_mask_list_field",
    "func:test_get_text_field_mask_returns_mask_key",
    "func:test_get_token_ids_from_text_field_tensors",
    "func:test_info_value_of_dtype",
    "func:test_inspect_model_parameters",
    "func:test_load_state_dict_distributed",
    "func:test_logsumexp",
    "func:test_masked_flip",
    "func:test_masked_index_fill",
    "func:test_masked_index_replace",
    "func:test_masked_log_softmax_masked",
    "func:test_masked_max",
    "func:test_masked_mean",
    "func:test_masked_softmax_masked",
    "func:test_masked_softmax_memory_efficient_masked",
    "func:test_masked_softmax_no_mask",
    "func:test_masked_topk_selects_top_scored_items_and_respects_masking",
    "func:test_masked_topk_selects_top_scored_items_and_respects_masking_different_num_items",
    "func:test_masked_topk_works_for_completely_masked_rows",
    "func:test_masked_topk_works_for_multiple_dimensions",
    "func:test_masked_topk_works_for_row_with_no_items_requested",
    "func:test_move_to_device",
    "func:test_remove_sentence_boundaries",
    "func:test_replace_masked_values_replaces_masked_values_with_finite_value",
    "func:test_sequence_cross_entropy_with_logits_alpha_float_correctly",
    "func:test_sequence_cross_entropy_with_logits_alpha_list_correctly",
    "func:test_sequence_cross_entropy_with_logits_alpha_single_float_correctly",
    "func:test_sequence_cross_entropy_with_logits_averages_batch_correctly",
    "func:test_sequence_cross_entropy_with_logits_averages_token_correctly",
    "func:test_sequence_cross_entropy_with_logits_gamma_correctly",
    "func:test_sequence_cross_entropy_with_logits_masks_loss_correctly",
    "func:test_sequence_cross_entropy_with_logits_smooths_labels_correctly",
    "func:test_sort_tensor_by_length",
    "func:test_tensors_equal",
    "func:test_uncombine_initial_dims",
    "func:test_viterbi_decode",
    "func:test_viterbi_decode_top_k",
    "func:test_weighted_sum_handles_3d_attention_with_3d_matrix",
    "func:test_weighted_sum_handles_higher_order_input",
    "func:test_weighted_sum_handles_uneven_higher_order_input",
    "func:test_weighted_sum_works_on_simple_input",
    "func:to"
  ],
  "utils.py_gpt4_4ba154ec.py": [
    "func:cleanup_report_schedule",
    "func:create_dashboard_report",
    "func:create_report_notification",
    "func:insert_report_schedule",
    "func:reset_key_values"
  ],
  "utils.py_gpt4_e1caf7be.py": [
    "func:_get_openapi_operation_parameters",
    "func:generate_operation_id",
    "func:generate_operation_summary",
    "func:get_fields_from_routes",
    "func:get_openapi",
    "func:get_openapi_operation_metadata",
    "func:get_openapi_operation_request_body",
    "func:get_openapi_path",
    "func:get_openapi_security_definitions"
  ],
  "utils.py_gpt4_e41edd61.py": [
    "class:AbortedError",
    "class:ChaliceZipFile",
    "class:OSUtils",
    "class:PipeReader",
    "class:TimestampConverter",
    "class:UI",
    "func:__init__",
    "func:_create_zipinfo",
    "func:_relative_timestamp_to_datetime",
    "func:_validate_safe_extract",
    "func:_validate_single_tar_member",
    "func:abspath",
    "func:basename",
    "func:confirm",
    "func:copy",
    "func:copytree",
    "func:create_zip_file",
    "func:directory_exists",
    "func:dirname",
    "func:environ",
    "func:error",
    "func:extract_tarfile",
    "func:extract_zipfile",
    "func:file_exists",
    "func:get_directory_contents",
    "func:get_file_contents",
    "func:getting_started_prompt",
    "func:joinpath",
    "func:makedirs",
    "func:move",
    "func:mtime",
    "func:normalized_filename",
    "func:open",
    "func:open_zip",
    "func:parse_iso8601_timestamp",
    "func:pipe",
    "func:popen",
    "func:read",
    "func:record_deployed_values",
    "func:remove_file",
    "func:remove_stage_from_deployed_values",
    "func:rmtree",
    "func:serialize_to_json",
    "func:set_file_contents",
    "func:stat",
    "func:tempdir",
    "func:timestamp_to_datetime",
    "func:to_cfn_resource_name",
    "func:walk",
    "func:write"
  ],
  "vagrant.py_gpt4_3baaf679.py": [
    "class:VagrantBase",
    "class:VagrantIPAddress",
    "class:VagrantIPAddressGlobal",
    "class:VagrantInit",
    "class:VagrantMachineGlobalInfo",
    "class:VagrantReload",
    "class:VagrantSSH",
    "class:VagrantStartMachine",
    "class:VagrantStatus",
    "class:VagrantUp",
    "func:__init__",
    "func:run",
    "func:wait_answer"
  ],
  "validate.py_gpt4_93e898f1.py": [
    "class:ValidationException",
    "func:friendly",
    "func:indent",
    "func:multi",
    "func:validate",
    "func:validate_ex",
    "func:vpformat"
  ],
  "validator.py_gpt4_af420d1c.py": [
    "func:_join_split_log",
    "func:clean_logs",
    "func:fold_iter",
    "func:get_perturbed_columns",
    "func:kwdissoc",
    "func:parallel_validator",
    "func:parallel_validator_iteration",
    "func:validator",
    "func:validator_iteration"
  ],
  "value.py_gpt4_6a3b30ed.py": [
    "class:CheckAttribute",
    "class:CompiledModule",
    "class:CompiledName",
    "class:CompiledValue",
    "class:CompiledValueFilter",
    "class:CompiledValueName",
    "class:EmptyCompiledName",
    "class:SignatureParamName",
    "class:UnresolvableParamName",
    "func:__call__",
    "func:__get__",
    "func:__init__",
    "func:__repr__",
    "func:_as_context",
    "func:_create_name",
    "func:_ensure_one_filter",
    "func:_execute_function",
    "func:_get",
    "func:_get_cached_name",
    "func:_get_qualified_names",
    "func:_normalize_create_args",
    "func:_parse_function_doc",
    "func:api_type",
    "func:array_type",
    "func:change_options",
    "func:create_cached_compiled_value",
    "func:create_from_access_path",
    "func:create_from_name",
    "func:execute_annotation",
    "func:execute_operation",
    "func:get",
    "func:get_defining_qualified_value",
    "func:get_filters",
    "func:get_key_values",
    "func:get_kind",
    "func:get_metaclasses",
    "func:get_param_names",
    "func:get_qualified_names",
    "func:get_safe_value",
    "func:get_signatures",
    "func:get_type_hint",
    "func:infer",
    "func:infer_compiled_value",
    "func:is_class",
    "func:is_compiled",
    "func:is_function",
    "func:is_instance",
    "func:is_module",
    "func:is_package",
    "func:is_stub",
    "func:name",
    "func:negate",
    "func:py__bases__",
    "func:py__bool__",
    "func:py__call__",
    "func:py__class__",
    "func:py__doc__",
    "func:py__file__",
    "func:py__getitem__",
    "func:py__iter__",
    "func:py__mro__",
    "func:py__name__",
    "func:py__path__",
    "func:py__simple_getitem__",
    "func:string_name",
    "func:string_names",
    "func:to_string",
    "func:values",
    "func:wrapper"
  ],
  "violations.py_gpt4_efcd158e.py": [
    "class:AttrDict",
    "class:Error",
    "class:ErrorGroup",
    "class:ErrorRegistry",
    "func:__getattr__",
    "func:__init__",
    "func:__lt__",
    "func:__repr__",
    "func:__str__",
    "func:create_error",
    "func:create_group",
    "func:get_error_codes",
    "func:lines",
    "func:message",
    "func:set_context",
    "func:to_rst"
  ],
  "vocab.py_gpt4_aa60a35d.py": [
    "func:_get_sorted_source_vocab_fnames",
    "func:_get_sorted_target_vocab_fnames",
    "func:are_identical",
    "func:build_from_paths",
    "func:build_pruned_vocab",
    "func:build_vocab",
    "func:count_tokens",
    "func:count_tokens_for_path",
    "func:get_ordered_tokens_from_vocab",
    "func:is_valid_vocab",
    "func:load_or_create_vocab",
    "func:load_or_create_vocabs",
    "func:load_source_vocabs",
    "func:load_target_vocabs",
    "func:main",
    "func:prepare_vocab",
    "func:reverse_vocab",
    "func:save_source_vocabs",
    "func:save_target_vocabs",
    "func:vocab_from_json",
    "func:vocab_to_json"
  ],
  "vocabulary.py_gpt4_31e52c26.py": [
    "class:Vocabulary",
    "class:_IndexToTokenDefaultDict",
    "class:_NamespaceDependentDefaultDict",
    "class:_TokenToIndexDefaultDict",
    "func:__eq__",
    "func:__getstate__",
    "func:__init__",
    "func:__missing__",
    "func:__repr__",
    "func:__setstate__",
    "func:__str__",
    "func:_extend",
    "func:_read_pretrained_tokens",
    "func:add_non_padded_namespaces",
    "func:add_token_to_namespace",
    "func:add_tokens_to_namespace",
    "func:add_transformer_vocab",
    "func:empty",
    "func:extend_from_instances",
    "func:extend_from_vocab",
    "func:from_files",
    "func:from_files_and_instances",
    "func:from_instances",
    "func:from_pretrained_transformer",
    "func:from_pretrained_transformer_and_instances",
    "func:get_index_to_token_vocabulary",
    "func:get_namespaces",
    "func:get_token_from_index",
    "func:get_token_index",
    "func:get_token_to_index_vocabulary",
    "func:get_vocab_size",
    "func:is_padded",
    "func:print_statistics",
    "func:save_to_files",
    "func:set_from_file"
  ],
  "wandb.py_gpt4_0759ce02.py": [
    "class:WandBCallback",
    "func:__init__",
    "func:_log",
    "func:close",
    "func:load_state_dict",
    "func:log_scalars",
    "func:log_tensors",
    "func:on_start",
    "func:state_dict"
  ],
  "weather.py_gpt4_206013a4.py": [
    "class:DemoWeather",
    "func:__init__",
    "func:condition",
    "func:humidity",
    "func:native_pressure",
    "func:native_pressure_unit",
    "func:native_temperature",
    "func:native_temperature_unit",
    "func:native_wind_speed",
    "func:native_wind_speed_unit"
  ],
  "weather.py_gpt4_4e219085.py": [
    "class:DemoWeather",
    "func:__init__",
    "func:condition",
    "func:humidity",
    "func:native_pressure",
    "func:native_pressure_unit",
    "func:native_temperature",
    "func:native_temperature_unit",
    "func:native_wind_speed",
    "func:native_wind_speed_unit"
  ],
  "weather.py_gpt4_80b5c19e.py": [
    "class:TomorrowioWeatherEntity",
    "func:__init__",
    "func:_async_forecast_daily",
    "func:_async_forecast_hourly",
    "func:_calculate_unique_id",
    "func:_forecast",
    "func:_forecast_dict",
    "func:_translate_condition",
    "func:condition",
    "func:humidity",
    "func:native_pressure",
    "func:native_temperature",
    "func:native_visibility",
    "func:native_wind_speed",
    "func:ozone",
    "func:wind_bearing"
  ],
  "web.py_gpt4_5a5f7fa7.py": [
    "class:Application",
    "class:ErrorHandler",
    "class:FallbackHandler",
    "class:Finish",
    "class:GZipContentEncoding",
    "class:HTTPError",
    "class:MissingArgumentError",
    "class:OutputTransform",
    "class:RedirectHandler",
    "class:RequestHandler",
    "class:StaticFileHandler",
    "class:TemplateModule",
    "class:UIModule",
    "class:_ApplicationRouter",
    "class:_ArgDefaultMarker",
    "class:_HandlerDelegate",
    "class:_UIModuleNamespace",
    "class:_linkify",
    "class:_xsrf_form_html",
    "func:__call__",
    "func:__getattr__",
    "func:__getitem__",
    "func:__init__",
    "func:__str__",
    "func:_break_cycles",
    "func:_clear_representation_headers",
    "func:_compressible_type",
    "func:_consume_field",
    "func:_convert_header_value",
    "func:_create_signature_v1",
    "func:_create_signature_v2",
    "func:_decode_fields_v2",
    "func:_decode_signed_value_v1",
    "func:_decode_signed_value_v2",
    "func:_decode_xsrf_token",
    "func:_get_argument",
    "func:_get_arguments",
    "func:_get_cached_version",
    "func:_get_raw_xsrf_token",
    "func:_get_resources",
    "func:_get_version",
    "func:_handle_request_exception",
    "func:_has_stream_request_body",
    "func:_initialize",
    "func:_load_ui_methods",
    "func:_load_ui_modules",
    "func:_log",
    "func:_request_summary",
    "func:_stat",
    "func:_ui_method",
    "func:_ui_module",
    "func:_unimplemented_method",
    "func:add_handlers",
    "func:add_header",
    "func:add_transform",
    "func:addslash",
    "func:authenticated",
    "func:check_etag_header",
    "func:check_xsrf_cookie",
    "func:clear",
    "func:clear_all_cookies",
    "func:clear_cookie",
    "func:clear_header",
    "func:compute_etag",
    "func:cookies",
    "func:create_signed_value",
    "func:create_template_loader",
    "func:css_files",
    "func:current_user",
    "func:data_received",
    "func:decode_argument",
    "func:decode_signed_value",
    "func:detach",
    "func:embedded_css",
    "func:embedded_javascript",
    "func:execute",
    "func:find_handler",
    "func:finish",
    "func:flush",
    "func:format_field",
    "func:get",
    "func:get_absolute_path",
    "func:get_argument",
    "func:get_arguments",
    "func:get_body_argument",
    "func:get_body_arguments",
    "func:get_browser_locale",
    "func:get_cache_time",
    "func:get_content",
    "func:get_content_size",
    "func:get_content_type",
    "func:get_content_version",
    "func:get_cookie",
    "func:get_current_user",
    "func:get_handler_delegate",
    "func:get_login_url",
    "func:get_modified_time",
    "func:get_query_argument",
    "func:get_query_arguments",
    "func:get_signature_key_version",
    "func:get_signed_cookie",
    "func:get_signed_cookie_key_version",
    "func:get_status",
    "func:get_target_delegate",
    "func:get_template_namespace",
    "func:get_template_path",
    "func:get_user_locale",
    "func:get_version",
    "func:head",
    "func:headers_received",
    "func:html_body",
    "func:html_head",
    "func:initialize",
    "func:is_absolute",
    "func:javascript_files",
    "func:listen",
    "func:locale",
    "func:log_exception",
    "func:log_request",
    "func:make_static_url",
    "func:on_connection_close",
    "func:on_finish",
    "func:parse_url_path",
    "func:prepare",
    "func:process_rule",
    "func:redirect",
    "func:removeslash",
    "func:render",
    "func:render_embed_css",
    "func:render_embed_js",
    "func:render_linked_css",
    "func:render_linked_js",
    "func:render_string",
    "func:require_setting",
    "func:reset",
    "func:reverse_url",
    "func:send_error",
    "func:set_cookie",
    "func:set_default_headers",
    "func:set_etag_header",
    "func:set_extra_headers",
    "func:set_header",
    "func:set_headers",
    "func:set_resources",
    "func:set_signed_cookie",
    "func:set_status",
    "func:settings",
    "func:should_return_304",
    "func:static_url",
    "func:stream_request_body",
    "func:transform_chunk",
    "func:transform_first_chunk",
    "func:val",
    "func:validate_absolute_path",
    "func:wrapper",
    "func:write",
    "func:write_error",
    "func:xsrf_form_html",
    "func:xsrf_token"
  ],
  "web_app.py_gpt4_64311f2a.py": [
    "class:Application",
    "class:CleanupContext",
    "class:CleanupError",
    "func:__bool__",
    "func:__call__",
    "func:__delitem__",
    "func:__eq__",
    "func:__getitem__",
    "func:__hash__",
    "func:__init__",
    "func:__init_subclass__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:__setitem__",
    "func:_add_subapp",
    "func:_build_middlewares",
    "func:_check_frozen",
    "func:_prepare_middleware",
    "func:_reg_subapp_signals",
    "func:_set_loop",
    "func:add_domain",
    "func:add_routes",
    "func:add_subapp",
    "func:cleanup_ctx",
    "func:debug",
    "func:exceptions",
    "func:freeze",
    "func:frozen",
    "func:get",
    "func:middlewares",
    "func:on_cleanup",
    "func:on_response_prepare",
    "func:on_shutdown",
    "func:on_startup",
    "func:pre_freeze",
    "func:pre_frozen",
    "func:reg_handler",
    "func:router"
  ],
  "web_exceptions.py_gpt4_472a69e4.py": [
    "class:HTTPAccepted",
    "class:HTTPBadGateway",
    "class:HTTPBadRequest",
    "class:HTTPClientError",
    "class:HTTPConflict",
    "class:HTTPCreated",
    "class:HTTPError",
    "class:HTTPException",
    "class:HTTPExpectationFailed",
    "class:HTTPFailedDependency",
    "class:HTTPForbidden",
    "class:HTTPFound",
    "class:HTTPGatewayTimeout",
    "class:HTTPGone",
    "class:HTTPInsufficientStorage",
    "class:HTTPInternalServerError",
    "class:HTTPLengthRequired",
    "class:HTTPMethodNotAllowed",
    "class:HTTPMisdirectedRequest",
    "class:HTTPMove",
    "class:HTTPMovedPermanently",
    "class:HTTPMultipleChoices",
    "class:HTTPNetworkAuthenticationRequired",
    "class:HTTPNoContent",
    "class:HTTPNonAuthoritativeInformation",
    "class:HTTPNotAcceptable",
    "class:HTTPNotExtended",
    "class:HTTPNotFound",
    "class:HTTPNotImplemented",
    "class:HTTPNotModified",
    "class:HTTPOk",
    "class:HTTPPartialContent",
    "class:HTTPPaymentRequired",
    "class:HTTPPermanentRedirect",
    "class:HTTPPreconditionFailed",
    "class:HTTPPreconditionRequired",
    "class:HTTPProxyAuthenticationRequired",
    "class:HTTPRedirection",
    "class:HTTPRequestEntityTooLarge",
    "class:HTTPRequestHeaderFieldsTooLarge",
    "class:HTTPRequestRangeNotSatisfiable",
    "class:HTTPRequestTimeout",
    "class:HTTPRequestURITooLong",
    "class:HTTPResetContent",
    "class:HTTPSeeOther",
    "class:HTTPServerError",
    "class:HTTPServiceUnavailable",
    "class:HTTPSuccessful",
    "class:HTTPTemporaryRedirect",
    "class:HTTPTooManyRequests",
    "class:HTTPUnauthorized",
    "class:HTTPUnavailableForLegalReasons",
    "class:HTTPUnprocessableEntity",
    "class:HTTPUnsupportedMediaType",
    "class:HTTPUpgradeRequired",
    "class:HTTPUseProxy",
    "class:HTTPVariantAlsoNegotiates",
    "class:HTTPVersionNotSupported",
    "class:NotAppKeyWarning",
    "func:__bool__",
    "func:__getnewargs__",
    "func:__init__",
    "func:__repr__",
    "func:__str__",
    "func:_initialize_default_reason",
    "func:allowed_methods",
    "func:headers",
    "func:link",
    "func:location",
    "func:method",
    "func:reason",
    "func:status",
    "func:text"
  ],
  "web_fileresponse.py_gpt4_f1957c13.py": [
    "class:FileResponse",
    "class:_FileResponseResult",
    "func:__init__",
    "func:_etag_match",
    "func:_get_file_path_stat_encoding",
    "func:_make_response",
    "func:_seek_and_read"
  ],
  "web_protocol.py_gpt4_4cc42b10.py": [
    "class:AccessLoggerWrapper",
    "class:PayloadAccessError",
    "class:RequestHandler",
    "class:RequestPayloadError",
    "class:_ErrInfo",
    "func:__init__",
    "func:__repr__",
    "func:_make_error_handler",
    "func:_process_keepalive",
    "func:close",
    "func:connection_lost",
    "func:connection_made",
    "func:data_received",
    "func:enabled",
    "func:eof_received",
    "func:force_close",
    "func:handle_error",
    "func:keep_alive",
    "func:keepalive_timeout",
    "func:log_debug",
    "func:log_exception",
    "func:set_parser"
  ],
  "web_request.py_gpt4_90f82707.py": [
    "class:BaseRequest",
    "class:FileField",
    "class:Request",
    "func:__bool__",
    "func:__delitem__",
    "func:__eq__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:__setitem__",
    "func:_cancel",
    "func:_etag_values",
    "func:_finish",
    "func:_if_match_or_none_impl",
    "func:app",
    "func:body_exists",
    "func:can_read_body",
    "func:client_max_size",
    "func:clone",
    "func:config_dict",
    "func:content",
    "func:cookies",
    "func:forwarded",
    "func:get_extra_info",
    "func:headers",
    "func:host",
    "func:http_range",
    "func:if_match",
    "func:if_modified_since",
    "func:if_none_match",
    "func:if_range",
    "func:if_unmodified_since",
    "func:keep_alive",
    "func:match_info",
    "func:method",
    "func:path",
    "func:path_qs",
    "func:protocol",
    "func:query",
    "func:query_string",
    "func:raw_headers",
    "func:raw_path",
    "func:rel_url",
    "func:remote",
    "func:scheme",
    "func:secure",
    "func:task",
    "func:transport",
    "func:url",
    "func:version",
    "func:writer"
  ],
  "web_response.py_gpt4_8696927a.py": [
    "class:ContentCoding",
    "class:Response",
    "class:StreamResponse",
    "func:__bool__",
    "func:__delitem__",
    "func:__eq__",
    "func:__getitem__",
    "func:__hash__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:__setitem__",
    "func:_generate_content_type_header",
    "func:_set_status",
    "func:body",
    "func:body_length",
    "func:charset",
    "func:chunked",
    "func:compression",
    "func:content_length",
    "func:content_type",
    "func:enable_chunked_encoding",
    "func:enable_compression",
    "func:etag",
    "func:force_close",
    "func:headers",
    "func:json_response",
    "func:keep_alive",
    "func:last_modified",
    "func:prepared",
    "func:reason",
    "func:set_status",
    "func:status",
    "func:task",
    "func:text"
  ],
  "web_routedef.py_gpt4_dfa030b5.py": [
    "class:AbstractRouteDef",
    "class:RouteDef",
    "class:RouteTableDef",
    "class:StaticDef",
    "func:__contains__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:delete",
    "func:get",
    "func:head",
    "func:inner",
    "func:options",
    "func:patch",
    "func:post",
    "func:put",
    "func:register",
    "func:route",
    "func:static",
    "func:view"
  ],
  "web_runner.py_gpt4_51d64d7d.py": [
    "class:AppRunner",
    "class:BaseRunner",
    "class:BaseSite",
    "class:GracefulExit",
    "class:NamedPipeSite",
    "class:ServerRunner",
    "class:SockSite",
    "class:TCPSite",
    "class:UnixSite",
    "func:__init__",
    "func:_check_site",
    "func:_make_request",
    "func:_raise_graceful_exit",
    "func:_reg_site",
    "func:_unreg_site",
    "func:addresses",
    "func:app",
    "func:name",
    "func:server",
    "func:sites"
  ],
  "web_urldispatcher.py_gpt4_639291e3.py": [
    "class:AbstractResource",
    "class:AbstractRoute",
    "class:AbstractRuleMatching",
    "class:Domain",
    "class:DynamicResource",
    "class:MaskDomain",
    "class:MatchInfoError",
    "class:MatchedSubAppResource",
    "class:PlainResource",
    "class:PrefixResource",
    "class:PrefixedSubAppResource",
    "class:Resource",
    "class:ResourceRoute",
    "class:ResourcesView",
    "class:RoutesView",
    "class:StaticResource",
    "class:SystemRoute",
    "class:UrlDispatcher",
    "class:UrlMappingMatchInfo",
    "class:View",
    "class:_InfoDict",
    "func:__await__",
    "func:__contains__",
    "func:__getitem__",
    "func:__init__",
    "func:__iter__",
    "func:__len__",
    "func:__repr__",
    "func:_add_prefix_to_resources",
    "func:_directory_as_html",
    "func:_get_file_hash",
    "func:_get_resource_index_key",
    "func:_match",
    "func:_quote_path",
    "func:_raise_allowed_methods",
    "func:_requote_path",
    "func:_resolve_path_to_response",
    "func:_unquote_path_safe",
    "func:add_app",
    "func:add_delete",
    "func:add_get",
    "func:add_head",
    "func:add_options",
    "func:add_patch",
    "func:add_post",
    "func:add_prefix",
    "func:add_put",
    "func:add_resource",
    "func:add_route",
    "func:add_routes",
    "func:add_static",
    "func:add_view",
    "func:apps",
    "func:canonical",
    "func:current_app",
    "func:expect_handler",
    "func:freeze",
    "func:get_info",
    "func:handler",
    "func:http_exception",
    "func:index_resource",
    "func:match_domain",
    "func:method",
    "func:name",
    "func:named_resources",
    "func:raw_match",
    "func:reason",
    "func:register_resource",
    "func:register_route",
    "func:resource",
    "func:resources",
    "func:route",
    "func:routes",
    "func:set_options_route",
    "func:status",
    "func:unindex_resource",
    "func:url_for",
    "func:validation"
  ],
  "web_ws.py_gpt4_78009767.py": [
    "class:WebSocketReady",
    "class:WebSocketResponse",
    "func:__aiter__",
    "func:__bool__",
    "func:__init__",
    "func:_cancel",
    "func:_cancel_heartbeat",
    "func:_cancel_pong_response_cb",
    "func:_close_transport",
    "func:_handle_ping_pong_exception",
    "func:_handshake",
    "func:_ping_task_done",
    "func:_pong_not_received",
    "func:_post_start",
    "func:_pre_start",
    "func:_reset_heartbeat",
    "func:_send_heartbeat",
    "func:_set_closed",
    "func:_set_closing",
    "func:_set_code_close_transport",
    "func:can_prepare",
    "func:close_code",
    "func:closed",
    "func:compress",
    "func:exception",
    "func:get_extra_info",
    "func:ws_protocol"
  ],
  "worker.py_gpt4_28c15399.py": [
    "class:Worker",
    "func:__init__",
    "func:_disable_spinner_if_level_below_WARN",
    "func:_flag_as_shutdown_by_signal",
    "func:_iter_consecutive_numbers",
    "func:_on_shutdown_immediately",
    "func:_on_sigint",
    "func:_on_sigterm",
    "func:_on_startup_end_spinner",
    "func:_partition_set_logtable",
    "func:_proc_ident",
    "func:_proc_web_ident",
    "func:_repr_partition_set",
    "func:_setproctitle",
    "func:_setup_spinner_handler",
    "func:autodiscover",
    "func:change_workdir",
    "func:format_log_arguments",
    "func:on_init_dependencies",
    "func:on_setup_root_logger",
    "func:on_worker_shutdown",
    "func:setproctitle"
  ],
  "xml.py_gpt4_3e69baff.py": [
    "class:EtreeXMLFormatter",
    "class:LxmlXMLFormatter",
    "class:_BaseXMLFormatter",
    "func:__init__",
    "func:_build_attribs",
    "func:_build_elems",
    "func:_build_tree",
    "func:_convert_empty_str_key",
    "func:_get_flat_col_name",
    "func:_get_prefix_uri",
    "func:_handle_indexes",
    "func:_other_namespaces",
    "func:_prettify_tree",
    "func:_process_dataframe",
    "func:_sub_element_cls",
    "func:_transform_doc",
    "func:_validate_columns",
    "func:_validate_encoding",
    "func:write_output"
  ],
  "xml.py_gpt4_792d4f4f.py": [
    "class:_EtreeFrameParser",
    "class:_LxmlFrameParser",
    "class:_XMLFrameParser",
    "func:__init__",
    "func:_data_to_frame",
    "func:_iterparse_nodes",
    "func:_parse",
    "func:_parse_doc",
    "func:_parse_nodes",
    "func:_transform_doc",
    "func:_validate_names",
    "func:_validate_path",
    "func:get_data_from_filepath",
    "func:parse_data",
    "func:preprocess_data",
    "func:read_xml"
  ]
}