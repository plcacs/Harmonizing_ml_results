{
    "rouge_test.py_o1_mini_057140f4.py": {
        "test_distributed_rouge": {
            "return": "None"
        }
    },
    "file_name.py_o1_mini_3fa33654.py": {
        "_add_strings": {
            "nodes": "Iterator[tree.Node]"
        },
        "_add_os_path_join": {
            "return": "Optional[str]"
        }
    },
    "test_layers.py_o1_mini_2c94b4d9.py": {
        "test_positional_embeddings": {
            "return": "None"
        }
    },
    "transformer_embeddings_test.py_o1_mini_7e8d35e5.py": {},
    "test_info.py_o1_mini_0c6b742d.py": {
        "test_info_smoke_test": {
            "request": "pytest.FixtureRequest"
        }
    },
    "variables.py_o1_mini_a4df8a65.py": {
        "privatekey_seed": {
            "request": "pytest.FixtureRequest"
        },
        "blockchain_type": {
            "request": "pytest.FixtureRequest"
        },
        "blockchain_key_seed": {
            "request": "pytest.FixtureRequest"
        },
        "port_generator": {
            "request": "pytest.FixtureRequest"
        },
        "logs_storage": {
            "request": "pytest.FixtureRequest"
        }
    },
    "shard_block.py_o1_mini_19f36678.py": {
        "sign_shard_block": {
            "beacon_state": "'BeaconState'",
            "block": "'SignedShardBlock'",
            "spec": "'Spec'"
        },
        "build_shard_block": {
            "shard_parent_state": "Optional['ShardState']",
            "beacon_state": "'BeaconState'",
            "spec": "'Spec'",
            "return": "'SignedShardBlock'"
        },
        "get_shard_transitions": {
            "spec": "'Spec'",
            "return": "List['ShardTransition']",
            "parent_beacon_state": "'BeaconState'",
            "shard_block_dict": "Dict[int, List['SignedShardBlock']]"
        },
        "get_committee_index_of_shard": {
            "spec": "'Spec'",
            "state": "'BeaconState'"
        },
        "get_sample_shard_block_body": {
            "spec": "'Spec'"
        }
    },
    "entity.py_o1_mini_a795742b.py": {
        "extra_state_attributes": {
            "return": "dict[str, Any]"
        }
    },
    "celery_tests.py_o1_mini_566861b3.py": {
        "quote_f": {
            "return": "Optional[str]"
        },
        "setup_sqllab": {
            "return": "None"
        }
    },
    "conftest.py_o1_mini_48227454.py": {
        "mock_setup_entry": {
            "return": "Generator[AsyncMock, None, None]"
        }
    },
    "join_merge.py_o1_mini_26247bf6.py": {
        "time_join_non_unique_equal": {
            "return": "None"
        },
        "setup": {
            "return": "None"
        }
    },
    "conftest.py_o1_mini_0958eae7.py": {
        "get_multizone_status_mock": {
            "return": "MagicMock"
        }
    },
    "nodeiterator.py_o1_mini_5b1db7d4.py": {
        "magic": {
            "return": "str"
        }
    },
    "funcdef_return_type_trailing_comma.py_o1_mini_9d900532.py": {
        "SimplePyFn": {
            "func_input": "Buffer[Int32, 2]",
            "return": "tuple[Buffer[UInt8, 2], Buffer[UInt8, 2]]",
            "float_arg": "Scalar[Float32]",
            "context": "hl.GeneratorContext",
            "buffer_input": "Buffer[UInt8, 2]"
        },
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa": {
            "return": "cccccccccccccccccccccccccccccc"
        },
        "aaaaaaaaaaaaaaaaa": {
            "return": "list[Ccccccccccccccccccccccccccccccccccccccccccccccccccc, Dddddd]"
        },
        "a": {
            "return": "tuple[a, b]"
        },
        "thiiiiiiiiiiiiiiiiiis_iiiiiiiiiiiiiiiiiiiiiiiiiiiiiis_veeeeeeeeeeeeeeeeeeeeeeery_looooooong": {
            "return": "None"
        },
        "foo": {
            "return": "list[a, b]"
        }
    },
    "find_learning_rate.py_o1_mini_5b4e5b17.py": {
        "find_learning_rate_model": {
            "stopping_factor": "float"
        },
        "search_learning_rate": {
            "stopping_factor": "float"
        }
    },
    "scheduler_tests.py_o1_mini_704e35bc.py": {
        "test_scheduler_celery_no_timeout_utc": {
            "owners": "list[User]"
        },
        "test_scheduler_celery_no_timeout_ny": {
            "owners": "list[User]"
        },
        "test_execute_task": {
            "owners": "list[User]"
        },
        "test_execute_task_with_command_exception": {
            "owners": "list[User]"
        },
        "test_scheduler_celery_timeout_ny": {
            "owners": "list[User]"
        },
        "owners": {
            "return": "list[User]"
        },
        "test_scheduler_celery_timeout_utc": {
            "owners": "list[User]"
        },
        "test_scheduler_feature_flag_off": {
            "owners": "list[User]"
        }
    },
    "test_compression.py_o1_mini_8c14f213.py": {
        "buffer": {
            "request": "pytest.FixtureRequest"
        },
        "test_compression": {
            "request": "pytest.FixtureRequest"
        }
    },
    "sentiment_analysis_suite.py_o1_mini_ad14d086.py": {
        "__init__": {
            "positive": "Optional[int]",
            "negative": "Optional[int]"
        }
    },
    "topic.py_o1_mini_5018cdae.py": {
        "get_topic_resolution_and_bare_name": {
            "stored_name": "str"
        }
    },
    "color.py_o1_mini_41c9bd2a.py": {
        "__getitem__": {
            "return": "Union[float, Tuple[float, float, float, Optional[float]]]"
        },
        "as_hsl": {
            "return": "str"
        }
    },
    "test_mediation_fee.py_o1_mini_bcbdb4de.py": {
        "test_mfee4": {
            "return": "None"
        }
    },
    "tile.py_o1_mini_dd3f33a5.py": {
        "qcut": {
            "q": "Union[int, Sequence[float]]"
        },
        "_bins_to_cuts": {
            "labels": "Optional[Union[Sequence[Any], bool]]"
        },
        "cut": {
            "bins": "Union[int, Sequence[Any], IntervalIndex]"
        }
    },
    "openapi.py_o1_mini_03accd2a.py": {
        "get_field": {
            "parameter": "Dict[str, Any]"
        }
    }
}